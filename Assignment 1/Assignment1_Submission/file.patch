diff -ruN xv6-public/asm.h xv6-public-mynew/asm.h
--- xv6-public/asm.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/asm.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,18 +0,0 @@
-//
-// assembler macros to create x86 segments
-//
-
-#define SEG_NULLASM                                             \
-        .word 0, 0;                                             \
-        .byte 0, 0, 0, 0
-
-// The 0xC0 means the limit is in 4096-byte units
-// and (for executable segments) 32-bit mode.
-#define SEG_ASM(type,base,lim)                                  \
-        .word (((lim) >> 12) & 0xffff), ((base) & 0xffff);      \
-        .byte (((base) >> 16) & 0xff), (0x90 | (type)),         \
-                (0xC0 | (((lim) >> 28) & 0xf)), (((base) >> 24) & 0xff)
-
-#define STA_X     0x8       // Executable segment
-#define STA_W     0x2       // Writeable (non-executable segments)
-#define STA_R     0x2       // Readable (executable segments)
diff -ruN xv6-public/bio.c xv6-public-mynew/bio.c
--- xv6-public/bio.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/bio.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,144 +0,0 @@
-// Buffer cache.
-//
-// The buffer cache is a linked list of buf structures holding
-// cached copies of disk block contents.  Caching disk blocks
-// in memory reduces the number of disk reads and also provides
-// a synchronization point for disk blocks used by multiple processes.
-//
-// Interface:
-// * To get a buffer for a particular disk block, call bread.
-// * After changing buffer data, call bwrite to write it to disk.
-// * When done with the buffer, call brelse.
-// * Do not use the buffer after calling brelse.
-// * Only one process at a time can use a buffer,
-//     so do not keep them longer than necessary.
-//
-// The implementation uses two state flags internally:
-// * B_VALID: the buffer data has been read from the disk.
-// * B_DIRTY: the buffer data has been modified
-//     and needs to be written to disk.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "spinlock.h"
-#include "sleeplock.h"
-#include "fs.h"
-#include "buf.h"
-
-struct {
-  struct spinlock lock;
-  struct buf buf[NBUF];
-
-  // Linked list of all buffers, through prev/next.
-  // head.next is most recently used.
-  struct buf head;
-} bcache;
-
-void
-binit(void)
-{
-  struct buf *b;
-
-  initlock(&bcache.lock, "bcache");
-
-//PAGEBREAK!
-  // Create linked list of buffers
-  bcache.head.prev = &bcache.head;
-  bcache.head.next = &bcache.head;
-  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-    b->next = bcache.head.next;
-    b->prev = &bcache.head;
-    initsleeplock(&b->lock, "buffer");
-    bcache.head.next->prev = b;
-    bcache.head.next = b;
-  }
-}
-
-// Look through buffer cache for block on device dev.
-// If not found, allocate a buffer.
-// In either case, return locked buffer.
-static struct buf*
-bget(uint dev, uint blockno)
-{
-  struct buf *b;
-
-  acquire(&bcache.lock);
-
-  // Is the block already cached?
-  for(b = bcache.head.next; b != &bcache.head; b = b->next){
-    if(b->dev == dev && b->blockno == blockno){
-      b->refcnt++;
-      release(&bcache.lock);
-      acquiresleep(&b->lock);
-      return b;
-    }
-  }
-
-  // Not cached; recycle an unused buffer.
-  // Even if refcnt==0, B_DIRTY indicates a buffer is in use
-  // because log.c has modified it but not yet committed it.
-  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-    if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
-      b->dev = dev;
-      b->blockno = blockno;
-      b->flags = 0;
-      b->refcnt = 1;
-      release(&bcache.lock);
-      acquiresleep(&b->lock);
-      return b;
-    }
-  }
-  panic("bget: no buffers");
-}
-
-// Return a locked buf with the contents of the indicated block.
-struct buf*
-bread(uint dev, uint blockno)
-{
-  struct buf *b;
-
-  b = bget(dev, blockno);
-  if((b->flags & B_VALID) == 0) {
-    iderw(b);
-  }
-  return b;
-}
-
-// Write b's contents to disk.  Must be locked.
-void
-bwrite(struct buf *b)
-{
-  if(!holdingsleep(&b->lock))
-    panic("bwrite");
-  b->flags |= B_DIRTY;
-  iderw(b);
-}
-
-// Release a locked buffer.
-// Move to the head of the MRU list.
-void
-brelse(struct buf *b)
-{
-  if(!holdingsleep(&b->lock))
-    panic("brelse");
-
-  releasesleep(&b->lock);
-
-  acquire(&bcache.lock);
-  b->refcnt--;
-  if (b->refcnt == 0) {
-    // no one is waiting for it.
-    b->next->prev = b->prev;
-    b->prev->next = b->next;
-    b->next = bcache.head.next;
-    b->prev = &bcache.head;
-    bcache.head.next->prev = b;
-    bcache.head.next = b;
-  }
-  
-  release(&bcache.lock);
-}
-//PAGEBREAK!
-// Blank page.
-
diff -ruN xv6-public/bio.d xv6-public-mynew/bio.d
--- xv6-public/bio.d	2022-09-05 09:51:06.906999186 +0530
+++ xv6-public-mynew/bio.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-bio.o: bio.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
- sleeplock.h fs.h buf.h
Binary files xv6-public/bio.o and xv6-public-mynew/bio.o differ
diff -ruN xv6-public/bootasm.d xv6-public-mynew/bootasm.d
--- xv6-public/bootasm.d	2022-09-05 09:51:06.790999182 +0530
+++ xv6-public-mynew/bootasm.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-bootasm.o: bootasm.S asm.h memlayout.h mmu.h
Binary files xv6-public/bootasm.o and xv6-public-mynew/bootasm.o differ
diff -ruN xv6-public/bootasm.S xv6-public-mynew/bootasm.S
--- xv6-public/bootasm.S	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/bootasm.S	1970-01-01 05:30:00.000000000 +0530
@@ -1,88 +0,0 @@
-#include "asm.h"
-#include "memlayout.h"
-#include "mmu.h"
-
-# Start the first CPU: switch to 32-bit protected mode, jump into C.
-# The BIOS loads this code from the first sector of the hard disk into
-# memory at physical address 0x7c00 and starts executing in real mode
-# with %cs=0 %ip=7c00.
-
-.code16                       # Assemble for 16-bit mode
-.globl start
-start:
-  cli                         # BIOS enabled interrupts; disable
-
-  # Zero data segment registers DS, ES, and SS.
-  xorw    %ax,%ax             # Set %ax to zero
-  movw    %ax,%ds             # -> Data Segment
-  movw    %ax,%es             # -> Extra Segment
-  movw    %ax,%ss             # -> Stack Segment
-
-  # Physical address line A20 is tied to zero so that the first PCs 
-  # with 2 MB would run software that assumed 1 MB.  Undo that.
-seta20.1:
-  inb     $0x64,%al               # Wait for not busy
-  testb   $0x2,%al
-  jnz     seta20.1
-
-  movb    $0xd1,%al               # 0xd1 -> port 0x64
-  outb    %al,$0x64
-
-seta20.2:
-  inb     $0x64,%al               # Wait for not busy
-  testb   $0x2,%al
-  jnz     seta20.2
-
-  movb    $0xdf,%al               # 0xdf -> port 0x60
-  outb    %al,$0x60
-
-  # Switch from real to protected mode.  Use a bootstrap GDT that makes
-  # virtual addresses map directly to physical addresses so that the
-  # effective memory map doesn't change during the transition.
-  lgdt    gdtdesc
-  movl    %cr0, %eax
-  orl     $CR0_PE, %eax
-  movl    %eax, %cr0
-
-//PAGEBREAK!
-  # Complete the transition to 32-bit protected mode by using a long jmp
-  # to reload %cs and %eip.  The segment descriptors are set up with no
-  # translation, so that the mapping is still the identity mapping.
-  ljmp    $(SEG_KCODE<<3), $start32
-
-.code32  # Tell assembler to generate 32-bit code now.
-start32:
-  # Set up the protected-mode data segment registers
-  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
-  movw    %ax, %ds                # -> DS: Data Segment
-  movw    %ax, %es                # -> ES: Extra Segment
-  movw    %ax, %ss                # -> SS: Stack Segment
-  movw    $0, %ax                 # Zero segments not ready for use
-  movw    %ax, %fs                # -> FS
-  movw    %ax, %gs                # -> GS
-
-  # Set up the stack pointer and call into C.
-  movl    $start, %esp
-  call    bootmain
-
-  # If bootmain returns (it shouldn't), trigger a Bochs
-  # breakpoint if running under Bochs, then loop.
-  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
-  movw    %ax, %dx
-  outw    %ax, %dx
-  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
-  outw    %ax, %dx
-spin:
-  jmp     spin
-
-# Bootstrap GDT
-.p2align 2                                # force 4 byte alignment
-gdt:
-  SEG_NULLASM                             # null seg
-  SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)   # code seg
-  SEG_ASM(STA_W, 0x0, 0xffffffff)         # data seg
-
-gdtdesc:
-  .word   (gdtdesc - gdt - 1)             # sizeof(gdt) - 1
-  .long   gdt                             # address gdt
-
Binary files xv6-public/bootblock and xv6-public-mynew/bootblock differ
diff -ruN xv6-public/bootblock.asm xv6-public-mynew/bootblock.asm
--- xv6-public/bootblock.asm	2022-09-05 09:51:06.810999183 +0530
+++ xv6-public-mynew/bootblock.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,361 +0,0 @@
-
-bootblock.o:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00007c00 <start>:
-# with %cs=0 %ip=7c00.
-
-.code16                       # Assemble for 16-bit mode
-.globl start
-start:
-  cli                         # BIOS enabled interrupts; disable
-    7c00:	fa                   	cli    
-
-  # Zero data segment registers DS, ES, and SS.
-  xorw    %ax,%ax             # Set %ax to zero
-    7c01:	31 c0                	xor    %eax,%eax
-  movw    %ax,%ds             # -> Data Segment
-    7c03:	8e d8                	mov    %eax,%ds
-  movw    %ax,%es             # -> Extra Segment
-    7c05:	8e c0                	mov    %eax,%es
-  movw    %ax,%ss             # -> Stack Segment
-    7c07:	8e d0                	mov    %eax,%ss
-
-00007c09 <seta20.1>:
-
-  # Physical address line A20 is tied to zero so that the first PCs 
-  # with 2 MB would run software that assumed 1 MB.  Undo that.
-seta20.1:
-  inb     $0x64,%al               # Wait for not busy
-    7c09:	e4 64                	in     $0x64,%al
-  testb   $0x2,%al
-    7c0b:	a8 02                	test   $0x2,%al
-  jnz     seta20.1
-    7c0d:	75 fa                	jne    7c09 <seta20.1>
-
-  movb    $0xd1,%al               # 0xd1 -> port 0x64
-    7c0f:	b0 d1                	mov    $0xd1,%al
-  outb    %al,$0x64
-    7c11:	e6 64                	out    %al,$0x64
-
-00007c13 <seta20.2>:
-
-seta20.2:
-  inb     $0x64,%al               # Wait for not busy
-    7c13:	e4 64                	in     $0x64,%al
-  testb   $0x2,%al
-    7c15:	a8 02                	test   $0x2,%al
-  jnz     seta20.2
-    7c17:	75 fa                	jne    7c13 <seta20.2>
-
-  movb    $0xdf,%al               # 0xdf -> port 0x60
-    7c19:	b0 df                	mov    $0xdf,%al
-  outb    %al,$0x60
-    7c1b:	e6 60                	out    %al,$0x60
-
-  # Switch from real to protected mode.  Use a bootstrap GDT that makes
-  # virtual addresses map directly to physical addresses so that the
-  # effective memory map doesn't change during the transition.
-  lgdt    gdtdesc
-    7c1d:	0f 01 16             	lgdtl  (%esi)
-    7c20:	78 7c                	js     7c9e <readsect+0xe>
-  movl    %cr0, %eax
-    7c22:	0f 20 c0             	mov    %cr0,%eax
-  orl     $CR0_PE, %eax
-    7c25:	66 83 c8 01          	or     $0x1,%ax
-  movl    %eax, %cr0
-    7c29:	0f 22 c0             	mov    %eax,%cr0
-
-//PAGEBREAK!
-  # Complete the transition to 32-bit protected mode by using a long jmp
-  # to reload %cs and %eip.  The segment descriptors are set up with no
-  # translation, so that the mapping is still the identity mapping.
-  ljmp    $(SEG_KCODE<<3), $start32
-    7c2c:	ea                   	.byte 0xea
-    7c2d:	31 7c 08 00          	xor    %edi,0x0(%eax,%ecx,1)
-
-00007c31 <start32>:
-
-.code32  # Tell assembler to generate 32-bit code now.
-start32:
-  # Set up the protected-mode data segment registers
-  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
-    7c31:	66 b8 10 00          	mov    $0x10,%ax
-  movw    %ax, %ds                # -> DS: Data Segment
-    7c35:	8e d8                	mov    %eax,%ds
-  movw    %ax, %es                # -> ES: Extra Segment
-    7c37:	8e c0                	mov    %eax,%es
-  movw    %ax, %ss                # -> SS: Stack Segment
-    7c39:	8e d0                	mov    %eax,%ss
-  movw    $0, %ax                 # Zero segments not ready for use
-    7c3b:	66 b8 00 00          	mov    $0x0,%ax
-  movw    %ax, %fs                # -> FS
-    7c3f:	8e e0                	mov    %eax,%fs
-  movw    %ax, %gs                # -> GS
-    7c41:	8e e8                	mov    %eax,%gs
-
-  # Set up the stack pointer and call into C.
-  movl    $start, %esp
-    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
-  call    bootmain
-    7c48:	e8 fc 00 00 00       	call   7d49 <bootmain>
-
-  # If bootmain returns (it shouldn't), trigger a Bochs
-  # breakpoint if running under Bochs, then loop.
-  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
-    7c4d:	66 b8 00 8a          	mov    $0x8a00,%ax
-  movw    %ax, %dx
-    7c51:	66 89 c2             	mov    %ax,%dx
-  outw    %ax, %dx
-    7c54:	66 ef                	out    %ax,(%dx)
-  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
-    7c56:	66 b8 e0 8a          	mov    $0x8ae0,%ax
-  outw    %ax, %dx
-    7c5a:	66 ef                	out    %ax,(%dx)
-
-00007c5c <spin>:
-spin:
-  jmp     spin
-    7c5c:	eb fe                	jmp    7c5c <spin>
-    7c5e:	66 90                	xchg   %ax,%ax
-
-00007c60 <gdt>:
-	...
-    7c68:	ff                   	(bad)  
-    7c69:	ff 00                	incl   (%eax)
-    7c6b:	00 00                	add    %al,(%eax)
-    7c6d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
-    7c74:	00                   	.byte 0x0
-    7c75:	92                   	xchg   %eax,%edx
-    7c76:	cf                   	iret   
-	...
-
-00007c78 <gdtdesc>:
-    7c78:	17                   	pop    %ss
-    7c79:	00 60 7c             	add    %ah,0x7c(%eax)
-	...
-
-00007c7e <waitdisk>:
-  entry();
-}
-
-void
-waitdisk(void)
-{
-    7c7e:	f3 0f 1e fb          	endbr32 
-static inline uchar
-inb(ushort port)
-{
-  uchar data;
-
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-    7c82:	ba f7 01 00 00       	mov    $0x1f7,%edx
-    7c87:	ec                   	in     (%dx),%al
-  // Wait for disk ready.
-  while((inb(0x1F7) & 0xC0) != 0x40)
-    7c88:	83 e0 c0             	and    $0xffffffc0,%eax
-    7c8b:	3c 40                	cmp    $0x40,%al
-    7c8d:	75 f8                	jne    7c87 <waitdisk+0x9>
-    ;
-}
-    7c8f:	c3                   	ret    
-
-00007c90 <readsect>:
-
-// Read a single sector at offset into dst.
-void
-readsect(void *dst, uint offset)
-{
-    7c90:	f3 0f 1e fb          	endbr32 
-    7c94:	55                   	push   %ebp
-    7c95:	89 e5                	mov    %esp,%ebp
-    7c97:	57                   	push   %edi
-    7c98:	53                   	push   %ebx
-    7c99:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  // Issue command.
-  waitdisk();
-    7c9c:	e8 dd ff ff ff       	call   7c7e <waitdisk>
-}
-
-static inline void
-outb(ushort port, uchar data)
-{
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-    7ca1:	b8 01 00 00 00       	mov    $0x1,%eax
-    7ca6:	ba f2 01 00 00       	mov    $0x1f2,%edx
-    7cab:	ee                   	out    %al,(%dx)
-    7cac:	ba f3 01 00 00       	mov    $0x1f3,%edx
-    7cb1:	89 d8                	mov    %ebx,%eax
-    7cb3:	ee                   	out    %al,(%dx)
-  outb(0x1F2, 1);   // count = 1
-  outb(0x1F3, offset);
-  outb(0x1F4, offset >> 8);
-    7cb4:	89 d8                	mov    %ebx,%eax
-    7cb6:	c1 e8 08             	shr    $0x8,%eax
-    7cb9:	ba f4 01 00 00       	mov    $0x1f4,%edx
-    7cbe:	ee                   	out    %al,(%dx)
-  outb(0x1F5, offset >> 16);
-    7cbf:	89 d8                	mov    %ebx,%eax
-    7cc1:	c1 e8 10             	shr    $0x10,%eax
-    7cc4:	ba f5 01 00 00       	mov    $0x1f5,%edx
-    7cc9:	ee                   	out    %al,(%dx)
-  outb(0x1F6, (offset >> 24) | 0xE0);
-    7cca:	89 d8                	mov    %ebx,%eax
-    7ccc:	c1 e8 18             	shr    $0x18,%eax
-    7ccf:	83 c8 e0             	or     $0xffffffe0,%eax
-    7cd2:	ba f6 01 00 00       	mov    $0x1f6,%edx
-    7cd7:	ee                   	out    %al,(%dx)
-    7cd8:	b8 20 00 00 00       	mov    $0x20,%eax
-    7cdd:	ba f7 01 00 00       	mov    $0x1f7,%edx
-    7ce2:	ee                   	out    %al,(%dx)
-  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
-
-  // Read data.
-  waitdisk();
-    7ce3:	e8 96 ff ff ff       	call   7c7e <waitdisk>
-  asm volatile("cld; rep insl" :
-    7ce8:	8b 7d 08             	mov    0x8(%ebp),%edi
-    7ceb:	b9 80 00 00 00       	mov    $0x80,%ecx
-    7cf0:	ba f0 01 00 00       	mov    $0x1f0,%edx
-    7cf5:	fc                   	cld    
-    7cf6:	f3 6d                	rep insl (%dx),%es:(%edi)
-  insl(0x1F0, dst, SECTSIZE/4);
-}
-    7cf8:	5b                   	pop    %ebx
-    7cf9:	5f                   	pop    %edi
-    7cfa:	5d                   	pop    %ebp
-    7cfb:	c3                   	ret    
-
-00007cfc <readseg>:
-
-// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
-// Might copy more than asked.
-void
-readseg(uchar* pa, uint count, uint offset)
-{
-    7cfc:	f3 0f 1e fb          	endbr32 
-    7d00:	55                   	push   %ebp
-    7d01:	89 e5                	mov    %esp,%ebp
-    7d03:	57                   	push   %edi
-    7d04:	56                   	push   %esi
-    7d05:	53                   	push   %ebx
-    7d06:	83 ec 0c             	sub    $0xc,%esp
-    7d09:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    7d0c:	8b 75 10             	mov    0x10(%ebp),%esi
-  uchar* epa;
-
-  epa = pa + count;
-    7d0f:	89 df                	mov    %ebx,%edi
-    7d11:	03 7d 0c             	add    0xc(%ebp),%edi
-
-  // Round down to sector boundary.
-  pa -= offset % SECTSIZE;
-    7d14:	89 f0                	mov    %esi,%eax
-    7d16:	25 ff 01 00 00       	and    $0x1ff,%eax
-    7d1b:	29 c3                	sub    %eax,%ebx
-
-  // Translate from bytes to sectors; kernel starts at sector 1.
-  offset = (offset / SECTSIZE) + 1;
-    7d1d:	c1 ee 09             	shr    $0x9,%esi
-    7d20:	83 c6 01             	add    $0x1,%esi
-
-  // If this is too slow, we could read lots of sectors at a time.
-  // We'd write more to memory than asked, but it doesn't matter --
-  // we load in increasing order.
-  for(; pa < epa; pa += SECTSIZE, offset++)
-    7d23:	39 df                	cmp    %ebx,%edi
-    7d25:	76 1a                	jbe    7d41 <readseg+0x45>
-    readsect(pa, offset);
-    7d27:	83 ec 08             	sub    $0x8,%esp
-    7d2a:	56                   	push   %esi
-    7d2b:	53                   	push   %ebx
-    7d2c:	e8 5f ff ff ff       	call   7c90 <readsect>
-  for(; pa < epa; pa += SECTSIZE, offset++)
-    7d31:	81 c3 00 02 00 00    	add    $0x200,%ebx
-    7d37:	83 c6 01             	add    $0x1,%esi
-    7d3a:	83 c4 10             	add    $0x10,%esp
-    7d3d:	39 df                	cmp    %ebx,%edi
-    7d3f:	77 e6                	ja     7d27 <readseg+0x2b>
-}
-    7d41:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    7d44:	5b                   	pop    %ebx
-    7d45:	5e                   	pop    %esi
-    7d46:	5f                   	pop    %edi
-    7d47:	5d                   	pop    %ebp
-    7d48:	c3                   	ret    
-
-00007d49 <bootmain>:
-{
-    7d49:	f3 0f 1e fb          	endbr32 
-    7d4d:	55                   	push   %ebp
-    7d4e:	89 e5                	mov    %esp,%ebp
-    7d50:	57                   	push   %edi
-    7d51:	56                   	push   %esi
-    7d52:	53                   	push   %ebx
-    7d53:	83 ec 10             	sub    $0x10,%esp
-  readseg((uchar*)elf, 4096, 0);
-    7d56:	6a 00                	push   $0x0
-    7d58:	68 00 10 00 00       	push   $0x1000
-    7d5d:	68 00 00 01 00       	push   $0x10000
-    7d62:	e8 95 ff ff ff       	call   7cfc <readseg>
-  if(elf->magic != ELF_MAGIC)
-    7d67:	83 c4 10             	add    $0x10,%esp
-    7d6a:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
-    7d71:	45 4c 46 
-    7d74:	75 21                	jne    7d97 <bootmain+0x4e>
-  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
-    7d76:	a1 1c 00 01 00       	mov    0x1001c,%eax
-    7d7b:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
-  eph = ph + elf->phnum;
-    7d81:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
-    7d88:	c1 e6 05             	shl    $0x5,%esi
-    7d8b:	01 de                	add    %ebx,%esi
-  for(; ph < eph; ph++){
-    7d8d:	39 f3                	cmp    %esi,%ebx
-    7d8f:	72 15                	jb     7da6 <bootmain+0x5d>
-  entry();
-    7d91:	ff 15 18 00 01 00    	call   *0x10018
-}
-    7d97:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    7d9a:	5b                   	pop    %ebx
-    7d9b:	5e                   	pop    %esi
-    7d9c:	5f                   	pop    %edi
-    7d9d:	5d                   	pop    %ebp
-    7d9e:	c3                   	ret    
-  for(; ph < eph; ph++){
-    7d9f:	83 c3 20             	add    $0x20,%ebx
-    7da2:	39 de                	cmp    %ebx,%esi
-    7da4:	76 eb                	jbe    7d91 <bootmain+0x48>
-    pa = (uchar*)ph->paddr;
-    7da6:	8b 7b 0c             	mov    0xc(%ebx),%edi
-    readseg(pa, ph->filesz, ph->off);
-    7da9:	83 ec 04             	sub    $0x4,%esp
-    7dac:	ff 73 04             	pushl  0x4(%ebx)
-    7daf:	ff 73 10             	pushl  0x10(%ebx)
-    7db2:	57                   	push   %edi
-    7db3:	e8 44 ff ff ff       	call   7cfc <readseg>
-    if(ph->memsz > ph->filesz)
-    7db8:	8b 4b 14             	mov    0x14(%ebx),%ecx
-    7dbb:	8b 43 10             	mov    0x10(%ebx),%eax
-    7dbe:	83 c4 10             	add    $0x10,%esp
-    7dc1:	39 c1                	cmp    %eax,%ecx
-    7dc3:	76 da                	jbe    7d9f <bootmain+0x56>
-      stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
-    7dc5:	01 c7                	add    %eax,%edi
-    7dc7:	29 c1                	sub    %eax,%ecx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
-    7dc9:	b8 00 00 00 00       	mov    $0x0,%eax
-    7dce:	fc                   	cld    
-    7dcf:	f3 aa                	rep stos %al,%es:(%edi)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-    7dd1:	eb cc                	jmp    7d9f <bootmain+0x56>
Binary files xv6-public/bootblock.o and xv6-public-mynew/bootblock.o differ
Binary files xv6-public/bootblockother.o and xv6-public-mynew/bootblockother.o differ
diff -ruN xv6-public/bootmain.c xv6-public-mynew/bootmain.c
--- xv6-public/bootmain.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/bootmain.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,96 +0,0 @@
-// Boot loader.
-//
-// Part of the boot block, along with bootasm.S, which calls bootmain().
-// bootasm.S has put the processor into protected 32-bit mode.
-// bootmain() loads an ELF kernel image from the disk starting at
-// sector 1 and then jumps to the kernel entry routine.
-
-#include "types.h"
-#include "elf.h"
-#include "x86.h"
-#include "memlayout.h"
-
-#define SECTSIZE  512
-
-void readseg(uchar*, uint, uint);
-
-void
-bootmain(void)
-{
-  struct elfhdr *elf;
-  struct proghdr *ph, *eph;
-  void (*entry)(void);
-  uchar* pa;
-
-  elf = (struct elfhdr*)0x10000;  // scratch space
-
-  // Read 1st page off disk
-  readseg((uchar*)elf, 4096, 0);
-
-  // Is this an ELF executable?
-  if(elf->magic != ELF_MAGIC)
-    return;  // let bootasm.S handle error
-
-  // Load each program segment (ignores ph flags).
-  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
-  eph = ph + elf->phnum;
-  for(; ph < eph; ph++){
-    pa = (uchar*)ph->paddr;
-    readseg(pa, ph->filesz, ph->off);
-    if(ph->memsz > ph->filesz)
-      stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
-  }
-
-  // Call the entry point from the ELF header.
-  // Does not return!
-  entry = (void(*)(void))(elf->entry);
-  entry();
-}
-
-void
-waitdisk(void)
-{
-  // Wait for disk ready.
-  while((inb(0x1F7) & 0xC0) != 0x40)
-    ;
-}
-
-// Read a single sector at offset into dst.
-void
-readsect(void *dst, uint offset)
-{
-  // Issue command.
-  waitdisk();
-  outb(0x1F2, 1);   // count = 1
-  outb(0x1F3, offset);
-  outb(0x1F4, offset >> 8);
-  outb(0x1F5, offset >> 16);
-  outb(0x1F6, (offset >> 24) | 0xE0);
-  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
-
-  // Read data.
-  waitdisk();
-  insl(0x1F0, dst, SECTSIZE/4);
-}
-
-// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
-// Might copy more than asked.
-void
-readseg(uchar* pa, uint count, uint offset)
-{
-  uchar* epa;
-
-  epa = pa + count;
-
-  // Round down to sector boundary.
-  pa -= offset % SECTSIZE;
-
-  // Translate from bytes to sectors; kernel starts at sector 1.
-  offset = (offset / SECTSIZE) + 1;
-
-  // If this is too slow, we could read lots of sectors at a time.
-  // We'd write more to memory than asked, but it doesn't matter --
-  // we load in increasing order.
-  for(; pa < epa; pa += SECTSIZE, offset++)
-    readsect(pa, offset);
-}
diff -ruN xv6-public/bootmain.d xv6-public-mynew/bootmain.d
--- xv6-public/bootmain.d	2022-09-05 09:51:06.778999182 +0530
+++ xv6-public-mynew/bootmain.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-bootmain.o: bootmain.c types.h elf.h x86.h memlayout.h
Binary files xv6-public/bootmain.o and xv6-public-mynew/bootmain.o differ
diff -ruN xv6-public/buf.h xv6-public-mynew/buf.h
--- xv6-public/buf.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/buf.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,14 +0,0 @@
-struct buf {
-  int flags;
-  uint dev;
-  uint blockno;
-  struct sleeplock lock;
-  uint refcnt;
-  struct buf *prev; // LRU cache list
-  struct buf *next;
-  struct buf *qnext; // disk queue
-  uchar data[BSIZE];
-};
-#define B_VALID 0x2  // buffer has been read from disk
-#define B_DIRTY 0x4  // buffer needs to be written to disk
-
diff -ruN xv6-public/BUGS xv6-public-mynew/BUGS
--- xv6-public/BUGS	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/BUGS	1970-01-01 05:30:00.000000000 +0530
@@ -1,7 +0,0 @@
-formatting:
-	need to fix PAGEBREAK mechanism
-
-sh:
-	can't always runcmd in child -- breaks cd.
-	maybe should hard-code PATH=/ ?
-
Binary files xv6-public/_cat and xv6-public-mynew/_cat differ
diff -ruN xv6-public/cat.asm xv6-public-mynew/cat.asm
--- xv6-public/cat.asm	2022-09-05 09:51:04.938999129 +0530
+++ xv6-public-mynew/cat.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1304 +0,0 @@
-
-_cat:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  }
-}
-
-int
-main(int argc, char *argv[])
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	57                   	push   %edi
-  12:	56                   	push   %esi
-  13:	be 01 00 00 00       	mov    $0x1,%esi
-  18:	53                   	push   %ebx
-  19:	51                   	push   %ecx
-  1a:	83 ec 18             	sub    $0x18,%esp
-  1d:	8b 01                	mov    (%ecx),%eax
-  1f:	8b 59 04             	mov    0x4(%ecx),%ebx
-  22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  25:	83 c3 04             	add    $0x4,%ebx
-  int fd, i;
-
-  if(argc <= 1){
-  28:	83 f8 01             	cmp    $0x1,%eax
-  2b:	7e 50                	jle    7d <main+0x7d>
-  2d:	8d 76 00             	lea    0x0(%esi),%esi
-    cat(0);
-    exit();
-  }
-
-  for(i = 1; i < argc; i++){
-    if((fd = open(argv[i], 0)) < 0){
-  30:	83 ec 08             	sub    $0x8,%esp
-  33:	6a 00                	push   $0x0
-  35:	ff 33                	pushl  (%ebx)
-  37:	e8 77 03 00 00       	call   3b3 <open>
-  3c:	83 c4 10             	add    $0x10,%esp
-  3f:	89 c7                	mov    %eax,%edi
-  41:	85 c0                	test   %eax,%eax
-  43:	78 24                	js     69 <main+0x69>
-      printf(1, "cat: cannot open %s\n", argv[i]);
-      exit();
-    }
-    cat(fd);
-  45:	83 ec 0c             	sub    $0xc,%esp
-  for(i = 1; i < argc; i++){
-  48:	83 c6 01             	add    $0x1,%esi
-  4b:	83 c3 04             	add    $0x4,%ebx
-    cat(fd);
-  4e:	50                   	push   %eax
-  4f:	e8 3c 00 00 00       	call   90 <cat>
-    close(fd);
-  54:	89 3c 24             	mov    %edi,(%esp)
-  57:	e8 3f 03 00 00       	call   39b <close>
-  for(i = 1; i < argc; i++){
-  5c:	83 c4 10             	add    $0x10,%esp
-  5f:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
-  62:	75 cc                	jne    30 <main+0x30>
-  }
-  exit();
-  64:	e8 0a 03 00 00       	call   373 <exit>
-      printf(1, "cat: cannot open %s\n", argv[i]);
-  69:	50                   	push   %eax
-  6a:	ff 33                	pushl  (%ebx)
-  6c:	68 7b 08 00 00       	push   $0x87b
-  71:	6a 01                	push   $0x1
-  73:	e8 78 04 00 00       	call   4f0 <printf>
-      exit();
-  78:	e8 f6 02 00 00       	call   373 <exit>
-    cat(0);
-  7d:	83 ec 0c             	sub    $0xc,%esp
-  80:	6a 00                	push   $0x0
-  82:	e8 09 00 00 00       	call   90 <cat>
-    exit();
-  87:	e8 e7 02 00 00       	call   373 <exit>
-  8c:	66 90                	xchg   %ax,%ax
-  8e:	66 90                	xchg   %ax,%ax
-
-00000090 <cat>:
-{
-  90:	f3 0f 1e fb          	endbr32 
-  94:	55                   	push   %ebp
-  95:	89 e5                	mov    %esp,%ebp
-  97:	56                   	push   %esi
-  98:	8b 75 08             	mov    0x8(%ebp),%esi
-  9b:	53                   	push   %ebx
-  while((n = read(fd, buf, sizeof(buf))) > 0) {
-  9c:	eb 19                	jmp    b7 <cat+0x27>
-  9e:	66 90                	xchg   %ax,%ax
-    if (write(1, buf, n) != n) {
-  a0:	83 ec 04             	sub    $0x4,%esp
-  a3:	53                   	push   %ebx
-  a4:	68 a0 0b 00 00       	push   $0xba0
-  a9:	6a 01                	push   $0x1
-  ab:	e8 e3 02 00 00       	call   393 <write>
-  b0:	83 c4 10             	add    $0x10,%esp
-  b3:	39 d8                	cmp    %ebx,%eax
-  b5:	75 25                	jne    dc <cat+0x4c>
-  while((n = read(fd, buf, sizeof(buf))) > 0) {
-  b7:	83 ec 04             	sub    $0x4,%esp
-  ba:	68 00 02 00 00       	push   $0x200
-  bf:	68 a0 0b 00 00       	push   $0xba0
-  c4:	56                   	push   %esi
-  c5:	e8 c1 02 00 00       	call   38b <read>
-  ca:	83 c4 10             	add    $0x10,%esp
-  cd:	89 c3                	mov    %eax,%ebx
-  cf:	85 c0                	test   %eax,%eax
-  d1:	7f cd                	jg     a0 <cat+0x10>
-  if(n < 0){
-  d3:	75 1b                	jne    f0 <cat+0x60>
-}
-  d5:	8d 65 f8             	lea    -0x8(%ebp),%esp
-  d8:	5b                   	pop    %ebx
-  d9:	5e                   	pop    %esi
-  da:	5d                   	pop    %ebp
-  db:	c3                   	ret    
-      printf(1, "cat: write error\n");
-  dc:	83 ec 08             	sub    $0x8,%esp
-  df:	68 58 08 00 00       	push   $0x858
-  e4:	6a 01                	push   $0x1
-  e6:	e8 05 04 00 00       	call   4f0 <printf>
-      exit();
-  eb:	e8 83 02 00 00       	call   373 <exit>
-    printf(1, "cat: read error\n");
-  f0:	50                   	push   %eax
-  f1:	50                   	push   %eax
-  f2:	68 6a 08 00 00       	push   $0x86a
-  f7:	6a 01                	push   $0x1
-  f9:	e8 f2 03 00 00       	call   4f0 <printf>
-    exit();
-  fe:	e8 70 02 00 00       	call   373 <exit>
- 103:	66 90                	xchg   %ax,%ax
- 105:	66 90                	xchg   %ax,%ax
- 107:	66 90                	xchg   %ax,%ax
- 109:	66 90                	xchg   %ax,%ax
- 10b:	66 90                	xchg   %ax,%ax
- 10d:	66 90                	xchg   %ax,%ax
- 10f:	90                   	nop
-
-00000110 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 110:	f3 0f 1e fb          	endbr32 
- 114:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 115:	31 c0                	xor    %eax,%eax
-{
- 117:	89 e5                	mov    %esp,%ebp
- 119:	53                   	push   %ebx
- 11a:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 11d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
- 120:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 124:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 127:	83 c0 01             	add    $0x1,%eax
- 12a:	84 d2                	test   %dl,%dl
- 12c:	75 f2                	jne    120 <strcpy+0x10>
-    ;
-  return os;
-}
- 12e:	89 c8                	mov    %ecx,%eax
- 130:	5b                   	pop    %ebx
- 131:	5d                   	pop    %ebp
- 132:	c3                   	ret    
- 133:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 13a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000140 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 140:	f3 0f 1e fb          	endbr32 
- 144:	55                   	push   %ebp
- 145:	89 e5                	mov    %esp,%ebp
- 147:	53                   	push   %ebx
- 148:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 14b:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
- 14e:	0f b6 01             	movzbl (%ecx),%eax
- 151:	0f b6 1a             	movzbl (%edx),%ebx
- 154:	84 c0                	test   %al,%al
- 156:	75 19                	jne    171 <strcmp+0x31>
- 158:	eb 26                	jmp    180 <strcmp+0x40>
- 15a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 160:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
- 164:	83 c1 01             	add    $0x1,%ecx
- 167:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
- 16a:	0f b6 1a             	movzbl (%edx),%ebx
- 16d:	84 c0                	test   %al,%al
- 16f:	74 0f                	je     180 <strcmp+0x40>
- 171:	38 d8                	cmp    %bl,%al
- 173:	74 eb                	je     160 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
- 175:	29 d8                	sub    %ebx,%eax
-}
- 177:	5b                   	pop    %ebx
- 178:	5d                   	pop    %ebp
- 179:	c3                   	ret    
- 17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 180:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
- 182:	29 d8                	sub    %ebx,%eax
-}
- 184:	5b                   	pop    %ebx
- 185:	5d                   	pop    %ebp
- 186:	c3                   	ret    
- 187:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 18e:	66 90                	xchg   %ax,%ax
-
-00000190 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 190:	f3 0f 1e fb          	endbr32 
- 194:	55                   	push   %ebp
- 195:	89 e5                	mov    %esp,%ebp
- 197:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 19a:	80 3a 00             	cmpb   $0x0,(%edx)
- 19d:	74 21                	je     1c0 <strlen+0x30>
- 19f:	31 c0                	xor    %eax,%eax
- 1a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1a8:	83 c0 01             	add    $0x1,%eax
- 1ab:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 1af:	89 c1                	mov    %eax,%ecx
- 1b1:	75 f5                	jne    1a8 <strlen+0x18>
-    ;
-  return n;
-}
- 1b3:	89 c8                	mov    %ecx,%eax
- 1b5:	5d                   	pop    %ebp
- 1b6:	c3                   	ret    
- 1b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1be:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 1c0:	31 c9                	xor    %ecx,%ecx
-}
- 1c2:	5d                   	pop    %ebp
- 1c3:	89 c8                	mov    %ecx,%eax
- 1c5:	c3                   	ret    
- 1c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1cd:	8d 76 00             	lea    0x0(%esi),%esi
-
-000001d0 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 1d0:	f3 0f 1e fb          	endbr32 
- 1d4:	55                   	push   %ebp
- 1d5:	89 e5                	mov    %esp,%ebp
- 1d7:	57                   	push   %edi
- 1d8:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 1db:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 1de:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1e1:	89 d7                	mov    %edx,%edi
- 1e3:	fc                   	cld    
- 1e4:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 1e6:	89 d0                	mov    %edx,%eax
- 1e8:	5f                   	pop    %edi
- 1e9:	5d                   	pop    %ebp
- 1ea:	c3                   	ret    
- 1eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 1ef:	90                   	nop
-
-000001f0 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 1f0:	f3 0f 1e fb          	endbr32 
- 1f4:	55                   	push   %ebp
- 1f5:	89 e5                	mov    %esp,%ebp
- 1f7:	8b 45 08             	mov    0x8(%ebp),%eax
- 1fa:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 1fe:	0f b6 10             	movzbl (%eax),%edx
- 201:	84 d2                	test   %dl,%dl
- 203:	75 16                	jne    21b <strchr+0x2b>
- 205:	eb 21                	jmp    228 <strchr+0x38>
- 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 20e:	66 90                	xchg   %ax,%ax
- 210:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 214:	83 c0 01             	add    $0x1,%eax
- 217:	84 d2                	test   %dl,%dl
- 219:	74 0d                	je     228 <strchr+0x38>
-    if(*s == c)
- 21b:	38 d1                	cmp    %dl,%cl
- 21d:	75 f1                	jne    210 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 21f:	5d                   	pop    %ebp
- 220:	c3                   	ret    
- 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 228:	31 c0                	xor    %eax,%eax
-}
- 22a:	5d                   	pop    %ebp
- 22b:	c3                   	ret    
- 22c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000230 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 230:	f3 0f 1e fb          	endbr32 
- 234:	55                   	push   %ebp
- 235:	89 e5                	mov    %esp,%ebp
- 237:	57                   	push   %edi
- 238:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 239:	31 f6                	xor    %esi,%esi
-{
- 23b:	53                   	push   %ebx
- 23c:	89 f3                	mov    %esi,%ebx
- 23e:	83 ec 1c             	sub    $0x1c,%esp
- 241:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 244:	eb 33                	jmp    279 <gets+0x49>
- 246:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 24d:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 250:	83 ec 04             	sub    $0x4,%esp
- 253:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 256:	6a 01                	push   $0x1
- 258:	50                   	push   %eax
- 259:	6a 00                	push   $0x0
- 25b:	e8 2b 01 00 00       	call   38b <read>
-    if(cc < 1)
- 260:	83 c4 10             	add    $0x10,%esp
- 263:	85 c0                	test   %eax,%eax
- 265:	7e 1c                	jle    283 <gets+0x53>
-      break;
-    buf[i++] = c;
- 267:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 26b:	83 c7 01             	add    $0x1,%edi
- 26e:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 271:	3c 0a                	cmp    $0xa,%al
- 273:	74 23                	je     298 <gets+0x68>
- 275:	3c 0d                	cmp    $0xd,%al
- 277:	74 1f                	je     298 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 279:	83 c3 01             	add    $0x1,%ebx
- 27c:	89 fe                	mov    %edi,%esi
- 27e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 281:	7c cd                	jl     250 <gets+0x20>
- 283:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 285:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 288:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 28b:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 28e:	5b                   	pop    %ebx
- 28f:	5e                   	pop    %esi
- 290:	5f                   	pop    %edi
- 291:	5d                   	pop    %ebp
- 292:	c3                   	ret    
- 293:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 297:	90                   	nop
- 298:	8b 75 08             	mov    0x8(%ebp),%esi
- 29b:	8b 45 08             	mov    0x8(%ebp),%eax
- 29e:	01 de                	add    %ebx,%esi
- 2a0:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 2a2:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 2a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 2a8:	5b                   	pop    %ebx
- 2a9:	5e                   	pop    %esi
- 2aa:	5f                   	pop    %edi
- 2ab:	5d                   	pop    %ebp
- 2ac:	c3                   	ret    
- 2ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-000002b0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 2b0:	f3 0f 1e fb          	endbr32 
- 2b4:	55                   	push   %ebp
- 2b5:	89 e5                	mov    %esp,%ebp
- 2b7:	56                   	push   %esi
- 2b8:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 2b9:	83 ec 08             	sub    $0x8,%esp
- 2bc:	6a 00                	push   $0x0
- 2be:	ff 75 08             	pushl  0x8(%ebp)
- 2c1:	e8 ed 00 00 00       	call   3b3 <open>
-  if(fd < 0)
- 2c6:	83 c4 10             	add    $0x10,%esp
- 2c9:	85 c0                	test   %eax,%eax
- 2cb:	78 2b                	js     2f8 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 2cd:	83 ec 08             	sub    $0x8,%esp
- 2d0:	ff 75 0c             	pushl  0xc(%ebp)
- 2d3:	89 c3                	mov    %eax,%ebx
- 2d5:	50                   	push   %eax
- 2d6:	e8 f0 00 00 00       	call   3cb <fstat>
-  close(fd);
- 2db:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 2de:	89 c6                	mov    %eax,%esi
-  close(fd);
- 2e0:	e8 b6 00 00 00       	call   39b <close>
-  return r;
- 2e5:	83 c4 10             	add    $0x10,%esp
-}
- 2e8:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 2eb:	89 f0                	mov    %esi,%eax
- 2ed:	5b                   	pop    %ebx
- 2ee:	5e                   	pop    %esi
- 2ef:	5d                   	pop    %ebp
- 2f0:	c3                   	ret    
- 2f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 2f8:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 2fd:	eb e9                	jmp    2e8 <stat+0x38>
- 2ff:	90                   	nop
-
-00000300 <atoi>:
-
-int
-atoi(const char *s)
-{
- 300:	f3 0f 1e fb          	endbr32 
- 304:	55                   	push   %ebp
- 305:	89 e5                	mov    %esp,%ebp
- 307:	53                   	push   %ebx
- 308:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 30b:	0f be 02             	movsbl (%edx),%eax
- 30e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 311:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 314:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 319:	77 1a                	ja     335 <atoi+0x35>
- 31b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 31f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 320:	83 c2 01             	add    $0x1,%edx
- 323:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 326:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 32a:	0f be 02             	movsbl (%edx),%eax
- 32d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 330:	80 fb 09             	cmp    $0x9,%bl
- 333:	76 eb                	jbe    320 <atoi+0x20>
-  return n;
-}
- 335:	89 c8                	mov    %ecx,%eax
- 337:	5b                   	pop    %ebx
- 338:	5d                   	pop    %ebp
- 339:	c3                   	ret    
- 33a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000340 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 340:	f3 0f 1e fb          	endbr32 
- 344:	55                   	push   %ebp
- 345:	89 e5                	mov    %esp,%ebp
- 347:	57                   	push   %edi
- 348:	8b 45 10             	mov    0x10(%ebp),%eax
- 34b:	8b 55 08             	mov    0x8(%ebp),%edx
- 34e:	56                   	push   %esi
- 34f:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 352:	85 c0                	test   %eax,%eax
- 354:	7e 0f                	jle    365 <memmove+0x25>
- 356:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 358:	89 d7                	mov    %edx,%edi
- 35a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 360:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 361:	39 f8                	cmp    %edi,%eax
- 363:	75 fb                	jne    360 <memmove+0x20>
-  return vdst;
-}
- 365:	5e                   	pop    %esi
- 366:	89 d0                	mov    %edx,%eax
- 368:	5f                   	pop    %edi
- 369:	5d                   	pop    %ebp
- 36a:	c3                   	ret    
-
-0000036b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 36b:	b8 01 00 00 00       	mov    $0x1,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret    
-
-00000373 <exit>:
-SYSCALL(exit)
- 373:	b8 02 00 00 00       	mov    $0x2,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret    
-
-0000037b <wait>:
-SYSCALL(wait)
- 37b:	b8 03 00 00 00       	mov    $0x3,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret    
-
-00000383 <pipe>:
-SYSCALL(pipe)
- 383:	b8 04 00 00 00       	mov    $0x4,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret    
-
-0000038b <read>:
-SYSCALL(read)
- 38b:	b8 05 00 00 00       	mov    $0x5,%eax
- 390:	cd 40                	int    $0x40
- 392:	c3                   	ret    
-
-00000393 <write>:
-SYSCALL(write)
- 393:	b8 10 00 00 00       	mov    $0x10,%eax
- 398:	cd 40                	int    $0x40
- 39a:	c3                   	ret    
-
-0000039b <close>:
-SYSCALL(close)
- 39b:	b8 15 00 00 00       	mov    $0x15,%eax
- 3a0:	cd 40                	int    $0x40
- 3a2:	c3                   	ret    
-
-000003a3 <kill>:
-SYSCALL(kill)
- 3a3:	b8 06 00 00 00       	mov    $0x6,%eax
- 3a8:	cd 40                	int    $0x40
- 3aa:	c3                   	ret    
-
-000003ab <exec>:
-SYSCALL(exec)
- 3ab:	b8 07 00 00 00       	mov    $0x7,%eax
- 3b0:	cd 40                	int    $0x40
- 3b2:	c3                   	ret    
-
-000003b3 <open>:
-SYSCALL(open)
- 3b3:	b8 0f 00 00 00       	mov    $0xf,%eax
- 3b8:	cd 40                	int    $0x40
- 3ba:	c3                   	ret    
-
-000003bb <mknod>:
-SYSCALL(mknod)
- 3bb:	b8 11 00 00 00       	mov    $0x11,%eax
- 3c0:	cd 40                	int    $0x40
- 3c2:	c3                   	ret    
-
-000003c3 <unlink>:
-SYSCALL(unlink)
- 3c3:	b8 12 00 00 00       	mov    $0x12,%eax
- 3c8:	cd 40                	int    $0x40
- 3ca:	c3                   	ret    
-
-000003cb <fstat>:
-SYSCALL(fstat)
- 3cb:	b8 08 00 00 00       	mov    $0x8,%eax
- 3d0:	cd 40                	int    $0x40
- 3d2:	c3                   	ret    
-
-000003d3 <link>:
-SYSCALL(link)
- 3d3:	b8 13 00 00 00       	mov    $0x13,%eax
- 3d8:	cd 40                	int    $0x40
- 3da:	c3                   	ret    
-
-000003db <mkdir>:
-SYSCALL(mkdir)
- 3db:	b8 14 00 00 00       	mov    $0x14,%eax
- 3e0:	cd 40                	int    $0x40
- 3e2:	c3                   	ret    
-
-000003e3 <chdir>:
-SYSCALL(chdir)
- 3e3:	b8 09 00 00 00       	mov    $0x9,%eax
- 3e8:	cd 40                	int    $0x40
- 3ea:	c3                   	ret    
-
-000003eb <dup>:
-SYSCALL(dup)
- 3eb:	b8 0a 00 00 00       	mov    $0xa,%eax
- 3f0:	cd 40                	int    $0x40
- 3f2:	c3                   	ret    
-
-000003f3 <getpid>:
-SYSCALL(getpid)
- 3f3:	b8 0b 00 00 00       	mov    $0xb,%eax
- 3f8:	cd 40                	int    $0x40
- 3fa:	c3                   	ret    
-
-000003fb <sbrk>:
-SYSCALL(sbrk)
- 3fb:	b8 0c 00 00 00       	mov    $0xc,%eax
- 400:	cd 40                	int    $0x40
- 402:	c3                   	ret    
-
-00000403 <sleep>:
-SYSCALL(sleep)
- 403:	b8 0d 00 00 00       	mov    $0xd,%eax
- 408:	cd 40                	int    $0x40
- 40a:	c3                   	ret    
-
-0000040b <uptime>:
-SYSCALL(uptime)
- 40b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 410:	cd 40                	int    $0x40
- 412:	c3                   	ret    
-
-00000413 <draw>:
-SYSCALL(draw)
- 413:	b8 16 00 00 00       	mov    $0x16,%eax
- 418:	cd 40                	int    $0x40
- 41a:	c3                   	ret    
-
-0000041b <thread_create>:
-SYSCALL(thread_create)
- 41b:	b8 18 00 00 00       	mov    $0x18,%eax
- 420:	cd 40                	int    $0x40
- 422:	c3                   	ret    
-
-00000423 <thread_join>:
-SYSCALL(thread_join)
- 423:	b8 19 00 00 00       	mov    $0x19,%eax
- 428:	cd 40                	int    $0x40
- 42a:	c3                   	ret    
-
-0000042b <thread_exit>:
-SYSCALL(thread_exit)
- 42b:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 430:	cd 40                	int    $0x40
- 432:	c3                   	ret    
- 433:	66 90                	xchg   %ax,%ax
- 435:	66 90                	xchg   %ax,%ax
- 437:	66 90                	xchg   %ax,%ax
- 439:	66 90                	xchg   %ax,%ax
- 43b:	66 90                	xchg   %ax,%ax
- 43d:	66 90                	xchg   %ax,%ax
- 43f:	90                   	nop
-
-00000440 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 440:	55                   	push   %ebp
- 441:	89 e5                	mov    %esp,%ebp
- 443:	57                   	push   %edi
- 444:	56                   	push   %esi
- 445:	53                   	push   %ebx
- 446:	83 ec 3c             	sub    $0x3c,%esp
- 449:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 44c:	89 d1                	mov    %edx,%ecx
-{
- 44e:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 451:	85 d2                	test   %edx,%edx
- 453:	0f 89 7f 00 00 00    	jns    4d8 <printint+0x98>
- 459:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 45d:	74 79                	je     4d8 <printint+0x98>
-    neg = 1;
- 45f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 466:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 468:	31 db                	xor    %ebx,%ebx
- 46a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 46d:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 470:	89 c8                	mov    %ecx,%eax
- 472:	31 d2                	xor    %edx,%edx
- 474:	89 cf                	mov    %ecx,%edi
- 476:	f7 75 c4             	divl   -0x3c(%ebp)
- 479:	0f b6 92 98 08 00 00 	movzbl 0x898(%edx),%edx
- 480:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 483:	89 d8                	mov    %ebx,%eax
- 485:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 488:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 48b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 48e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 491:	76 dd                	jbe    470 <printint+0x30>
-  if(neg)
- 493:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 496:	85 c9                	test   %ecx,%ecx
- 498:	74 0c                	je     4a6 <printint+0x66>
-    buf[i++] = '-';
- 49a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 49f:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 4a1:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 4a6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 4a9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 4ad:	eb 07                	jmp    4b6 <printint+0x76>
- 4af:	90                   	nop
- 4b0:	0f b6 13             	movzbl (%ebx),%edx
- 4b3:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 4b6:	83 ec 04             	sub    $0x4,%esp
- 4b9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 4bc:	6a 01                	push   $0x1
- 4be:	56                   	push   %esi
- 4bf:	57                   	push   %edi
- 4c0:	e8 ce fe ff ff       	call   393 <write>
-  while(--i >= 0)
- 4c5:	83 c4 10             	add    $0x10,%esp
- 4c8:	39 de                	cmp    %ebx,%esi
- 4ca:	75 e4                	jne    4b0 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 4cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4cf:	5b                   	pop    %ebx
- 4d0:	5e                   	pop    %esi
- 4d1:	5f                   	pop    %edi
- 4d2:	5d                   	pop    %ebp
- 4d3:	c3                   	ret    
- 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 4d8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 4df:	eb 87                	jmp    468 <printint+0x28>
- 4e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4ef:	90                   	nop
-
-000004f0 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 4f0:	f3 0f 1e fb          	endbr32 
- 4f4:	55                   	push   %ebp
- 4f5:	89 e5                	mov    %esp,%ebp
- 4f7:	57                   	push   %edi
- 4f8:	56                   	push   %esi
- 4f9:	53                   	push   %ebx
- 4fa:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 4fd:	8b 75 0c             	mov    0xc(%ebp),%esi
- 500:	0f b6 1e             	movzbl (%esi),%ebx
- 503:	84 db                	test   %bl,%bl
- 505:	0f 84 b4 00 00 00    	je     5bf <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 50b:	8d 45 10             	lea    0x10(%ebp),%eax
- 50e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 511:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 514:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 516:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 519:	eb 33                	jmp    54e <printf+0x5e>
- 51b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 51f:	90                   	nop
- 520:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 523:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 528:	83 f8 25             	cmp    $0x25,%eax
- 52b:	74 17                	je     544 <printf+0x54>
-  write(fd, &c, 1);
- 52d:	83 ec 04             	sub    $0x4,%esp
- 530:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 533:	6a 01                	push   $0x1
- 535:	57                   	push   %edi
- 536:	ff 75 08             	pushl  0x8(%ebp)
- 539:	e8 55 fe ff ff       	call   393 <write>
- 53e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 541:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 544:	0f b6 1e             	movzbl (%esi),%ebx
- 547:	83 c6 01             	add    $0x1,%esi
- 54a:	84 db                	test   %bl,%bl
- 54c:	74 71                	je     5bf <printf+0xcf>
-    c = fmt[i] & 0xff;
- 54e:	0f be cb             	movsbl %bl,%ecx
- 551:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 554:	85 d2                	test   %edx,%edx
- 556:	74 c8                	je     520 <printf+0x30>
-      }
-    } else if(state == '%'){
- 558:	83 fa 25             	cmp    $0x25,%edx
- 55b:	75 e7                	jne    544 <printf+0x54>
-      if(c == 'd'){
- 55d:	83 f8 64             	cmp    $0x64,%eax
- 560:	0f 84 9a 00 00 00    	je     600 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 566:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 56c:	83 f9 70             	cmp    $0x70,%ecx
- 56f:	74 5f                	je     5d0 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 571:	83 f8 73             	cmp    $0x73,%eax
- 574:	0f 84 d6 00 00 00    	je     650 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 57a:	83 f8 63             	cmp    $0x63,%eax
- 57d:	0f 84 8d 00 00 00    	je     610 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 583:	83 f8 25             	cmp    $0x25,%eax
- 586:	0f 84 b4 00 00 00    	je     640 <printf+0x150>
-  write(fd, &c, 1);
- 58c:	83 ec 04             	sub    $0x4,%esp
- 58f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 593:	6a 01                	push   $0x1
- 595:	57                   	push   %edi
- 596:	ff 75 08             	pushl  0x8(%ebp)
- 599:	e8 f5 fd ff ff       	call   393 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 59e:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 5a1:	83 c4 0c             	add    $0xc,%esp
- 5a4:	6a 01                	push   $0x1
- 5a6:	83 c6 01             	add    $0x1,%esi
- 5a9:	57                   	push   %edi
- 5aa:	ff 75 08             	pushl  0x8(%ebp)
- 5ad:	e8 e1 fd ff ff       	call   393 <write>
-  for(i = 0; fmt[i]; i++){
- 5b2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 5b6:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 5b9:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 5bb:	84 db                	test   %bl,%bl
- 5bd:	75 8f                	jne    54e <printf+0x5e>
-    }
-  }
-}
- 5bf:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 5c2:	5b                   	pop    %ebx
- 5c3:	5e                   	pop    %esi
- 5c4:	5f                   	pop    %edi
- 5c5:	5d                   	pop    %ebp
- 5c6:	c3                   	ret    
- 5c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5ce:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 5d0:	83 ec 0c             	sub    $0xc,%esp
- 5d3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5d8:	6a 00                	push   $0x0
- 5da:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 5dd:	8b 45 08             	mov    0x8(%ebp),%eax
- 5e0:	8b 13                	mov    (%ebx),%edx
- 5e2:	e8 59 fe ff ff       	call   440 <printint>
-        ap++;
- 5e7:	89 d8                	mov    %ebx,%eax
- 5e9:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 5ec:	31 d2                	xor    %edx,%edx
-        ap++;
- 5ee:	83 c0 04             	add    $0x4,%eax
- 5f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 5f4:	e9 4b ff ff ff       	jmp    544 <printf+0x54>
- 5f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 600:	83 ec 0c             	sub    $0xc,%esp
- 603:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 608:	6a 01                	push   $0x1
- 60a:	eb ce                	jmp    5da <printf+0xea>
- 60c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 610:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 613:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 616:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 618:	6a 01                	push   $0x1
-        ap++;
- 61a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 61d:	57                   	push   %edi
- 61e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 621:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 624:	e8 6a fd ff ff       	call   393 <write>
-        ap++;
- 629:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 62c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 62f:	31 d2                	xor    %edx,%edx
- 631:	e9 0e ff ff ff       	jmp    544 <printf+0x54>
- 636:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 63d:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 640:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 643:	83 ec 04             	sub    $0x4,%esp
- 646:	e9 59 ff ff ff       	jmp    5a4 <printf+0xb4>
- 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 64f:	90                   	nop
-        s = (char*)*ap;
- 650:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 653:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 655:	83 c0 04             	add    $0x4,%eax
- 658:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 65b:	85 db                	test   %ebx,%ebx
- 65d:	74 17                	je     676 <printf+0x186>
-        while(*s != 0){
- 65f:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 662:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 664:	84 c0                	test   %al,%al
- 666:	0f 84 d8 fe ff ff    	je     544 <printf+0x54>
- 66c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 66f:	89 de                	mov    %ebx,%esi
- 671:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 674:	eb 1a                	jmp    690 <printf+0x1a0>
-          s = "(null)";
- 676:	bb 90 08 00 00       	mov    $0x890,%ebx
-        while(*s != 0){
- 67b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 67e:	b8 28 00 00 00       	mov    $0x28,%eax
- 683:	89 de                	mov    %ebx,%esi
- 685:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 688:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 68f:	90                   	nop
-  write(fd, &c, 1);
- 690:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 693:	83 c6 01             	add    $0x1,%esi
- 696:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 699:	6a 01                	push   $0x1
- 69b:	57                   	push   %edi
- 69c:	53                   	push   %ebx
- 69d:	e8 f1 fc ff ff       	call   393 <write>
-        while(*s != 0){
- 6a2:	0f b6 06             	movzbl (%esi),%eax
- 6a5:	83 c4 10             	add    $0x10,%esp
- 6a8:	84 c0                	test   %al,%al
- 6aa:	75 e4                	jne    690 <printf+0x1a0>
- 6ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 6af:	31 d2                	xor    %edx,%edx
- 6b1:	e9 8e fe ff ff       	jmp    544 <printf+0x54>
- 6b6:	66 90                	xchg   %ax,%ax
- 6b8:	66 90                	xchg   %ax,%ax
- 6ba:	66 90                	xchg   %ax,%ax
- 6bc:	66 90                	xchg   %ax,%ax
- 6be:	66 90                	xchg   %ax,%ax
-
-000006c0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 6c0:	f3 0f 1e fb          	endbr32 
- 6c4:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6c5:	a1 80 0b 00 00       	mov    0xb80,%eax
-{
- 6ca:	89 e5                	mov    %esp,%ebp
- 6cc:	57                   	push   %edi
- 6cd:	56                   	push   %esi
- 6ce:	53                   	push   %ebx
- 6cf:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6d2:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 6d4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6d7:	39 c8                	cmp    %ecx,%eax
- 6d9:	73 15                	jae    6f0 <free+0x30>
- 6db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6df:	90                   	nop
- 6e0:	39 d1                	cmp    %edx,%ecx
- 6e2:	72 14                	jb     6f8 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6e4:	39 d0                	cmp    %edx,%eax
- 6e6:	73 10                	jae    6f8 <free+0x38>
-{
- 6e8:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6ea:	8b 10                	mov    (%eax),%edx
- 6ec:	39 c8                	cmp    %ecx,%eax
- 6ee:	72 f0                	jb     6e0 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6f0:	39 d0                	cmp    %edx,%eax
- 6f2:	72 f4                	jb     6e8 <free+0x28>
- 6f4:	39 d1                	cmp    %edx,%ecx
- 6f6:	73 f0                	jae    6e8 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 6f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6fe:	39 fa                	cmp    %edi,%edx
- 700:	74 1e                	je     720 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 702:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 705:	8b 50 04             	mov    0x4(%eax),%edx
- 708:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 70b:	39 f1                	cmp    %esi,%ecx
- 70d:	74 28                	je     737 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 70f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 711:	5b                   	pop    %ebx
-  freep = p;
- 712:	a3 80 0b 00 00       	mov    %eax,0xb80
-}
- 717:	5e                   	pop    %esi
- 718:	5f                   	pop    %edi
- 719:	5d                   	pop    %ebp
- 71a:	c3                   	ret    
- 71b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 71f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 720:	03 72 04             	add    0x4(%edx),%esi
- 723:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 726:	8b 10                	mov    (%eax),%edx
- 728:	8b 12                	mov    (%edx),%edx
- 72a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 72d:	8b 50 04             	mov    0x4(%eax),%edx
- 730:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 733:	39 f1                	cmp    %esi,%ecx
- 735:	75 d8                	jne    70f <free+0x4f>
-    p->s.size += bp->s.size;
- 737:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 73a:	a3 80 0b 00 00       	mov    %eax,0xb80
-    p->s.size += bp->s.size;
- 73f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 742:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 745:	89 10                	mov    %edx,(%eax)
-}
- 747:	5b                   	pop    %ebx
- 748:	5e                   	pop    %esi
- 749:	5f                   	pop    %edi
- 74a:	5d                   	pop    %ebp
- 74b:	c3                   	ret    
- 74c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000750 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 750:	f3 0f 1e fb          	endbr32 
- 754:	55                   	push   %ebp
- 755:	89 e5                	mov    %esp,%ebp
- 757:	57                   	push   %edi
- 758:	56                   	push   %esi
- 759:	53                   	push   %ebx
- 75a:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 75d:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 760:	8b 3d 80 0b 00 00    	mov    0xb80,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 766:	8d 70 07             	lea    0x7(%eax),%esi
- 769:	c1 ee 03             	shr    $0x3,%esi
- 76c:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 76f:	85 ff                	test   %edi,%edi
- 771:	0f 84 a9 00 00 00    	je     820 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 777:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 779:	8b 48 04             	mov    0x4(%eax),%ecx
- 77c:	39 f1                	cmp    %esi,%ecx
- 77e:	73 6d                	jae    7ed <malloc+0x9d>
- 780:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 786:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 78b:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 78e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 795:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 798:	eb 17                	jmp    7b1 <malloc+0x61>
- 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7a0:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 7a2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 7a5:	39 f1                	cmp    %esi,%ecx
- 7a7:	73 4f                	jae    7f8 <malloc+0xa8>
- 7a9:	8b 3d 80 0b 00 00    	mov    0xb80,%edi
- 7af:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 7b1:	39 c7                	cmp    %eax,%edi
- 7b3:	75 eb                	jne    7a0 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 7b5:	83 ec 0c             	sub    $0xc,%esp
- 7b8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 7bb:	e8 3b fc ff ff       	call   3fb <sbrk>
-  if(p == (char*)-1)
- 7c0:	83 c4 10             	add    $0x10,%esp
- 7c3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 7c6:	74 1b                	je     7e3 <malloc+0x93>
-  hp->s.size = nu;
- 7c8:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 7cb:	83 ec 0c             	sub    $0xc,%esp
- 7ce:	83 c0 08             	add    $0x8,%eax
- 7d1:	50                   	push   %eax
- 7d2:	e8 e9 fe ff ff       	call   6c0 <free>
-  return freep;
- 7d7:	a1 80 0b 00 00       	mov    0xb80,%eax
-      if((p = morecore(nunits)) == 0)
- 7dc:	83 c4 10             	add    $0x10,%esp
- 7df:	85 c0                	test   %eax,%eax
- 7e1:	75 bd                	jne    7a0 <malloc+0x50>
-        return 0;
-  }
-}
- 7e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 7e6:	31 c0                	xor    %eax,%eax
-}
- 7e8:	5b                   	pop    %ebx
- 7e9:	5e                   	pop    %esi
- 7ea:	5f                   	pop    %edi
- 7eb:	5d                   	pop    %ebp
- 7ec:	c3                   	ret    
-    if(p->s.size >= nunits){
- 7ed:	89 c2                	mov    %eax,%edx
- 7ef:	89 f8                	mov    %edi,%eax
- 7f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- 7f8:	39 ce                	cmp    %ecx,%esi
- 7fa:	74 54                	je     850 <malloc+0x100>
-        p->s.size -= nunits;
- 7fc:	29 f1                	sub    %esi,%ecx
- 7fe:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- 801:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- 804:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- 807:	a3 80 0b 00 00       	mov    %eax,0xb80
-}
- 80c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 80f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- 812:	5b                   	pop    %ebx
- 813:	5e                   	pop    %esi
- 814:	5f                   	pop    %edi
- 815:	5d                   	pop    %ebp
- 816:	c3                   	ret    
- 817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 81e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- 820:	c7 05 80 0b 00 00 84 	movl   $0xb84,0xb80
- 827:	0b 00 00 
-    base.s.size = 0;
- 82a:	bf 84 0b 00 00       	mov    $0xb84,%edi
-    base.s.ptr = freep = prevp = &base;
- 82f:	c7 05 84 0b 00 00 84 	movl   $0xb84,0xb84
- 836:	0b 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 839:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- 83b:	c7 05 88 0b 00 00 00 	movl   $0x0,0xb88
- 842:	00 00 00 
-    if(p->s.size >= nunits){
- 845:	e9 36 ff ff ff       	jmp    780 <malloc+0x30>
- 84a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- 850:	8b 0a                	mov    (%edx),%ecx
- 852:	89 08                	mov    %ecx,(%eax)
- 854:	eb b1                	jmp    807 <malloc+0xb7>
diff -ruN xv6-public/cat.c xv6-public-mynew/cat.c
--- xv6-public/cat.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/cat.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,43 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-char buf[512];
-
-void
-cat(int fd)
-{
-  int n;
-
-  while((n = read(fd, buf, sizeof(buf))) > 0) {
-    if (write(1, buf, n) != n) {
-      printf(1, "cat: write error\n");
-      exit();
-    }
-  }
-  if(n < 0){
-    printf(1, "cat: read error\n");
-    exit();
-  }
-}
-
-int
-main(int argc, char *argv[])
-{
-  int fd, i;
-
-  if(argc <= 1){
-    cat(0);
-    exit();
-  }
-
-  for(i = 1; i < argc; i++){
-    if((fd = open(argv[i], 0)) < 0){
-      printf(1, "cat: cannot open %s\n", argv[i]);
-      exit();
-    }
-    cat(fd);
-    close(fd);
-  }
-  exit();
-}
diff -ruN xv6-public/cat.d xv6-public-mynew/cat.d
--- xv6-public/cat.d	2022-09-05 09:51:04.858999127 +0530
+++ xv6-public-mynew/cat.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/cat.o and xv6-public-mynew/cat.o differ
diff -ruN xv6-public/cat.sym xv6-public-mynew/cat.sym
--- xv6-public/cat.sym	2022-09-05 09:51:04.946999129 +0530
+++ xv6-public-mynew/cat.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,63 +0,0 @@
-00000000 .text
-00000858 .rodata
-000008ac .eh_frame
-00000b80 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 cat.c
-00000000 ulib.c
-00000000 printf.c
-00000440 printint
-00000898 digits.1097
-00000000 umalloc.c
-00000b80 freep
-00000b84 base
-00000110 strcpy
-000004f0 printf
-0000042b thread_exit
-00000340 memmove
-000003bb mknod
-00000230 gets
-000003f3 getpid
-00000090 cat
-00000750 malloc
-00000403 sleep
-00000383 pipe
-00000393 write
-000003cb fstat
-000003a3 kill
-000003e3 chdir
-000003ab exec
-0000037b wait
-0000038b read
-000003c3 unlink
-0000036b fork
-000003fb sbrk
-0000040b uptime
-00000b7c __bss_start
-000001d0 memset
-00000000 main
-00000140 strcmp
-000003eb dup
-00000ba0 buf
-000002b0 stat
-00000b7c _edata
-00000da0 _end
-000003d3 link
-00000373 exit
-00000300 atoi
-00000413 draw
-00000190 strlen
-000003b3 open
-000001f0 strchr
-0000041b thread_create
-000003db mkdir
-0000039b close
-00000423 thread_join
-000006c0 free
diff -ruN xv6-public/console.c xv6-public-mynew/console.c
--- xv6-public/console.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/console.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,299 +0,0 @@
-// Console input and output.
-// Input is from the keyboard or serial port.
-// Output is written to the screen and serial port.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "traps.h"
-#include "spinlock.h"
-#include "sleeplock.h"
-#include "fs.h"
-#include "file.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-
-static void consputc(int);
-
-static int panicked = 0;
-
-static struct {
-  struct spinlock lock;
-  int locking;
-} cons;
-
-static void
-printint(int xx, int base, int sign)
-{
-  static char digits[] = "0123456789abcdef";
-  char buf[16];
-  int i;
-  uint x;
-
-  if(sign && (sign = xx < 0))
-    x = -xx;
-  else
-    x = xx;
-
-  i = 0;
-  do{
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-
-  if(sign)
-    buf[i++] = '-';
-
-  while(--i >= 0)
-    consputc(buf[i]);
-}
-//PAGEBREAK: 50
-
-// Print to the console. only understands %d, %x, %p, %s.
-void
-cprintf(char *fmt, ...)
-{
-  int i, c, locking;
-  uint *argp;
-  char *s;
-
-  locking = cons.locking;
-  if(locking)
-    acquire(&cons.lock);
-
-  if (fmt == 0)
-    panic("null fmt");
-
-  argp = (uint*)(void*)(&fmt + 1);
-  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-    if(c != '%'){
-      consputc(c);
-      continue;
-    }
-    c = fmt[++i] & 0xff;
-    if(c == 0)
-      break;
-    switch(c){
-    case 'd':
-      printint(*argp++, 10, 1);
-      break;
-    case 'x':
-    case 'p':
-      printint(*argp++, 16, 0);
-      break;
-    case 's':
-      if((s = (char*)*argp++) == 0)
-        s = "(null)";
-      for(; *s; s++)
-        consputc(*s);
-      break;
-    case '%':
-      consputc('%');
-      break;
-    default:
-      // Print unknown % sequence to draw attention.
-      consputc('%');
-      consputc(c);
-      break;
-    }
-  }
-
-  if(locking)
-    release(&cons.lock);
-}
-
-void
-panic(char *s)
-{
-  int i;
-  uint pcs[10];
-
-  cli();
-  cons.locking = 0;
-  // use lapiccpunum so that we can call panic from mycpu()
-  cprintf("lapicid %d: panic: ", lapicid());
-  cprintf(s);
-  cprintf("\n");
-  getcallerpcs(&s, pcs);
-  for(i=0; i<10; i++)
-    cprintf(" %p", pcs[i]);
-  panicked = 1; // freeze other CPU
-  for(;;)
-    ;
-}
-
-//PAGEBREAK: 50
-#define BACKSPACE 0x100
-#define CRTPORT 0x3d4
-static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memory
-
-static void
-cgaputc(int c)
-{
-  int pos;
-
-  // Cursor position: col + 80*row.
-  outb(CRTPORT, 14);
-  pos = inb(CRTPORT+1) << 8;
-  outb(CRTPORT, 15);
-  pos |= inb(CRTPORT+1);
-
-  if(c == '\n')
-    pos += 80 - pos%80;
-  else if(c == BACKSPACE){
-    if(pos > 0) --pos;
-  } else
-    crt[pos++] = (c&0xff) | 0x0700;  // black on white
-
-  if(pos < 0 || pos > 25*80)
-    panic("pos under/overflow");
-
-  if((pos/80) >= 24){  // Scroll up.
-    memmove(crt, crt+80, sizeof(crt[0])*23*80);
-    pos -= 80;
-    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
-  }
-
-  outb(CRTPORT, 14);
-  outb(CRTPORT+1, pos>>8);
-  outb(CRTPORT, 15);
-  outb(CRTPORT+1, pos);
-  crt[pos] = ' ' | 0x0700;
-}
-
-void
-consputc(int c)
-{
-  if(panicked){
-    cli();
-    for(;;)
-      ;
-  }
-
-  if(c == BACKSPACE){
-    uartputc('\b'); uartputc(' '); uartputc('\b');
-  } else
-    uartputc(c);
-  cgaputc(c);
-}
-
-#define INPUT_BUF 128
-struct {
-  char buf[INPUT_BUF];
-  uint r;  // Read index
-  uint w;  // Write index
-  uint e;  // Edit index
-} input;
-
-#define C(x)  ((x)-'@')  // Control-x
-
-void
-consoleintr(int (*getc)(void))
-{
-  int c, doprocdump = 0;
-
-  acquire(&cons.lock);
-  while((c = getc()) >= 0){
-    switch(c){
-    case C('P'):  // Process listing.
-      // procdump() locks cons.lock indirectly; invoke later
-      doprocdump = 1;
-      break;
-    case C('U'):  // Kill line.
-      while(input.e != input.w &&
-            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-    case C('H'): case '\x7f':  // Backspace
-      if(input.e != input.w){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-    default:
-      if(c != 0 && input.e-input.r < INPUT_BUF){
-        c = (c == '\r') ? '\n' : c;
-        input.buf[input.e++ % INPUT_BUF] = c;
-        consputc(c);
-        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-          input.w = input.e;
-          wakeup(&input.r);
-        }
-      }
-      break;
-    }
-  }
-  release(&cons.lock);
-  if(doprocdump) {
-    procdump();  // now call procdump() wo. cons.lock held
-  }
-}
-
-int
-consoleread(struct inode *ip, char *dst, int n)
-{
-  uint target;
-  int c;
-
-  iunlock(ip);
-  target = n;
-  acquire(&cons.lock);
-  while(n > 0){
-    while(input.r == input.w){
-      if(myproc()->killed){
-        release(&cons.lock);
-        ilock(ip);
-        return -1;
-      }
-      sleep(&input.r, &cons.lock);
-    }
-    c = input.buf[input.r++ % INPUT_BUF];
-    if(c == C('D')){  // EOF
-      if(n < target){
-        // Save ^D for next time, to make sure
-        // caller gets a 0-byte result.
-        input.r--;
-      }
-      break;
-    }
-    *dst++ = c;
-    --n;
-    if(c == '\n')
-      break;
-  }
-  release(&cons.lock);
-  ilock(ip);
-
-  return target - n;
-}
-
-int
-consolewrite(struct inode *ip, char *buf, int n)
-{
-  int i;
-
-  iunlock(ip);
-  acquire(&cons.lock);
-  for(i = 0; i < n; i++)
-    consputc(buf[i] & 0xff);
-  release(&cons.lock);
-  ilock(ip);
-
-  return n;
-}
-
-void
-consoleinit(void)
-{
-  initlock(&cons.lock, "console");
-
-  devsw[CONSOLE].write = consolewrite;
-  devsw[CONSOLE].read = consoleread;
-  cons.locking = 1;
-
-  ioapicenable(IRQ_KBD, 0);
-}
-
diff -ruN xv6-public/console.d xv6-public-mynew/console.d
--- xv6-public/console.d	2022-09-05 09:51:07.046999190 +0530
+++ xv6-public-mynew/console.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,3 +0,0 @@
-console.o: console.c /usr/include/stdc-predef.h types.h defs.h param.h \
- traps.h spinlock.h sleeplock.h fs.h file.h memlayout.h mmu.h proc.h \
- x86.h
Binary files xv6-public/console.o and xv6-public-mynew/console.o differ
diff -ruN xv6-public/cuth xv6-public-mynew/cuth
--- xv6-public/cuth	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/cuth	1970-01-01 05:30:00.000000000 +0530
@@ -1,48 +0,0 @@
-#!/usr/bin/perl
-
-$| = 1;
-
-sub writefile($@){
-	my ($file, @lines) = @_;
-	
-	sleep(1);
-	open(F, ">$file") || die "open >$file: $!";
-	print F @lines;
-	close(F);
-}
-
-# Cut out #include lines that don't contribute anything.
-for($i=0; $i<@ARGV; $i++){
-	$file = $ARGV[$i];
-	if(!open(F, $file)){
-		print STDERR "open $file: $!\n";
-		next;
-	}
-	@lines = <F>;
-	close(F);
-	
-	$obj = "$file.o";
-	$obj =~ s/\.c\.o$/.o/;
-	system("touch $file");
-
-	if(system("make CC='gcc -Werror' $obj >/dev/null 2>\&1") != 0){
-		print STDERR "make $obj failed: $rv\n";
-		next;
-	}
-
-	system("cp $file =$file");
-	for($j=@lines-1; $j>=0; $j--){
-		if($lines[$j] =~ /^#include/){
-			$old = $lines[$j];
-			$lines[$j] = "/* CUT-H */\n";
-			writefile($file, @lines);
-			if(system("make CC='gcc -Werror' $obj >/dev/null 2>\&1") != 0){
-				$lines[$j] = $old;
-			}else{
-				print STDERR "$file $old";
-			}
-		}
-	}
-	writefile($file, grep {!/CUT-H/} @lines);
-	system("rm =$file");
-}
diff -ruN xv6-public/.cvsignore xv6-public-mynew/.cvsignore
--- xv6-public/.cvsignore	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/.cvsignore	1970-01-01 05:30:00.000000000 +0530
@@ -1,16 +0,0 @@
-*.asm
-*.d
-*.sym
-_*
-kernel
-user1
-userfs
-usertests
-xv6.img
-vectors.S
-bochsout.txt
-bootblock
-bootother
-bootother.out
-parport.out
-fmt
diff -ruN xv6-public/date.h xv6-public-mynew/date.h
--- xv6-public/date.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/date.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,8 +0,0 @@
-struct rtcdate {
-  uint second;
-  uint minute;
-  uint hour;
-  uint day;
-  uint month;
-  uint year;
-};
diff -ruN xv6-public/defs.h xv6-public-mynew/defs.h
--- xv6-public/defs.h	2022-09-01 16:38:05.731232579 +0530
+++ xv6-public-mynew/defs.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,195 +0,0 @@
-struct buf;
-struct context;
-struct file;
-struct inode;
-struct pipe;
-struct proc;
-struct rtcdate;
-struct spinlock;
-struct sleeplock;
-struct stat;
-struct superblock;
-
-// bio.c
-void            binit(void);
-struct buf*     bread(uint, uint);
-void            brelse(struct buf*);
-void            bwrite(struct buf*);
-
-// console.c
-void            consoleinit(void);
-void            cprintf(char*, ...);
-void            consoleintr(int(*)(void));
-void            panic(char*) __attribute__((noreturn));
-
-// exec.c
-int             exec(char*, char**);
-
-// file.c
-struct file*    filealloc(void);
-void            fileclose(struct file*);
-struct file*    filedup(struct file*);
-void            fileinit(void);
-int             fileread(struct file*, char*, int n);
-int             filestat(struct file*, struct stat*);
-int             filewrite(struct file*, char*, int n);
-
-// fs.c
-void            readsb(int dev, struct superblock *sb);
-int             dirlink(struct inode*, char*, uint);
-struct inode*   dirlookup(struct inode*, char*, uint*);
-struct inode*   ialloc(uint, short);
-struct inode*   idup(struct inode*);
-void            iinit(int dev);
-void            ilock(struct inode*);
-void            iput(struct inode*);
-void            iunlock(struct inode*);
-void            iunlockput(struct inode*);
-void            iupdate(struct inode*);
-int             namecmp(const char*, const char*);
-struct inode*   namei(char*);
-struct inode*   nameiparent(char*, char*);
-int             readi(struct inode*, char*, uint, uint);
-void            stati(struct inode*, struct stat*);
-int             writei(struct inode*, char*, uint, uint);
-
-// ide.c
-void            ideinit(void);
-void            ideintr(void);
-void            iderw(struct buf*);
-
-// ioapic.c
-void            ioapicenable(int irq, int cpu);
-extern uchar    ioapicid;
-void            ioapicinit(void);
-
-// kalloc.c
-char*           kalloc(void);
-void            kfree(char*);
-void            kinit1(void*, void*);
-void            kinit2(void*, void*);
-
-// kbd.c
-void            kbdintr(void);
-
-// lapic.c
-void            cmostime(struct rtcdate *r);
-int             lapicid(void);
-extern volatile uint*    lapic;
-void            lapiceoi(void);
-void            lapicinit(void);
-void            lapicstartap(uchar, uint);
-void            microdelay(int);
-
-// log.c
-void            initlog(int dev);
-void            log_write(struct buf*);
-void            begin_op();
-void            end_op();
-
-// mp.c
-extern int      ismp;
-void            mpinit(void);
-
-// picirq.c
-void            picenable(int);
-void            picinit(void);
-
-// pipe.c
-int             pipealloc(struct file**, struct file**);
-void            pipeclose(struct pipe*, int);
-int             piperead(struct pipe*, char*, int);
-int             pipewrite(struct pipe*, char*, int);
-
-//PAGEBREAK: 16
-// proc.c
-int             cpuid(void);
-void            exit(void);
-int             fork(void);
-int             growproc(int);
-int             kill(int);
-struct cpu*     mycpu(void);
-struct proc*    myproc();
-void            pinit(void);
-void            procdump(void);
-void            scheduler(void) __attribute__((noreturn));
-void            sched(void);
-void            setproc(struct proc*);
-void            sleep(void*, struct spinlock*);
-void            userinit(void);
-int             wait(void);
-void            wakeup(void*);
-void            yield(void);
-
-// thread
-int             thread_create(void (*)(void*), void*, void*);
-int             thread_join(void);
-int             thread_exit(void);
-
-// swtch.S
-void            swtch(struct context**, struct context*);
-
-// spinlock.c
-void            acquire(struct spinlock*);
-void            getcallerpcs(void*, uint*);
-int             holding(struct spinlock*);
-void            initlock(struct spinlock*, char*);
-void            release(struct spinlock*);
-void            pushcli(void);
-void            popcli(void);
-
-// sleeplock.c
-void            acquiresleep(struct sleeplock*);
-void            releasesleep(struct sleeplock*);
-int             holdingsleep(struct sleeplock*);
-void            initsleeplock(struct sleeplock*, char*);
-
-// string.c
-int             memcmp(const void*, const void*, uint);
-void*           memmove(void*, const void*, uint);
-void*           memset(void*, int, uint);
-char*           safestrcpy(char*, const char*, int);
-int             strlen(const char*);
-int             strncmp(const char*, const char*, uint);
-char*           strncpy(char*, const char*, int);
-
-// syscall.c
-int             argint(int, int*);
-int             argptr(int, char**, int);
-int             argstr(int, char**);
-int             fetchint(uint, int*);
-int             fetchstr(uint, char**);
-void            syscall(void);
-
-// timer.c
-void            timerinit(void);
-
-// trap.c
-void            idtinit(void);
-extern uint     ticks;
-void            tvinit(void);
-extern struct spinlock tickslock;
-
-// uart.c
-void            uartinit(void);
-void            uartintr(void);
-void            uartputc(int);
-
-// vm.c
-void            seginit(void);
-void            kvmalloc(void);
-pde_t*          setupkvm(void);
-char*           uva2ka(pde_t*, char*);
-int             allocuvm(pde_t*, uint, uint);
-int             deallocuvm(pde_t*, uint, uint);
-void            freevm(pde_t*);
-void            inituvm(pde_t*, char*, uint);
-int             loaduvm(pde_t*, char*, struct inode*, uint, uint);
-pde_t*          copyuvm(pde_t*, uint);
-void            switchuvm(struct proc*);
-void            switchkvm(void);
-int             copyout(pde_t*, uint, void*, uint);
-void            clearpteu(pde_t *pgdir, char *uva);
-
-// number of elements in fixed-size array
-#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff -ruN xv6-public/.dir-locals.el xv6-public-mynew/.dir-locals.el
--- xv6-public/.dir-locals.el	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/.dir-locals.el	1970-01-01 05:30:00.000000000 +0530
@@ -1,4 +0,0 @@
-((c-mode
-  (indent-tabs-mode . nil)
-  (c-file-style . "bsd")
-  (c-basic-offset . 2)))
diff -ruN xv6-public/dot-bochsrc xv6-public-mynew/dot-bochsrc
--- xv6-public/dot-bochsrc	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/dot-bochsrc	1970-01-01 05:30:00.000000000 +0530
@@ -1,738 +0,0 @@
-# You may now use double quotes around pathnames, in case
-# your pathname includes spaces.
-
-#=======================================================================
-# CONFIG_INTERFACE
-#
-# The configuration interface is a series of menus or dialog boxes that
-# allows you to change all the settings that control Bochs's behavior.
-# There are two choices of configuration interface: a text mode version
-# called "textconfig" and a graphical version called "wx".  The text
-# mode version uses stdin/stdout and is always compiled in.  The graphical
-# version is only available when you use "--with-wx" on the configure 
-# command.  If you do not write a config_interface line, Bochs will 
-# choose a default for you.
-#
-# NOTE: if you use the "wx" configuration interface, you must also use
-# the "wx" display library.
-#=======================================================================
-#config_interface: textconfig
-#config_interface: wx
-
-#=======================================================================
-# DISPLAY_LIBRARY
-#
-# The display library is the code that displays the Bochs VGA screen.  Bochs 
-# has a selection of about 10 different display library implementations for 
-# different platforms.  If you run configure with multiple --with-* options, 
-# the display_library command lets you choose which one you want to run with.
-# If you do not write a display_library line, Bochs will choose a default for
-# you.
-#
-# The choices are: 
-#   x              use X windows interface, cross platform
-#   win32          use native win32 libraries
-#   carbon         use Carbon library (for MacOS X)
-#   beos           use native BeOS libraries
-#   macintosh      use MacOS pre-10
-#   amigaos        use native AmigaOS libraries
-#   sdl            use SDL library, cross platform
-#   svga           use SVGALIB library for Linux, allows graphics without X11
-#   term           text only, uses curses/ncurses library, cross platform
-#   rfb            provides an interface to AT&T's VNC viewer, cross platform
-#   wx             use wxWidgets library, cross platform
-#   nogui          no display at all
-#
-# NOTE: if you use the "wx" configuration interface, you must also use
-# the "wx" display library.
-#
-# Specific options:
-# Some display libraries now support specific option to control their
-# behaviour. See the examples below for currently supported options.
-#=======================================================================
-#display_library: amigaos
-#display_library: beos
-#display_library: carbon
-#display_library: macintosh
-#display_library: nogui
-#display_library: rfb, options="timeout=60" # time to wait for client
-#display_library: sdl, options="fullscreen" # startup in fullscreen mode
-#display_library: term
-#display_library: win32, options="legacyF12" # use F12 to toggle mouse
-#display_library: wx
-#display_library: x
-
-#=======================================================================
-# ROMIMAGE:
-# The ROM BIOS controls what the PC does when it first powers on.
-# Normally, you can use a precompiled BIOS in the source or binary
-# distribution called BIOS-bochs-latest. The ROM BIOS is usually loaded
-# starting at address 0xf0000, and it is exactly 64k long.
-# You can also use the environment variable $BXSHARE to specify the
-# location of the BIOS.
-# The usage of external large BIOS images (up to 512k) at memory top is
-# now supported, but we still recommend to use the BIOS distributed with
-# Bochs. Now the start address can be calculated from image size.
-#=======================================================================
-romimage: file=$BXSHARE/BIOS-bochs-latest
-#romimage: file=mybios.bin, address=0xfff80000 # 512k at memory top
-#romimage: file=mybios.bin # calculate start address from image size
-
-#=======================================================================
-# CPU:
-# This defines cpu-related parameters inside Bochs:
-#
-#  COUNT:
-#  Set the number of processors when Bochs is compiled for SMP emulation.
-#  Bochs currently supports up to 8 processors. If Bochs is compiled
-#  without SMP support, it won't accept values different from 1.
-#
-#  IPS:
-#  Emulated Instructions Per Second.  This is the number of IPS that bochs
-#  is capable of running on your machine. You can recompile Bochs with
-#  --enable-show-ips option enabled, to find your workstation's capability.
-#  Measured IPS value will then be logged into your log file or status bar
-#  (if supported by the gui).
-#
-#  IPS is used to calibrate many time-dependent events within the bochs 
-#  simulation.  For example, changing IPS affects the frequency of VGA
-#  updates, the duration of time before a key starts to autorepeat, and
-#  the measurement of BogoMips and other benchmarks.
-#
-#  Examples:
-#  Machine                                         Mips
-# ________________________________________________________________
-#  2.1Ghz Athlon XP with Linux 2.6/g++ 3.4         12 to 15 Mips
-#  1.6Ghz Intel P4 with Win2000/g++ 3.3             5 to  7 Mips
-#  650Mhz Athlon K-7 with Linux 2.4.4/egcs-2.91.66  2 to  2.5 Mips
-#  400Mhz Pentium II with Linux 2.0.36/egcs-1.0.3   1 to  1.8 Mips
-#=======================================================================
-cpu: count=2, ips=10000000
-
-#=======================================================================
-# MEGS
-# Set the number of Megabytes of physical memory you want to emulate. 
-# The default is 32MB, most OS's won't need more than that.
-# The maximum amount of memory supported is 2048Mb.
-#=======================================================================
-#megs: 256
-#megs: 128
-#megs: 64
-megs: 32
-#megs: 16
-#megs: 8
-
-#=======================================================================
-# OPTROMIMAGE[1-4]:
-# You may now load up to 4 optional ROM images. Be sure to use a 
-# read-only area, typically between C8000 and EFFFF. These optional
-# ROM images should not overwrite the rombios (located at
-# F0000-FFFFF) and the videobios (located at C0000-C7FFF).
-# Those ROM images will be initialized by the bios if they contain 
-# the right signature (0x55AA) and a valid checksum.
-# It can also be a convenient way to upload some arbitrary code/data
-# in the simulation, that can be retrieved by the boot loader
-#=======================================================================
-#optromimage1: file=optionalrom.bin, address=0xd0000
-#optromimage2: file=optionalrom.bin, address=0xd1000
-#optromimage3: file=optionalrom.bin, address=0xd2000
-#optromimage4: file=optionalrom.bin, address=0xd3000
-
-#optramimage1: file=/path/file1.img, address=0x0010000
-#optramimage2: file=/path/file2.img, address=0x0020000
-#optramimage3: file=/path/file3.img, address=0x0030000
-#optramimage4: file=/path/file4.img, address=0x0040000
-
-#=======================================================================
-# VGAROMIMAGE
-# You now need to load a VGA ROM BIOS into C0000.
-#=======================================================================
-#vgaromimage: file=bios/VGABIOS-elpin-2.40
-vgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest
-#vgaromimage: file=bios/VGABIOS-lgpl-latest-cirrus
-
-#=======================================================================
-# VGA:
-# Here you can specify the display extension to be used. With the value
-# 'none' you can use standard VGA with no extension. Other supported
-# values are 'vbe' for Bochs VBE and 'cirrus' for Cirrus SVGA support.
-#=======================================================================
-#vga: extension=cirrus
-#vga: extension=vbe
-vga: extension=none
-
-#=======================================================================
-# FLOPPYA:
-# Point this to pathname of floppy image file or device
-# This should be of a bootable floppy(image/device) if you're
-# booting from 'a' (or 'floppy').
-#
-# You can set the initial status of the media to 'ejected' or 'inserted'.
-#   floppya: 2_88=path, status=ejected             (2.88M 3.5" floppy)
-#   floppya: 1_44=path, status=inserted            (1.44M 3.5" floppy)
-#   floppya: 1_2=path, status=ejected              (1.2M  5.25" floppy)
-#   floppya: 720k=path, status=inserted            (720K  3.5" floppy)
-#   floppya: 360k=path, status=inserted            (360K  5.25" floppy)
-#   floppya: 320k=path, status=inserted            (320K  5.25" floppy)
-#   floppya: 180k=path, status=inserted            (180K  5.25" floppy)
-#   floppya: 160k=path, status=inserted            (160K  5.25" floppy)
-#   floppya: image=path, status=inserted           (guess type from image size)
-#
-# The path should be the name of a disk image file.  On Unix, you can use a raw
-# device name such as /dev/fd0 on Linux.  On win32 platforms, use drive letters
-# such as a: or b: as the path.  The parameter 'image' works with image files
-# only. In that case the size must match one of the supported types.
-#=======================================================================
-floppya: 1_44=/dev/fd0, status=inserted
-#floppya: image=../1.44, status=inserted
-#floppya: 1_44=/dev/fd0H1440, status=inserted
-#floppya: 1_2=../1_2, status=inserted
-#floppya: 1_44=a:, status=inserted
-#floppya: 1_44=a.img, status=inserted
-#floppya: 1_44=/dev/rfd0a, status=inserted
-
-#=======================================================================
-# FLOPPYB:
-# See FLOPPYA above for syntax
-#=======================================================================
-#floppyb: 1_44=b:, status=inserted
-floppyb: 1_44=b.img, status=inserted
-
-#=======================================================================
-# ATA0, ATA1, ATA2, ATA3
-# ATA controller for hard disks and cdroms
-#
-# ata[0-3]: enabled=[0|1], ioaddr1=addr, ioaddr2=addr, irq=number
-# 
-# These options enables up to 4 ata channels. For each channel
-# the two base io addresses and the irq must be specified.
-# 
-# ata0 and ata1 are enabled by default with the values shown below
-#
-# Examples:
-#   ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14
-#   ata1: enabled=1, ioaddr1=0x170, ioaddr2=0x370, irq=15
-#   ata2: enabled=1, ioaddr1=0x1e8, ioaddr2=0x3e0, irq=11
-#   ata3: enabled=1, ioaddr1=0x168, ioaddr2=0x360, irq=9
-#=======================================================================
-ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14
-ata1: enabled=1, ioaddr1=0x170, ioaddr2=0x370, irq=15
-ata2: enabled=0, ioaddr1=0x1e8, ioaddr2=0x3e0, irq=11
-ata3: enabled=0, ioaddr1=0x168, ioaddr2=0x360, irq=9
-
-#=======================================================================
-# ATA[0-3]-MASTER, ATA[0-3]-SLAVE
-#
-# This defines the type and characteristics of all attached ata devices:
-#   type=       type of attached device [disk|cdrom] 
-#   mode=       only valid for disks [flat|concat|external|dll|sparse|vmware3]
-#   mode=       only valid for disks [undoable|growing|volatile]
-#   path=       path of the image
-#   cylinders=  only valid for disks
-#   heads=      only valid for disks
-#   spt=        only valid for disks
-#   status=     only valid for cdroms [inserted|ejected]
-#   biosdetect= type of biosdetection [none|auto], only for disks on ata0 [cmos]
-#   translation=type of translation of the bios, only for disks [none|lba|large|rechs|auto]
-#   model=      string returned by identify device command
-#   journal=    optional filename of the redolog for undoable and volatile disks
-#   
-# Point this at a hard disk image file, cdrom iso file, or physical cdrom
-# device.  To create a hard disk image, try running bximage.  It will help you
-# choose the size and then suggest a line that works with it.
-#
-# In UNIX it may be possible to use a raw device as a Bochs hard disk, 
-# but WE DON'T RECOMMEND IT.  In Windows there is no easy way.
-#
-# In windows, the drive letter + colon notation should be used for cdroms.
-# Depending on versions of windows and drivers, you may only be able to 
-# access the "first" cdrom in the system.  On MacOSX, use path="drive"
-# to access the physical drive.
-#
-# The path is always mandatory. For flat hard disk images created with
-# bximage geometry autodetection can be used (cylinders=0 -> cylinders are
-# calculated using heads=16 and spt=63). For other hard disk images and modes
-# the cylinders, heads, and spt are mandatory.
-#
-# Default values are:
-#   mode=flat, biosdetect=auto, translation=auto, model="Generic 1234"
-#
-# The biosdetect option has currently no effect on the bios
-#
-# Examples:
-#   ata0-master: type=disk, mode=flat, path=10M.sample, cylinders=306, heads=4, spt=17
-#   ata0-slave:  type=disk, mode=flat, path=20M.sample, cylinders=615, heads=4, spt=17
-#   ata1-master: type=disk, mode=flat, path=30M.sample, cylinders=615, heads=6, spt=17
-#   ata1-slave:  type=disk, mode=flat, path=46M.sample, cylinders=940, heads=6, spt=17
-#   ata2-master: type=disk, mode=flat, path=62M.sample, cylinders=940, heads=8, spt=17
-#   ata2-slave:  type=disk, mode=flat, path=112M.sample, cylinders=900, heads=15, spt=17
-#   ata3-master: type=disk, mode=flat, path=483M.sample, cylinders=1024, heads=15, spt=63
-#   ata3-slave:  type=cdrom, path=iso.sample, status=inserted
-#=======================================================================
-ata0-master: type=disk, mode=flat, path="xv6.img", cylinders=100, heads=10, spt=10
-ata0-slave: type=disk, mode=flat, path="fs.img", cylinders=1024, heads=1, spt=1
-#ata0-slave: type=cdrom, path=D:, status=inserted
-#ata0-slave: type=cdrom, path=/dev/cdrom, status=inserted
-#ata0-slave: type=cdrom, path="drive", status=inserted
-#ata0-slave: type=cdrom, path=/dev/rcd0d, status=inserted 
-
-#=======================================================================
-# BOOT:
-# This defines the boot sequence. Now you can specify up to 3 boot drives.
-# You can either boot from 'floppy', 'disk' or 'cdrom'
-# legacy 'a' and 'c' are also supported
-# Examples:
-#   boot: floppy
-#   boot: disk
-#   boot: cdrom
-#   boot: c
-#   boot: a
-#   boot: cdrom, floppy, disk
-#=======================================================================
-#boot: floppy
-boot: disk
-
-#=======================================================================
-# CLOCK:
-# This defines the parameters of the clock inside Bochs:
-#
-#  SYNC:
-#  TO BE COMPLETED (see Greg explanation in feature request #536329)
-#
-#  TIME0:
-#  Specifies the start (boot) time of the virtual machine. Use a time 
-#  value as returned by the time(2) system call. If no time0 value is 
-#  set or if time0 equal to 1 (special case) or if time0 equal 'local', 
-#  the simulation will be started at the current local host time.
-#  If time0 equal to 2 (special case) or if time0 equal 'utc',
-#  the simulation will be started at the current utc time.
-#
-# Syntax:
-#  clock: sync=[none|slowdown|realtime|both], time0=[timeValue|local|utc]
-#
-# Example:
-#   clock: sync=none,     time0=local       # Now (localtime)
-#   clock: sync=slowdown, time0=315529200   # Tue Jan  1 00:00:00 1980
-#   clock: sync=none,     time0=631148400   # Mon Jan  1 00:00:00 1990
-#   clock: sync=realtime, time0=938581955   # Wed Sep 29 07:12:35 1999
-#   clock: sync=realtime, time0=946681200   # Sat Jan  1 00:00:00 2000
-#   clock: sync=none,     time0=1           # Now (localtime)
-#   clock: sync=none,     time0=utc         # Now (utc/gmt)
-# 
-# Default value are sync=none, time0=local
-#=======================================================================
-#clock: sync=none, time0=local
-
-
-#=======================================================================
-# FLOPPY_BOOTSIG_CHECK: disabled=[0|1]
-# Enables or disables the 0xaa55 signature check on boot floppies
-# Defaults to disabled=0
-# Examples:
-#   floppy_bootsig_check: disabled=0
-#   floppy_bootsig_check: disabled=1
-#=======================================================================
-#floppy_bootsig_check: disabled=1
-floppy_bootsig_check: disabled=0
-
-#=======================================================================
-# LOG:
-# Give the path of the log file you'd like Bochs debug and misc. verbiage
-# to be written to. If you don't use this option or set the filename to
-# '-' the output is written to the console. If you really don't want it,
-# make it "/dev/null" (Unix) or "nul" (win32). :^(
-#
-# Examples:
-#   log: ./bochs.out
-#   log: /dev/tty
-#=======================================================================
-#log: /dev/null
-log: bochsout.txt
-
-#=======================================================================
-# LOGPREFIX:
-# This handles the format of the string prepended to each log line.
-# You may use those special tokens :
-#   %t : 11 decimal digits timer tick
-#   %i : 8 hexadecimal digits of cpu current eip (ignored in SMP configuration)
-#   %e : 1 character event type ('i'nfo, 'd'ebug, 'p'anic, 'e'rror)
-#   %d : 5 characters string of the device, between brackets
-# 
-# Default : %t%e%d
-# Examples:
-#   logprefix: %t-%e-@%i-%d
-#   logprefix: %i%e%d
-#=======================================================================
-#logprefix: %t%e%d
-
-#=======================================================================
-# LOG CONTROLS
-#
-# Bochs now has four severity levels for event logging.
-#   panic: cannot proceed.  If you choose to continue after a panic, 
-#          don't be surprised if you get strange behavior or crashes.
-#   error: something went wrong, but it is probably safe to continue the
-#          simulation.
-#   info: interesting or useful messages.
-#   debug: messages useful only when debugging the code.  This may
-#          spit out thousands per second.
-#
-# For events of each level, you can choose to crash, report, or ignore.
-# TODO: allow choice based on the facility: e.g. crash on panics from
-#       everything except the cdrom, and only report those.
-#
-# If you are experiencing many panics, it can be helpful to change
-# the panic action to report instead of fatal.  However, be aware
-# that anything executed after a panic is uncharted territory and can 
-# cause bochs to become unstable.  The panic is a "graceful exit," so
-# if you disable it you may get a spectacular disaster instead.
-#=======================================================================
-panic: action=ask
-error: action=report
-info: action=report
-debug: action=ignore
-#pass: action=fatal
-
-#=======================================================================
-# DEBUGGER_LOG:
-# Give the path of the log file you'd like Bochs to log debugger output.
-# If you really don't want it, make it /dev/null or '-'. :^(
-#
-# Examples:
-#   debugger_log: ./debugger.out
-#=======================================================================
-#debugger_log: /dev/null
-#debugger_log: debugger.out
-debugger_log: -
-
-#=======================================================================
-# COM1, COM2, COM3, COM4:
-# This defines a serial port (UART type 16550A). In the 'term' you can specify
-# a device to use as com1. This can be a real serial line, or a pty.  To use
-# a pty (under X/Unix), create two windows (xterms, usually).  One of them will
-# run bochs, and the other will act as com1. Find out the tty the com1
-# window using the `tty' command, and use that as the `dev' parameter.
-# Then do `sleep 1000000' in the com1 window to keep the shell from
-# messing with things, and run bochs in the other window.  Serial I/O to
-# com1 (port 0x3f8) will all go to the other window.
-# Other serial modes are 'null' (no input/output), 'file' (output to a file
-# specified as the 'dev' parameter), 'raw' (use the real serial port - under
-# construction for win32), 'mouse' (standard serial mouse - requires
-# mouse option setting 'type=serial' or 'type=serial_wheel') and 'socket'
-# (connect a networking socket).
-#
-# Examples:
-#   com1: enabled=1, mode=null
-#   com1: enabled=1, mode=mouse
-#   com2: enabled=1, mode=file, dev=serial.out
-#   com3: enabled=1, mode=raw, dev=com1
-#   com3: enabled=1, mode=socket, dev=localhost:8888
-#=======================================================================
-#com1: enabled=1, mode=term, dev=/dev/ttyp9
-
-
-#=======================================================================
-# PARPORT1, PARPORT2:
-# This defines a parallel (printer) port. When turned on and an output file is
-# defined the emulated printer port sends characters printed by the guest OS
-# into the output file. On some platforms a device filename can be used to
-# send the data to the real parallel port (e.g. "/dev/lp0" on Linux, "lpt1" on
-# win32 platforms).
-#
-# Examples:
-#   parport1: enabled=1, file="parport.out"
-#   parport2: enabled=1, file="/dev/lp0"
-#   parport1: enabled=0
-#=======================================================================
-parport1: enabled=1, file="/dev/stdout"
-
-#=======================================================================
-# SB16:
-# This defines the SB16 sound emulation. It can have several of the
-# following properties.
-# All properties are in the format sb16: property=value
-# midi: The filename is where the midi data is sent. This can be a
-#       device or just a file if you want to record the midi data.
-# midimode:
-#      0=no data
-#      1=output to device (system dependent. midi denotes the device driver)
-#      2=SMF file output, including headers
-#      3=output the midi data stream to the file (no midi headers and no
-#        delta times, just command and data bytes)
-# wave: This is the device/file where wave output is stored
-# wavemode:
-#      0=no data
-#      1=output to device (system dependent. wave denotes the device driver)
-#      2=VOC file output, incl. headers
-#      3=output the raw wave stream to the file
-# log:  The file to write the sb16 emulator messages to.
-# loglevel:
-#      0=no log
-#      1=resource changes, midi program and bank changes
-#      2=severe errors
-#      3=all errors
-#      4=all errors plus all port accesses
-#      5=all errors and port accesses plus a lot of extra info
-# dmatimer:
-#      microseconds per second for a DMA cycle.  Make it smaller to fix
-#      non-continuous sound.  750000 is usually a good value.  This needs a
-#      reasonably correct setting for the IPS parameter of the CPU option.
-#
-# For an example look at the next line:
-#=======================================================================
-
-#sb16: midimode=1, midi=/dev/midi00, wavemode=1, wave=/dev/dsp, loglevel=2, log=sb16.log, dmatimer=600000
-
-#=======================================================================
-# VGA_UPDATE_INTERVAL:
-# Video memory is scanned for updates and screen updated every so many
-# virtual seconds.  The default is 40000, about 25Hz. Keep in mind that
-# you must tweak the 'cpu: ips=N' directive to be as close to the number
-# of emulated instructions-per-second your workstation can do, for this
-# to be accurate.
-#
-# Examples:
-#   vga_update_interval: 250000
-#=======================================================================
-vga_update_interval: 300000
-
-# using for Winstone '98 tests
-#vga_update_interval:  100000
-
-#=======================================================================
-# KEYBOARD_SERIAL_DELAY:
-# Approximate time in microseconds that it takes one character to
-# be transfered from the keyboard to controller over the serial path.
-# Examples:
-#   keyboard_serial_delay: 200
-#=======================================================================
-keyboard_serial_delay: 250
-
-#=======================================================================
-# KEYBOARD_PASTE_DELAY:
-# Approximate time in microseconds between attempts to paste
-# characters to the keyboard controller. This leaves time for the
-# guest os to deal with the flow of characters.  The ideal setting
-# depends on how your operating system processes characters.  The
-# default of 100000 usec (.1 seconds) was chosen because it works 
-# consistently in Windows.
-#
-# If your OS is losing characters during a paste, increase the paste
-# delay until it stops losing characters.
-#
-# Examples:
-#   keyboard_paste_delay: 100000
-#=======================================================================
-keyboard_paste_delay: 100000
-
-#=======================================================================
-# MOUSE: 
-# This option prevents Bochs from creating mouse "events" unless a mouse
-# is  enabled. The hardware emulation itself is not disabled by this.
-# You can turn the mouse on by setting enabled to 1, or turn it off by
-# setting enabled to 0. Unless you have a particular reason for enabling
-# the mouse by default, it is recommended that you leave it off.
-# You can also toggle the mouse usage at runtime (control key + middle
-# mouse button on X11, SDL, wxWidgets and Win32).
-# With the mouse type option you can select the type of mouse to emulate.
-# The default value is 'ps2'. The other choices are 'imps2' (wheel mouse
-# on PS/2), 'serial', 'serial_wheel' (one com port requires setting
-# 'mode=mouse') and 'usb' (3-button mouse - one of the USB ports must be
-# connected with the 'mouse' device - requires PCI and USB support).
-#
-# Examples:
-#   mouse: enabled=1
-#   mouse: enabled=1, type=imps2
-#   mouse: enabled=1, type=serial
-#   mouse: enabled=0
-#=======================================================================
-mouse: enabled=0
-
-#=======================================================================
-# private_colormap: Request that the GUI create and use it's own
-#                   non-shared colormap.  This colormap will be used
-#                   when in the bochs window.  If not enabled, a
-#                   shared colormap scheme may be used.  Not implemented
-#                   on all GUI's.
-#
-# Examples:
-#   private_colormap: enabled=1
-#   private_colormap: enabled=0
-#=======================================================================
-private_colormap: enabled=0
-
-#=======================================================================
-# fullscreen: ONLY IMPLEMENTED ON AMIGA
-#             Request that Bochs occupy the entire screen instead of a 
-#             window.
-#
-# Examples:
-#   fullscreen: enabled=0
-#   fullscreen: enabled=1
-#=======================================================================
-#fullscreen: enabled=0
-#screenmode: name="sample"
-
-#=======================================================================
-# ne2k: NE2000 compatible ethernet adapter
-#
-# Examples:
-# ne2k: ioaddr=IOADDR, irq=IRQ, mac=MACADDR, ethmod=MODULE, ethdev=DEVICE, script=SCRIPT
-#
-# ioaddr, irq: You probably won't need to change ioaddr and irq, unless there
-# are IRQ conflicts.
-#
-# mac: The MAC address MUST NOT match the address of any machine on the net.
-# Also, the first byte must be an even number (bit 0 set means a multicast
-# address), and you cannot use ff:ff:ff:ff:ff:ff because that's the broadcast
-# address.  For the ethertap module, you must use fe:fd:00:00:00:01.  There may
-# be other restrictions too.  To be safe, just use the b0:c4... address.
-#
-# ethdev: The ethdev value is the name of the network interface on your host
-# platform.  On UNIX machines, you can get the name by running ifconfig.  On
-# Windows machines, you must run niclist to get the name of the ethdev.
-# Niclist source code is in misc/niclist.c and it is included in Windows 
-# binary releases.
-#
-# script: The script value is optional, and is the name of a script that 
-# is executed after bochs initialize the network interface. You can use 
-# this script to configure this network interface, or enable masquerading.
-# This is mainly useful for the tun/tap devices that only exist during
-# Bochs execution. The network interface name is supplied to the script
-# as first parameter
-#
-# If you don't want to make connections to any physical networks,
-# you can use the following 'ethmod's to simulate a virtual network.
-#   null: All packets are discarded, but logged to a few files.
-#   arpback: ARP is simulated. Disabled by default.
-#   vde:  Virtual Distributed Ethernet
-#   vnet: ARP, ICMP-echo(ping), DHCP and read/write TFTP are simulated.
-#         The virtual host uses 192.168.10.1.
-#         DHCP assigns 192.168.10.2 to the guest.
-#         TFTP uses the ethdev value for the root directory and doesn't
-#         overwrite files.
-#
-#=======================================================================
-# ne2k: ioaddr=0x240, irq=9, mac=fe:fd:00:00:00:01, ethmod=fbsd, ethdev=en0 #macosx
-# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:00, ethmod=fbsd, ethdev=xl0
-# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:00, ethmod=linux, ethdev=eth0
-# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:01, ethmod=win32, ethdev=MYCARD
-# ne2k: ioaddr=0x240, irq=9, mac=fe:fd:00:00:00:01, ethmod=tap, ethdev=tap0
-# ne2k: ioaddr=0x240, irq=9, mac=fe:fd:00:00:00:01, ethmod=tuntap, ethdev=/dev/net/tun0, script=./tunconfig
-# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:01, ethmod=null, ethdev=eth0
-# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:01, ethmod=vde, ethdev="/tmp/vde.ctl"
-# ne2k: ioaddr=0x240, irq=9, mac=b0:c4:20:00:00:01, ethmod=vnet, ethdev="c:/temp"
-
-#=======================================================================
-# KEYBOARD_MAPPING:
-# This enables a remap of a physical localized keyboard to a 
-# virtualized us keyboard, as the PC architecture expects.
-# If enabled, the keymap file must be specified.
-# 
-# Examples:
-#   keyboard_mapping: enabled=1, map=gui/keymaps/x11-pc-de.map
-#=======================================================================
-keyboard_mapping: enabled=0, map=
-
-#=======================================================================
-# KEYBOARD_TYPE:
-# Type of keyboard return by a "identify keyboard" command to the
-# keyboard controler. It must be one of "xt", "at" or "mf".
-# Defaults to "mf". It should be ok for almost everybody. A known
-# exception is french macs, that do have a "at"-like keyboard.
-#
-# Examples:
-#   keyboard_type: mf
-#=======================================================================
-#keyboard_type: mf
-
-#=======================================================================
-# USER_SHORTCUT:
-# This defines the keyboard shortcut to be sent when you press the "user"
-# button in the headerbar. The shortcut string is a combination of maximum
-# 3 key names (listed below) separated with a '-' character. The old-style
-# syntax (without the '-') still works for the key combinations supported
-# in Bochs 2.2.1.
-# Valid key names:
-# "alt", "bksl", "bksp", "ctrl", "del", "down", "end", "enter", "esc",
-# "f1", ... "f12", "home", "ins", "left", "menu", "minus", "pgdwn", "pgup",
-# "plus", "right", "shift", "space", "tab", "up", and "win".
-#
-# Example:
-#   user_shortcut: keys=ctrl-alt-del
-#=======================================================================
-#user_shortcut: keys=ctrl-alt-del
-
-#=======================================================================
-# I440FXSUPPORT:
-# This option controls the presence of the i440FX PCI chipset. You can
-# also specify the devices connected to PCI slots. Up to 5 slots are
-# available now. These devices are currently supported: ne2k, pcivga,
-# pcidev and pcipnic. If Bochs is compiled with Cirrus SVGA support
-# you'll have the additional choice 'cirrus'.
-#
-# Example:
-#   i440fxsupport: enabled=1, slot1=pcivga, slot2=ne2k
-#=======================================================================
-#i440fxsupport: enabled=1
-
-#=======================================================================
-# USB1:
-# This option controls the presence of the USB root hub which is a part
-# of the i440FX PCI chipset. With the portX option you can connect devices
-# to the hub (currently supported: 'mouse' and 'keypad'). If you connect
-# the mouse to one of the ports and use the mouse option 'type=usb' you'll
-# have a 3-button USB mouse.
-#
-# Example:
-#   usb1: enabled=1, port1=mouse, port2=keypad
-#=======================================================================
-#usb1: enabled=1
-
-#=======================================================================
-# CMOSIMAGE:
-# This defines image file that can be loaded into the CMOS RAM at startup.
-# The rtc_init parameter controls whether initialize the RTC with values stored
-# in the image. By default the time0 argument given to the clock option is used.
-# With 'rtc_init=image' the image is the source for the initial time.
-#
-# Example:
-#   cmosimage: file=cmos.img, rtc_init=image
-#=======================================================================
-#cmosimage: file=cmos.img, rtc_init=time0
-
-#=======================================================================
-# other stuff
-#=======================================================================
-#magic_break: enabled=1
-#load32bitOSImage: os=nullkernel, path=../kernel.img, iolog=../vga_io.log
-#load32bitOSImage: os=linux, path=../linux.img, iolog=../vga_io.log, initrd=../initrd.img
-#text_snapshot_check: enable
-
-#-------------------------
-# PCI host device mapping
-#-------------------------
-#pcidev: vendor=0x1234, device=0x5678
-
-#=======================================================================
-# GDBSTUB:
-# Enable GDB stub. See user documentation for details.
-# Default value is enabled=0.
-#=======================================================================
-#gdbstub: enabled=0, port=1234, text_base=0, data_base=0, bss_base=0
-
-#=======================================================================
-# IPS:
-# The IPS directive is DEPRECATED. Use the parameter IPS of the CPU
-# directive instead.
-#=======================================================================
-#ips: 10000000
-
-#=======================================================================
-# for Macintosh, use the style of pathnames in the following
-# examples.
-#
-# vgaromimage: :bios:VGABIOS-elpin-2.40
-# romimage: file=:bios:BIOS-bochs-latest, address=0xf0000
-# floppya: 1_44=[fd:], status=inserted
-#=======================================================================
Binary files xv6-public/_drawtest and xv6-public-mynew/_drawtest differ
diff -ruN xv6-public/drawtest.asm xv6-public-mynew/drawtest.asm
--- xv6-public/drawtest.asm	2022-09-05 09:51:06.594999177 +0530
+++ xv6-public-mynew/drawtest.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1237 +0,0 @@
-
-_drawtest:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-
-//maximum size of the buffer
-const int max_size = 15780;
-
-int main(void)
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	53                   	push   %ebx
-  12:	51                   	push   %ecx
-
-    // Created a buffer with maximum size as max_size 
-    void *draw_buffer = malloc(max_size);
-  13:	83 ec 0c             	sub    $0xc,%esp
-  16:	68 a4 3d 00 00       	push   $0x3da4
-  1b:	e8 90 06 00 00       	call   6b0 <malloc>
-
-    // Called the system call and stored the size of image.
-    int draw_size = draw(draw_buffer, max_size);
-  20:	59                   	pop    %ecx
-  21:	5a                   	pop    %edx
-  22:	68 a4 3d 00 00       	push   $0x3da4
-  27:	50                   	push   %eax
-    void *draw_buffer = malloc(max_size);
-  28:	89 c3                	mov    %eax,%ebx
-    int draw_size = draw(draw_buffer, max_size);
-  2a:	e8 44 03 00 00       	call   373 <draw>
-
-    // If the size of image is in buffer is greater than max_size then print a error message
-    if (draw_size == -1)
-  2f:	83 c4 10             	add    $0x10,%esp
-  32:	83 f8 ff             	cmp    $0xffffffff,%eax
-  35:	74 1d                	je     54 <main+0x54>
-        printf(1, "Buffer size is too small\n");
-    }
-    else
-    {
-         // file descriptor 1 used to print on the standard output i.e (stdout)
-        printf(1, "%s\n", (char *)draw_buffer);
-  37:	50                   	push   %eax
-  38:	53                   	push   %ebx
-  39:	68 d2 07 00 00       	push   $0x7d2
-  3e:	6a 01                	push   $0x1
-  40:	e8 0b 04 00 00       	call   450 <printf>
-  45:	83 c4 10             	add    $0x10,%esp
-    }
-
-    return 0;
-}
-  48:	8d 65 f8             	lea    -0x8(%ebp),%esp
-  4b:	31 c0                	xor    %eax,%eax
-  4d:	59                   	pop    %ecx
-  4e:	5b                   	pop    %ebx
-  4f:	5d                   	pop    %ebp
-  50:	8d 61 fc             	lea    -0x4(%ecx),%esp
-  53:	c3                   	ret    
-        printf(1, "Buffer size is too small\n");
-  54:	52                   	push   %edx
-  55:	52                   	push   %edx
-  56:	68 b8 07 00 00       	push   $0x7b8
-  5b:	6a 01                	push   $0x1
-  5d:	e8 ee 03 00 00       	call   450 <printf>
-  62:	83 c4 10             	add    $0x10,%esp
-  65:	eb e1                	jmp    48 <main+0x48>
-  67:	66 90                	xchg   %ax,%ax
-  69:	66 90                	xchg   %ax,%ax
-  6b:	66 90                	xchg   %ax,%ax
-  6d:	66 90                	xchg   %ax,%ax
-  6f:	90                   	nop
-
-00000070 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  70:	f3 0f 1e fb          	endbr32 
-  74:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  75:	31 c0                	xor    %eax,%eax
-{
-  77:	89 e5                	mov    %esp,%ebp
-  79:	53                   	push   %ebx
-  7a:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  7d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
-  80:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  84:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  87:	83 c0 01             	add    $0x1,%eax
-  8a:	84 d2                	test   %dl,%dl
-  8c:	75 f2                	jne    80 <strcpy+0x10>
-    ;
-  return os;
-}
-  8e:	89 c8                	mov    %ecx,%eax
-  90:	5b                   	pop    %ebx
-  91:	5d                   	pop    %ebp
-  92:	c3                   	ret    
-  93:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000000a0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  a0:	f3 0f 1e fb          	endbr32 
-  a4:	55                   	push   %ebp
-  a5:	89 e5                	mov    %esp,%ebp
-  a7:	53                   	push   %ebx
-  a8:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  ab:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
-  ae:	0f b6 01             	movzbl (%ecx),%eax
-  b1:	0f b6 1a             	movzbl (%edx),%ebx
-  b4:	84 c0                	test   %al,%al
-  b6:	75 19                	jne    d1 <strcmp+0x31>
-  b8:	eb 26                	jmp    e0 <strcmp+0x40>
-  ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  c0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
-  c4:	83 c1 01             	add    $0x1,%ecx
-  c7:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
-  ca:	0f b6 1a             	movzbl (%edx),%ebx
-  cd:	84 c0                	test   %al,%al
-  cf:	74 0f                	je     e0 <strcmp+0x40>
-  d1:	38 d8                	cmp    %bl,%al
-  d3:	74 eb                	je     c0 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
-  d5:	29 d8                	sub    %ebx,%eax
-}
-  d7:	5b                   	pop    %ebx
-  d8:	5d                   	pop    %ebp
-  d9:	c3                   	ret    
-  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  e0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
-  e2:	29 d8                	sub    %ebx,%eax
-}
-  e4:	5b                   	pop    %ebx
-  e5:	5d                   	pop    %ebp
-  e6:	c3                   	ret    
-  e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  ee:	66 90                	xchg   %ax,%ax
-
-000000f0 <strlen>:
-
-uint
-strlen(const char *s)
-{
-  f0:	f3 0f 1e fb          	endbr32 
-  f4:	55                   	push   %ebp
-  f5:	89 e5                	mov    %esp,%ebp
-  f7:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
-  fa:	80 3a 00             	cmpb   $0x0,(%edx)
-  fd:	74 21                	je     120 <strlen+0x30>
-  ff:	31 c0                	xor    %eax,%eax
- 101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 108:	83 c0 01             	add    $0x1,%eax
- 10b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 10f:	89 c1                	mov    %eax,%ecx
- 111:	75 f5                	jne    108 <strlen+0x18>
-    ;
-  return n;
-}
- 113:	89 c8                	mov    %ecx,%eax
- 115:	5d                   	pop    %ebp
- 116:	c3                   	ret    
- 117:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 11e:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 120:	31 c9                	xor    %ecx,%ecx
-}
- 122:	5d                   	pop    %ebp
- 123:	89 c8                	mov    %ecx,%eax
- 125:	c3                   	ret    
- 126:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 12d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000130 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 130:	f3 0f 1e fb          	endbr32 
- 134:	55                   	push   %ebp
- 135:	89 e5                	mov    %esp,%ebp
- 137:	57                   	push   %edi
- 138:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 13b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 13e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 141:	89 d7                	mov    %edx,%edi
- 143:	fc                   	cld    
- 144:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 146:	89 d0                	mov    %edx,%eax
- 148:	5f                   	pop    %edi
- 149:	5d                   	pop    %ebp
- 14a:	c3                   	ret    
- 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 14f:	90                   	nop
-
-00000150 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 150:	f3 0f 1e fb          	endbr32 
- 154:	55                   	push   %ebp
- 155:	89 e5                	mov    %esp,%ebp
- 157:	8b 45 08             	mov    0x8(%ebp),%eax
- 15a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 15e:	0f b6 10             	movzbl (%eax),%edx
- 161:	84 d2                	test   %dl,%dl
- 163:	75 16                	jne    17b <strchr+0x2b>
- 165:	eb 21                	jmp    188 <strchr+0x38>
- 167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 16e:	66 90                	xchg   %ax,%ax
- 170:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 174:	83 c0 01             	add    $0x1,%eax
- 177:	84 d2                	test   %dl,%dl
- 179:	74 0d                	je     188 <strchr+0x38>
-    if(*s == c)
- 17b:	38 d1                	cmp    %dl,%cl
- 17d:	75 f1                	jne    170 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 17f:	5d                   	pop    %ebp
- 180:	c3                   	ret    
- 181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 188:	31 c0                	xor    %eax,%eax
-}
- 18a:	5d                   	pop    %ebp
- 18b:	c3                   	ret    
- 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000190 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 190:	f3 0f 1e fb          	endbr32 
- 194:	55                   	push   %ebp
- 195:	89 e5                	mov    %esp,%ebp
- 197:	57                   	push   %edi
- 198:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 199:	31 f6                	xor    %esi,%esi
-{
- 19b:	53                   	push   %ebx
- 19c:	89 f3                	mov    %esi,%ebx
- 19e:	83 ec 1c             	sub    $0x1c,%esp
- 1a1:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 1a4:	eb 33                	jmp    1d9 <gets+0x49>
- 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1ad:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 1b0:	83 ec 04             	sub    $0x4,%esp
- 1b3:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 1b6:	6a 01                	push   $0x1
- 1b8:	50                   	push   %eax
- 1b9:	6a 00                	push   $0x0
- 1bb:	e8 2b 01 00 00       	call   2eb <read>
-    if(cc < 1)
- 1c0:	83 c4 10             	add    $0x10,%esp
- 1c3:	85 c0                	test   %eax,%eax
- 1c5:	7e 1c                	jle    1e3 <gets+0x53>
-      break;
-    buf[i++] = c;
- 1c7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 1cb:	83 c7 01             	add    $0x1,%edi
- 1ce:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 1d1:	3c 0a                	cmp    $0xa,%al
- 1d3:	74 23                	je     1f8 <gets+0x68>
- 1d5:	3c 0d                	cmp    $0xd,%al
- 1d7:	74 1f                	je     1f8 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 1d9:	83 c3 01             	add    $0x1,%ebx
- 1dc:	89 fe                	mov    %edi,%esi
- 1de:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1e1:	7c cd                	jl     1b0 <gets+0x20>
- 1e3:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 1e5:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 1e8:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 1eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1ee:	5b                   	pop    %ebx
- 1ef:	5e                   	pop    %esi
- 1f0:	5f                   	pop    %edi
- 1f1:	5d                   	pop    %ebp
- 1f2:	c3                   	ret    
- 1f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 1f7:	90                   	nop
- 1f8:	8b 75 08             	mov    0x8(%ebp),%esi
- 1fb:	8b 45 08             	mov    0x8(%ebp),%eax
- 1fe:	01 de                	add    %ebx,%esi
- 200:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 202:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 205:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 208:	5b                   	pop    %ebx
- 209:	5e                   	pop    %esi
- 20a:	5f                   	pop    %edi
- 20b:	5d                   	pop    %ebp
- 20c:	c3                   	ret    
- 20d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000210 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 210:	f3 0f 1e fb          	endbr32 
- 214:	55                   	push   %ebp
- 215:	89 e5                	mov    %esp,%ebp
- 217:	56                   	push   %esi
- 218:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 219:	83 ec 08             	sub    $0x8,%esp
- 21c:	6a 00                	push   $0x0
- 21e:	ff 75 08             	pushl  0x8(%ebp)
- 221:	e8 ed 00 00 00       	call   313 <open>
-  if(fd < 0)
- 226:	83 c4 10             	add    $0x10,%esp
- 229:	85 c0                	test   %eax,%eax
- 22b:	78 2b                	js     258 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 22d:	83 ec 08             	sub    $0x8,%esp
- 230:	ff 75 0c             	pushl  0xc(%ebp)
- 233:	89 c3                	mov    %eax,%ebx
- 235:	50                   	push   %eax
- 236:	e8 f0 00 00 00       	call   32b <fstat>
-  close(fd);
- 23b:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 23e:	89 c6                	mov    %eax,%esi
-  close(fd);
- 240:	e8 b6 00 00 00       	call   2fb <close>
-  return r;
- 245:	83 c4 10             	add    $0x10,%esp
-}
- 248:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 24b:	89 f0                	mov    %esi,%eax
- 24d:	5b                   	pop    %ebx
- 24e:	5e                   	pop    %esi
- 24f:	5d                   	pop    %ebp
- 250:	c3                   	ret    
- 251:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 258:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 25d:	eb e9                	jmp    248 <stat+0x38>
- 25f:	90                   	nop
-
-00000260 <atoi>:
-
-int
-atoi(const char *s)
-{
- 260:	f3 0f 1e fb          	endbr32 
- 264:	55                   	push   %ebp
- 265:	89 e5                	mov    %esp,%ebp
- 267:	53                   	push   %ebx
- 268:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 26b:	0f be 02             	movsbl (%edx),%eax
- 26e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 271:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 274:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 279:	77 1a                	ja     295 <atoi+0x35>
- 27b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 27f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 280:	83 c2 01             	add    $0x1,%edx
- 283:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 286:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 28a:	0f be 02             	movsbl (%edx),%eax
- 28d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 290:	80 fb 09             	cmp    $0x9,%bl
- 293:	76 eb                	jbe    280 <atoi+0x20>
-  return n;
-}
- 295:	89 c8                	mov    %ecx,%eax
- 297:	5b                   	pop    %ebx
- 298:	5d                   	pop    %ebp
- 299:	c3                   	ret    
- 29a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000002a0 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 2a0:	f3 0f 1e fb          	endbr32 
- 2a4:	55                   	push   %ebp
- 2a5:	89 e5                	mov    %esp,%ebp
- 2a7:	57                   	push   %edi
- 2a8:	8b 45 10             	mov    0x10(%ebp),%eax
- 2ab:	8b 55 08             	mov    0x8(%ebp),%edx
- 2ae:	56                   	push   %esi
- 2af:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 2b2:	85 c0                	test   %eax,%eax
- 2b4:	7e 0f                	jle    2c5 <memmove+0x25>
- 2b6:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 2b8:	89 d7                	mov    %edx,%edi
- 2ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 2c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 2c1:	39 f8                	cmp    %edi,%eax
- 2c3:	75 fb                	jne    2c0 <memmove+0x20>
-  return vdst;
-}
- 2c5:	5e                   	pop    %esi
- 2c6:	89 d0                	mov    %edx,%eax
- 2c8:	5f                   	pop    %edi
- 2c9:	5d                   	pop    %ebp
- 2ca:	c3                   	ret    
-
-000002cb <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2cb:	b8 01 00 00 00       	mov    $0x1,%eax
- 2d0:	cd 40                	int    $0x40
- 2d2:	c3                   	ret    
-
-000002d3 <exit>:
-SYSCALL(exit)
- 2d3:	b8 02 00 00 00       	mov    $0x2,%eax
- 2d8:	cd 40                	int    $0x40
- 2da:	c3                   	ret    
-
-000002db <wait>:
-SYSCALL(wait)
- 2db:	b8 03 00 00 00       	mov    $0x3,%eax
- 2e0:	cd 40                	int    $0x40
- 2e2:	c3                   	ret    
-
-000002e3 <pipe>:
-SYSCALL(pipe)
- 2e3:	b8 04 00 00 00       	mov    $0x4,%eax
- 2e8:	cd 40                	int    $0x40
- 2ea:	c3                   	ret    
-
-000002eb <read>:
-SYSCALL(read)
- 2eb:	b8 05 00 00 00       	mov    $0x5,%eax
- 2f0:	cd 40                	int    $0x40
- 2f2:	c3                   	ret    
-
-000002f3 <write>:
-SYSCALL(write)
- 2f3:	b8 10 00 00 00       	mov    $0x10,%eax
- 2f8:	cd 40                	int    $0x40
- 2fa:	c3                   	ret    
-
-000002fb <close>:
-SYSCALL(close)
- 2fb:	b8 15 00 00 00       	mov    $0x15,%eax
- 300:	cd 40                	int    $0x40
- 302:	c3                   	ret    
-
-00000303 <kill>:
-SYSCALL(kill)
- 303:	b8 06 00 00 00       	mov    $0x6,%eax
- 308:	cd 40                	int    $0x40
- 30a:	c3                   	ret    
-
-0000030b <exec>:
-SYSCALL(exec)
- 30b:	b8 07 00 00 00       	mov    $0x7,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret    
-
-00000313 <open>:
-SYSCALL(open)
- 313:	b8 0f 00 00 00       	mov    $0xf,%eax
- 318:	cd 40                	int    $0x40
- 31a:	c3                   	ret    
-
-0000031b <mknod>:
-SYSCALL(mknod)
- 31b:	b8 11 00 00 00       	mov    $0x11,%eax
- 320:	cd 40                	int    $0x40
- 322:	c3                   	ret    
-
-00000323 <unlink>:
-SYSCALL(unlink)
- 323:	b8 12 00 00 00       	mov    $0x12,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret    
-
-0000032b <fstat>:
-SYSCALL(fstat)
- 32b:	b8 08 00 00 00       	mov    $0x8,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret    
-
-00000333 <link>:
-SYSCALL(link)
- 333:	b8 13 00 00 00       	mov    $0x13,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret    
-
-0000033b <mkdir>:
-SYSCALL(mkdir)
- 33b:	b8 14 00 00 00       	mov    $0x14,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret    
-
-00000343 <chdir>:
-SYSCALL(chdir)
- 343:	b8 09 00 00 00       	mov    $0x9,%eax
- 348:	cd 40                	int    $0x40
- 34a:	c3                   	ret    
-
-0000034b <dup>:
-SYSCALL(dup)
- 34b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret    
-
-00000353 <getpid>:
-SYSCALL(getpid)
- 353:	b8 0b 00 00 00       	mov    $0xb,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret    
-
-0000035b <sbrk>:
-SYSCALL(sbrk)
- 35b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret    
-
-00000363 <sleep>:
-SYSCALL(sleep)
- 363:	b8 0d 00 00 00       	mov    $0xd,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret    
-
-0000036b <uptime>:
-SYSCALL(uptime)
- 36b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret    
-
-00000373 <draw>:
-SYSCALL(draw)
- 373:	b8 16 00 00 00       	mov    $0x16,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret    
-
-0000037b <thread_create>:
-SYSCALL(thread_create)
- 37b:	b8 18 00 00 00       	mov    $0x18,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret    
-
-00000383 <thread_join>:
-SYSCALL(thread_join)
- 383:	b8 19 00 00 00       	mov    $0x19,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret    
-
-0000038b <thread_exit>:
-SYSCALL(thread_exit)
- 38b:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 390:	cd 40                	int    $0x40
- 392:	c3                   	ret    
- 393:	66 90                	xchg   %ax,%ax
- 395:	66 90                	xchg   %ax,%ax
- 397:	66 90                	xchg   %ax,%ax
- 399:	66 90                	xchg   %ax,%ax
- 39b:	66 90                	xchg   %ax,%ax
- 39d:	66 90                	xchg   %ax,%ax
- 39f:	90                   	nop
-
-000003a0 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3a0:	55                   	push   %ebp
- 3a1:	89 e5                	mov    %esp,%ebp
- 3a3:	57                   	push   %edi
- 3a4:	56                   	push   %esi
- 3a5:	53                   	push   %ebx
- 3a6:	83 ec 3c             	sub    $0x3c,%esp
- 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 3ac:	89 d1                	mov    %edx,%ecx
-{
- 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 3b1:	85 d2                	test   %edx,%edx
- 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
- 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3bd:	74 79                	je     438 <printint+0x98>
-    neg = 1;
- 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 3c6:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 3c8:	31 db                	xor    %ebx,%ebx
- 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3cd:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 3d0:	89 c8                	mov    %ecx,%eax
- 3d2:	31 d2                	xor    %edx,%edx
- 3d4:	89 cf                	mov    %ecx,%edi
- 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3d9:	0f b6 92 e4 07 00 00 	movzbl 0x7e4(%edx),%edx
- 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3e3:	89 d8                	mov    %ebx,%eax
- 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3f1:	76 dd                	jbe    3d0 <printint+0x30>
-  if(neg)
- 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3f6:	85 c9                	test   %ecx,%ecx
- 3f8:	74 0c                	je     406 <printint+0x66>
-    buf[i++] = '-';
- 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 3ff:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 40d:	eb 07                	jmp    416 <printint+0x76>
- 40f:	90                   	nop
- 410:	0f b6 13             	movzbl (%ebx),%edx
- 413:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 416:	83 ec 04             	sub    $0x4,%esp
- 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 41c:	6a 01                	push   $0x1
- 41e:	56                   	push   %esi
- 41f:	57                   	push   %edi
- 420:	e8 ce fe ff ff       	call   2f3 <write>
-  while(--i >= 0)
- 425:	83 c4 10             	add    $0x10,%esp
- 428:	39 de                	cmp    %ebx,%esi
- 42a:	75 e4                	jne    410 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 42f:	5b                   	pop    %ebx
- 430:	5e                   	pop    %esi
- 431:	5f                   	pop    %edi
- 432:	5d                   	pop    %ebp
- 433:	c3                   	ret    
- 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 43f:	eb 87                	jmp    3c8 <printint+0x28>
- 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 44f:	90                   	nop
-
-00000450 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 450:	f3 0f 1e fb          	endbr32 
- 454:	55                   	push   %ebp
- 455:	89 e5                	mov    %esp,%ebp
- 457:	57                   	push   %edi
- 458:	56                   	push   %esi
- 459:	53                   	push   %ebx
- 45a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 45d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 460:	0f b6 1e             	movzbl (%esi),%ebx
- 463:	84 db                	test   %bl,%bl
- 465:	0f 84 b4 00 00 00    	je     51f <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 46b:	8d 45 10             	lea    0x10(%ebp),%eax
- 46e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 471:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 474:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 476:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 479:	eb 33                	jmp    4ae <printf+0x5e>
- 47b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 47f:	90                   	nop
- 480:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 483:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 488:	83 f8 25             	cmp    $0x25,%eax
- 48b:	74 17                	je     4a4 <printf+0x54>
-  write(fd, &c, 1);
- 48d:	83 ec 04             	sub    $0x4,%esp
- 490:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 493:	6a 01                	push   $0x1
- 495:	57                   	push   %edi
- 496:	ff 75 08             	pushl  0x8(%ebp)
- 499:	e8 55 fe ff ff       	call   2f3 <write>
- 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 4a1:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 4a4:	0f b6 1e             	movzbl (%esi),%ebx
- 4a7:	83 c6 01             	add    $0x1,%esi
- 4aa:	84 db                	test   %bl,%bl
- 4ac:	74 71                	je     51f <printf+0xcf>
-    c = fmt[i] & 0xff;
- 4ae:	0f be cb             	movsbl %bl,%ecx
- 4b1:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 4b4:	85 d2                	test   %edx,%edx
- 4b6:	74 c8                	je     480 <printf+0x30>
-      }
-    } else if(state == '%'){
- 4b8:	83 fa 25             	cmp    $0x25,%edx
- 4bb:	75 e7                	jne    4a4 <printf+0x54>
-      if(c == 'd'){
- 4bd:	83 f8 64             	cmp    $0x64,%eax
- 4c0:	0f 84 9a 00 00 00    	je     560 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 4c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4cc:	83 f9 70             	cmp    $0x70,%ecx
- 4cf:	74 5f                	je     530 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 4d1:	83 f8 73             	cmp    $0x73,%eax
- 4d4:	0f 84 d6 00 00 00    	je     5b0 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 4da:	83 f8 63             	cmp    $0x63,%eax
- 4dd:	0f 84 8d 00 00 00    	je     570 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 4e3:	83 f8 25             	cmp    $0x25,%eax
- 4e6:	0f 84 b4 00 00 00    	je     5a0 <printf+0x150>
-  write(fd, &c, 1);
- 4ec:	83 ec 04             	sub    $0x4,%esp
- 4ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4f3:	6a 01                	push   $0x1
- 4f5:	57                   	push   %edi
- 4f6:	ff 75 08             	pushl  0x8(%ebp)
- 4f9:	e8 f5 fd ff ff       	call   2f3 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 4fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 501:	83 c4 0c             	add    $0xc,%esp
- 504:	6a 01                	push   $0x1
- 506:	83 c6 01             	add    $0x1,%esi
- 509:	57                   	push   %edi
- 50a:	ff 75 08             	pushl  0x8(%ebp)
- 50d:	e8 e1 fd ff ff       	call   2f3 <write>
-  for(i = 0; fmt[i]; i++){
- 512:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 516:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 519:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 51b:	84 db                	test   %bl,%bl
- 51d:	75 8f                	jne    4ae <printf+0x5e>
-    }
-  }
-}
- 51f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 522:	5b                   	pop    %ebx
- 523:	5e                   	pop    %esi
- 524:	5f                   	pop    %edi
- 525:	5d                   	pop    %ebp
- 526:	c3                   	ret    
- 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 52e:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 530:	83 ec 0c             	sub    $0xc,%esp
- 533:	b9 10 00 00 00       	mov    $0x10,%ecx
- 538:	6a 00                	push   $0x0
- 53a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 53d:	8b 45 08             	mov    0x8(%ebp),%eax
- 540:	8b 13                	mov    (%ebx),%edx
- 542:	e8 59 fe ff ff       	call   3a0 <printint>
-        ap++;
- 547:	89 d8                	mov    %ebx,%eax
- 549:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 54c:	31 d2                	xor    %edx,%edx
-        ap++;
- 54e:	83 c0 04             	add    $0x4,%eax
- 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 554:	e9 4b ff ff ff       	jmp    4a4 <printf+0x54>
- 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 560:	83 ec 0c             	sub    $0xc,%esp
- 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 568:	6a 01                	push   $0x1
- 56a:	eb ce                	jmp    53a <printf+0xea>
- 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 573:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 576:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 578:	6a 01                	push   $0x1
-        ap++;
- 57a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 57d:	57                   	push   %edi
- 57e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 581:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 584:	e8 6a fd ff ff       	call   2f3 <write>
-        ap++;
- 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 58c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 58f:	31 d2                	xor    %edx,%edx
- 591:	e9 0e ff ff ff       	jmp    4a4 <printf+0x54>
- 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 59d:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 5a3:	83 ec 04             	sub    $0x4,%esp
- 5a6:	e9 59 ff ff ff       	jmp    504 <printf+0xb4>
- 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5af:	90                   	nop
-        s = (char*)*ap;
- 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5b3:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 5b5:	83 c0 04             	add    $0x4,%eax
- 5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 5bb:	85 db                	test   %ebx,%ebx
- 5bd:	74 17                	je     5d6 <printf+0x186>
-        while(*s != 0){
- 5bf:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 5c2:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 5c4:	84 c0                	test   %al,%al
- 5c6:	0f 84 d8 fe ff ff    	je     4a4 <printf+0x54>
- 5cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5cf:	89 de                	mov    %ebx,%esi
- 5d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5d4:	eb 1a                	jmp    5f0 <printf+0x1a0>
-          s = "(null)";
- 5d6:	bb dc 07 00 00       	mov    $0x7dc,%ebx
-        while(*s != 0){
- 5db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5de:	b8 28 00 00 00       	mov    $0x28,%eax
- 5e3:	89 de                	mov    %ebx,%esi
- 5e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5ef:	90                   	nop
-  write(fd, &c, 1);
- 5f0:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 5f3:	83 c6 01             	add    $0x1,%esi
- 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 5f9:	6a 01                	push   $0x1
- 5fb:	57                   	push   %edi
- 5fc:	53                   	push   %ebx
- 5fd:	e8 f1 fc ff ff       	call   2f3 <write>
-        while(*s != 0){
- 602:	0f b6 06             	movzbl (%esi),%eax
- 605:	83 c4 10             	add    $0x10,%esp
- 608:	84 c0                	test   %al,%al
- 60a:	75 e4                	jne    5f0 <printf+0x1a0>
- 60c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 60f:	31 d2                	xor    %edx,%edx
- 611:	e9 8e fe ff ff       	jmp    4a4 <printf+0x54>
- 616:	66 90                	xchg   %ax,%ax
- 618:	66 90                	xchg   %ax,%ax
- 61a:	66 90                	xchg   %ax,%ax
- 61c:	66 90                	xchg   %ax,%ax
- 61e:	66 90                	xchg   %ax,%ax
-
-00000620 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 620:	f3 0f 1e fb          	endbr32 
- 624:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 625:	a1 a0 0a 00 00       	mov    0xaa0,%eax
-{
- 62a:	89 e5                	mov    %esp,%ebp
- 62c:	57                   	push   %edi
- 62d:	56                   	push   %esi
- 62e:	53                   	push   %ebx
- 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 632:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 634:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 637:	39 c8                	cmp    %ecx,%eax
- 639:	73 15                	jae    650 <free+0x30>
- 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 63f:	90                   	nop
- 640:	39 d1                	cmp    %edx,%ecx
- 642:	72 14                	jb     658 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 644:	39 d0                	cmp    %edx,%eax
- 646:	73 10                	jae    658 <free+0x38>
-{
- 648:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 64a:	8b 10                	mov    (%eax),%edx
- 64c:	39 c8                	cmp    %ecx,%eax
- 64e:	72 f0                	jb     640 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 650:	39 d0                	cmp    %edx,%eax
- 652:	72 f4                	jb     648 <free+0x28>
- 654:	39 d1                	cmp    %edx,%ecx
- 656:	73 f0                	jae    648 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 65e:	39 fa                	cmp    %edi,%edx
- 660:	74 1e                	je     680 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 662:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 665:	8b 50 04             	mov    0x4(%eax),%edx
- 668:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 66b:	39 f1                	cmp    %esi,%ecx
- 66d:	74 28                	je     697 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 66f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 671:	5b                   	pop    %ebx
-  freep = p;
- 672:	a3 a0 0a 00 00       	mov    %eax,0xaa0
-}
- 677:	5e                   	pop    %esi
- 678:	5f                   	pop    %edi
- 679:	5d                   	pop    %ebp
- 67a:	c3                   	ret    
- 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 67f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 680:	03 72 04             	add    0x4(%edx),%esi
- 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 686:	8b 10                	mov    (%eax),%edx
- 688:	8b 12                	mov    (%edx),%edx
- 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 68d:	8b 50 04             	mov    0x4(%eax),%edx
- 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 693:	39 f1                	cmp    %esi,%ecx
- 695:	75 d8                	jne    66f <free+0x4f>
-    p->s.size += bp->s.size;
- 697:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 69a:	a3 a0 0a 00 00       	mov    %eax,0xaa0
-    p->s.size += bp->s.size;
- 69f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 6a5:	89 10                	mov    %edx,(%eax)
-}
- 6a7:	5b                   	pop    %ebx
- 6a8:	5e                   	pop    %esi
- 6a9:	5f                   	pop    %edi
- 6aa:	5d                   	pop    %ebp
- 6ab:	c3                   	ret    
- 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000006b0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 6b0:	f3 0f 1e fb          	endbr32 
- 6b4:	55                   	push   %ebp
- 6b5:	89 e5                	mov    %esp,%ebp
- 6b7:	57                   	push   %edi
- 6b8:	56                   	push   %esi
- 6b9:	53                   	push   %ebx
- 6ba:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6bd:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 6c0:	8b 3d a0 0a 00 00    	mov    0xaa0,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6c6:	8d 70 07             	lea    0x7(%eax),%esi
- 6c9:	c1 ee 03             	shr    $0x3,%esi
- 6cc:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 6cf:	85 ff                	test   %edi,%edi
- 6d1:	0f 84 a9 00 00 00    	je     780 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6d7:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 6d9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6dc:	39 f1                	cmp    %esi,%ecx
- 6de:	73 6d                	jae    74d <malloc+0x9d>
- 6e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6eb:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 6ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6f8:	eb 17                	jmp    711 <malloc+0x61>
- 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 700:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 702:	8b 4a 04             	mov    0x4(%edx),%ecx
- 705:	39 f1                	cmp    %esi,%ecx
- 707:	73 4f                	jae    758 <malloc+0xa8>
- 709:	8b 3d a0 0a 00 00    	mov    0xaa0,%edi
- 70f:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 711:	39 c7                	cmp    %eax,%edi
- 713:	75 eb                	jne    700 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 715:	83 ec 0c             	sub    $0xc,%esp
- 718:	ff 75 e4             	pushl  -0x1c(%ebp)
- 71b:	e8 3b fc ff ff       	call   35b <sbrk>
-  if(p == (char*)-1)
- 720:	83 c4 10             	add    $0x10,%esp
- 723:	83 f8 ff             	cmp    $0xffffffff,%eax
- 726:	74 1b                	je     743 <malloc+0x93>
-  hp->s.size = nu;
- 728:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 72b:	83 ec 0c             	sub    $0xc,%esp
- 72e:	83 c0 08             	add    $0x8,%eax
- 731:	50                   	push   %eax
- 732:	e8 e9 fe ff ff       	call   620 <free>
-  return freep;
- 737:	a1 a0 0a 00 00       	mov    0xaa0,%eax
-      if((p = morecore(nunits)) == 0)
- 73c:	83 c4 10             	add    $0x10,%esp
- 73f:	85 c0                	test   %eax,%eax
- 741:	75 bd                	jne    700 <malloc+0x50>
-        return 0;
-  }
-}
- 743:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 746:	31 c0                	xor    %eax,%eax
-}
- 748:	5b                   	pop    %ebx
- 749:	5e                   	pop    %esi
- 74a:	5f                   	pop    %edi
- 74b:	5d                   	pop    %ebp
- 74c:	c3                   	ret    
-    if(p->s.size >= nunits){
- 74d:	89 c2                	mov    %eax,%edx
- 74f:	89 f8                	mov    %edi,%eax
- 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- 758:	39 ce                	cmp    %ecx,%esi
- 75a:	74 54                	je     7b0 <malloc+0x100>
-        p->s.size -= nunits;
- 75c:	29 f1                	sub    %esi,%ecx
- 75e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- 761:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- 764:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- 767:	a3 a0 0a 00 00       	mov    %eax,0xaa0
-}
- 76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 76f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- 772:	5b                   	pop    %ebx
- 773:	5e                   	pop    %esi
- 774:	5f                   	pop    %edi
- 775:	5d                   	pop    %ebp
- 776:	c3                   	ret    
- 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 77e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- 780:	c7 05 a0 0a 00 00 a4 	movl   $0xaa4,0xaa0
- 787:	0a 00 00 
-    base.s.size = 0;
- 78a:	bf a4 0a 00 00       	mov    $0xaa4,%edi
-    base.s.ptr = freep = prevp = &base;
- 78f:	c7 05 a4 0a 00 00 a4 	movl   $0xaa4,0xaa4
- 796:	0a 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 799:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- 79b:	c7 05 a8 0a 00 00 00 	movl   $0x0,0xaa8
- 7a2:	00 00 00 
-    if(p->s.size >= nunits){
- 7a5:	e9 36 ff ff ff       	jmp    6e0 <malloc+0x30>
- 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- 7b0:	8b 0a                	mov    (%edx),%ecx
- 7b2:	89 08                	mov    %ecx,(%eax)
- 7b4:	eb b1                	jmp    767 <malloc+0xb7>
diff -ruN xv6-public/drawtest.c xv6-public-mynew/drawtest.c
--- xv6-public/drawtest.c	2022-08-12 20:24:10.401463251 +0530
+++ xv6-public-mynew/drawtest.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,31 +0,0 @@
-
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-//maximum size of the buffer
-const int max_size = 15780;
-
-int main(void)
-{
-
-    // Created a buffer with maximum size as max_size 
-    void *draw_buffer = malloc(max_size);
-
-    // Called the system call and stored the size of image.
-    int draw_size = draw(draw_buffer, max_size);
-
-    // If the size of image is in buffer is greater than max_size then print a error message
-    if (draw_size == -1)
-    {
-        // file descriptor 1 used to print on the standard output i.e (stdout)
-        printf(1, "Buffer size is too small\n");
-    }
-    else
-    {
-         // file descriptor 1 used to print on the standard output i.e (stdout)
-        printf(1, "%s\n", (char *)draw_buffer);
-    }
-
-    return 0;
-}
diff -ruN xv6-public/drawtest.d xv6-public-mynew/drawtest.d
--- xv6-public/drawtest.d	2022-09-05 09:51:06.574999176 +0530
+++ xv6-public-mynew/drawtest.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-drawtest.o: drawtest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/drawtest.o and xv6-public-mynew/drawtest.o differ
diff -ruN xv6-public/drawtest.sym xv6-public-mynew/drawtest.sym
--- xv6-public/drawtest.sym	2022-09-05 09:51:06.598999177 +0530
+++ xv6-public-mynew/drawtest.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,62 +0,0 @@
-00000000 .text
-000007b8 .rodata
-000007f8 .eh_frame
-00000aa0 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 drawtest.c
-00000000 ulib.c
-00000000 printf.c
-000003a0 printint
-000007e4 digits.1097
-00000000 umalloc.c
-00000aa0 freep
-00000aa4 base
-00000070 strcpy
-00000450 printf
-0000038b thread_exit
-000002a0 memmove
-0000031b mknod
-00000190 gets
-00000353 getpid
-000006b0 malloc
-00000363 sleep
-000007d8 max_size
-000002e3 pipe
-000002f3 write
-0000032b fstat
-00000303 kill
-00000343 chdir
-0000030b exec
-000002db wait
-000002eb read
-00000323 unlink
-000002cb fork
-0000035b sbrk
-0000036b uptime
-00000aa0 __bss_start
-00000130 memset
-00000000 main
-000000a0 strcmp
-0000034b dup
-00000210 stat
-00000aa0 _edata
-00000aac _end
-00000333 link
-000002d3 exit
-00000260 atoi
-00000373 draw
-000000f0 strlen
-00000313 open
-00000150 strchr
-0000037b thread_create
-0000033b mkdir
-000002fb close
-00000383 thread_join
-00000620 free
Binary files xv6-public/_echo and xv6-public-mynew/_echo differ
diff -ruN xv6-public/echo.asm xv6-public-mynew/echo.asm
--- xv6-public/echo.asm	2022-09-05 09:51:05.006999131 +0530
+++ xv6-public-mynew/echo.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1223 +0,0 @@
-
-_echo:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	56                   	push   %esi
-  12:	53                   	push   %ebx
-  13:	51                   	push   %ecx
-  14:	83 ec 0c             	sub    $0xc,%esp
-  17:	8b 01                	mov    (%ecx),%eax
-  19:	8b 51 04             	mov    0x4(%ecx),%edx
-  int i;
-
-  for(i = 1; i < argc; i++)
-  1c:	83 f8 01             	cmp    $0x1,%eax
-  1f:	7e 4b                	jle    6c <main+0x6c>
-  21:	8d 5a 04             	lea    0x4(%edx),%ebx
-  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
-    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
-  27:	83 c3 04             	add    $0x4,%ebx
-  2a:	8b 43 fc             	mov    -0x4(%ebx),%eax
-  2d:	39 f3                	cmp    %esi,%ebx
-  2f:	74 26                	je     57 <main+0x57>
-  31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  38:	68 c8 07 00 00       	push   $0x7c8
-  3d:	83 c3 04             	add    $0x4,%ebx
-  40:	50                   	push   %eax
-  41:	68 ca 07 00 00       	push   $0x7ca
-  46:	6a 01                	push   $0x1
-  48:	e8 13 04 00 00       	call   460 <printf>
-  for(i = 1; i < argc; i++)
-  4d:	8b 43 fc             	mov    -0x4(%ebx),%eax
-    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
-  50:	83 c4 10             	add    $0x10,%esp
-  53:	39 f3                	cmp    %esi,%ebx
-  55:	75 e1                	jne    38 <main+0x38>
-  57:	68 cf 07 00 00       	push   $0x7cf
-  5c:	50                   	push   %eax
-  5d:	68 ca 07 00 00       	push   $0x7ca
-  62:	6a 01                	push   $0x1
-  64:	e8 f7 03 00 00       	call   460 <printf>
-  69:	83 c4 10             	add    $0x10,%esp
-  exit();
-  6c:	e8 72 02 00 00       	call   2e3 <exit>
-  71:	66 90                	xchg   %ax,%ax
-  73:	66 90                	xchg   %ax,%ax
-  75:	66 90                	xchg   %ax,%ax
-  77:	66 90                	xchg   %ax,%ax
-  79:	66 90                	xchg   %ax,%ax
-  7b:	66 90                	xchg   %ax,%ax
-  7d:	66 90                	xchg   %ax,%ax
-  7f:	90                   	nop
-
-00000080 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  80:	f3 0f 1e fb          	endbr32 
-  84:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  85:	31 c0                	xor    %eax,%eax
-{
-  87:	89 e5                	mov    %esp,%ebp
-  89:	53                   	push   %ebx
-  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
-  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  97:	83 c0 01             	add    $0x1,%eax
-  9a:	84 d2                	test   %dl,%dl
-  9c:	75 f2                	jne    90 <strcpy+0x10>
-    ;
-  return os;
-}
-  9e:	89 c8                	mov    %ecx,%eax
-  a0:	5b                   	pop    %ebx
-  a1:	5d                   	pop    %ebp
-  a2:	c3                   	ret    
-  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000000b0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  b0:	f3 0f 1e fb          	endbr32 
-  b4:	55                   	push   %ebp
-  b5:	89 e5                	mov    %esp,%ebp
-  b7:	53                   	push   %ebx
-  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
-  be:	0f b6 01             	movzbl (%ecx),%eax
-  c1:	0f b6 1a             	movzbl (%edx),%ebx
-  c4:	84 c0                	test   %al,%al
-  c6:	75 19                	jne    e1 <strcmp+0x31>
-  c8:	eb 26                	jmp    f0 <strcmp+0x40>
-  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
-  d4:	83 c1 01             	add    $0x1,%ecx
-  d7:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
-  da:	0f b6 1a             	movzbl (%edx),%ebx
-  dd:	84 c0                	test   %al,%al
-  df:	74 0f                	je     f0 <strcmp+0x40>
-  e1:	38 d8                	cmp    %bl,%al
-  e3:	74 eb                	je     d0 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
-  e5:	29 d8                	sub    %ebx,%eax
-}
-  e7:	5b                   	pop    %ebx
-  e8:	5d                   	pop    %ebp
-  e9:	c3                   	ret    
-  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  f0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
-  f2:	29 d8                	sub    %ebx,%eax
-}
-  f4:	5b                   	pop    %ebx
-  f5:	5d                   	pop    %ebp
-  f6:	c3                   	ret    
-  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  fe:	66 90                	xchg   %ax,%ax
-
-00000100 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 100:	f3 0f 1e fb          	endbr32 
- 104:	55                   	push   %ebp
- 105:	89 e5                	mov    %esp,%ebp
- 107:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 10a:	80 3a 00             	cmpb   $0x0,(%edx)
- 10d:	74 21                	je     130 <strlen+0x30>
- 10f:	31 c0                	xor    %eax,%eax
- 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 118:	83 c0 01             	add    $0x1,%eax
- 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 11f:	89 c1                	mov    %eax,%ecx
- 121:	75 f5                	jne    118 <strlen+0x18>
-    ;
-  return n;
-}
- 123:	89 c8                	mov    %ecx,%eax
- 125:	5d                   	pop    %ebp
- 126:	c3                   	ret    
- 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 12e:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 130:	31 c9                	xor    %ecx,%ecx
-}
- 132:	5d                   	pop    %ebp
- 133:	89 c8                	mov    %ecx,%eax
- 135:	c3                   	ret    
- 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 13d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000140 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 140:	f3 0f 1e fb          	endbr32 
- 144:	55                   	push   %ebp
- 145:	89 e5                	mov    %esp,%ebp
- 147:	57                   	push   %edi
- 148:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 151:	89 d7                	mov    %edx,%edi
- 153:	fc                   	cld    
- 154:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 156:	89 d0                	mov    %edx,%eax
- 158:	5f                   	pop    %edi
- 159:	5d                   	pop    %ebp
- 15a:	c3                   	ret    
- 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 15f:	90                   	nop
-
-00000160 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 160:	f3 0f 1e fb          	endbr32 
- 164:	55                   	push   %ebp
- 165:	89 e5                	mov    %esp,%ebp
- 167:	8b 45 08             	mov    0x8(%ebp),%eax
- 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 16e:	0f b6 10             	movzbl (%eax),%edx
- 171:	84 d2                	test   %dl,%dl
- 173:	75 16                	jne    18b <strchr+0x2b>
- 175:	eb 21                	jmp    198 <strchr+0x38>
- 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 17e:	66 90                	xchg   %ax,%ax
- 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 184:	83 c0 01             	add    $0x1,%eax
- 187:	84 d2                	test   %dl,%dl
- 189:	74 0d                	je     198 <strchr+0x38>
-    if(*s == c)
- 18b:	38 d1                	cmp    %dl,%cl
- 18d:	75 f1                	jne    180 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 18f:	5d                   	pop    %ebp
- 190:	c3                   	ret    
- 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 198:	31 c0                	xor    %eax,%eax
-}
- 19a:	5d                   	pop    %ebp
- 19b:	c3                   	ret    
- 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000001a0 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 1a0:	f3 0f 1e fb          	endbr32 
- 1a4:	55                   	push   %ebp
- 1a5:	89 e5                	mov    %esp,%ebp
- 1a7:	57                   	push   %edi
- 1a8:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1a9:	31 f6                	xor    %esi,%esi
-{
- 1ab:	53                   	push   %ebx
- 1ac:	89 f3                	mov    %esi,%ebx
- 1ae:	83 ec 1c             	sub    $0x1c,%esp
- 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 1b4:	eb 33                	jmp    1e9 <gets+0x49>
- 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1bd:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 1c0:	83 ec 04             	sub    $0x4,%esp
- 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 1c6:	6a 01                	push   $0x1
- 1c8:	50                   	push   %eax
- 1c9:	6a 00                	push   $0x0
- 1cb:	e8 2b 01 00 00       	call   2fb <read>
-    if(cc < 1)
- 1d0:	83 c4 10             	add    $0x10,%esp
- 1d3:	85 c0                	test   %eax,%eax
- 1d5:	7e 1c                	jle    1f3 <gets+0x53>
-      break;
-    buf[i++] = c;
- 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 1db:	83 c7 01             	add    $0x1,%edi
- 1de:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 1e1:	3c 0a                	cmp    $0xa,%al
- 1e3:	74 23                	je     208 <gets+0x68>
- 1e5:	3c 0d                	cmp    $0xd,%al
- 1e7:	74 1f                	je     208 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 1e9:	83 c3 01             	add    $0x1,%ebx
- 1ec:	89 fe                	mov    %edi,%esi
- 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1f1:	7c cd                	jl     1c0 <gets+0x20>
- 1f3:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 1f8:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1fe:	5b                   	pop    %ebx
- 1ff:	5e                   	pop    %esi
- 200:	5f                   	pop    %edi
- 201:	5d                   	pop    %ebp
- 202:	c3                   	ret    
- 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 207:	90                   	nop
- 208:	8b 75 08             	mov    0x8(%ebp),%esi
- 20b:	8b 45 08             	mov    0x8(%ebp),%eax
- 20e:	01 de                	add    %ebx,%esi
- 210:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 212:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 218:	5b                   	pop    %ebx
- 219:	5e                   	pop    %esi
- 21a:	5f                   	pop    %edi
- 21b:	5d                   	pop    %ebp
- 21c:	c3                   	ret    
- 21d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000220 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 220:	f3 0f 1e fb          	endbr32 
- 224:	55                   	push   %ebp
- 225:	89 e5                	mov    %esp,%ebp
- 227:	56                   	push   %esi
- 228:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 229:	83 ec 08             	sub    $0x8,%esp
- 22c:	6a 00                	push   $0x0
- 22e:	ff 75 08             	pushl  0x8(%ebp)
- 231:	e8 ed 00 00 00       	call   323 <open>
-  if(fd < 0)
- 236:	83 c4 10             	add    $0x10,%esp
- 239:	85 c0                	test   %eax,%eax
- 23b:	78 2b                	js     268 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 23d:	83 ec 08             	sub    $0x8,%esp
- 240:	ff 75 0c             	pushl  0xc(%ebp)
- 243:	89 c3                	mov    %eax,%ebx
- 245:	50                   	push   %eax
- 246:	e8 f0 00 00 00       	call   33b <fstat>
-  close(fd);
- 24b:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 24e:	89 c6                	mov    %eax,%esi
-  close(fd);
- 250:	e8 b6 00 00 00       	call   30b <close>
-  return r;
- 255:	83 c4 10             	add    $0x10,%esp
-}
- 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 25b:	89 f0                	mov    %esi,%eax
- 25d:	5b                   	pop    %ebx
- 25e:	5e                   	pop    %esi
- 25f:	5d                   	pop    %ebp
- 260:	c3                   	ret    
- 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 26d:	eb e9                	jmp    258 <stat+0x38>
- 26f:	90                   	nop
-
-00000270 <atoi>:
-
-int
-atoi(const char *s)
-{
- 270:	f3 0f 1e fb          	endbr32 
- 274:	55                   	push   %ebp
- 275:	89 e5                	mov    %esp,%ebp
- 277:	53                   	push   %ebx
- 278:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 27b:	0f be 02             	movsbl (%edx),%eax
- 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 281:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 284:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 289:	77 1a                	ja     2a5 <atoi+0x35>
- 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 28f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 290:	83 c2 01             	add    $0x1,%edx
- 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 29a:	0f be 02             	movsbl (%edx),%eax
- 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 2a0:	80 fb 09             	cmp    $0x9,%bl
- 2a3:	76 eb                	jbe    290 <atoi+0x20>
-  return n;
-}
- 2a5:	89 c8                	mov    %ecx,%eax
- 2a7:	5b                   	pop    %ebx
- 2a8:	5d                   	pop    %ebp
- 2a9:	c3                   	ret    
- 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000002b0 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 2b0:	f3 0f 1e fb          	endbr32 
- 2b4:	55                   	push   %ebp
- 2b5:	89 e5                	mov    %esp,%ebp
- 2b7:	57                   	push   %edi
- 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
- 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
- 2be:	56                   	push   %esi
- 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 2c2:	85 c0                	test   %eax,%eax
- 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
- 2c6:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 2c8:	89 d7                	mov    %edx,%edi
- 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 2d1:	39 f8                	cmp    %edi,%eax
- 2d3:	75 fb                	jne    2d0 <memmove+0x20>
-  return vdst;
-}
- 2d5:	5e                   	pop    %esi
- 2d6:	89 d0                	mov    %edx,%eax
- 2d8:	5f                   	pop    %edi
- 2d9:	5d                   	pop    %ebp
- 2da:	c3                   	ret    
-
-000002db <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2db:	b8 01 00 00 00       	mov    $0x1,%eax
- 2e0:	cd 40                	int    $0x40
- 2e2:	c3                   	ret    
-
-000002e3 <exit>:
-SYSCALL(exit)
- 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
- 2e8:	cd 40                	int    $0x40
- 2ea:	c3                   	ret    
-
-000002eb <wait>:
-SYSCALL(wait)
- 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
- 2f0:	cd 40                	int    $0x40
- 2f2:	c3                   	ret    
-
-000002f3 <pipe>:
-SYSCALL(pipe)
- 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
- 2f8:	cd 40                	int    $0x40
- 2fa:	c3                   	ret    
-
-000002fb <read>:
-SYSCALL(read)
- 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
- 300:	cd 40                	int    $0x40
- 302:	c3                   	ret    
-
-00000303 <write>:
-SYSCALL(write)
- 303:	b8 10 00 00 00       	mov    $0x10,%eax
- 308:	cd 40                	int    $0x40
- 30a:	c3                   	ret    
-
-0000030b <close>:
-SYSCALL(close)
- 30b:	b8 15 00 00 00       	mov    $0x15,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret    
-
-00000313 <kill>:
-SYSCALL(kill)
- 313:	b8 06 00 00 00       	mov    $0x6,%eax
- 318:	cd 40                	int    $0x40
- 31a:	c3                   	ret    
-
-0000031b <exec>:
-SYSCALL(exec)
- 31b:	b8 07 00 00 00       	mov    $0x7,%eax
- 320:	cd 40                	int    $0x40
- 322:	c3                   	ret    
-
-00000323 <open>:
-SYSCALL(open)
- 323:	b8 0f 00 00 00       	mov    $0xf,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret    
-
-0000032b <mknod>:
-SYSCALL(mknod)
- 32b:	b8 11 00 00 00       	mov    $0x11,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret    
-
-00000333 <unlink>:
-SYSCALL(unlink)
- 333:	b8 12 00 00 00       	mov    $0x12,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret    
-
-0000033b <fstat>:
-SYSCALL(fstat)
- 33b:	b8 08 00 00 00       	mov    $0x8,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret    
-
-00000343 <link>:
-SYSCALL(link)
- 343:	b8 13 00 00 00       	mov    $0x13,%eax
- 348:	cd 40                	int    $0x40
- 34a:	c3                   	ret    
-
-0000034b <mkdir>:
-SYSCALL(mkdir)
- 34b:	b8 14 00 00 00       	mov    $0x14,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret    
-
-00000353 <chdir>:
-SYSCALL(chdir)
- 353:	b8 09 00 00 00       	mov    $0x9,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret    
-
-0000035b <dup>:
-SYSCALL(dup)
- 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret    
-
-00000363 <getpid>:
-SYSCALL(getpid)
- 363:	b8 0b 00 00 00       	mov    $0xb,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret    
-
-0000036b <sbrk>:
-SYSCALL(sbrk)
- 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret    
-
-00000373 <sleep>:
-SYSCALL(sleep)
- 373:	b8 0d 00 00 00       	mov    $0xd,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret    
-
-0000037b <uptime>:
-SYSCALL(uptime)
- 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret    
-
-00000383 <draw>:
-SYSCALL(draw)
- 383:	b8 16 00 00 00       	mov    $0x16,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret    
-
-0000038b <thread_create>:
-SYSCALL(thread_create)
- 38b:	b8 18 00 00 00       	mov    $0x18,%eax
- 390:	cd 40                	int    $0x40
- 392:	c3                   	ret    
-
-00000393 <thread_join>:
-SYSCALL(thread_join)
- 393:	b8 19 00 00 00       	mov    $0x19,%eax
- 398:	cd 40                	int    $0x40
- 39a:	c3                   	ret    
-
-0000039b <thread_exit>:
-SYSCALL(thread_exit)
- 39b:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 3a0:	cd 40                	int    $0x40
- 3a2:	c3                   	ret    
- 3a3:	66 90                	xchg   %ax,%ax
- 3a5:	66 90                	xchg   %ax,%ax
- 3a7:	66 90                	xchg   %ax,%ax
- 3a9:	66 90                	xchg   %ax,%ax
- 3ab:	66 90                	xchg   %ax,%ax
- 3ad:	66 90                	xchg   %ax,%ax
- 3af:	90                   	nop
-
-000003b0 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3b0:	55                   	push   %ebp
- 3b1:	89 e5                	mov    %esp,%ebp
- 3b3:	57                   	push   %edi
- 3b4:	56                   	push   %esi
- 3b5:	53                   	push   %ebx
- 3b6:	83 ec 3c             	sub    $0x3c,%esp
- 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 3bc:	89 d1                	mov    %edx,%ecx
-{
- 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 3c1:	85 d2                	test   %edx,%edx
- 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
- 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3cd:	74 79                	je     448 <printint+0x98>
-    neg = 1;
- 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 3d6:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 3d8:	31 db                	xor    %ebx,%ebx
- 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3dd:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 3e0:	89 c8                	mov    %ecx,%eax
- 3e2:	31 d2                	xor    %edx,%edx
- 3e4:	89 cf                	mov    %ecx,%edi
- 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3e9:	0f b6 92 d8 07 00 00 	movzbl 0x7d8(%edx),%edx
- 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3f3:	89 d8                	mov    %ebx,%eax
- 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 401:	76 dd                	jbe    3e0 <printint+0x30>
-  if(neg)
- 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 406:	85 c9                	test   %ecx,%ecx
- 408:	74 0c                	je     416 <printint+0x66>
-    buf[i++] = '-';
- 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 40f:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 41d:	eb 07                	jmp    426 <printint+0x76>
- 41f:	90                   	nop
- 420:	0f b6 13             	movzbl (%ebx),%edx
- 423:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 426:	83 ec 04             	sub    $0x4,%esp
- 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 42c:	6a 01                	push   $0x1
- 42e:	56                   	push   %esi
- 42f:	57                   	push   %edi
- 430:	e8 ce fe ff ff       	call   303 <write>
-  while(--i >= 0)
- 435:	83 c4 10             	add    $0x10,%esp
- 438:	39 de                	cmp    %ebx,%esi
- 43a:	75 e4                	jne    420 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 43f:	5b                   	pop    %ebx
- 440:	5e                   	pop    %esi
- 441:	5f                   	pop    %edi
- 442:	5d                   	pop    %ebp
- 443:	c3                   	ret    
- 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 44f:	eb 87                	jmp    3d8 <printint+0x28>
- 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 45f:	90                   	nop
-
-00000460 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 460:	f3 0f 1e fb          	endbr32 
- 464:	55                   	push   %ebp
- 465:	89 e5                	mov    %esp,%ebp
- 467:	57                   	push   %edi
- 468:	56                   	push   %esi
- 469:	53                   	push   %ebx
- 46a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 46d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 470:	0f b6 1e             	movzbl (%esi),%ebx
- 473:	84 db                	test   %bl,%bl
- 475:	0f 84 b4 00 00 00    	je     52f <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 47b:	8d 45 10             	lea    0x10(%ebp),%eax
- 47e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 481:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 484:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 486:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 489:	eb 33                	jmp    4be <printf+0x5e>
- 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 48f:	90                   	nop
- 490:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 493:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 498:	83 f8 25             	cmp    $0x25,%eax
- 49b:	74 17                	je     4b4 <printf+0x54>
-  write(fd, &c, 1);
- 49d:	83 ec 04             	sub    $0x4,%esp
- 4a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 4a3:	6a 01                	push   $0x1
- 4a5:	57                   	push   %edi
- 4a6:	ff 75 08             	pushl  0x8(%ebp)
- 4a9:	e8 55 fe ff ff       	call   303 <write>
- 4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 4b1:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 4b4:	0f b6 1e             	movzbl (%esi),%ebx
- 4b7:	83 c6 01             	add    $0x1,%esi
- 4ba:	84 db                	test   %bl,%bl
- 4bc:	74 71                	je     52f <printf+0xcf>
-    c = fmt[i] & 0xff;
- 4be:	0f be cb             	movsbl %bl,%ecx
- 4c1:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 4c4:	85 d2                	test   %edx,%edx
- 4c6:	74 c8                	je     490 <printf+0x30>
-      }
-    } else if(state == '%'){
- 4c8:	83 fa 25             	cmp    $0x25,%edx
- 4cb:	75 e7                	jne    4b4 <printf+0x54>
-      if(c == 'd'){
- 4cd:	83 f8 64             	cmp    $0x64,%eax
- 4d0:	0f 84 9a 00 00 00    	je     570 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 4d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4dc:	83 f9 70             	cmp    $0x70,%ecx
- 4df:	74 5f                	je     540 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 4e1:	83 f8 73             	cmp    $0x73,%eax
- 4e4:	0f 84 d6 00 00 00    	je     5c0 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 4ea:	83 f8 63             	cmp    $0x63,%eax
- 4ed:	0f 84 8d 00 00 00    	je     580 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 4f3:	83 f8 25             	cmp    $0x25,%eax
- 4f6:	0f 84 b4 00 00 00    	je     5b0 <printf+0x150>
-  write(fd, &c, 1);
- 4fc:	83 ec 04             	sub    $0x4,%esp
- 4ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 503:	6a 01                	push   $0x1
- 505:	57                   	push   %edi
- 506:	ff 75 08             	pushl  0x8(%ebp)
- 509:	e8 f5 fd ff ff       	call   303 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 50e:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 511:	83 c4 0c             	add    $0xc,%esp
- 514:	6a 01                	push   $0x1
- 516:	83 c6 01             	add    $0x1,%esi
- 519:	57                   	push   %edi
- 51a:	ff 75 08             	pushl  0x8(%ebp)
- 51d:	e8 e1 fd ff ff       	call   303 <write>
-  for(i = 0; fmt[i]; i++){
- 522:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 526:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 529:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 52b:	84 db                	test   %bl,%bl
- 52d:	75 8f                	jne    4be <printf+0x5e>
-    }
-  }
-}
- 52f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 532:	5b                   	pop    %ebx
- 533:	5e                   	pop    %esi
- 534:	5f                   	pop    %edi
- 535:	5d                   	pop    %ebp
- 536:	c3                   	ret    
- 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 53e:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 540:	83 ec 0c             	sub    $0xc,%esp
- 543:	b9 10 00 00 00       	mov    $0x10,%ecx
- 548:	6a 00                	push   $0x0
- 54a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 54d:	8b 45 08             	mov    0x8(%ebp),%eax
- 550:	8b 13                	mov    (%ebx),%edx
- 552:	e8 59 fe ff ff       	call   3b0 <printint>
-        ap++;
- 557:	89 d8                	mov    %ebx,%eax
- 559:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 55c:	31 d2                	xor    %edx,%edx
-        ap++;
- 55e:	83 c0 04             	add    $0x4,%eax
- 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 564:	e9 4b ff ff ff       	jmp    4b4 <printf+0x54>
- 569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 570:	83 ec 0c             	sub    $0xc,%esp
- 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 578:	6a 01                	push   $0x1
- 57a:	eb ce                	jmp    54a <printf+0xea>
- 57c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 580:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 583:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 586:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 588:	6a 01                	push   $0x1
-        ap++;
- 58a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 58d:	57                   	push   %edi
- 58e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 591:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 594:	e8 6a fd ff ff       	call   303 <write>
-        ap++;
- 599:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 59c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 59f:	31 d2                	xor    %edx,%edx
- 5a1:	e9 0e ff ff ff       	jmp    4b4 <printf+0x54>
- 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5ad:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 5b3:	83 ec 04             	sub    $0x4,%esp
- 5b6:	e9 59 ff ff ff       	jmp    514 <printf+0xb4>
- 5bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5bf:	90                   	nop
-        s = (char*)*ap;
- 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5c3:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 5c5:	83 c0 04             	add    $0x4,%eax
- 5c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 5cb:	85 db                	test   %ebx,%ebx
- 5cd:	74 17                	je     5e6 <printf+0x186>
-        while(*s != 0){
- 5cf:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 5d2:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 5d4:	84 c0                	test   %al,%al
- 5d6:	0f 84 d8 fe ff ff    	je     4b4 <printf+0x54>
- 5dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5df:	89 de                	mov    %ebx,%esi
- 5e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5e4:	eb 1a                	jmp    600 <printf+0x1a0>
-          s = "(null)";
- 5e6:	bb d1 07 00 00       	mov    $0x7d1,%ebx
-        while(*s != 0){
- 5eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
- 5f3:	89 de                	mov    %ebx,%esi
- 5f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5ff:	90                   	nop
-  write(fd, &c, 1);
- 600:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 603:	83 c6 01             	add    $0x1,%esi
- 606:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 609:	6a 01                	push   $0x1
- 60b:	57                   	push   %edi
- 60c:	53                   	push   %ebx
- 60d:	e8 f1 fc ff ff       	call   303 <write>
-        while(*s != 0){
- 612:	0f b6 06             	movzbl (%esi),%eax
- 615:	83 c4 10             	add    $0x10,%esp
- 618:	84 c0                	test   %al,%al
- 61a:	75 e4                	jne    600 <printf+0x1a0>
- 61c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 61f:	31 d2                	xor    %edx,%edx
- 621:	e9 8e fe ff ff       	jmp    4b4 <printf+0x54>
- 626:	66 90                	xchg   %ax,%ax
- 628:	66 90                	xchg   %ax,%ax
- 62a:	66 90                	xchg   %ax,%ax
- 62c:	66 90                	xchg   %ax,%ax
- 62e:	66 90                	xchg   %ax,%ax
-
-00000630 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 630:	f3 0f 1e fb          	endbr32 
- 634:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 635:	a1 88 0a 00 00       	mov    0xa88,%eax
-{
- 63a:	89 e5                	mov    %esp,%ebp
- 63c:	57                   	push   %edi
- 63d:	56                   	push   %esi
- 63e:	53                   	push   %ebx
- 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 642:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 644:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 647:	39 c8                	cmp    %ecx,%eax
- 649:	73 15                	jae    660 <free+0x30>
- 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 64f:	90                   	nop
- 650:	39 d1                	cmp    %edx,%ecx
- 652:	72 14                	jb     668 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 654:	39 d0                	cmp    %edx,%eax
- 656:	73 10                	jae    668 <free+0x38>
-{
- 658:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 65a:	8b 10                	mov    (%eax),%edx
- 65c:	39 c8                	cmp    %ecx,%eax
- 65e:	72 f0                	jb     650 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 660:	39 d0                	cmp    %edx,%eax
- 662:	72 f4                	jb     658 <free+0x28>
- 664:	39 d1                	cmp    %edx,%ecx
- 666:	73 f0                	jae    658 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 66e:	39 fa                	cmp    %edi,%edx
- 670:	74 1e                	je     690 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 672:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 675:	8b 50 04             	mov    0x4(%eax),%edx
- 678:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 67b:	39 f1                	cmp    %esi,%ecx
- 67d:	74 28                	je     6a7 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 67f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 681:	5b                   	pop    %ebx
-  freep = p;
- 682:	a3 88 0a 00 00       	mov    %eax,0xa88
-}
- 687:	5e                   	pop    %esi
- 688:	5f                   	pop    %edi
- 689:	5d                   	pop    %ebp
- 68a:	c3                   	ret    
- 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 68f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 690:	03 72 04             	add    0x4(%edx),%esi
- 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 696:	8b 10                	mov    (%eax),%edx
- 698:	8b 12                	mov    (%edx),%edx
- 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 69d:	8b 50 04             	mov    0x4(%eax),%edx
- 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6a3:	39 f1                	cmp    %esi,%ecx
- 6a5:	75 d8                	jne    67f <free+0x4f>
-    p->s.size += bp->s.size;
- 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 6aa:	a3 88 0a 00 00       	mov    %eax,0xa88
-    p->s.size += bp->s.size;
- 6af:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 6b5:	89 10                	mov    %edx,(%eax)
-}
- 6b7:	5b                   	pop    %ebx
- 6b8:	5e                   	pop    %esi
- 6b9:	5f                   	pop    %edi
- 6ba:	5d                   	pop    %ebp
- 6bb:	c3                   	ret    
- 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000006c0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 6c0:	f3 0f 1e fb          	endbr32 
- 6c4:	55                   	push   %ebp
- 6c5:	89 e5                	mov    %esp,%ebp
- 6c7:	57                   	push   %edi
- 6c8:	56                   	push   %esi
- 6c9:	53                   	push   %ebx
- 6ca:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6cd:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 6d0:	8b 3d 88 0a 00 00    	mov    0xa88,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6d6:	8d 70 07             	lea    0x7(%eax),%esi
- 6d9:	c1 ee 03             	shr    $0x3,%esi
- 6dc:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 6df:	85 ff                	test   %edi,%edi
- 6e1:	0f 84 a9 00 00 00    	je     790 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6e7:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 6e9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6ec:	39 f1                	cmp    %esi,%ecx
- 6ee:	73 6d                	jae    75d <malloc+0x9d>
- 6f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6fb:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 6fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 705:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 708:	eb 17                	jmp    721 <malloc+0x61>
- 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 710:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 712:	8b 4a 04             	mov    0x4(%edx),%ecx
- 715:	39 f1                	cmp    %esi,%ecx
- 717:	73 4f                	jae    768 <malloc+0xa8>
- 719:	8b 3d 88 0a 00 00    	mov    0xa88,%edi
- 71f:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 721:	39 c7                	cmp    %eax,%edi
- 723:	75 eb                	jne    710 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 725:	83 ec 0c             	sub    $0xc,%esp
- 728:	ff 75 e4             	pushl  -0x1c(%ebp)
- 72b:	e8 3b fc ff ff       	call   36b <sbrk>
-  if(p == (char*)-1)
- 730:	83 c4 10             	add    $0x10,%esp
- 733:	83 f8 ff             	cmp    $0xffffffff,%eax
- 736:	74 1b                	je     753 <malloc+0x93>
-  hp->s.size = nu;
- 738:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 73b:	83 ec 0c             	sub    $0xc,%esp
- 73e:	83 c0 08             	add    $0x8,%eax
- 741:	50                   	push   %eax
- 742:	e8 e9 fe ff ff       	call   630 <free>
-  return freep;
- 747:	a1 88 0a 00 00       	mov    0xa88,%eax
-      if((p = morecore(nunits)) == 0)
- 74c:	83 c4 10             	add    $0x10,%esp
- 74f:	85 c0                	test   %eax,%eax
- 751:	75 bd                	jne    710 <malloc+0x50>
-        return 0;
-  }
-}
- 753:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 756:	31 c0                	xor    %eax,%eax
-}
- 758:	5b                   	pop    %ebx
- 759:	5e                   	pop    %esi
- 75a:	5f                   	pop    %edi
- 75b:	5d                   	pop    %ebp
- 75c:	c3                   	ret    
-    if(p->s.size >= nunits){
- 75d:	89 c2                	mov    %eax,%edx
- 75f:	89 f8                	mov    %edi,%eax
- 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- 768:	39 ce                	cmp    %ecx,%esi
- 76a:	74 54                	je     7c0 <malloc+0x100>
-        p->s.size -= nunits;
- 76c:	29 f1                	sub    %esi,%ecx
- 76e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- 771:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- 774:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- 777:	a3 88 0a 00 00       	mov    %eax,0xa88
-}
- 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 77f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- 782:	5b                   	pop    %ebx
- 783:	5e                   	pop    %esi
- 784:	5f                   	pop    %edi
- 785:	5d                   	pop    %ebp
- 786:	c3                   	ret    
- 787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 78e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- 790:	c7 05 88 0a 00 00 8c 	movl   $0xa8c,0xa88
- 797:	0a 00 00 
-    base.s.size = 0;
- 79a:	bf 8c 0a 00 00       	mov    $0xa8c,%edi
-    base.s.ptr = freep = prevp = &base;
- 79f:	c7 05 8c 0a 00 00 8c 	movl   $0xa8c,0xa8c
- 7a6:	0a 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7a9:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- 7ab:	c7 05 90 0a 00 00 00 	movl   $0x0,0xa90
- 7b2:	00 00 00 
-    if(p->s.size >= nunits){
- 7b5:	e9 36 ff ff ff       	jmp    6f0 <malloc+0x30>
- 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- 7c0:	8b 0a                	mov    (%edx),%ecx
- 7c2:	89 08                	mov    %ecx,(%eax)
- 7c4:	eb b1                	jmp    777 <malloc+0xb7>
diff -ruN xv6-public/echo.c xv6-public-mynew/echo.c
--- xv6-public/echo.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/echo.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,13 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-  int i;
-
-  for(i = 1; i < argc; i++)
-    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
-  exit();
-}
diff -ruN xv6-public/echo.d xv6-public-mynew/echo.d
--- xv6-public/echo.d	2022-09-05 09:51:04.982999130 +0530
+++ xv6-public-mynew/echo.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/echo.o and xv6-public-mynew/echo.o differ
diff -ruN xv6-public/echo.sym xv6-public-mynew/echo.sym
--- xv6-public/echo.sym	2022-09-05 09:51:05.018999131 +0530
+++ xv6-public-mynew/echo.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,61 +0,0 @@
-00000000 .text
-000007c8 .rodata
-000007ec .eh_frame
-00000a88 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 echo.c
-00000000 ulib.c
-00000000 printf.c
-000003b0 printint
-000007d8 digits.1097
-00000000 umalloc.c
-00000a88 freep
-00000a8c base
-00000080 strcpy
-00000460 printf
-0000039b thread_exit
-000002b0 memmove
-0000032b mknod
-000001a0 gets
-00000363 getpid
-000006c0 malloc
-00000373 sleep
-000002f3 pipe
-00000303 write
-0000033b fstat
-00000313 kill
-00000353 chdir
-0000031b exec
-000002eb wait
-000002fb read
-00000333 unlink
-000002db fork
-0000036b sbrk
-0000037b uptime
-00000a88 __bss_start
-00000140 memset
-00000000 main
-000000b0 strcmp
-0000035b dup
-00000220 stat
-00000a88 _edata
-00000a94 _end
-00000343 link
-000002e3 exit
-00000270 atoi
-00000383 draw
-00000100 strlen
-00000323 open
-00000160 strchr
-0000038b thread_create
-0000034b mkdir
-0000030b close
-00000393 thread_join
-00000630 free
diff -ruN xv6-public/elf.h xv6-public-mynew/elf.h
--- xv6-public/elf.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/elf.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,42 +0,0 @@
-// Format of an ELF executable file
-
-#define ELF_MAGIC 0x464C457FU  // "\x7FELF" in little endian
-
-// File header
-struct elfhdr {
-  uint magic;  // must equal ELF_MAGIC
-  uchar elf[12];
-  ushort type;
-  ushort machine;
-  uint version;
-  uint entry;
-  uint phoff;
-  uint shoff;
-  uint flags;
-  ushort ehsize;
-  ushort phentsize;
-  ushort phnum;
-  ushort shentsize;
-  ushort shnum;
-  ushort shstrndx;
-};
-
-// Program section header
-struct proghdr {
-  uint type;
-  uint off;
-  uint vaddr;
-  uint paddr;
-  uint filesz;
-  uint memsz;
-  uint flags;
-  uint align;
-};
-
-// Values for Proghdr type
-#define ELF_PROG_LOAD           1
-
-// Flag bits for Proghdr flags
-#define ELF_PROG_FLAG_EXEC      1
-#define ELF_PROG_FLAG_WRITE     2
-#define ELF_PROG_FLAG_READ      4
Binary files xv6-public/entry.o and xv6-public-mynew/entry.o differ
Binary files xv6-public/entryother and xv6-public-mynew/entryother differ
diff -ruN xv6-public/entryother.asm xv6-public-mynew/entryother.asm
--- xv6-public/entryother.asm	2022-09-05 09:51:09.074999248 +0530
+++ xv6-public-mynew/entryother.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,125 +0,0 @@
-
-bootblockother.o:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00007000 <start>:
-# This code combines elements of bootasm.S and entry.S.
-
-.code16           
-.globl start
-start:
-  cli            
-    7000:	fa                   	cli    
-
-  # Zero data segment registers DS, ES, and SS.
-  xorw    %ax,%ax
-    7001:	31 c0                	xor    %eax,%eax
-  movw    %ax,%ds
-    7003:	8e d8                	mov    %eax,%ds
-  movw    %ax,%es
-    7005:	8e c0                	mov    %eax,%es
-  movw    %ax,%ss
-    7007:	8e d0                	mov    %eax,%ss
-
-  # Switch from real to protected mode.  Use a bootstrap GDT that makes
-  # virtual addresses map directly to physical addresses so that the
-  # effective memory map doesn't change during the transition.
-  lgdt    gdtdesc
-    7009:	0f 01 16             	lgdtl  (%esi)
-    700c:	84 70 0f             	test   %dh,0xf(%eax)
-  movl    %cr0, %eax
-    700f:	20 c0                	and    %al,%al
-  orl     $CR0_PE, %eax
-    7011:	66 83 c8 01          	or     $0x1,%ax
-  movl    %eax, %cr0
-    7015:	0f 22 c0             	mov    %eax,%cr0
-
-  # Complete the transition to 32-bit protected mode by using a long jmp
-  # to reload %cs and %eip.  The segment descriptors are set up with no
-  # translation, so that the mapping is still the identity mapping.
-  ljmpl    $(SEG_KCODE<<3), $(start32)
-    7018:	66 ea 20 70 00 00    	ljmpw  $0x0,$0x7020
-    701e:	08 00                	or     %al,(%eax)
-
-00007020 <start32>:
-
-//PAGEBREAK!
-.code32  # Tell assembler to generate 32-bit code now.
-start32:
-  # Set up the protected-mode data segment registers
-  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
-    7020:	66 b8 10 00          	mov    $0x10,%ax
-  movw    %ax, %ds                # -> DS: Data Segment
-    7024:	8e d8                	mov    %eax,%ds
-  movw    %ax, %es                # -> ES: Extra Segment
-    7026:	8e c0                	mov    %eax,%es
-  movw    %ax, %ss                # -> SS: Stack Segment
-    7028:	8e d0                	mov    %eax,%ss
-  movw    $0, %ax                 # Zero segments not ready for use
-    702a:	66 b8 00 00          	mov    $0x0,%ax
-  movw    %ax, %fs                # -> FS
-    702e:	8e e0                	mov    %eax,%fs
-  movw    %ax, %gs                # -> GS
-    7030:	8e e8                	mov    %eax,%gs
-
-  # Turn on page size extension for 4Mbyte pages
-  movl    %cr4, %eax
-    7032:	0f 20 e0             	mov    %cr4,%eax
-  orl     $(CR4_PSE), %eax
-    7035:	83 c8 10             	or     $0x10,%eax
-  movl    %eax, %cr4
-    7038:	0f 22 e0             	mov    %eax,%cr4
-  # Use entrypgdir as our initial page table
-  movl    (start-12), %eax
-    703b:	a1 f4 6f 00 00       	mov    0x6ff4,%eax
-  movl    %eax, %cr3
-    7040:	0f 22 d8             	mov    %eax,%cr3
-  # Turn on paging.
-  movl    %cr0, %eax
-    7043:	0f 20 c0             	mov    %cr0,%eax
-  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
-    7046:	0d 01 00 01 80       	or     $0x80010001,%eax
-  movl    %eax, %cr0
-    704b:	0f 22 c0             	mov    %eax,%cr0
-
-  # Switch to the stack allocated by startothers()
-  movl    (start-4), %esp
-    704e:	8b 25 fc 6f 00 00    	mov    0x6ffc,%esp
-  # Call mpenter()
-  call	 *(start-8)
-    7054:	ff 15 f8 6f 00 00    	call   *0x6ff8
-
-  movw    $0x8a00, %ax
-    705a:	66 b8 00 8a          	mov    $0x8a00,%ax
-  movw    %ax, %dx
-    705e:	66 89 c2             	mov    %ax,%dx
-  outw    %ax, %dx
-    7061:	66 ef                	out    %ax,(%dx)
-  movw    $0x8ae0, %ax
-    7063:	66 b8 e0 8a          	mov    $0x8ae0,%ax
-  outw    %ax, %dx
-    7067:	66 ef                	out    %ax,(%dx)
-
-00007069 <spin>:
-spin:
-  jmp     spin
-    7069:	eb fe                	jmp    7069 <spin>
-    706b:	90                   	nop
-
-0000706c <gdt>:
-	...
-    7074:	ff                   	(bad)  
-    7075:	ff 00                	incl   (%eax)
-    7077:	00 00                	add    %al,(%eax)
-    7079:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
-    7080:	00                   	.byte 0x0
-    7081:	92                   	xchg   %eax,%edx
-    7082:	cf                   	iret   
-	...
-
-00007084 <gdtdesc>:
-    7084:	17                   	pop    %ss
-    7085:	00 6c 70 00          	add    %ch,0x0(%eax,%esi,2)
-	...
diff -ruN xv6-public/entryother.d xv6-public-mynew/entryother.d
--- xv6-public/entryother.d	2022-09-05 09:51:09.054999248 +0530
+++ xv6-public-mynew/entryother.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-entryother.o: entryother.S asm.h memlayout.h mmu.h
Binary files xv6-public/entryother.o and xv6-public-mynew/entryother.o differ
diff -ruN xv6-public/entryother.S xv6-public-mynew/entryother.S
--- xv6-public/entryother.S	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/entryother.S	1970-01-01 05:30:00.000000000 +0530
@@ -1,93 +0,0 @@
-#include "asm.h"
-#include "memlayout.h"
-#include "mmu.h"
-	
-# Each non-boot CPU ("AP") is started up in response to a STARTUP
-# IPI from the boot CPU.  Section B.4.2 of the Multi-Processor
-# Specification says that the AP will start in real mode with CS:IP
-# set to XY00:0000, where XY is an 8-bit value sent with the
-# STARTUP. Thus this code must start at a 4096-byte boundary.
-#
-# Because this code sets DS to zero, it must sit
-# at an address in the low 2^16 bytes.
-#
-# Startothers (in main.c) sends the STARTUPs one at a time.
-# It copies this code (start) at 0x7000.  It puts the address of
-# a newly allocated per-core stack in start-4,the address of the
-# place to jump to (mpenter) in start-8, and the physical address
-# of entrypgdir in start-12.
-#
-# This code combines elements of bootasm.S and entry.S.
-
-.code16           
-.globl start
-start:
-  cli            
-
-  # Zero data segment registers DS, ES, and SS.
-  xorw    %ax,%ax
-  movw    %ax,%ds
-  movw    %ax,%es
-  movw    %ax,%ss
-
-  # Switch from real to protected mode.  Use a bootstrap GDT that makes
-  # virtual addresses map directly to physical addresses so that the
-  # effective memory map doesn't change during the transition.
-  lgdt    gdtdesc
-  movl    %cr0, %eax
-  orl     $CR0_PE, %eax
-  movl    %eax, %cr0
-
-  # Complete the transition to 32-bit protected mode by using a long jmp
-  # to reload %cs and %eip.  The segment descriptors are set up with no
-  # translation, so that the mapping is still the identity mapping.
-  ljmpl    $(SEG_KCODE<<3), $(start32)
-
-//PAGEBREAK!
-.code32  # Tell assembler to generate 32-bit code now.
-start32:
-  # Set up the protected-mode data segment registers
-  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
-  movw    %ax, %ds                # -> DS: Data Segment
-  movw    %ax, %es                # -> ES: Extra Segment
-  movw    %ax, %ss                # -> SS: Stack Segment
-  movw    $0, %ax                 # Zero segments not ready for use
-  movw    %ax, %fs                # -> FS
-  movw    %ax, %gs                # -> GS
-
-  # Turn on page size extension for 4Mbyte pages
-  movl    %cr4, %eax
-  orl     $(CR4_PSE), %eax
-  movl    %eax, %cr4
-  # Use entrypgdir as our initial page table
-  movl    (start-12), %eax
-  movl    %eax, %cr3
-  # Turn on paging.
-  movl    %cr0, %eax
-  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
-  movl    %eax, %cr0
-
-  # Switch to the stack allocated by startothers()
-  movl    (start-4), %esp
-  # Call mpenter()
-  call	 *(start-8)
-
-  movw    $0x8a00, %ax
-  movw    %ax, %dx
-  outw    %ax, %dx
-  movw    $0x8ae0, %ax
-  outw    %ax, %dx
-spin:
-  jmp     spin
-
-.p2align 2
-gdt:
-  SEG_NULLASM
-  SEG_ASM(STA_X|STA_R, 0, 0xffffffff)
-  SEG_ASM(STA_W, 0, 0xffffffff)
-
-
-gdtdesc:
-  .word   (gdtdesc - gdt - 1)
-  .long   gdt
-
diff -ruN xv6-public/entry.S xv6-public-mynew/entry.S
--- xv6-public/entry.S	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/entry.S	1970-01-01 05:30:00.000000000 +0530
@@ -1,68 +0,0 @@
-# The xv6 kernel starts executing in this file. This file is linked with
-# the kernel C code, so it can refer to kernel symbols such as main().
-# The boot block (bootasm.S and bootmain.c) jumps to entry below.
-        
-# Multiboot header, for multiboot boot loaders like GNU Grub.
-# http://www.gnu.org/software/grub/manual/multiboot/multiboot.html
-#
-# Using GRUB 2, you can boot xv6 from a file stored in a
-# Linux file system by copying kernel or kernelmemfs to /boot
-# and then adding this menu entry:
-#
-# menuentry "xv6" {
-# 	insmod ext2
-# 	set root='(hd0,msdos1)'
-# 	set kernel='/boot/kernel'
-# 	echo "Loading ${kernel}..."
-# 	multiboot ${kernel} ${kernel}
-# 	boot
-# }
-
-#include "asm.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "param.h"
-
-# Multiboot header.  Data to direct multiboot loader.
-.p2align 2
-.text
-.globl multiboot_header
-multiboot_header:
-  #define magic 0x1badb002
-  #define flags 0
-  .long magic
-  .long flags
-  .long (-magic-flags)
-
-# By convention, the _start symbol specifies the ELF entry point.
-# Since we haven't set up virtual memory yet, our entry point is
-# the physical address of 'entry'.
-.globl _start
-_start = V2P_WO(entry)
-
-# Entering xv6 on boot processor, with paging off.
-.globl entry
-entry:
-  # Turn on page size extension for 4Mbyte pages
-  movl    %cr4, %eax
-  orl     $(CR4_PSE), %eax
-  movl    %eax, %cr4
-  # Set page directory
-  movl    $(V2P_WO(entrypgdir)), %eax
-  movl    %eax, %cr3
-  # Turn on paging.
-  movl    %cr0, %eax
-  orl     $(CR0_PG|CR0_WP), %eax
-  movl    %eax, %cr0
-
-  # Set up the stack pointer.
-  movl $(stack + KSTACKSIZE), %esp
-
-  # Jump to main(), and switch to executing at
-  # high addresses. The indirect call is needed because
-  # the assembler produces a PC-relative instruction
-  # for a direct jump.
-  mov $main, %eax
-  jmp *%eax
-
-.comm stack, KSTACKSIZE
diff -ruN xv6-public/exec.c xv6-public-mynew/exec.c
--- xv6-public/exec.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/exec.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,114 +0,0 @@
-#include "types.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "defs.h"
-#include "x86.h"
-#include "elf.h"
-
-int
-exec(char *path, char **argv)
-{
-  char *s, *last;
-  int i, off;
-  uint argc, sz, sp, ustack[3+MAXARG+1];
-  struct elfhdr elf;
-  struct inode *ip;
-  struct proghdr ph;
-  pde_t *pgdir, *oldpgdir;
-  struct proc *curproc = myproc();
-
-  begin_op();
-
-  if((ip = namei(path)) == 0){
-    end_op();
-    cprintf("exec: fail\n");
-    return -1;
-  }
-  ilock(ip);
-  pgdir = 0;
-
-  // Check ELF header
-  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
-    goto bad;
-  if(elf.magic != ELF_MAGIC)
-    goto bad;
-
-  if((pgdir = setupkvm()) == 0)
-    goto bad;
-
-  // Load program into memory.
-  sz = 0;
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
-      goto bad;
-    if(ph.type != ELF_PROG_LOAD)
-      continue;
-    if(ph.memsz < ph.filesz)
-      goto bad;
-    if(ph.vaddr + ph.memsz < ph.vaddr)
-      goto bad;
-    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
-      goto bad;
-    if(ph.vaddr % PGSIZE != 0)
-      goto bad;
-    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
-      goto bad;
-  }
-  iunlockput(ip);
-  end_op();
-  ip = 0;
-
-  // Allocate two pages at the next page boundary.
-  // Make the first inaccessible.  Use the second as the user stack.
-  sz = PGROUNDUP(sz);
-  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
-    goto bad;
-  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-  sp = sz;
-
-  // Push argument strings, prepare rest of stack in ustack.
-  for(argc = 0; argv[argc]; argc++) {
-    if(argc >= MAXARG)
-      goto bad;
-    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
-    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-      goto bad;
-    ustack[3+argc] = sp;
-  }
-  ustack[3+argc] = 0;
-
-  ustack[0] = 0xffffffff;  // fake return PC
-  ustack[1] = argc;
-  ustack[2] = sp - (argc+1)*4;  // argv pointer
-
-  sp -= (3+argc+1) * 4;
-  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-    goto bad;
-
-  // Save program name for debugging.
-  for(last=s=path; *s; s++)
-    if(*s == '/')
-      last = s+1;
-  safestrcpy(curproc->name, last, sizeof(curproc->name));
-
-  // Commit to the user image.
-  oldpgdir = curproc->pgdir;
-  curproc->pgdir = pgdir;
-  curproc->sz = sz;
-  curproc->tf->eip = elf.entry;  // main
-  curproc->tf->esp = sp;
-  switchuvm(curproc);
-  freevm(oldpgdir);
-  return 0;
-
- bad:
-  if(pgdir)
-    freevm(pgdir);
-  if(ip){
-    iunlockput(ip);
-    end_op();
-  }
-  return -1;
-}
diff -ruN xv6-public/exec.d xv6-public-mynew/exec.d
--- xv6-public/exec.d	2022-09-05 09:51:07.126999192 +0530
+++ xv6-public-mynew/exec.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-exec.o: exec.c /usr/include/stdc-predef.h types.h param.h memlayout.h \
- mmu.h proc.h defs.h x86.h elf.h
Binary files xv6-public/exec.o and xv6-public-mynew/exec.o differ
diff -ruN xv6-public/fcntl.h xv6-public-mynew/fcntl.h
--- xv6-public/fcntl.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/fcntl.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,4 +0,0 @@
-#define O_RDONLY  0x000
-#define O_WRONLY  0x001
-#define O_RDWR    0x002
-#define O_CREATE  0x200
diff -ruN xv6-public/file.c xv6-public-mynew/file.c
--- xv6-public/file.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/file.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,157 +0,0 @@
-//
-// File descriptors
-//
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "fs.h"
-#include "spinlock.h"
-#include "sleeplock.h"
-#include "file.h"
-
-struct devsw devsw[NDEV];
-struct {
-  struct spinlock lock;
-  struct file file[NFILE];
-} ftable;
-
-void
-fileinit(void)
-{
-  initlock(&ftable.lock, "ftable");
-}
-
-// Allocate a file structure.
-struct file*
-filealloc(void)
-{
-  struct file *f;
-
-  acquire(&ftable.lock);
-  for(f = ftable.file; f < ftable.file + NFILE; f++){
-    if(f->ref == 0){
-      f->ref = 1;
-      release(&ftable.lock);
-      return f;
-    }
-  }
-  release(&ftable.lock);
-  return 0;
-}
-
-// Increment ref count for file f.
-struct file*
-filedup(struct file *f)
-{
-  acquire(&ftable.lock);
-  if(f->ref < 1)
-    panic("filedup");
-  f->ref++;
-  release(&ftable.lock);
-  return f;
-}
-
-// Close file f.  (Decrement ref count, close when reaches 0.)
-void
-fileclose(struct file *f)
-{
-  struct file ff;
-
-  acquire(&ftable.lock);
-  if(f->ref < 1)
-    panic("fileclose");
-  if(--f->ref > 0){
-    release(&ftable.lock);
-    return;
-  }
-  ff = *f;
-  f->ref = 0;
-  f->type = FD_NONE;
-  release(&ftable.lock);
-
-  if(ff.type == FD_PIPE)
-    pipeclose(ff.pipe, ff.writable);
-  else if(ff.type == FD_INODE){
-    begin_op();
-    iput(ff.ip);
-    end_op();
-  }
-}
-
-// Get metadata about file f.
-int
-filestat(struct file *f, struct stat *st)
-{
-  if(f->type == FD_INODE){
-    ilock(f->ip);
-    stati(f->ip, st);
-    iunlock(f->ip);
-    return 0;
-  }
-  return -1;
-}
-
-// Read from file f.
-int
-fileread(struct file *f, char *addr, int n)
-{
-  int r;
-
-  if(f->readable == 0)
-    return -1;
-  if(f->type == FD_PIPE)
-    return piperead(f->pipe, addr, n);
-  if(f->type == FD_INODE){
-    ilock(f->ip);
-    if((r = readi(f->ip, addr, f->off, n)) > 0)
-      f->off += r;
-    iunlock(f->ip);
-    return r;
-  }
-  panic("fileread");
-}
-
-//PAGEBREAK!
-// Write to file f.
-int
-filewrite(struct file *f, char *addr, int n)
-{
-  int r;
-
-  if(f->writable == 0)
-    return -1;
-  if(f->type == FD_PIPE)
-    return pipewrite(f->pipe, addr, n);
-  if(f->type == FD_INODE){
-    // write a few blocks at a time to avoid exceeding
-    // the maximum log transaction size, including
-    // i-node, indirect block, allocation blocks,
-    // and 2 blocks of slop for non-aligned writes.
-    // this really belongs lower down, since writei()
-    // might be writing a device like the console.
-    int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
-    int i = 0;
-    while(i < n){
-      int n1 = n - i;
-      if(n1 > max)
-        n1 = max;
-
-      begin_op();
-      ilock(f->ip);
-      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
-        f->off += r;
-      iunlock(f->ip);
-      end_op();
-
-      if(r < 0)
-        break;
-      if(r != n1)
-        panic("short filewrite");
-      i += r;
-    }
-    return i == n ? n : -1;
-  }
-  panic("filewrite");
-}
-
diff -ruN xv6-public/file.d xv6-public-mynew/file.d
--- xv6-public/file.d	2022-09-05 09:51:07.210999194 +0530
+++ xv6-public-mynew/file.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-file.o: file.c /usr/include/stdc-predef.h types.h defs.h param.h fs.h \
- spinlock.h sleeplock.h file.h
diff -ruN xv6-public/file.h xv6-public-mynew/file.h
--- xv6-public/file.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/file.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,37 +0,0 @@
-struct file {
-  enum { FD_NONE, FD_PIPE, FD_INODE } type;
-  int ref; // reference count
-  char readable;
-  char writable;
-  struct pipe *pipe;
-  struct inode *ip;
-  uint off;
-};
-
-
-// in-memory copy of an inode
-struct inode {
-  uint dev;           // Device number
-  uint inum;          // Inode number
-  int ref;            // Reference count
-  struct sleeplock lock; // protects everything below here
-  int valid;          // inode has been read from disk?
-
-  short type;         // copy of disk inode
-  short major;
-  short minor;
-  short nlink;
-  uint size;
-  uint addrs[NDIRECT+1];
-};
-
-// table mapping major device number to
-// device functions
-struct devsw {
-  int (*read)(struct inode*, char*, int);
-  int (*write)(struct inode*, char*, int);
-};
-
-extern struct devsw devsw[];
-
-#define CONSOLE 1
Binary files xv6-public/file.o and xv6-public-mynew/file.o differ
Binary files xv6-public/_forktest and xv6-public-mynew/_forktest differ
diff -ruN xv6-public/forktest.asm xv6-public-mynew/forktest.asm
--- xv6-public/forktest.asm	2022-09-05 09:51:05.078999133 +0530
+++ xv6-public-mynew/forktest.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,703 +0,0 @@
-
-_forktest:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  printf(1, "fork test OK\n");
-}
-
-int
-main(void)
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	55                   	push   %ebp
-   5:	89 e5                	mov    %esp,%ebp
-   7:	83 e4 f0             	and    $0xfffffff0,%esp
-  forktest();
-   a:	e8 41 00 00 00       	call   50 <forktest>
-  exit();
-   f:	e8 9f 03 00 00       	call   3b3 <exit>
-  14:	66 90                	xchg   %ax,%ax
-  16:	66 90                	xchg   %ax,%ax
-  18:	66 90                	xchg   %ax,%ax
-  1a:	66 90                	xchg   %ax,%ax
-  1c:	66 90                	xchg   %ax,%ax
-  1e:	66 90                	xchg   %ax,%ax
-
-00000020 <printf>:
-{
-  20:	f3 0f 1e fb          	endbr32 
-  24:	55                   	push   %ebp
-  25:	89 e5                	mov    %esp,%ebp
-  27:	53                   	push   %ebx
-  28:	83 ec 10             	sub    $0x10,%esp
-  2b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  write(fd, s, strlen(s));
-  2e:	53                   	push   %ebx
-  2f:	e8 9c 01 00 00       	call   1d0 <strlen>
-  34:	83 c4 0c             	add    $0xc,%esp
-  37:	50                   	push   %eax
-  38:	53                   	push   %ebx
-  39:	ff 75 08             	pushl  0x8(%ebp)
-  3c:	e8 92 03 00 00       	call   3d3 <write>
-}
-  41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  44:	83 c4 10             	add    $0x10,%esp
-  47:	c9                   	leave  
-  48:	c3                   	ret    
-  49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000050 <forktest>:
-{
-  50:	f3 0f 1e fb          	endbr32 
-  54:	55                   	push   %ebp
-  55:	89 e5                	mov    %esp,%ebp
-  57:	53                   	push   %ebx
-  for(n=0; n<N; n++){
-  58:	31 db                	xor    %ebx,%ebx
-{
-  5a:	83 ec 10             	sub    $0x10,%esp
-  write(fd, s, strlen(s));
-  5d:	68 74 04 00 00       	push   $0x474
-  62:	e8 69 01 00 00       	call   1d0 <strlen>
-  67:	83 c4 0c             	add    $0xc,%esp
-  6a:	50                   	push   %eax
-  6b:	68 74 04 00 00       	push   $0x474
-  70:	6a 01                	push   $0x1
-  72:	e8 5c 03 00 00       	call   3d3 <write>
-  77:	83 c4 10             	add    $0x10,%esp
-  7a:	eb 15                	jmp    91 <forktest+0x41>
-  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(pid == 0)
-  80:	74 58                	je     da <forktest+0x8a>
-  for(n=0; n<N; n++){
-  82:	83 c3 01             	add    $0x1,%ebx
-  85:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
-  8b:	0f 84 92 00 00 00    	je     123 <forktest+0xd3>
-    pid = fork();
-  91:	e8 15 03 00 00       	call   3ab <fork>
-    if(pid < 0)
-  96:	85 c0                	test   %eax,%eax
-  98:	79 e6                	jns    80 <forktest+0x30>
-  for(; n > 0; n--){
-  9a:	85 db                	test   %ebx,%ebx
-  9c:	74 10                	je     ae <forktest+0x5e>
-  9e:	66 90                	xchg   %ax,%ax
-    if(wait() < 0){
-  a0:	e8 16 03 00 00       	call   3bb <wait>
-  a5:	85 c0                	test   %eax,%eax
-  a7:	78 36                	js     df <forktest+0x8f>
-  for(; n > 0; n--){
-  a9:	83 eb 01             	sub    $0x1,%ebx
-  ac:	75 f2                	jne    a0 <forktest+0x50>
-  if(wait() != -1){
-  ae:	e8 08 03 00 00       	call   3bb <wait>
-  b3:	83 f8 ff             	cmp    $0xffffffff,%eax
-  b6:	75 49                	jne    101 <forktest+0xb1>
-  write(fd, s, strlen(s));
-  b8:	83 ec 0c             	sub    $0xc,%esp
-  bb:	68 a6 04 00 00       	push   $0x4a6
-  c0:	e8 0b 01 00 00       	call   1d0 <strlen>
-  c5:	83 c4 0c             	add    $0xc,%esp
-  c8:	50                   	push   %eax
-  c9:	68 a6 04 00 00       	push   $0x4a6
-  ce:	6a 01                	push   $0x1
-  d0:	e8 fe 02 00 00       	call   3d3 <write>
-}
-  d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  d8:	c9                   	leave  
-  d9:	c3                   	ret    
-      exit();
-  da:	e8 d4 02 00 00       	call   3b3 <exit>
-  write(fd, s, strlen(s));
-  df:	83 ec 0c             	sub    $0xc,%esp
-  e2:	68 7f 04 00 00       	push   $0x47f
-  e7:	e8 e4 00 00 00       	call   1d0 <strlen>
-  ec:	83 c4 0c             	add    $0xc,%esp
-  ef:	50                   	push   %eax
-  f0:	68 7f 04 00 00       	push   $0x47f
-  f5:	6a 01                	push   $0x1
-  f7:	e8 d7 02 00 00       	call   3d3 <write>
-      exit();
-  fc:	e8 b2 02 00 00       	call   3b3 <exit>
-  write(fd, s, strlen(s));
- 101:	83 ec 0c             	sub    $0xc,%esp
- 104:	68 93 04 00 00       	push   $0x493
- 109:	e8 c2 00 00 00       	call   1d0 <strlen>
- 10e:	83 c4 0c             	add    $0xc,%esp
- 111:	50                   	push   %eax
- 112:	68 93 04 00 00       	push   $0x493
- 117:	6a 01                	push   $0x1
- 119:	e8 b5 02 00 00       	call   3d3 <write>
-    exit();
- 11e:	e8 90 02 00 00       	call   3b3 <exit>
-  write(fd, s, strlen(s));
- 123:	83 ec 0c             	sub    $0xc,%esp
- 126:	68 b4 04 00 00       	push   $0x4b4
- 12b:	e8 a0 00 00 00       	call   1d0 <strlen>
- 130:	83 c4 0c             	add    $0xc,%esp
- 133:	50                   	push   %eax
- 134:	68 b4 04 00 00       	push   $0x4b4
- 139:	6a 01                	push   $0x1
- 13b:	e8 93 02 00 00       	call   3d3 <write>
-    exit();
- 140:	e8 6e 02 00 00       	call   3b3 <exit>
- 145:	66 90                	xchg   %ax,%ax
- 147:	66 90                	xchg   %ax,%ax
- 149:	66 90                	xchg   %ax,%ax
- 14b:	66 90                	xchg   %ax,%ax
- 14d:	66 90                	xchg   %ax,%ax
- 14f:	90                   	nop
-
-00000150 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 150:	f3 0f 1e fb          	endbr32 
- 154:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 155:	31 c0                	xor    %eax,%eax
-{
- 157:	89 e5                	mov    %esp,%ebp
- 159:	53                   	push   %ebx
- 15a:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 15d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
- 160:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 164:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 167:	83 c0 01             	add    $0x1,%eax
- 16a:	84 d2                	test   %dl,%dl
- 16c:	75 f2                	jne    160 <strcpy+0x10>
-    ;
-  return os;
-}
- 16e:	89 c8                	mov    %ecx,%eax
- 170:	5b                   	pop    %ebx
- 171:	5d                   	pop    %ebp
- 172:	c3                   	ret    
- 173:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000180 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 180:	f3 0f 1e fb          	endbr32 
- 184:	55                   	push   %ebp
- 185:	89 e5                	mov    %esp,%ebp
- 187:	53                   	push   %ebx
- 188:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 18b:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
- 18e:	0f b6 01             	movzbl (%ecx),%eax
- 191:	0f b6 1a             	movzbl (%edx),%ebx
- 194:	84 c0                	test   %al,%al
- 196:	75 19                	jne    1b1 <strcmp+0x31>
- 198:	eb 26                	jmp    1c0 <strcmp+0x40>
- 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 1a0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
- 1a4:	83 c1 01             	add    $0x1,%ecx
- 1a7:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
- 1aa:	0f b6 1a             	movzbl (%edx),%ebx
- 1ad:	84 c0                	test   %al,%al
- 1af:	74 0f                	je     1c0 <strcmp+0x40>
- 1b1:	38 d8                	cmp    %bl,%al
- 1b3:	74 eb                	je     1a0 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
- 1b5:	29 d8                	sub    %ebx,%eax
-}
- 1b7:	5b                   	pop    %ebx
- 1b8:	5d                   	pop    %ebp
- 1b9:	c3                   	ret    
- 1ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 1c0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
- 1c2:	29 d8                	sub    %ebx,%eax
-}
- 1c4:	5b                   	pop    %ebx
- 1c5:	5d                   	pop    %ebp
- 1c6:	c3                   	ret    
- 1c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1ce:	66 90                	xchg   %ax,%ax
-
-000001d0 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 1d0:	f3 0f 1e fb          	endbr32 
- 1d4:	55                   	push   %ebp
- 1d5:	89 e5                	mov    %esp,%ebp
- 1d7:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 1da:	80 3a 00             	cmpb   $0x0,(%edx)
- 1dd:	74 21                	je     200 <strlen+0x30>
- 1df:	31 c0                	xor    %eax,%eax
- 1e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1e8:	83 c0 01             	add    $0x1,%eax
- 1eb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 1ef:	89 c1                	mov    %eax,%ecx
- 1f1:	75 f5                	jne    1e8 <strlen+0x18>
-    ;
-  return n;
-}
- 1f3:	89 c8                	mov    %ecx,%eax
- 1f5:	5d                   	pop    %ebp
- 1f6:	c3                   	ret    
- 1f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1fe:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 200:	31 c9                	xor    %ecx,%ecx
-}
- 202:	5d                   	pop    %ebp
- 203:	89 c8                	mov    %ecx,%eax
- 205:	c3                   	ret    
- 206:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 20d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000210 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 210:	f3 0f 1e fb          	endbr32 
- 214:	55                   	push   %ebp
- 215:	89 e5                	mov    %esp,%ebp
- 217:	57                   	push   %edi
- 218:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 21b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 21e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 221:	89 d7                	mov    %edx,%edi
- 223:	fc                   	cld    
- 224:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 226:	89 d0                	mov    %edx,%eax
- 228:	5f                   	pop    %edi
- 229:	5d                   	pop    %ebp
- 22a:	c3                   	ret    
- 22b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 22f:	90                   	nop
-
-00000230 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 230:	f3 0f 1e fb          	endbr32 
- 234:	55                   	push   %ebp
- 235:	89 e5                	mov    %esp,%ebp
- 237:	8b 45 08             	mov    0x8(%ebp),%eax
- 23a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 23e:	0f b6 10             	movzbl (%eax),%edx
- 241:	84 d2                	test   %dl,%dl
- 243:	75 16                	jne    25b <strchr+0x2b>
- 245:	eb 21                	jmp    268 <strchr+0x38>
- 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 24e:	66 90                	xchg   %ax,%ax
- 250:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 254:	83 c0 01             	add    $0x1,%eax
- 257:	84 d2                	test   %dl,%dl
- 259:	74 0d                	je     268 <strchr+0x38>
-    if(*s == c)
- 25b:	38 d1                	cmp    %dl,%cl
- 25d:	75 f1                	jne    250 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 25f:	5d                   	pop    %ebp
- 260:	c3                   	ret    
- 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 268:	31 c0                	xor    %eax,%eax
-}
- 26a:	5d                   	pop    %ebp
- 26b:	c3                   	ret    
- 26c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000270 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 270:	f3 0f 1e fb          	endbr32 
- 274:	55                   	push   %ebp
- 275:	89 e5                	mov    %esp,%ebp
- 277:	57                   	push   %edi
- 278:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 279:	31 f6                	xor    %esi,%esi
-{
- 27b:	53                   	push   %ebx
- 27c:	89 f3                	mov    %esi,%ebx
- 27e:	83 ec 1c             	sub    $0x1c,%esp
- 281:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 284:	eb 33                	jmp    2b9 <gets+0x49>
- 286:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 28d:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 290:	83 ec 04             	sub    $0x4,%esp
- 293:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 296:	6a 01                	push   $0x1
- 298:	50                   	push   %eax
- 299:	6a 00                	push   $0x0
- 29b:	e8 2b 01 00 00       	call   3cb <read>
-    if(cc < 1)
- 2a0:	83 c4 10             	add    $0x10,%esp
- 2a3:	85 c0                	test   %eax,%eax
- 2a5:	7e 1c                	jle    2c3 <gets+0x53>
-      break;
-    buf[i++] = c;
- 2a7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 2ab:	83 c7 01             	add    $0x1,%edi
- 2ae:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 2b1:	3c 0a                	cmp    $0xa,%al
- 2b3:	74 23                	je     2d8 <gets+0x68>
- 2b5:	3c 0d                	cmp    $0xd,%al
- 2b7:	74 1f                	je     2d8 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 2b9:	83 c3 01             	add    $0x1,%ebx
- 2bc:	89 fe                	mov    %edi,%esi
- 2be:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 2c1:	7c cd                	jl     290 <gets+0x20>
- 2c3:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 2c5:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 2c8:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 2cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 2ce:	5b                   	pop    %ebx
- 2cf:	5e                   	pop    %esi
- 2d0:	5f                   	pop    %edi
- 2d1:	5d                   	pop    %ebp
- 2d2:	c3                   	ret    
- 2d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 2d7:	90                   	nop
- 2d8:	8b 75 08             	mov    0x8(%ebp),%esi
- 2db:	8b 45 08             	mov    0x8(%ebp),%eax
- 2de:	01 de                	add    %ebx,%esi
- 2e0:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 2e2:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 2e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 2e8:	5b                   	pop    %ebx
- 2e9:	5e                   	pop    %esi
- 2ea:	5f                   	pop    %edi
- 2eb:	5d                   	pop    %ebp
- 2ec:	c3                   	ret    
- 2ed:	8d 76 00             	lea    0x0(%esi),%esi
-
-000002f0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 2f0:	f3 0f 1e fb          	endbr32 
- 2f4:	55                   	push   %ebp
- 2f5:	89 e5                	mov    %esp,%ebp
- 2f7:	56                   	push   %esi
- 2f8:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 2f9:	83 ec 08             	sub    $0x8,%esp
- 2fc:	6a 00                	push   $0x0
- 2fe:	ff 75 08             	pushl  0x8(%ebp)
- 301:	e8 ed 00 00 00       	call   3f3 <open>
-  if(fd < 0)
- 306:	83 c4 10             	add    $0x10,%esp
- 309:	85 c0                	test   %eax,%eax
- 30b:	78 2b                	js     338 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 30d:	83 ec 08             	sub    $0x8,%esp
- 310:	ff 75 0c             	pushl  0xc(%ebp)
- 313:	89 c3                	mov    %eax,%ebx
- 315:	50                   	push   %eax
- 316:	e8 f0 00 00 00       	call   40b <fstat>
-  close(fd);
- 31b:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 31e:	89 c6                	mov    %eax,%esi
-  close(fd);
- 320:	e8 b6 00 00 00       	call   3db <close>
-  return r;
- 325:	83 c4 10             	add    $0x10,%esp
-}
- 328:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 32b:	89 f0                	mov    %esi,%eax
- 32d:	5b                   	pop    %ebx
- 32e:	5e                   	pop    %esi
- 32f:	5d                   	pop    %ebp
- 330:	c3                   	ret    
- 331:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 338:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 33d:	eb e9                	jmp    328 <stat+0x38>
- 33f:	90                   	nop
-
-00000340 <atoi>:
-
-int
-atoi(const char *s)
-{
- 340:	f3 0f 1e fb          	endbr32 
- 344:	55                   	push   %ebp
- 345:	89 e5                	mov    %esp,%ebp
- 347:	53                   	push   %ebx
- 348:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 34b:	0f be 02             	movsbl (%edx),%eax
- 34e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 351:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 354:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 359:	77 1a                	ja     375 <atoi+0x35>
- 35b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 35f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 360:	83 c2 01             	add    $0x1,%edx
- 363:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 366:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 36a:	0f be 02             	movsbl (%edx),%eax
- 36d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 370:	80 fb 09             	cmp    $0x9,%bl
- 373:	76 eb                	jbe    360 <atoi+0x20>
-  return n;
-}
- 375:	89 c8                	mov    %ecx,%eax
- 377:	5b                   	pop    %ebx
- 378:	5d                   	pop    %ebp
- 379:	c3                   	ret    
- 37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000380 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 380:	f3 0f 1e fb          	endbr32 
- 384:	55                   	push   %ebp
- 385:	89 e5                	mov    %esp,%ebp
- 387:	57                   	push   %edi
- 388:	8b 45 10             	mov    0x10(%ebp),%eax
- 38b:	8b 55 08             	mov    0x8(%ebp),%edx
- 38e:	56                   	push   %esi
- 38f:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 392:	85 c0                	test   %eax,%eax
- 394:	7e 0f                	jle    3a5 <memmove+0x25>
- 396:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 398:	89 d7                	mov    %edx,%edi
- 39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 3a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 3a1:	39 f8                	cmp    %edi,%eax
- 3a3:	75 fb                	jne    3a0 <memmove+0x20>
-  return vdst;
-}
- 3a5:	5e                   	pop    %esi
- 3a6:	89 d0                	mov    %edx,%eax
- 3a8:	5f                   	pop    %edi
- 3a9:	5d                   	pop    %ebp
- 3aa:	c3                   	ret    
-
-000003ab <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 3ab:	b8 01 00 00 00       	mov    $0x1,%eax
- 3b0:	cd 40                	int    $0x40
- 3b2:	c3                   	ret    
-
-000003b3 <exit>:
-SYSCALL(exit)
- 3b3:	b8 02 00 00 00       	mov    $0x2,%eax
- 3b8:	cd 40                	int    $0x40
- 3ba:	c3                   	ret    
-
-000003bb <wait>:
-SYSCALL(wait)
- 3bb:	b8 03 00 00 00       	mov    $0x3,%eax
- 3c0:	cd 40                	int    $0x40
- 3c2:	c3                   	ret    
-
-000003c3 <pipe>:
-SYSCALL(pipe)
- 3c3:	b8 04 00 00 00       	mov    $0x4,%eax
- 3c8:	cd 40                	int    $0x40
- 3ca:	c3                   	ret    
-
-000003cb <read>:
-SYSCALL(read)
- 3cb:	b8 05 00 00 00       	mov    $0x5,%eax
- 3d0:	cd 40                	int    $0x40
- 3d2:	c3                   	ret    
-
-000003d3 <write>:
-SYSCALL(write)
- 3d3:	b8 10 00 00 00       	mov    $0x10,%eax
- 3d8:	cd 40                	int    $0x40
- 3da:	c3                   	ret    
-
-000003db <close>:
-SYSCALL(close)
- 3db:	b8 15 00 00 00       	mov    $0x15,%eax
- 3e0:	cd 40                	int    $0x40
- 3e2:	c3                   	ret    
-
-000003e3 <kill>:
-SYSCALL(kill)
- 3e3:	b8 06 00 00 00       	mov    $0x6,%eax
- 3e8:	cd 40                	int    $0x40
- 3ea:	c3                   	ret    
-
-000003eb <exec>:
-SYSCALL(exec)
- 3eb:	b8 07 00 00 00       	mov    $0x7,%eax
- 3f0:	cd 40                	int    $0x40
- 3f2:	c3                   	ret    
-
-000003f3 <open>:
-SYSCALL(open)
- 3f3:	b8 0f 00 00 00       	mov    $0xf,%eax
- 3f8:	cd 40                	int    $0x40
- 3fa:	c3                   	ret    
-
-000003fb <mknod>:
-SYSCALL(mknod)
- 3fb:	b8 11 00 00 00       	mov    $0x11,%eax
- 400:	cd 40                	int    $0x40
- 402:	c3                   	ret    
-
-00000403 <unlink>:
-SYSCALL(unlink)
- 403:	b8 12 00 00 00       	mov    $0x12,%eax
- 408:	cd 40                	int    $0x40
- 40a:	c3                   	ret    
-
-0000040b <fstat>:
-SYSCALL(fstat)
- 40b:	b8 08 00 00 00       	mov    $0x8,%eax
- 410:	cd 40                	int    $0x40
- 412:	c3                   	ret    
-
-00000413 <link>:
-SYSCALL(link)
- 413:	b8 13 00 00 00       	mov    $0x13,%eax
- 418:	cd 40                	int    $0x40
- 41a:	c3                   	ret    
-
-0000041b <mkdir>:
-SYSCALL(mkdir)
- 41b:	b8 14 00 00 00       	mov    $0x14,%eax
- 420:	cd 40                	int    $0x40
- 422:	c3                   	ret    
-
-00000423 <chdir>:
-SYSCALL(chdir)
- 423:	b8 09 00 00 00       	mov    $0x9,%eax
- 428:	cd 40                	int    $0x40
- 42a:	c3                   	ret    
-
-0000042b <dup>:
-SYSCALL(dup)
- 42b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 430:	cd 40                	int    $0x40
- 432:	c3                   	ret    
-
-00000433 <getpid>:
-SYSCALL(getpid)
- 433:	b8 0b 00 00 00       	mov    $0xb,%eax
- 438:	cd 40                	int    $0x40
- 43a:	c3                   	ret    
-
-0000043b <sbrk>:
-SYSCALL(sbrk)
- 43b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 440:	cd 40                	int    $0x40
- 442:	c3                   	ret    
-
-00000443 <sleep>:
-SYSCALL(sleep)
- 443:	b8 0d 00 00 00       	mov    $0xd,%eax
- 448:	cd 40                	int    $0x40
- 44a:	c3                   	ret    
-
-0000044b <uptime>:
-SYSCALL(uptime)
- 44b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 450:	cd 40                	int    $0x40
- 452:	c3                   	ret    
-
-00000453 <draw>:
-SYSCALL(draw)
- 453:	b8 16 00 00 00       	mov    $0x16,%eax
- 458:	cd 40                	int    $0x40
- 45a:	c3                   	ret    
-
-0000045b <thread_create>:
-SYSCALL(thread_create)
- 45b:	b8 18 00 00 00       	mov    $0x18,%eax
- 460:	cd 40                	int    $0x40
- 462:	c3                   	ret    
-
-00000463 <thread_join>:
-SYSCALL(thread_join)
- 463:	b8 19 00 00 00       	mov    $0x19,%eax
- 468:	cd 40                	int    $0x40
- 46a:	c3                   	ret    
-
-0000046b <thread_exit>:
-SYSCALL(thread_exit)
- 46b:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 470:	cd 40                	int    $0x40
- 472:	c3                   	ret    
diff -ruN xv6-public/forktest.c xv6-public-mynew/forktest.c
--- xv6-public/forktest.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/forktest.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,56 +0,0 @@
-// Test that fork fails gracefully.
-// Tiny executable so that the limit can be filling the proc table.
-
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-#define N  1000
-
-void
-printf(int fd, const char *s, ...)
-{
-  write(fd, s, strlen(s));
-}
-
-void
-forktest(void)
-{
-  int n, pid;
-
-  printf(1, "fork test\n");
-
-  for(n=0; n<N; n++){
-    pid = fork();
-    if(pid < 0)
-      break;
-    if(pid == 0)
-      exit();
-  }
-
-  if(n == N){
-    printf(1, "fork claimed to work N times!\n", N);
-    exit();
-  }
-
-  for(; n > 0; n--){
-    if(wait() < 0){
-      printf(1, "wait stopped early\n");
-      exit();
-    }
-  }
-
-  if(wait() != -1){
-    printf(1, "wait got too many\n");
-    exit();
-  }
-
-  printf(1, "fork test OK\n");
-}
-
-int
-main(void)
-{
-  forktest();
-  exit();
-}
diff -ruN xv6-public/forktest.d xv6-public-mynew/forktest.d
--- xv6-public/forktest.d	2022-09-05 09:51:05.054999132 +0530
+++ xv6-public-mynew/forktest.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/forktest.o and xv6-public-mynew/forktest.o differ
diff -ruN xv6-public/fs.c xv6-public-mynew/fs.c
--- xv6-public/fs.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/fs.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,670 +0,0 @@
-// File system implementation.  Five layers:
-//   + Blocks: allocator for raw disk blocks.
-//   + Log: crash recovery for multi-step updates.
-//   + Files: inode allocator, reading, writing, metadata.
-//   + Directories: inode with special contents (list of other inodes!)
-//   + Names: paths like /usr/rtm/xv6/fs.c for convenient naming.
-//
-// This file contains the low-level file system manipulation
-// routines.  The (higher-level) system call implementations
-// are in sysfile.c.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "stat.h"
-#include "mmu.h"
-#include "proc.h"
-#include "spinlock.h"
-#include "sleeplock.h"
-#include "fs.h"
-#include "buf.h"
-#include "file.h"
-
-#define min(a, b) ((a) < (b) ? (a) : (b))
-static void itrunc(struct inode*);
-// there should be one superblock per disk device, but we run with
-// only one device
-struct superblock sb; 
-
-// Read the super block.
-void
-readsb(int dev, struct superblock *sb)
-{
-  struct buf *bp;
-
-  bp = bread(dev, 1);
-  memmove(sb, bp->data, sizeof(*sb));
-  brelse(bp);
-}
-
-// Zero a block.
-static void
-bzero(int dev, int bno)
-{
-  struct buf *bp;
-
-  bp = bread(dev, bno);
-  memset(bp->data, 0, BSIZE);
-  log_write(bp);
-  brelse(bp);
-}
-
-// Blocks.
-
-// Allocate a zeroed disk block.
-static uint
-balloc(uint dev)
-{
-  int b, bi, m;
-  struct buf *bp;
-
-  bp = 0;
-  for(b = 0; b < sb.size; b += BPB){
-    bp = bread(dev, BBLOCK(b, sb));
-    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-      m = 1 << (bi % 8);
-      if((bp->data[bi/8] & m) == 0){  // Is block free?
-        bp->data[bi/8] |= m;  // Mark block in use.
-        log_write(bp);
-        brelse(bp);
-        bzero(dev, b + bi);
-        return b + bi;
-      }
-    }
-    brelse(bp);
-  }
-  panic("balloc: out of blocks");
-}
-
-// Free a disk block.
-static void
-bfree(int dev, uint b)
-{
-  struct buf *bp;
-  int bi, m;
-
-  bp = bread(dev, BBLOCK(b, sb));
-  bi = b % BPB;
-  m = 1 << (bi % 8);
-  if((bp->data[bi/8] & m) == 0)
-    panic("freeing free block");
-  bp->data[bi/8] &= ~m;
-  log_write(bp);
-  brelse(bp);
-}
-
-// Inodes.
-//
-// An inode describes a single unnamed file.
-// The inode disk structure holds metadata: the file's type,
-// its size, the number of links referring to it, and the
-// list of blocks holding the file's content.
-//
-// The inodes are laid out sequentially on disk at
-// sb.startinode. Each inode has a number, indicating its
-// position on the disk.
-//
-// The kernel keeps a cache of in-use inodes in memory
-// to provide a place for synchronizing access
-// to inodes used by multiple processes. The cached
-// inodes include book-keeping information that is
-// not stored on disk: ip->ref and ip->valid.
-//
-// An inode and its in-memory representation go through a
-// sequence of states before they can be used by the
-// rest of the file system code.
-//
-// * Allocation: an inode is allocated if its type (on disk)
-//   is non-zero. ialloc() allocates, and iput() frees if
-//   the reference and link counts have fallen to zero.
-//
-// * Referencing in cache: an entry in the inode cache
-//   is free if ip->ref is zero. Otherwise ip->ref tracks
-//   the number of in-memory pointers to the entry (open
-//   files and current directories). iget() finds or
-//   creates a cache entry and increments its ref; iput()
-//   decrements ref.
-//
-// * Valid: the information (type, size, &c) in an inode
-//   cache entry is only correct when ip->valid is 1.
-//   ilock() reads the inode from
-//   the disk and sets ip->valid, while iput() clears
-//   ip->valid if ip->ref has fallen to zero.
-//
-// * Locked: file system code may only examine and modify
-//   the information in an inode and its content if it
-//   has first locked the inode.
-//
-// Thus a typical sequence is:
-//   ip = iget(dev, inum)
-//   ilock(ip)
-//   ... examine and modify ip->xxx ...
-//   iunlock(ip)
-//   iput(ip)
-//
-// ilock() is separate from iget() so that system calls can
-// get a long-term reference to an inode (as for an open file)
-// and only lock it for short periods (e.g., in read()).
-// The separation also helps avoid deadlock and races during
-// pathname lookup. iget() increments ip->ref so that the inode
-// stays cached and pointers to it remain valid.
-//
-// Many internal file system functions expect the caller to
-// have locked the inodes involved; this lets callers create
-// multi-step atomic operations.
-//
-// The icache.lock spin-lock protects the allocation of icache
-// entries. Since ip->ref indicates whether an entry is free,
-// and ip->dev and ip->inum indicate which i-node an entry
-// holds, one must hold icache.lock while using any of those fields.
-//
-// An ip->lock sleep-lock protects all ip-> fields other than ref,
-// dev, and inum.  One must hold ip->lock in order to
-// read or write that inode's ip->valid, ip->size, ip->type, &c.
-
-struct {
-  struct spinlock lock;
-  struct inode inode[NINODE];
-} icache;
-
-void
-iinit(int dev)
-{
-  int i = 0;
-  
-  initlock(&icache.lock, "icache");
-  for(i = 0; i < NINODE; i++) {
-    initsleeplock(&icache.inode[i].lock, "inode");
-  }
-
-  readsb(dev, &sb);
-  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
- inodestart %d bmap start %d\n", sb.size, sb.nblocks,
-          sb.ninodes, sb.nlog, sb.logstart, sb.inodestart,
-          sb.bmapstart);
-}
-
-static struct inode* iget(uint dev, uint inum);
-
-//PAGEBREAK!
-// Allocate an inode on device dev.
-// Mark it as allocated by  giving it type type.
-// Returns an unlocked but allocated and referenced inode.
-struct inode*
-ialloc(uint dev, short type)
-{
-  int inum;
-  struct buf *bp;
-  struct dinode *dip;
-
-  for(inum = 1; inum < sb.ninodes; inum++){
-    bp = bread(dev, IBLOCK(inum, sb));
-    dip = (struct dinode*)bp->data + inum%IPB;
-    if(dip->type == 0){  // a free inode
-      memset(dip, 0, sizeof(*dip));
-      dip->type = type;
-      log_write(bp);   // mark it allocated on the disk
-      brelse(bp);
-      return iget(dev, inum);
-    }
-    brelse(bp);
-  }
-  panic("ialloc: no inodes");
-}
-
-// Copy a modified in-memory inode to disk.
-// Must be called after every change to an ip->xxx field
-// that lives on disk, since i-node cache is write-through.
-// Caller must hold ip->lock.
-void
-iupdate(struct inode *ip)
-{
-  struct buf *bp;
-  struct dinode *dip;
-
-  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-  dip = (struct dinode*)bp->data + ip->inum%IPB;
-  dip->type = ip->type;
-  dip->major = ip->major;
-  dip->minor = ip->minor;
-  dip->nlink = ip->nlink;
-  dip->size = ip->size;
-  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-  log_write(bp);
-  brelse(bp);
-}
-
-// Find the inode with number inum on device dev
-// and return the in-memory copy. Does not lock
-// the inode and does not read it from disk.
-static struct inode*
-iget(uint dev, uint inum)
-{
-  struct inode *ip, *empty;
-
-  acquire(&icache.lock);
-
-  // Is the inode already cached?
-  empty = 0;
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-      ip->ref++;
-      release(&icache.lock);
-      return ip;
-    }
-    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
-      empty = ip;
-  }
-
-  // Recycle an inode cache entry.
-  if(empty == 0)
-    panic("iget: no inodes");
-
-  ip = empty;
-  ip->dev = dev;
-  ip->inum = inum;
-  ip->ref = 1;
-  ip->valid = 0;
-  release(&icache.lock);
-
-  return ip;
-}
-
-// Increment reference count for ip.
-// Returns ip to enable ip = idup(ip1) idiom.
-struct inode*
-idup(struct inode *ip)
-{
-  acquire(&icache.lock);
-  ip->ref++;
-  release(&icache.lock);
-  return ip;
-}
-
-// Lock the given inode.
-// Reads the inode from disk if necessary.
-void
-ilock(struct inode *ip)
-{
-  struct buf *bp;
-  struct dinode *dip;
-
-  if(ip == 0 || ip->ref < 1)
-    panic("ilock");
-
-  acquiresleep(&ip->lock);
-
-  if(ip->valid == 0){
-    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-    dip = (struct dinode*)bp->data + ip->inum%IPB;
-    ip->type = dip->type;
-    ip->major = dip->major;
-    ip->minor = dip->minor;
-    ip->nlink = dip->nlink;
-    ip->size = dip->size;
-    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
-    brelse(bp);
-    ip->valid = 1;
-    if(ip->type == 0)
-      panic("ilock: no type");
-  }
-}
-
-// Unlock the given inode.
-void
-iunlock(struct inode *ip)
-{
-  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
-    panic("iunlock");
-
-  releasesleep(&ip->lock);
-}
-
-// Drop a reference to an in-memory inode.
-// If that was the last reference, the inode cache entry can
-// be recycled.
-// If that was the last reference and the inode has no links
-// to it, free the inode (and its content) on disk.
-// All calls to iput() must be inside a transaction in
-// case it has to free the inode.
-void
-iput(struct inode *ip)
-{
-  acquiresleep(&ip->lock);
-  if(ip->valid && ip->nlink == 0){
-    acquire(&icache.lock);
-    int r = ip->ref;
-    release(&icache.lock);
-    if(r == 1){
-      // inode has no links and no other references: truncate and free.
-      itrunc(ip);
-      ip->type = 0;
-      iupdate(ip);
-      ip->valid = 0;
-    }
-  }
-  releasesleep(&ip->lock);
-
-  acquire(&icache.lock);
-  ip->ref--;
-  release(&icache.lock);
-}
-
-// Common idiom: unlock, then put.
-void
-iunlockput(struct inode *ip)
-{
-  iunlock(ip);
-  iput(ip);
-}
-
-//PAGEBREAK!
-// Inode content
-//
-// The content (data) associated with each inode is stored
-// in blocks on the disk. The first NDIRECT block numbers
-// are listed in ip->addrs[].  The next NINDIRECT blocks are
-// listed in block ip->addrs[NDIRECT].
-
-// Return the disk block address of the nth block in inode ip.
-// If there is no such block, bmap allocates one.
-static uint
-bmap(struct inode *ip, uint bn)
-{
-  uint addr, *a;
-  struct buf *bp;
-
-  if(bn < NDIRECT){
-    if((addr = ip->addrs[bn]) == 0)
-      ip->addrs[bn] = addr = balloc(ip->dev);
-    return addr;
-  }
-  bn -= NDIRECT;
-
-  if(bn < NINDIRECT){
-    // Load indirect block, allocating if necessary.
-    if((addr = ip->addrs[NDIRECT]) == 0)
-      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
-    bp = bread(ip->dev, addr);
-    a = (uint*)bp->data;
-    if((addr = a[bn]) == 0){
-      a[bn] = addr = balloc(ip->dev);
-      log_write(bp);
-    }
-    brelse(bp);
-    return addr;
-  }
-
-  panic("bmap: out of range");
-}
-
-// Truncate inode (discard contents).
-// Only called when the inode has no links
-// to it (no directory entries referring to it)
-// and has no in-memory reference to it (is
-// not an open file or current directory).
-static void
-itrunc(struct inode *ip)
-{
-  int i, j;
-  struct buf *bp;
-  uint *a;
-
-  for(i = 0; i < NDIRECT; i++){
-    if(ip->addrs[i]){
-      bfree(ip->dev, ip->addrs[i]);
-      ip->addrs[i] = 0;
-    }
-  }
-
-  if(ip->addrs[NDIRECT]){
-    bp = bread(ip->dev, ip->addrs[NDIRECT]);
-    a = (uint*)bp->data;
-    for(j = 0; j < NINDIRECT; j++){
-      if(a[j])
-        bfree(ip->dev, a[j]);
-    }
-    brelse(bp);
-    bfree(ip->dev, ip->addrs[NDIRECT]);
-    ip->addrs[NDIRECT] = 0;
-  }
-
-  ip->size = 0;
-  iupdate(ip);
-}
-
-// Copy stat information from inode.
-// Caller must hold ip->lock.
-void
-stati(struct inode *ip, struct stat *st)
-{
-  st->dev = ip->dev;
-  st->ino = ip->inum;
-  st->type = ip->type;
-  st->nlink = ip->nlink;
-  st->size = ip->size;
-}
-
-//PAGEBREAK!
-// Read data from inode.
-// Caller must hold ip->lock.
-int
-readi(struct inode *ip, char *dst, uint off, uint n)
-{
-  uint tot, m;
-  struct buf *bp;
-
-  if(ip->type == T_DEV){
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
-      return -1;
-    return devsw[ip->major].read(ip, dst, n);
-  }
-
-  if(off > ip->size || off + n < off)
-    return -1;
-  if(off + n > ip->size)
-    n = ip->size - off;
-
-  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-    m = min(n - tot, BSIZE - off%BSIZE);
-    memmove(dst, bp->data + off%BSIZE, m);
-    brelse(bp);
-  }
-  return n;
-}
-
-// PAGEBREAK!
-// Write data to inode.
-// Caller must hold ip->lock.
-int
-writei(struct inode *ip, char *src, uint off, uint n)
-{
-  uint tot, m;
-  struct buf *bp;
-
-  if(ip->type == T_DEV){
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
-      return -1;
-    return devsw[ip->major].write(ip, src, n);
-  }
-
-  if(off > ip->size || off + n < off)
-    return -1;
-  if(off + n > MAXFILE*BSIZE)
-    return -1;
-
-  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-    m = min(n - tot, BSIZE - off%BSIZE);
-    memmove(bp->data + off%BSIZE, src, m);
-    log_write(bp);
-    brelse(bp);
-  }
-
-  if(n > 0 && off > ip->size){
-    ip->size = off;
-    iupdate(ip);
-  }
-  return n;
-}
-
-//PAGEBREAK!
-// Directories
-
-int
-namecmp(const char *s, const char *t)
-{
-  return strncmp(s, t, DIRSIZ);
-}
-
-// Look for a directory entry in a directory.
-// If found, set *poff to byte offset of entry.
-struct inode*
-dirlookup(struct inode *dp, char *name, uint *poff)
-{
-  uint off, inum;
-  struct dirent de;
-
-  if(dp->type != T_DIR)
-    panic("dirlookup not DIR");
-
-  for(off = 0; off < dp->size; off += sizeof(de)){
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-      panic("dirlookup read");
-    if(de.inum == 0)
-      continue;
-    if(namecmp(name, de.name) == 0){
-      // entry matches path element
-      if(poff)
-        *poff = off;
-      inum = de.inum;
-      return iget(dp->dev, inum);
-    }
-  }
-
-  return 0;
-}
-
-// Write a new directory entry (name, inum) into the directory dp.
-int
-dirlink(struct inode *dp, char *name, uint inum)
-{
-  int off;
-  struct dirent de;
-  struct inode *ip;
-
-  // Check that name is not present.
-  if((ip = dirlookup(dp, name, 0)) != 0){
-    iput(ip);
-    return -1;
-  }
-
-  // Look for an empty dirent.
-  for(off = 0; off < dp->size; off += sizeof(de)){
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-      panic("dirlink read");
-    if(de.inum == 0)
-      break;
-  }
-
-  strncpy(de.name, name, DIRSIZ);
-  de.inum = inum;
-  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-    panic("dirlink");
-
-  return 0;
-}
-
-//PAGEBREAK!
-// Paths
-
-// Copy the next path element from path into name.
-// Return a pointer to the element following the copied one.
-// The returned path has no leading slashes,
-// so the caller can check *path=='\0' to see if the name is the last one.
-// If no name to remove, return 0.
-//
-// Examples:
-//   skipelem("a/bb/c", name) = "bb/c", setting name = "a"
-//   skipelem("///a//bb", name) = "bb", setting name = "a"
-//   skipelem("a", name) = "", setting name = "a"
-//   skipelem("", name) = skipelem("////", name) = 0
-//
-static char*
-skipelem(char *path, char *name)
-{
-  char *s;
-  int len;
-
-  while(*path == '/')
-    path++;
-  if(*path == 0)
-    return 0;
-  s = path;
-  while(*path != '/' && *path != 0)
-    path++;
-  len = path - s;
-  if(len >= DIRSIZ)
-    memmove(name, s, DIRSIZ);
-  else {
-    memmove(name, s, len);
-    name[len] = 0;
-  }
-  while(*path == '/')
-    path++;
-  return path;
-}
-
-// Look up and return the inode for a path name.
-// If parent != 0, return the inode for the parent and copy the final
-// path element into name, which must have room for DIRSIZ bytes.
-// Must be called inside a transaction since it calls iput().
-static struct inode*
-namex(char *path, int nameiparent, char *name)
-{
-  struct inode *ip, *next;
-
-  if(*path == '/')
-    ip = iget(ROOTDEV, ROOTINO);
-  else
-    ip = idup(myproc()->cwd);
-
-  while((path = skipelem(path, name)) != 0){
-    ilock(ip);
-    if(ip->type != T_DIR){
-      iunlockput(ip);
-      return 0;
-    }
-    if(nameiparent && *path == '\0'){
-      // Stop one level early.
-      iunlock(ip);
-      return ip;
-    }
-    if((next = dirlookup(ip, name, 0)) == 0){
-      iunlockput(ip);
-      return 0;
-    }
-    iunlockput(ip);
-    ip = next;
-  }
-  if(nameiparent){
-    iput(ip);
-    return 0;
-  }
-  return ip;
-}
-
-struct inode*
-namei(char *path)
-{
-  char name[DIRSIZ];
-  return namex(path, 0, name);
-}
-
-struct inode*
-nameiparent(char *path, char *name)
-{
-  return namex(path, 1, name);
-}
diff -ruN xv6-public/fs.d xv6-public-mynew/fs.d
--- xv6-public/fs.d	2022-09-05 09:51:07.402999200 +0530
+++ xv6-public-mynew/fs.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-fs.o: fs.c /usr/include/stdc-predef.h types.h defs.h param.h stat.h mmu.h \
- proc.h spinlock.h sleeplock.h fs.h buf.h file.h
diff -ruN xv6-public/fs.h xv6-public-mynew/fs.h
--- xv6-public/fs.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/fs.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,57 +0,0 @@
-// On-disk file system format.
-// Both the kernel and user programs use this header file.
-
-
-#define ROOTINO 1  // root i-number
-#define BSIZE 512  // block size
-
-// Disk layout:
-// [ boot block | super block | log | inode blocks |
-//                                          free bit map | data blocks]
-//
-// mkfs computes the super block and builds an initial file system. The
-// super block describes the disk layout:
-struct superblock {
-  uint size;         // Size of file system image (blocks)
-  uint nblocks;      // Number of data blocks
-  uint ninodes;      // Number of inodes.
-  uint nlog;         // Number of log blocks
-  uint logstart;     // Block number of first log block
-  uint inodestart;   // Block number of first inode block
-  uint bmapstart;    // Block number of first free map block
-};
-
-#define NDIRECT 12
-#define NINDIRECT (BSIZE / sizeof(uint))
-#define MAXFILE (NDIRECT + NINDIRECT)
-
-// On-disk inode structure
-struct dinode {
-  short type;           // File type
-  short major;          // Major device number (T_DEV only)
-  short minor;          // Minor device number (T_DEV only)
-  short nlink;          // Number of links to inode in file system
-  uint size;            // Size of file (bytes)
-  uint addrs[NDIRECT+1];   // Data block addresses
-};
-
-// Inodes per block.
-#define IPB           (BSIZE / sizeof(struct dinode))
-
-// Block containing inode i
-#define IBLOCK(i, sb)     ((i) / IPB + sb.inodestart)
-
-// Bitmap bits per block
-#define BPB           (BSIZE*8)
-
-// Block of free map containing bit for block b
-#define BBLOCK(b, sb) (b/BPB + sb.bmapstart)
-
-// Directory is a file containing a sequence of dirent structures.
-#define DIRSIZ 14
-
-struct dirent {
-  ushort inum;
-  char name[DIRSIZ];
-};
-
Binary files xv6-public/fs.img and xv6-public-mynew/fs.img differ
Binary files xv6-public/fs.o and xv6-public-mynew/fs.o differ
diff -ruN xv6-public/.gdbinit.tmpl xv6-public-mynew/.gdbinit.tmpl
--- xv6-public/.gdbinit.tmpl	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/.gdbinit.tmpl	1970-01-01 05:30:00.000000000 +0530
@@ -1,27 +0,0 @@
-set $lastcs = -1
-
-define hook-stop
-  # There doesn't seem to be a good way to detect if we're in 16- or
-  # 32-bit mode, but in 32-bit mode we always run with CS == 8 in the
-  # kernel and CS == 35 in user space
-  if $cs == 8 || $cs == 35
-    if $lastcs != 8 && $lastcs != 35
-      set architecture i386
-    end
-    x/i $pc
-  else
-    if $lastcs == -1 || $lastcs == 8 || $lastcs == 35
-      set architecture i8086
-    end
-    # Translate the segment:offset into a physical address
-    printf "[%4x:%4x] ", $cs, $eip
-    x/i $cs*16+$eip
-  end
-  set $lastcs = $cs
-end
-
-echo + target remote localhost:1234\n
-target remote localhost:1234
-
-echo + symbol-file kernel\n
-symbol-file kernel
diff -ruN xv6-public/gdbutil xv6-public-mynew/gdbutil
--- xv6-public/gdbutil	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/gdbutil	1970-01-01 05:30:00.000000000 +0530
@@ -1,291 +0,0 @@
-# -*- gdb-script -*-
-
-# Utility functions to pretty-print x86 segment/interrupt descriptors.
-# To load this file, run "source gdbutil" in gdb.
-# printdesc and printdescs are the main entry points.
-
-# IA32 2007, Volume 3A, Table 3-2
-set $STS_T16A = 0x1
-set $STS_LDT  = 0x2
-set $STS_T16B = 0x3
-set $STS_CG16 = 0x4
-set $STS_TG   = 0x5
-set $STS_IG16 = 0x6
-set $STS_TG16 = 0x7
-set $STS_T32A = 0x9
-set $STS_T32B = 0xB
-set $STS_CG32 = 0xC
-set $STS_IG32 = 0xE
-set $STS_TG32 = 0xF
-
-define outputsts
-  while 1
-    if $arg0 == $STS_T16A
-      echo STS_T16A
-      loop_break
-    end
-    if $arg0 == $STS_LDT
-      echo STS_LDT\ 
-      loop_break
-    end
-    if $arg0 == $STS_T16B
-      echo STS_T16B
-      loop_break
-    end
-    if $arg0 == $STS_CG16
-      echo STS_CG16
-      loop_break
-    end
-    if $arg0 == $STS_TG
-      echo STS_TG\ \ 
-      loop_break
-    end
-    if $arg0 == $STS_IG16
-      echo STS_IG16
-      loop_break
-    end
-    if $arg0 == $STS_TG16
-      echo STS_TG16
-      loop_break
-    end
-    if $arg0 == $STS_T32A
-      echo STS_T32A
-      loop_break
-    end
-    if $arg0 == $STS_T32B
-      echo STS_T32B
-      loop_break
-    end
-    if $arg0 == $STS_CG32
-      echo STS_CG32
-      loop_break
-    end
-    if $arg0 == $STS_IG32
-      echo STS_IG32
-      loop_break
-    end
-    if $arg0 == $STS_TG32
-      echo STS_TG32
-      loop_break
-    end
-    echo Reserved
-    loop_break
-  end
-end  
-
-# IA32 2007, Volume 3A, Table 3-1
-set $STA_X = 0x8
-set $STA_E = 0x4
-set $STA_C = 0x4
-set $STA_W = 0x2
-set $STA_R = 0x2
-set $STA_A = 0x1
-
-define outputsta
-  if $arg0 & $STA_X
-    # Code segment
-    echo code
-    if $arg0 & $STA_C
-      echo |STA_C
-    end
-    if $arg0 & $STA_R
-      echo |STA_R
-    end
-  else
-    # Data segment
-    echo data
-    if $arg0 & $STA_E
-      echo |STA_E
-    end
-    if $arg0 & $STA_W
-      echo |STA_W
-    end
-  end
-  if $arg0 & $STA_A
-    echo |STA_A
-  else
-    printf "      "
-  end
-end
-
-# xv6-specific
-set $SEG_KCODE = 1
-set $SEG_KDATA = 2
-set $SEG_KCPU  = 3
-set $SEG_UCODE = 4
-set $SEG_UDATA = 5
-set $SEG_TSS   = 6
-
-define outputcs
-  if ($arg0 & 4) == 0
-    if $arg0 >> 3 == $SEG_KCODE
-      printf "SEG_KCODE<<3"
-    end
-    if $arg0 >> 3 == $SEG_KDATA
-      printf "SEG_KDATA<<3"
-    end
-    if $arg0 >> 3 == $SEG_KCPU
-      printf "SEG_KCPU<<3"
-    end
-    if $arg0 >> 3 == $SEG_UCODE
-      printf "SEG_UCODE<<3"
-    end
-    if $arg0 >> 3 == $SEG_UDATA
-      printf "SEG_UDATA<<3"
-    end
-    if $arg0 >> 3 == $SEG_TSS
-      printf "SEG_TSS<<3"
-    end
-    if ($arg0 >> 3 < 1) + ($arg0 >> 3 > 6)
-      printf "GDT[%d]", $arg0 >> 3
-    end
-  else
-    printf "LDT[%d]", $arg0 >> 3
-  end
-  if ($arg0 & 3) > 0
-    printf "|"
-    outputdpl ($arg0&3)
-  end
-end
-
-define outputdpl
-  if $arg0 == 0
-    printf "DPL_KERN"
-  else
-    if $arg0 == 3
-      printf "DPL_USER"
-    else
-      printf "DPL%d", $arg0
-    end
-  end
-end
-
-define printdesc
-  if $argc != 1
-    echo Usage: printdesc expr
-  else
-    _printdesc ((uint*)&($arg0))[0] ((uint*)&($arg0))[1]
-    printf "\n"
-  end
-end
-
-document printdesc
-Print an x86 segment or gate descriptor.
-printdesc EXPR
-EXPR must evaluate to a descriptor value.  It can be of any C type.
-end
-
-define _printdesc
-  _printdesc1 $arg0 $arg1 ($arg1>>15&1) ($arg1>>13&3) ($arg1>>12&1) ($arg1>>8&15)
-end
-
-define _printdesc1
-  # 2:P 3:DPL 4:S 5:Type
-  if $arg2 == 0
-    printf "P = 0 (Not present)"
-  else
-    printf "type = "
-    if $arg4 == 0
-      # System segment
-      outputsts $arg5
-      printf " (0x%x)    ", $arg5
-      _printsysdesc $arg0 $arg1 $arg5
-    else
-      # Code/data segment
-      outputsta $arg5
-      printf "  "
-      _printsegdesc $arg0 $arg1
-    end
-
-    printf "  DPL = "
-    outputdpl $arg3
-    printf " (%d)", $arg3
-  end
-end
-
-define _printsysdesc
-  # 2:Type
-  # GDB's || is buggy
-  if ($arg2 == $STS_TG) + (($arg2&7) == $STS_IG16) + (($arg2&7) == $STS_TG16)
-    # Gate descriptor
-    _printgate $arg2 ($arg0>>16) ($arg0&0xFFFF) ($arg1>>16)
-  else
-    # System segment descriptor
-    _printsegdesc $arg0 $arg1
-  end
-end
-
-define _printgate
-  # IA32 2007, Voume 3A, Figure 5-2
-  # 0:Type 1:CS 2:Offset 15..0 3:Offset 31..16
-  printf "CS = "
-  outputcs $arg1
-  printf " (%d)", $arg1
-
-  if (($arg0&7) == $STS_IG16) + (($arg0&7) == $STS_TG16)
-    printf "  Offset = "
-    output/a $arg3 << 16 | $arg2
-  end
-end
-
-define _printsegdesc
-  # IA32 20007, Volume 3A, Figure 3-8 and Figure 4-1
-  _printsegdesc1 ($arg0>>16) ($arg1&0xFF) ($arg1>>24) ($arg0&0xFFFF) ($arg1>>16&15) ($arg1>>23&1)
-  if ($arg1>>12&1) == 1
-    printf "  AVL = %d", $arg1>>20&1
-    if ($arg1>>11&1) == 0
-      # Data segment
-      if ($arg1>>22&1) == 0
-        printf "  B = small (0) "
-      else
-        printf "  B = big (1)   "
-      end
-    else
-      # Code segment
-      printf "  D = "
-      if ($arg1>>22&1) == 0
-        printf "16-bit (0)"
-      else
-        printf "32-bit (1)"
-      end
-    end
-  end
-end
-
-define _printsegdesc1
-  # 0:Base 0..15  1:Base 16..23  2:Base 24..32  3:Limit 0..15  4:Limit 16..19  5:G
-  printf "base = 0x%08x", $arg0 | ($arg1<<16) | ($arg2<<24)
-  printf "  limit = 0x"
-  if $arg5 == 0
-    printf "%08x", $arg3 | ($arg4<<16)
-  else
-    printf "%08x", (($arg3 | ($arg4<<16)) << 12) | 0xFFF
-  end
-end
-
-define printdescs
-  if $argc < 1 || $argc > 2
-    echo Usage: printdescs expr [count]
-  else
-    if $argc == 1
-      _printdescs ($arg0) (sizeof($arg0)/sizeof(($arg0)[0]))
-    else
-      _printdescs ($arg0) ($arg1)
-    end
-  end
-end
-
-document printdescs
-Print an array of x86 segment or gate descriptors.
-printdescs EXPR [COUNT]
-EXPR must evaluate to an array of descriptors.
-end
-
-define _printdescs
-  set $i = 0
-  while $i < $arg1
-    printf "[%d] ", $i
-    printdesc $arg0[$i]
-    set $i = $i + 1
-  end
-end
diff -ruN xv6-public/.git/config xv6-public-mynew/.git/config
--- xv6-public/.git/config	2022-08-12 16:28:03.885987659 +0530
+++ xv6-public-mynew/.git/config	1970-01-01 05:30:00.000000000 +0530
@@ -1,11 +0,0 @@
-[core]
-	repositoryformatversion = 0
-	filemode = true
-	bare = false
-	logallrefupdates = true
-[remote "origin"]
-	url = https://github.com/mit-pdos/xv6-public.git
-	fetch = +refs/heads/*:refs/remotes/origin/*
-[branch "master"]
-	remote = origin
-	merge = refs/heads/master
diff -ruN xv6-public/.git/description xv6-public-mynew/.git/description
--- xv6-public/.git/description	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/description	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-Unnamed repository; edit this file 'description' to name the repository.
diff -ruN xv6-public/.git/HEAD xv6-public-mynew/.git/HEAD
--- xv6-public/.git/HEAD	2022-08-12 16:28:03.885987659 +0530
+++ xv6-public-mynew/.git/HEAD	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-ref: refs/heads/master
diff -ruN xv6-public/.git/hooks/applypatch-msg.sample xv6-public-mynew/.git/hooks/applypatch-msg.sample
--- xv6-public/.git/hooks/applypatch-msg.sample	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/hooks/applypatch-msg.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,15 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to check the commit log message taken by
-# applypatch from an e-mail message.
-#
-# The hook should exit with non-zero status after issuing an
-# appropriate message if it wants to stop the commit.  The hook is
-# allowed to edit the commit message file.
-#
-# To enable this hook, rename this file to "applypatch-msg".
-
-. git-sh-setup
-commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
-test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
-:
diff -ruN xv6-public/.git/hooks/commit-msg.sample xv6-public-mynew/.git/hooks/commit-msg.sample
--- xv6-public/.git/hooks/commit-msg.sample	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/hooks/commit-msg.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,24 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to check the commit log message.
-# Called by "git commit" with one argument, the name of the file
-# that has the commit message.  The hook should exit with non-zero
-# status after issuing an appropriate message if it wants to stop the
-# commit.  The hook is allowed to edit the commit message file.
-#
-# To enable this hook, rename this file to "commit-msg".
-
-# Uncomment the below to add a Signed-off-by line to the message.
-# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
-# hook is more suited to it.
-#
-# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
-# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
-
-# This example catches duplicate Signed-off-by lines.
-
-test "" = "$(grep '^Signed-off-by: ' "$1" |
-	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
-	echo >&2 Duplicate Signed-off-by lines.
-	exit 1
-}
diff -ruN xv6-public/.git/hooks/fsmonitor-watchman.sample xv6-public-mynew/.git/hooks/fsmonitor-watchman.sample
--- xv6-public/.git/hooks/fsmonitor-watchman.sample	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/hooks/fsmonitor-watchman.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,109 +0,0 @@
-#!/usr/bin/perl
-
-use strict;
-use warnings;
-use IPC::Open2;
-
-# An example hook script to integrate Watchman
-# (https://facebook.github.io/watchman/) with git to speed up detecting
-# new and modified files.
-#
-# The hook is passed a version (currently 1) and a time in nanoseconds
-# formatted as a string and outputs to stdout all files that have been
-# modified since the given time. Paths must be relative to the root of
-# the working tree and separated by a single NUL.
-#
-# To enable this hook, rename this file to "query-watchman" and set
-# 'git config core.fsmonitor .git/hooks/query-watchman'
-#
-my ($version, $time) = @ARGV;
-
-# Check the hook interface version
-
-if ($version == 1) {
-	# convert nanoseconds to seconds
-	# subtract one second to make sure watchman will return all changes
-	$time = int ($time / 1000000000) - 1;
-} else {
-	die "Unsupported query-fsmonitor hook version '$version'.\n" .
-	    "Falling back to scanning...\n";
-}
-
-my $git_work_tree;
-if ($^O =~ 'msys' || $^O =~ 'cygwin') {
-	$git_work_tree = Win32::GetCwd();
-	$git_work_tree =~ tr/\\/\//;
-} else {
-	require Cwd;
-	$git_work_tree = Cwd::cwd();
-}
-
-my $retry = 1;
-
-launch_watchman();
-
-sub launch_watchman {
-
-	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
-	    or die "open2() failed: $!\n" .
-	    "Falling back to scanning...\n";
-
-	# In the query expression below we're asking for names of files that
-	# changed since $time but were not transient (ie created after
-	# $time but no longer exist).
-	#
-	# To accomplish this, we're using the "since" generator to use the
-	# recency index to select candidate nodes and "fields" to limit the
-	# output to file names only.
-
-	my $query = <<"	END";
-		["query", "$git_work_tree", {
-			"since": $time,
-			"fields": ["name"]
-		}]
-	END
-
-	print CHLD_IN $query;
-	close CHLD_IN;
-	my $response = do {local $/; <CHLD_OUT>};
-
-	die "Watchman: command returned no output.\n" .
-	    "Falling back to scanning...\n" if $response eq "";
-	die "Watchman: command returned invalid output: $response\n" .
-	    "Falling back to scanning...\n" unless $response =~ /^\{/;
-
-	my $json_pkg;
-	eval {
-		require JSON::XS;
-		$json_pkg = "JSON::XS";
-		1;
-	} or do {
-		require JSON::PP;
-		$json_pkg = "JSON::PP";
-	};
-
-	my $o = $json_pkg->new->utf8->decode($response);
-
-	if ($retry > 0 and $o->{error} and $o->{error} =~ m/unable to resolve root .* directory (.*) is not watched/) {
-		print STDERR "Adding '$git_work_tree' to watchman's watch list.\n";
-		$retry--;
-		qx/watchman watch "$git_work_tree"/;
-		die "Failed to make watchman watch '$git_work_tree'.\n" .
-		    "Falling back to scanning...\n" if $? != 0;
-
-		# Watchman will always return all files on the first query so
-		# return the fast "everything is dirty" flag to git and do the
-		# Watchman query just to get it over with now so we won't pay
-		# the cost in git to look up each individual file.
-		print "/\0";
-		eval { launch_watchman() };
-		exit 0;
-	}
-
-	die "Watchman: $o->{error}.\n" .
-	    "Falling back to scanning...\n" if $o->{error};
-
-	binmode STDOUT, ":utf8";
-	local $, = "\0";
-	print @{$o->{files}};
-}
diff -ruN xv6-public/.git/hooks/post-update.sample xv6-public-mynew/.git/hooks/post-update.sample
--- xv6-public/.git/hooks/post-update.sample	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/hooks/post-update.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,8 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to prepare a packed repository for use over
-# dumb transports.
-#
-# To enable this hook, rename this file to "post-update".
-
-exec git update-server-info
diff -ruN xv6-public/.git/hooks/pre-applypatch.sample xv6-public-mynew/.git/hooks/pre-applypatch.sample
--- xv6-public/.git/hooks/pre-applypatch.sample	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/hooks/pre-applypatch.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,14 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to verify what is about to be committed
-# by applypatch from an e-mail message.
-#
-# The hook should exit with non-zero status after issuing an
-# appropriate message if it wants to stop the commit.
-#
-# To enable this hook, rename this file to "pre-applypatch".
-
-. git-sh-setup
-precommit="$(git rev-parse --git-path hooks/pre-commit)"
-test -x "$precommit" && exec "$precommit" ${1+"$@"}
-:
diff -ruN xv6-public/.git/hooks/pre-commit.sample xv6-public-mynew/.git/hooks/pre-commit.sample
--- xv6-public/.git/hooks/pre-commit.sample	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/hooks/pre-commit.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,49 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to verify what is about to be committed.
-# Called by "git commit" with no arguments.  The hook should
-# exit with non-zero status after issuing an appropriate message if
-# it wants to stop the commit.
-#
-# To enable this hook, rename this file to "pre-commit".
-
-if git rev-parse --verify HEAD >/dev/null 2>&1
-then
-	against=HEAD
-else
-	# Initial commit: diff against an empty tree object
-	against=$(git hash-object -t tree /dev/null)
-fi
-
-# If you want to allow non-ASCII filenames set this variable to true.
-allownonascii=$(git config --bool hooks.allownonascii)
-
-# Redirect output to stderr.
-exec 1>&2
-
-# Cross platform projects tend to avoid non-ASCII filenames; prevent
-# them from being added to the repository. We exploit the fact that the
-# printable range starts at the space character and ends with tilde.
-if [ "$allownonascii" != "true" ] &&
-	# Note that the use of brackets around a tr range is ok here, (it's
-	# even required, for portability to Solaris 10's /usr/bin/tr), since
-	# the square bracket bytes happen to fall in the designated range.
-	test $(git diff --cached --name-only --diff-filter=A -z $against |
-	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
-then
-	cat <<\EOF
-Error: Attempt to add a non-ASCII file name.
-
-This can cause problems if you want to work with people on other platforms.
-
-To be portable it is advisable to rename the file.
-
-If you know what you are doing you can disable this check using:
-
-  git config hooks.allownonascii true
-EOF
-	exit 1
-fi
-
-# If there are whitespace errors, print the offending file names and fail.
-exec git diff-index --check --cached $against --
diff -ruN xv6-public/.git/hooks/pre-merge-commit.sample xv6-public-mynew/.git/hooks/pre-merge-commit.sample
--- xv6-public/.git/hooks/pre-merge-commit.sample	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/hooks/pre-merge-commit.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,13 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to verify what is about to be committed.
-# Called by "git merge" with no arguments.  The hook should
-# exit with non-zero status after issuing an appropriate message to
-# stderr if it wants to stop the merge commit.
-#
-# To enable this hook, rename this file to "pre-merge-commit".
-
-. git-sh-setup
-test -x "$GIT_DIR/hooks/pre-commit" &&
-        exec "$GIT_DIR/hooks/pre-commit"
-:
diff -ruN xv6-public/.git/hooks/prepare-commit-msg.sample xv6-public-mynew/.git/hooks/prepare-commit-msg.sample
--- xv6-public/.git/hooks/prepare-commit-msg.sample	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/hooks/prepare-commit-msg.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,42 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to prepare the commit log message.
-# Called by "git commit" with the name of the file that has the
-# commit message, followed by the description of the commit
-# message's source.  The hook's purpose is to edit the commit
-# message file.  If the hook fails with a non-zero status,
-# the commit is aborted.
-#
-# To enable this hook, rename this file to "prepare-commit-msg".
-
-# This hook includes three examples. The first one removes the
-# "# Please enter the commit message..." help message.
-#
-# The second includes the output of "git diff --name-status -r"
-# into the message, just before the "git status" output.  It is
-# commented because it doesn't cope with --amend or with squashed
-# commits.
-#
-# The third example adds a Signed-off-by line to the message, that can
-# still be edited.  This is rarely a good idea.
-
-COMMIT_MSG_FILE=$1
-COMMIT_SOURCE=$2
-SHA1=$3
-
-/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
-
-# case "$COMMIT_SOURCE,$SHA1" in
-#  ,|template,)
-#    /usr/bin/perl -i.bak -pe '
-#       print "\n" . `git diff --cached --name-status -r`
-# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
-#  *) ;;
-# esac
-
-# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
-# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
-# if test -z "$COMMIT_SOURCE"
-# then
-#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
-# fi
diff -ruN xv6-public/.git/hooks/pre-push.sample xv6-public-mynew/.git/hooks/pre-push.sample
--- xv6-public/.git/hooks/pre-push.sample	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/hooks/pre-push.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,53 +0,0 @@
-#!/bin/sh
-
-# An example hook script to verify what is about to be pushed.  Called by "git
-# push" after it has checked the remote status, but before anything has been
-# pushed.  If this script exits with a non-zero status nothing will be pushed.
-#
-# This hook is called with the following parameters:
-#
-# $1 -- Name of the remote to which the push is being done
-# $2 -- URL to which the push is being done
-#
-# If pushing without using a named remote those arguments will be equal.
-#
-# Information about the commits which are being pushed is supplied as lines to
-# the standard input in the form:
-#
-#   <local ref> <local sha1> <remote ref> <remote sha1>
-#
-# This sample shows how to prevent push of commits where the log message starts
-# with "WIP" (work in progress).
-
-remote="$1"
-url="$2"
-
-z40=0000000000000000000000000000000000000000
-
-while read local_ref local_sha remote_ref remote_sha
-do
-	if [ "$local_sha" = $z40 ]
-	then
-		# Handle delete
-		:
-	else
-		if [ "$remote_sha" = $z40 ]
-		then
-			# New branch, examine all commits
-			range="$local_sha"
-		else
-			# Update to existing branch, examine new commits
-			range="$remote_sha..$local_sha"
-		fi
-
-		# Check for WIP commit
-		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
-		if [ -n "$commit" ]
-		then
-			echo >&2 "Found WIP commit in $local_ref, not pushing"
-			exit 1
-		fi
-	fi
-done
-
-exit 0
diff -ruN xv6-public/.git/hooks/pre-rebase.sample xv6-public-mynew/.git/hooks/pre-rebase.sample
--- xv6-public/.git/hooks/pre-rebase.sample	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/hooks/pre-rebase.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,169 +0,0 @@
-#!/bin/sh
-#
-# Copyright (c) 2006, 2008 Junio C Hamano
-#
-# The "pre-rebase" hook is run just before "git rebase" starts doing
-# its job, and can prevent the command from running by exiting with
-# non-zero status.
-#
-# The hook is called with the following parameters:
-#
-# $1 -- the upstream the series was forked from.
-# $2 -- the branch being rebased (or empty when rebasing the current branch).
-#
-# This sample shows how to prevent topic branches that are already
-# merged to 'next' branch from getting rebased, because allowing it
-# would result in rebasing already published history.
-
-publish=next
-basebranch="$1"
-if test "$#" = 2
-then
-	topic="refs/heads/$2"
-else
-	topic=`git symbolic-ref HEAD` ||
-	exit 0 ;# we do not interrupt rebasing detached HEAD
-fi
-
-case "$topic" in
-refs/heads/??/*)
-	;;
-*)
-	exit 0 ;# we do not interrupt others.
-	;;
-esac
-
-# Now we are dealing with a topic branch being rebased
-# on top of master.  Is it OK to rebase it?
-
-# Does the topic really exist?
-git show-ref -q "$topic" || {
-	echo >&2 "No such branch $topic"
-	exit 1
-}
-
-# Is topic fully merged to master?
-not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
-if test -z "$not_in_master"
-then
-	echo >&2 "$topic is fully merged to master; better remove it."
-	exit 1 ;# we could allow it, but there is no point.
-fi
-
-# Is topic ever merged to next?  If so you should not be rebasing it.
-only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
-only_next_2=`git rev-list ^master           ${publish} | sort`
-if test "$only_next_1" = "$only_next_2"
-then
-	not_in_topic=`git rev-list "^$topic" master`
-	if test -z "$not_in_topic"
-	then
-		echo >&2 "$topic is already up to date with master"
-		exit 1 ;# we could allow it, but there is no point.
-	else
-		exit 0
-	fi
-else
-	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
-	/usr/bin/perl -e '
-		my $topic = $ARGV[0];
-		my $msg = "* $topic has commits already merged to public branch:\n";
-		my (%not_in_next) = map {
-			/^([0-9a-f]+) /;
-			($1 => 1);
-		} split(/\n/, $ARGV[1]);
-		for my $elem (map {
-				/^([0-9a-f]+) (.*)$/;
-				[$1 => $2];
-			} split(/\n/, $ARGV[2])) {
-			if (!exists $not_in_next{$elem->[0]}) {
-				if ($msg) {
-					print STDERR $msg;
-					undef $msg;
-				}
-				print STDERR " $elem->[1]\n";
-			}
-		}
-	' "$topic" "$not_in_next" "$not_in_master"
-	exit 1
-fi
-
-<<\DOC_END
-
-This sample hook safeguards topic branches that have been
-published from being rewound.
-
-The workflow assumed here is:
-
- * Once a topic branch forks from "master", "master" is never
-   merged into it again (either directly or indirectly).
-
- * Once a topic branch is fully cooked and merged into "master",
-   it is deleted.  If you need to build on top of it to correct
-   earlier mistakes, a new topic branch is created by forking at
-   the tip of the "master".  This is not strictly necessary, but
-   it makes it easier to keep your history simple.
-
- * Whenever you need to test or publish your changes to topic
-   branches, merge them into "next" branch.
-
-The script, being an example, hardcodes the publish branch name
-to be "next", but it is trivial to make it configurable via
-$GIT_DIR/config mechanism.
-
-With this workflow, you would want to know:
-
-(1) ... if a topic branch has ever been merged to "next".  Young
-    topic branches can have stupid mistakes you would rather
-    clean up before publishing, and things that have not been
-    merged into other branches can be easily rebased without
-    affecting other people.  But once it is published, you would
-    not want to rewind it.
-
-(2) ... if a topic branch has been fully merged to "master".
-    Then you can delete it.  More importantly, you should not
-    build on top of it -- other people may already want to
-    change things related to the topic as patches against your
-    "master", so if you need further changes, it is better to
-    fork the topic (perhaps with the same name) afresh from the
-    tip of "master".
-
-Let's look at this example:
-
-		   o---o---o---o---o---o---o---o---o---o "next"
-		  /       /           /           /
-		 /   a---a---b A     /           /
-		/   /               /           /
-	       /   /   c---c---c---c B         /
-	      /   /   /             \         /
-	     /   /   /   b---b C     \       /
-	    /   /   /   /             \     /
-    ---o---o---o---o---o---o---o---o---o---o---o "master"
-
-
-A, B and C are topic branches.
-
- * A has one fix since it was merged up to "next".
-
- * B has finished.  It has been fully merged up to "master" and "next",
-   and is ready to be deleted.
-
- * C has not merged to "next" at all.
-
-We would want to allow C to be rebased, refuse A, and encourage
-B to be deleted.
-
-To compute (1):
-
-	git rev-list ^master ^topic next
-	git rev-list ^master        next
-
-	if these match, topic has not merged in next at all.
-
-To compute (2):
-
-	git rev-list master..topic
-
-	if this is empty, it is fully merged to "master".
-
-DOC_END
diff -ruN xv6-public/.git/hooks/pre-receive.sample xv6-public-mynew/.git/hooks/pre-receive.sample
--- xv6-public/.git/hooks/pre-receive.sample	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/hooks/pre-receive.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,24 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to make use of push options.
-# The example simply echoes all push options that start with 'echoback='
-# and rejects all pushes when the "reject" push option is used.
-#
-# To enable this hook, rename this file to "pre-receive".
-
-if test -n "$GIT_PUSH_OPTION_COUNT"
-then
-	i=0
-	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
-	do
-		eval "value=\$GIT_PUSH_OPTION_$i"
-		case "$value" in
-		echoback=*)
-			echo "echo from the pre-receive-hook: ${value#*=}" >&2
-			;;
-		reject)
-			exit 1
-		esac
-		i=$((i + 1))
-	done
-fi
diff -ruN xv6-public/.git/hooks/update.sample xv6-public-mynew/.git/hooks/update.sample
--- xv6-public/.git/hooks/update.sample	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/hooks/update.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,128 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to block unannotated tags from entering.
-# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
-#
-# To enable this hook, rename this file to "update".
-#
-# Config
-# ------
-# hooks.allowunannotated
-#   This boolean sets whether unannotated tags will be allowed into the
-#   repository.  By default they won't be.
-# hooks.allowdeletetag
-#   This boolean sets whether deleting tags will be allowed in the
-#   repository.  By default they won't be.
-# hooks.allowmodifytag
-#   This boolean sets whether a tag may be modified after creation. By default
-#   it won't be.
-# hooks.allowdeletebranch
-#   This boolean sets whether deleting branches will be allowed in the
-#   repository.  By default they won't be.
-# hooks.denycreatebranch
-#   This boolean sets whether remotely creating branches will be denied
-#   in the repository.  By default this is allowed.
-#
-
-# --- Command line
-refname="$1"
-oldrev="$2"
-newrev="$3"
-
-# --- Safety check
-if [ -z "$GIT_DIR" ]; then
-	echo "Don't run this script from the command line." >&2
-	echo " (if you want, you could supply GIT_DIR then run" >&2
-	echo "  $0 <ref> <oldrev> <newrev>)" >&2
-	exit 1
-fi
-
-if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
-	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
-	exit 1
-fi
-
-# --- Config
-allowunannotated=$(git config --bool hooks.allowunannotated)
-allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
-denycreatebranch=$(git config --bool hooks.denycreatebranch)
-allowdeletetag=$(git config --bool hooks.allowdeletetag)
-allowmodifytag=$(git config --bool hooks.allowmodifytag)
-
-# check for no description
-projectdesc=$(sed -e '1q' "$GIT_DIR/description")
-case "$projectdesc" in
-"Unnamed repository"* | "")
-	echo "*** Project description file hasn't been set" >&2
-	exit 1
-	;;
-esac
-
-# --- Check types
-# if $newrev is 0000...0000, it's a commit to delete a ref.
-zero="0000000000000000000000000000000000000000"
-if [ "$newrev" = "$zero" ]; then
-	newrev_type=delete
-else
-	newrev_type=$(git cat-file -t $newrev)
-fi
-
-case "$refname","$newrev_type" in
-	refs/tags/*,commit)
-		# un-annotated tag
-		short_refname=${refname##refs/tags/}
-		if [ "$allowunannotated" != "true" ]; then
-			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
-			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
-			exit 1
-		fi
-		;;
-	refs/tags/*,delete)
-		# delete tag
-		if [ "$allowdeletetag" != "true" ]; then
-			echo "*** Deleting a tag is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	refs/tags/*,tag)
-		# annotated tag
-		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
-		then
-			echo "*** Tag '$refname' already exists." >&2
-			echo "*** Modifying a tag is not allowed in this repository." >&2
-			exit 1
-		fi
-		;;
-	refs/heads/*,commit)
-		# branch
-		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
-			echo "*** Creating a branch is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	refs/heads/*,delete)
-		# delete branch
-		if [ "$allowdeletebranch" != "true" ]; then
-			echo "*** Deleting a branch is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	refs/remotes/*,commit)
-		# tracking branch
-		;;
-	refs/remotes/*,delete)
-		# delete tracking branch
-		if [ "$allowdeletebranch" != "true" ]; then
-			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	*)
-		# Anything else (is there anything else?)
-		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
-		exit 1
-		;;
-esac
-
-# --- Finished
-exit 0
Binary files xv6-public/.git/index and xv6-public-mynew/.git/index differ
diff -ruN xv6-public/.git/info/exclude xv6-public-mynew/.git/info/exclude
--- xv6-public/.git/info/exclude	2022-08-12 16:27:46.041536369 +0530
+++ xv6-public-mynew/.git/info/exclude	1970-01-01 05:30:00.000000000 +0530
@@ -1,6 +0,0 @@
-# git ls-files --others --exclude-from=.git/info/exclude
-# Lines that start with '#' are comments.
-# For a project mostly in C, the following would be a good set of
-# exclude patterns (uncomment them if you want to use them):
-# *.[oa]
-# *~
diff -ruN xv6-public/.git/logs/HEAD xv6-public-mynew/.git/logs/HEAD
--- xv6-public/.git/logs/HEAD	2022-08-12 16:28:03.885987659 +0530
+++ xv6-public-mynew/.git/logs/HEAD	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 Dhruv Tarsadiya <dhruv@dhruv-OptiPlex-3020.(none)> 1660301883 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
diff -ruN xv6-public/.git/logs/refs/heads/master xv6-public-mynew/.git/logs/refs/heads/master
--- xv6-public/.git/logs/refs/heads/master	2022-08-12 16:28:03.885987659 +0530
+++ xv6-public-mynew/.git/logs/refs/heads/master	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 Dhruv Tarsadiya <dhruv@dhruv-OptiPlex-3020.(none)> 1660301883 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
diff -ruN xv6-public/.git/logs/refs/remotes/origin/HEAD xv6-public-mynew/.git/logs/refs/remotes/origin/HEAD
--- xv6-public/.git/logs/refs/remotes/origin/HEAD	2022-08-12 16:28:03.885987659 +0530
+++ xv6-public-mynew/.git/logs/refs/remotes/origin/HEAD	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 Dhruv Tarsadiya <dhruv@dhruv-OptiPlex-3020.(none)> 1660301883 +0530	clone: from https://github.com/mit-pdos/xv6-public.git
Binary files xv6-public/.git/objects/pack/pack-df231414196a28fc988083de319039681dd68d80.idx and xv6-public-mynew/.git/objects/pack/pack-df231414196a28fc988083de319039681dd68d80.idx differ
Binary files xv6-public/.git/objects/pack/pack-df231414196a28fc988083de319039681dd68d80.pack and xv6-public-mynew/.git/objects/pack/pack-df231414196a28fc988083de319039681dd68d80.pack differ
diff -ruN xv6-public/.git/packed-refs xv6-public-mynew/.git/packed-refs
--- xv6-public/.git/packed-refs	2022-08-12 16:28:03.885987659 +0530
+++ xv6-public-mynew/.git/packed-refs	1970-01-01 05:30:00.000000000 +0530
@@ -1,28 +0,0 @@
-# pack-refs with: peeled fully-peeled sorted 
-eeb7b415dbcb12cc362d0783e41c3d1f44066b17 refs/remotes/origin/master
-af0e851a3a8a7d13bc2f2d596b58500594040892 refs/tags/osdi12-submit
-^8286b58087750e09bac3815219e0382a0bb2b159
-9e698c587b135db17b38a5838976805b9c01e338 refs/tags/symlinks
-05e0b1218dcebe1f40028531b51926df8ae52be0 refs/tags/xv6-2006
-^5cc0bd5ceaf805ab44f851e6a3f1952a29e9d7b7
-42f3c3f7be9717b66ba6e133a113c0f751c53133 refs/tags/xv6-2007
-adcd16c3f7588b4a28d37495f05e94278c9e3a1e refs/tags/xv6-2008
-124fe7e457c0dc9b671c7ffccb56004eb61da4f0 refs/tags/xv6-2010
-5922cdbbcc4fdbd76eec9e0dad9f650e4c86ee99 refs/tags/xv6-rev0
-^5cc0bd5ceaf805ab44f851e6a3f1952a29e9d7b7
-81f31a773dd49b001437eaed3975438585ff9911 refs/tags/xv6-rev1
-^42f3c3f7be9717b66ba6e133a113c0f751c53133
-b818915f793cd20c5d1e24f668534a9d690f3cc8 refs/tags/xv6-rev11
-30dab73b68b816877dc8f78504ceca0808c976eb refs/tags/xv6-rev3
-^074ac7ccd43c08d01a237ce6f14cac10715a51ef
-113005d48f09a4e3939940d72a77bf6973ea8755 refs/tags/xv6-rev4
-^124fe7e457c0dc9b671c7ffccb56004eb61da4f0
-d6aa754494b37e32862b1f78d53deedc53f66a15 refs/tags/xv6-rev5
-^ae603ff5e79bb7b5eea4147425752f33d29fe558
-3e9d6413d331b4c912d55bfac253af1629d4bac9 refs/tags/xv6-rev6
-^e64c661ae8b91bd7e858bb1895bef96e6ac2b4bb
-ccc25c0fac59067d88af52ad9f3b8cee97c3810a refs/tags/xv6-rev7
-^2ae8392a5c203a7b1bc5b8bff5eabc8b5eab8972
-7d6f95e327f1c18570d5dd187e3d92e1aadae2cf refs/tags/xv6-rev8
-^9ba21267e796eb462a657392906e3cbccaedcc99
-5bf3fbee00fb27cb8cb4eca72dcd9fc4c288ed71 refs/tags/xv6-rev9
diff -ruN xv6-public/.git/refs/heads/master xv6-public-mynew/.git/refs/heads/master
--- xv6-public/.git/refs/heads/master	2022-08-12 16:28:03.885987659 +0530
+++ xv6-public-mynew/.git/refs/heads/master	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-eeb7b415dbcb12cc362d0783e41c3d1f44066b17
diff -ruN xv6-public/.git/refs/remotes/origin/HEAD xv6-public-mynew/.git/refs/remotes/origin/HEAD
--- xv6-public/.git/refs/remotes/origin/HEAD	2022-08-12 16:28:03.885987659 +0530
+++ xv6-public-mynew/.git/refs/remotes/origin/HEAD	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-ref: refs/remotes/origin/master
diff -ruN xv6-public/.gitignore xv6-public-mynew/.gitignore
--- xv6-public/.gitignore	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/.gitignore	1970-01-01 05:30:00.000000000 +0530
@@ -1,16 +0,0 @@
-*~
-_*
-*.o
-*.d
-*.asm
-*.sym
-*.img
-vectors.S
-bootblock
-entryother
-initcode
-initcode.out
-kernel
-kernelmemfs
-mkfs
-.gdbinit
Binary files xv6-public/_grep and xv6-public-mynew/_grep differ
diff -ruN xv6-public/grep.asm xv6-public-mynew/grep.asm
--- xv6-public/grep.asm	2022-09-05 09:51:05.190999136 +0530
+++ xv6-public-mynew/grep.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1589 +0,0 @@
-
-_grep:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  }
-}
-
-int
-main(int argc, char *argv[])
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	57                   	push   %edi
-  12:	56                   	push   %esi
-  13:	53                   	push   %ebx
-  14:	51                   	push   %ecx
-  15:	83 ec 18             	sub    $0x18,%esp
-  18:	8b 01                	mov    (%ecx),%eax
-  1a:	8b 59 04             	mov    0x4(%ecx),%ebx
-  1d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  int fd, i;
-  char *pattern;
-
-  if(argc <= 1){
-  20:	83 f8 01             	cmp    $0x1,%eax
-  23:	7e 6b                	jle    90 <main+0x90>
-    printf(2, "usage: grep pattern [file ...]\n");
-    exit();
-  }
-  pattern = argv[1];
-  25:	8b 43 04             	mov    0x4(%ebx),%eax
-  28:	83 c3 08             	add    $0x8,%ebx
-
-  if(argc <= 2){
-  2b:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
-    grep(pattern, 0);
-    exit();
-  }
-
-  for(i = 2; i < argc; i++){
-  2f:	be 02 00 00 00       	mov    $0x2,%esi
-  pattern = argv[1];
-  34:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  if(argc <= 2){
-  37:	75 29                	jne    62 <main+0x62>
-  39:	eb 68                	jmp    a3 <main+0xa3>
-  3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  3f:	90                   	nop
-    if((fd = open(argv[i], 0)) < 0){
-      printf(1, "grep: cannot open %s\n", argv[i]);
-      exit();
-    }
-    grep(pattern, fd);
-  40:	83 ec 08             	sub    $0x8,%esp
-  for(i = 2; i < argc; i++){
-  43:	83 c6 01             	add    $0x1,%esi
-  46:	83 c3 04             	add    $0x4,%ebx
-    grep(pattern, fd);
-  49:	50                   	push   %eax
-  4a:	ff 75 e0             	pushl  -0x20(%ebp)
-  4d:	e8 de 01 00 00       	call   230 <grep>
-    close(fd);
-  52:	89 3c 24             	mov    %edi,(%esp)
-  55:	e8 71 05 00 00       	call   5cb <close>
-  for(i = 2; i < argc; i++){
-  5a:	83 c4 10             	add    $0x10,%esp
-  5d:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
-  60:	7e 29                	jle    8b <main+0x8b>
-    if((fd = open(argv[i], 0)) < 0){
-  62:	83 ec 08             	sub    $0x8,%esp
-  65:	6a 00                	push   $0x0
-  67:	ff 33                	pushl  (%ebx)
-  69:	e8 75 05 00 00       	call   5e3 <open>
-  6e:	83 c4 10             	add    $0x10,%esp
-  71:	89 c7                	mov    %eax,%edi
-  73:	85 c0                	test   %eax,%eax
-  75:	79 c9                	jns    40 <main+0x40>
-      printf(1, "grep: cannot open %s\n", argv[i]);
-  77:	50                   	push   %eax
-  78:	ff 33                	pushl  (%ebx)
-  7a:	68 a8 0a 00 00       	push   $0xaa8
-  7f:	6a 01                	push   $0x1
-  81:	e8 9a 06 00 00       	call   720 <printf>
-      exit();
-  86:	e8 18 05 00 00       	call   5a3 <exit>
-  }
-  exit();
-  8b:	e8 13 05 00 00       	call   5a3 <exit>
-    printf(2, "usage: grep pattern [file ...]\n");
-  90:	51                   	push   %ecx
-  91:	51                   	push   %ecx
-  92:	68 88 0a 00 00       	push   $0xa88
-  97:	6a 02                	push   $0x2
-  99:	e8 82 06 00 00       	call   720 <printf>
-    exit();
-  9e:	e8 00 05 00 00       	call   5a3 <exit>
-    grep(pattern, 0);
-  a3:	52                   	push   %edx
-  a4:	52                   	push   %edx
-  a5:	6a 00                	push   $0x0
-  a7:	50                   	push   %eax
-  a8:	e8 83 01 00 00       	call   230 <grep>
-    exit();
-  ad:	e8 f1 04 00 00       	call   5a3 <exit>
-  b2:	66 90                	xchg   %ax,%ax
-  b4:	66 90                	xchg   %ax,%ax
-  b6:	66 90                	xchg   %ax,%ax
-  b8:	66 90                	xchg   %ax,%ax
-  ba:	66 90                	xchg   %ax,%ax
-  bc:	66 90                	xchg   %ax,%ax
-  be:	66 90                	xchg   %ax,%ax
-
-000000c0 <matchstar>:
-  return 0;
-}
-
-// matchstar: search for c*re at beginning of text
-int matchstar(int c, char *re, char *text)
-{
-  c0:	f3 0f 1e fb          	endbr32 
-  c4:	55                   	push   %ebp
-  c5:	89 e5                	mov    %esp,%ebp
-  c7:	57                   	push   %edi
-  c8:	56                   	push   %esi
-  c9:	53                   	push   %ebx
-  ca:	83 ec 0c             	sub    $0xc,%esp
-  cd:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  d0:	8b 75 0c             	mov    0xc(%ebp),%esi
-  d3:	8b 7d 10             	mov    0x10(%ebp),%edi
-  d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  dd:	8d 76 00             	lea    0x0(%esi),%esi
-  do{  // a * matches zero or more instances
-    if(matchhere(re, text))
-  e0:	83 ec 08             	sub    $0x8,%esp
-  e3:	57                   	push   %edi
-  e4:	56                   	push   %esi
-  e5:	e8 36 00 00 00       	call   120 <matchhere>
-  ea:	83 c4 10             	add    $0x10,%esp
-  ed:	85 c0                	test   %eax,%eax
-  ef:	75 1f                	jne    110 <matchstar+0x50>
-      return 1;
-  }while(*text!='\0' && (*text++==c || c=='.'));
-  f1:	0f be 17             	movsbl (%edi),%edx
-  f4:	84 d2                	test   %dl,%dl
-  f6:	74 0c                	je     104 <matchstar+0x44>
-  f8:	83 c7 01             	add    $0x1,%edi
-  fb:	39 da                	cmp    %ebx,%edx
-  fd:	74 e1                	je     e0 <matchstar+0x20>
-  ff:	83 fb 2e             	cmp    $0x2e,%ebx
- 102:	74 dc                	je     e0 <matchstar+0x20>
-  return 0;
-}
- 104:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 107:	5b                   	pop    %ebx
- 108:	5e                   	pop    %esi
- 109:	5f                   	pop    %edi
- 10a:	5d                   	pop    %ebp
- 10b:	c3                   	ret    
- 10c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 110:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return 1;
- 113:	b8 01 00 00 00       	mov    $0x1,%eax
-}
- 118:	5b                   	pop    %ebx
- 119:	5e                   	pop    %esi
- 11a:	5f                   	pop    %edi
- 11b:	5d                   	pop    %ebp
- 11c:	c3                   	ret    
- 11d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000120 <matchhere>:
-{
- 120:	f3 0f 1e fb          	endbr32 
- 124:	55                   	push   %ebp
- 125:	89 e5                	mov    %esp,%ebp
- 127:	57                   	push   %edi
- 128:	56                   	push   %esi
- 129:	53                   	push   %ebx
- 12a:	83 ec 0c             	sub    $0xc,%esp
- 12d:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 130:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  if(re[0] == '\0')
- 133:	0f b6 01             	movzbl (%ecx),%eax
- 136:	84 c0                	test   %al,%al
- 138:	75 2b                	jne    165 <matchhere+0x45>
- 13a:	eb 64                	jmp    1a0 <matchhere+0x80>
- 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  if(re[0] == '$' && re[1] == '\0')
- 140:	0f b6 37             	movzbl (%edi),%esi
- 143:	80 fa 24             	cmp    $0x24,%dl
- 146:	75 04                	jne    14c <matchhere+0x2c>
- 148:	84 c0                	test   %al,%al
- 14a:	74 61                	je     1ad <matchhere+0x8d>
-  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
- 14c:	89 f3                	mov    %esi,%ebx
- 14e:	84 db                	test   %bl,%bl
- 150:	74 3e                	je     190 <matchhere+0x70>
- 152:	80 fa 2e             	cmp    $0x2e,%dl
- 155:	74 04                	je     15b <matchhere+0x3b>
- 157:	38 d3                	cmp    %dl,%bl
- 159:	75 35                	jne    190 <matchhere+0x70>
-    return matchhere(re+1, text+1);
- 15b:	83 c7 01             	add    $0x1,%edi
- 15e:	83 c1 01             	add    $0x1,%ecx
-  if(re[0] == '\0')
- 161:	84 c0                	test   %al,%al
- 163:	74 3b                	je     1a0 <matchhere+0x80>
-  if(re[1] == '*')
- 165:	0f be d0             	movsbl %al,%edx
- 168:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
- 16c:	3c 2a                	cmp    $0x2a,%al
- 16e:	75 d0                	jne    140 <matchhere+0x20>
-    return matchstar(re[0], re+2, text);
- 170:	83 ec 04             	sub    $0x4,%esp
- 173:	83 c1 02             	add    $0x2,%ecx
- 176:	57                   	push   %edi
- 177:	51                   	push   %ecx
- 178:	52                   	push   %edx
- 179:	e8 42 ff ff ff       	call   c0 <matchstar>
- 17e:	83 c4 10             	add    $0x10,%esp
-}
- 181:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 184:	5b                   	pop    %ebx
- 185:	5e                   	pop    %esi
- 186:	5f                   	pop    %edi
- 187:	5d                   	pop    %ebp
- 188:	c3                   	ret    
- 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 190:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
- 193:	31 c0                	xor    %eax,%eax
-}
- 195:	5b                   	pop    %ebx
- 196:	5e                   	pop    %esi
- 197:	5f                   	pop    %edi
- 198:	5d                   	pop    %ebp
- 199:	c3                   	ret    
- 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 1a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    return 1;
- 1a3:	b8 01 00 00 00       	mov    $0x1,%eax
-}
- 1a8:	5b                   	pop    %ebx
- 1a9:	5e                   	pop    %esi
- 1aa:	5f                   	pop    %edi
- 1ab:	5d                   	pop    %ebp
- 1ac:	c3                   	ret    
-    return *text == '\0';
- 1ad:	89 f0                	mov    %esi,%eax
- 1af:	84 c0                	test   %al,%al
- 1b1:	0f 94 c0             	sete   %al
- 1b4:	0f b6 c0             	movzbl %al,%eax
- 1b7:	eb c8                	jmp    181 <matchhere+0x61>
- 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-000001c0 <match>:
-{
- 1c0:	f3 0f 1e fb          	endbr32 
- 1c4:	55                   	push   %ebp
- 1c5:	89 e5                	mov    %esp,%ebp
- 1c7:	56                   	push   %esi
- 1c8:	53                   	push   %ebx
- 1c9:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 1cc:	8b 75 0c             	mov    0xc(%ebp),%esi
-  if(re[0] == '^')
- 1cf:	80 3b 5e             	cmpb   $0x5e,(%ebx)
- 1d2:	75 15                	jne    1e9 <match+0x29>
- 1d4:	eb 3a                	jmp    210 <match+0x50>
- 1d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1dd:	8d 76 00             	lea    0x0(%esi),%esi
-  }while(*text++ != '\0');
- 1e0:	83 c6 01             	add    $0x1,%esi
- 1e3:	80 7e ff 00          	cmpb   $0x0,-0x1(%esi)
- 1e7:	74 16                	je     1ff <match+0x3f>
-    if(matchhere(re, text))
- 1e9:	83 ec 08             	sub    $0x8,%esp
- 1ec:	56                   	push   %esi
- 1ed:	53                   	push   %ebx
- 1ee:	e8 2d ff ff ff       	call   120 <matchhere>
- 1f3:	83 c4 10             	add    $0x10,%esp
- 1f6:	85 c0                	test   %eax,%eax
- 1f8:	74 e6                	je     1e0 <match+0x20>
-      return 1;
- 1fa:	b8 01 00 00 00       	mov    $0x1,%eax
-}
- 1ff:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 202:	5b                   	pop    %ebx
- 203:	5e                   	pop    %esi
- 204:	5d                   	pop    %ebp
- 205:	c3                   	ret    
- 206:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 20d:	8d 76 00             	lea    0x0(%esi),%esi
-    return matchhere(re+1, text);
- 210:	83 c3 01             	add    $0x1,%ebx
- 213:	89 5d 08             	mov    %ebx,0x8(%ebp)
-}
- 216:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 219:	5b                   	pop    %ebx
- 21a:	5e                   	pop    %esi
- 21b:	5d                   	pop    %ebp
-    return matchhere(re+1, text);
- 21c:	e9 ff fe ff ff       	jmp    120 <matchhere>
- 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 22f:	90                   	nop
-
-00000230 <grep>:
-{
- 230:	f3 0f 1e fb          	endbr32 
- 234:	55                   	push   %ebp
- 235:	89 e5                	mov    %esp,%ebp
- 237:	57                   	push   %edi
- 238:	56                   	push   %esi
- 239:	53                   	push   %ebx
- 23a:	83 ec 1c             	sub    $0x1c,%esp
-  m = 0;
- 23d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-{
- 244:	8b 75 08             	mov    0x8(%ebp),%esi
- 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 24e:	66 90                	xchg   %ax,%ax
-  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
- 250:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
- 253:	b8 ff 03 00 00       	mov    $0x3ff,%eax
- 258:	83 ec 04             	sub    $0x4,%esp
- 25b:	29 c8                	sub    %ecx,%eax
- 25d:	50                   	push   %eax
- 25e:	8d 81 a0 0e 00 00    	lea    0xea0(%ecx),%eax
- 264:	50                   	push   %eax
- 265:	ff 75 0c             	pushl  0xc(%ebp)
- 268:	e8 4e 03 00 00       	call   5bb <read>
- 26d:	83 c4 10             	add    $0x10,%esp
- 270:	85 c0                	test   %eax,%eax
- 272:	0f 8e b8 00 00 00    	jle    330 <grep+0x100>
-    m += n;
- 278:	01 45 e4             	add    %eax,-0x1c(%ebp)
- 27b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-    p = buf;
- 27e:	bb a0 0e 00 00       	mov    $0xea0,%ebx
-    buf[m] = '\0';
- 283:	c6 81 a0 0e 00 00 00 	movb   $0x0,0xea0(%ecx)
-    while((q = strchr(p, '\n')) != 0){
- 28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 290:	83 ec 08             	sub    $0x8,%esp
- 293:	6a 0a                	push   $0xa
- 295:	53                   	push   %ebx
- 296:	e8 85 01 00 00       	call   420 <strchr>
- 29b:	83 c4 10             	add    $0x10,%esp
- 29e:	89 c7                	mov    %eax,%edi
- 2a0:	85 c0                	test   %eax,%eax
- 2a2:	74 3c                	je     2e0 <grep+0xb0>
-      if(match(pattern, p)){
- 2a4:	83 ec 08             	sub    $0x8,%esp
-      *q = 0;
- 2a7:	c6 07 00             	movb   $0x0,(%edi)
-      if(match(pattern, p)){
- 2aa:	53                   	push   %ebx
- 2ab:	56                   	push   %esi
- 2ac:	e8 0f ff ff ff       	call   1c0 <match>
- 2b1:	83 c4 10             	add    $0x10,%esp
- 2b4:	8d 57 01             	lea    0x1(%edi),%edx
- 2b7:	85 c0                	test   %eax,%eax
- 2b9:	75 05                	jne    2c0 <grep+0x90>
-      p = q+1;
- 2bb:	89 d3                	mov    %edx,%ebx
- 2bd:	eb d1                	jmp    290 <grep+0x60>
- 2bf:	90                   	nop
-        write(1, p, q+1 - p);
- 2c0:	89 d0                	mov    %edx,%eax
- 2c2:	83 ec 04             	sub    $0x4,%esp
-        *q = '\n';
- 2c5:	c6 07 0a             	movb   $0xa,(%edi)
-        write(1, p, q+1 - p);
- 2c8:	29 d8                	sub    %ebx,%eax
- 2ca:	89 55 e0             	mov    %edx,-0x20(%ebp)
- 2cd:	50                   	push   %eax
- 2ce:	53                   	push   %ebx
- 2cf:	6a 01                	push   $0x1
- 2d1:	e8 ed 02 00 00       	call   5c3 <write>
- 2d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
- 2d9:	83 c4 10             	add    $0x10,%esp
-      p = q+1;
- 2dc:	89 d3                	mov    %edx,%ebx
- 2de:	eb b0                	jmp    290 <grep+0x60>
-    if(p == buf)
- 2e0:	81 fb a0 0e 00 00    	cmp    $0xea0,%ebx
- 2e6:	74 38                	je     320 <grep+0xf0>
-    if(m > 0){
- 2e8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
- 2eb:	85 c9                	test   %ecx,%ecx
- 2ed:	0f 8e 5d ff ff ff    	jle    250 <grep+0x20>
-      m -= p - buf;
- 2f3:	89 d8                	mov    %ebx,%eax
-      memmove(buf, p, m);
- 2f5:	83 ec 04             	sub    $0x4,%esp
-      m -= p - buf;
- 2f8:	2d a0 0e 00 00       	sub    $0xea0,%eax
- 2fd:	29 c1                	sub    %eax,%ecx
-      memmove(buf, p, m);
- 2ff:	51                   	push   %ecx
- 300:	53                   	push   %ebx
- 301:	68 a0 0e 00 00       	push   $0xea0
-      m -= p - buf;
- 306:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-      memmove(buf, p, m);
- 309:	e8 62 02 00 00       	call   570 <memmove>
- 30e:	83 c4 10             	add    $0x10,%esp
- 311:	e9 3a ff ff ff       	jmp    250 <grep+0x20>
- 316:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 31d:	8d 76 00             	lea    0x0(%esi),%esi
-      m = 0;
- 320:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
- 327:	e9 24 ff ff ff       	jmp    250 <grep+0x20>
- 32c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-}
- 330:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 333:	5b                   	pop    %ebx
- 334:	5e                   	pop    %esi
- 335:	5f                   	pop    %edi
- 336:	5d                   	pop    %ebp
- 337:	c3                   	ret    
- 338:	66 90                	xchg   %ax,%ax
- 33a:	66 90                	xchg   %ax,%ax
- 33c:	66 90                	xchg   %ax,%ax
- 33e:	66 90                	xchg   %ax,%ax
-
-00000340 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 340:	f3 0f 1e fb          	endbr32 
- 344:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 345:	31 c0                	xor    %eax,%eax
-{
- 347:	89 e5                	mov    %esp,%ebp
- 349:	53                   	push   %ebx
- 34a:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 34d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
- 350:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 354:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 357:	83 c0 01             	add    $0x1,%eax
- 35a:	84 d2                	test   %dl,%dl
- 35c:	75 f2                	jne    350 <strcpy+0x10>
-    ;
-  return os;
-}
- 35e:	89 c8                	mov    %ecx,%eax
- 360:	5b                   	pop    %ebx
- 361:	5d                   	pop    %ebp
- 362:	c3                   	ret    
- 363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000370 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 370:	f3 0f 1e fb          	endbr32 
- 374:	55                   	push   %ebp
- 375:	89 e5                	mov    %esp,%ebp
- 377:	53                   	push   %ebx
- 378:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 37b:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
- 37e:	0f b6 01             	movzbl (%ecx),%eax
- 381:	0f b6 1a             	movzbl (%edx),%ebx
- 384:	84 c0                	test   %al,%al
- 386:	75 19                	jne    3a1 <strcmp+0x31>
- 388:	eb 26                	jmp    3b0 <strcmp+0x40>
- 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 390:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
- 394:	83 c1 01             	add    $0x1,%ecx
- 397:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
- 39a:	0f b6 1a             	movzbl (%edx),%ebx
- 39d:	84 c0                	test   %al,%al
- 39f:	74 0f                	je     3b0 <strcmp+0x40>
- 3a1:	38 d8                	cmp    %bl,%al
- 3a3:	74 eb                	je     390 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
- 3a5:	29 d8                	sub    %ebx,%eax
-}
- 3a7:	5b                   	pop    %ebx
- 3a8:	5d                   	pop    %ebp
- 3a9:	c3                   	ret    
- 3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 3b0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
- 3b2:	29 d8                	sub    %ebx,%eax
-}
- 3b4:	5b                   	pop    %ebx
- 3b5:	5d                   	pop    %ebp
- 3b6:	c3                   	ret    
- 3b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3be:	66 90                	xchg   %ax,%ax
-
-000003c0 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 3c0:	f3 0f 1e fb          	endbr32 
- 3c4:	55                   	push   %ebp
- 3c5:	89 e5                	mov    %esp,%ebp
- 3c7:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 3ca:	80 3a 00             	cmpb   $0x0,(%edx)
- 3cd:	74 21                	je     3f0 <strlen+0x30>
- 3cf:	31 c0                	xor    %eax,%eax
- 3d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3d8:	83 c0 01             	add    $0x1,%eax
- 3db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 3df:	89 c1                	mov    %eax,%ecx
- 3e1:	75 f5                	jne    3d8 <strlen+0x18>
-    ;
-  return n;
-}
- 3e3:	89 c8                	mov    %ecx,%eax
- 3e5:	5d                   	pop    %ebp
- 3e6:	c3                   	ret    
- 3e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3ee:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 3f0:	31 c9                	xor    %ecx,%ecx
-}
- 3f2:	5d                   	pop    %ebp
- 3f3:	89 c8                	mov    %ecx,%eax
- 3f5:	c3                   	ret    
- 3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3fd:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000400 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 400:	f3 0f 1e fb          	endbr32 
- 404:	55                   	push   %ebp
- 405:	89 e5                	mov    %esp,%ebp
- 407:	57                   	push   %edi
- 408:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 40b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 40e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 411:	89 d7                	mov    %edx,%edi
- 413:	fc                   	cld    
- 414:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 416:	89 d0                	mov    %edx,%eax
- 418:	5f                   	pop    %edi
- 419:	5d                   	pop    %ebp
- 41a:	c3                   	ret    
- 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 41f:	90                   	nop
-
-00000420 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 420:	f3 0f 1e fb          	endbr32 
- 424:	55                   	push   %ebp
- 425:	89 e5                	mov    %esp,%ebp
- 427:	8b 45 08             	mov    0x8(%ebp),%eax
- 42a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 42e:	0f b6 10             	movzbl (%eax),%edx
- 431:	84 d2                	test   %dl,%dl
- 433:	75 16                	jne    44b <strchr+0x2b>
- 435:	eb 21                	jmp    458 <strchr+0x38>
- 437:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 43e:	66 90                	xchg   %ax,%ax
- 440:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 444:	83 c0 01             	add    $0x1,%eax
- 447:	84 d2                	test   %dl,%dl
- 449:	74 0d                	je     458 <strchr+0x38>
-    if(*s == c)
- 44b:	38 d1                	cmp    %dl,%cl
- 44d:	75 f1                	jne    440 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 44f:	5d                   	pop    %ebp
- 450:	c3                   	ret    
- 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 458:	31 c0                	xor    %eax,%eax
-}
- 45a:	5d                   	pop    %ebp
- 45b:	c3                   	ret    
- 45c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000460 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 460:	f3 0f 1e fb          	endbr32 
- 464:	55                   	push   %ebp
- 465:	89 e5                	mov    %esp,%ebp
- 467:	57                   	push   %edi
- 468:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 469:	31 f6                	xor    %esi,%esi
-{
- 46b:	53                   	push   %ebx
- 46c:	89 f3                	mov    %esi,%ebx
- 46e:	83 ec 1c             	sub    $0x1c,%esp
- 471:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 474:	eb 33                	jmp    4a9 <gets+0x49>
- 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 47d:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 480:	83 ec 04             	sub    $0x4,%esp
- 483:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 486:	6a 01                	push   $0x1
- 488:	50                   	push   %eax
- 489:	6a 00                	push   $0x0
- 48b:	e8 2b 01 00 00       	call   5bb <read>
-    if(cc < 1)
- 490:	83 c4 10             	add    $0x10,%esp
- 493:	85 c0                	test   %eax,%eax
- 495:	7e 1c                	jle    4b3 <gets+0x53>
-      break;
-    buf[i++] = c;
- 497:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 49b:	83 c7 01             	add    $0x1,%edi
- 49e:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 4a1:	3c 0a                	cmp    $0xa,%al
- 4a3:	74 23                	je     4c8 <gets+0x68>
- 4a5:	3c 0d                	cmp    $0xd,%al
- 4a7:	74 1f                	je     4c8 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 4a9:	83 c3 01             	add    $0x1,%ebx
- 4ac:	89 fe                	mov    %edi,%esi
- 4ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 4b1:	7c cd                	jl     480 <gets+0x20>
- 4b3:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 4b5:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 4b8:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 4bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4be:	5b                   	pop    %ebx
- 4bf:	5e                   	pop    %esi
- 4c0:	5f                   	pop    %edi
- 4c1:	5d                   	pop    %ebp
- 4c2:	c3                   	ret    
- 4c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 4c7:	90                   	nop
- 4c8:	8b 75 08             	mov    0x8(%ebp),%esi
- 4cb:	8b 45 08             	mov    0x8(%ebp),%eax
- 4ce:	01 de                	add    %ebx,%esi
- 4d0:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 4d2:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 4d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4d8:	5b                   	pop    %ebx
- 4d9:	5e                   	pop    %esi
- 4da:	5f                   	pop    %edi
- 4db:	5d                   	pop    %ebp
- 4dc:	c3                   	ret    
- 4dd:	8d 76 00             	lea    0x0(%esi),%esi
-
-000004e0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 4e0:	f3 0f 1e fb          	endbr32 
- 4e4:	55                   	push   %ebp
- 4e5:	89 e5                	mov    %esp,%ebp
- 4e7:	56                   	push   %esi
- 4e8:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 4e9:	83 ec 08             	sub    $0x8,%esp
- 4ec:	6a 00                	push   $0x0
- 4ee:	ff 75 08             	pushl  0x8(%ebp)
- 4f1:	e8 ed 00 00 00       	call   5e3 <open>
-  if(fd < 0)
- 4f6:	83 c4 10             	add    $0x10,%esp
- 4f9:	85 c0                	test   %eax,%eax
- 4fb:	78 2b                	js     528 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 4fd:	83 ec 08             	sub    $0x8,%esp
- 500:	ff 75 0c             	pushl  0xc(%ebp)
- 503:	89 c3                	mov    %eax,%ebx
- 505:	50                   	push   %eax
- 506:	e8 f0 00 00 00       	call   5fb <fstat>
-  close(fd);
- 50b:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 50e:	89 c6                	mov    %eax,%esi
-  close(fd);
- 510:	e8 b6 00 00 00       	call   5cb <close>
-  return r;
- 515:	83 c4 10             	add    $0x10,%esp
-}
- 518:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 51b:	89 f0                	mov    %esi,%eax
- 51d:	5b                   	pop    %ebx
- 51e:	5e                   	pop    %esi
- 51f:	5d                   	pop    %ebp
- 520:	c3                   	ret    
- 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 528:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 52d:	eb e9                	jmp    518 <stat+0x38>
- 52f:	90                   	nop
-
-00000530 <atoi>:
-
-int
-atoi(const char *s)
-{
- 530:	f3 0f 1e fb          	endbr32 
- 534:	55                   	push   %ebp
- 535:	89 e5                	mov    %esp,%ebp
- 537:	53                   	push   %ebx
- 538:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 53b:	0f be 02             	movsbl (%edx),%eax
- 53e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 541:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 544:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 549:	77 1a                	ja     565 <atoi+0x35>
- 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 54f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 550:	83 c2 01             	add    $0x1,%edx
- 553:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 556:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 55a:	0f be 02             	movsbl (%edx),%eax
- 55d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 560:	80 fb 09             	cmp    $0x9,%bl
- 563:	76 eb                	jbe    550 <atoi+0x20>
-  return n;
-}
- 565:	89 c8                	mov    %ecx,%eax
- 567:	5b                   	pop    %ebx
- 568:	5d                   	pop    %ebp
- 569:	c3                   	ret    
- 56a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000570 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 570:	f3 0f 1e fb          	endbr32 
- 574:	55                   	push   %ebp
- 575:	89 e5                	mov    %esp,%ebp
- 577:	57                   	push   %edi
- 578:	8b 45 10             	mov    0x10(%ebp),%eax
- 57b:	8b 55 08             	mov    0x8(%ebp),%edx
- 57e:	56                   	push   %esi
- 57f:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 582:	85 c0                	test   %eax,%eax
- 584:	7e 0f                	jle    595 <memmove+0x25>
- 586:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 588:	89 d7                	mov    %edx,%edi
- 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 590:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 591:	39 f8                	cmp    %edi,%eax
- 593:	75 fb                	jne    590 <memmove+0x20>
-  return vdst;
-}
- 595:	5e                   	pop    %esi
- 596:	89 d0                	mov    %edx,%eax
- 598:	5f                   	pop    %edi
- 599:	5d                   	pop    %ebp
- 59a:	c3                   	ret    
-
-0000059b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 59b:	b8 01 00 00 00       	mov    $0x1,%eax
- 5a0:	cd 40                	int    $0x40
- 5a2:	c3                   	ret    
-
-000005a3 <exit>:
-SYSCALL(exit)
- 5a3:	b8 02 00 00 00       	mov    $0x2,%eax
- 5a8:	cd 40                	int    $0x40
- 5aa:	c3                   	ret    
-
-000005ab <wait>:
-SYSCALL(wait)
- 5ab:	b8 03 00 00 00       	mov    $0x3,%eax
- 5b0:	cd 40                	int    $0x40
- 5b2:	c3                   	ret    
-
-000005b3 <pipe>:
-SYSCALL(pipe)
- 5b3:	b8 04 00 00 00       	mov    $0x4,%eax
- 5b8:	cd 40                	int    $0x40
- 5ba:	c3                   	ret    
-
-000005bb <read>:
-SYSCALL(read)
- 5bb:	b8 05 00 00 00       	mov    $0x5,%eax
- 5c0:	cd 40                	int    $0x40
- 5c2:	c3                   	ret    
-
-000005c3 <write>:
-SYSCALL(write)
- 5c3:	b8 10 00 00 00       	mov    $0x10,%eax
- 5c8:	cd 40                	int    $0x40
- 5ca:	c3                   	ret    
-
-000005cb <close>:
-SYSCALL(close)
- 5cb:	b8 15 00 00 00       	mov    $0x15,%eax
- 5d0:	cd 40                	int    $0x40
- 5d2:	c3                   	ret    
-
-000005d3 <kill>:
-SYSCALL(kill)
- 5d3:	b8 06 00 00 00       	mov    $0x6,%eax
- 5d8:	cd 40                	int    $0x40
- 5da:	c3                   	ret    
-
-000005db <exec>:
-SYSCALL(exec)
- 5db:	b8 07 00 00 00       	mov    $0x7,%eax
- 5e0:	cd 40                	int    $0x40
- 5e2:	c3                   	ret    
-
-000005e3 <open>:
-SYSCALL(open)
- 5e3:	b8 0f 00 00 00       	mov    $0xf,%eax
- 5e8:	cd 40                	int    $0x40
- 5ea:	c3                   	ret    
-
-000005eb <mknod>:
-SYSCALL(mknod)
- 5eb:	b8 11 00 00 00       	mov    $0x11,%eax
- 5f0:	cd 40                	int    $0x40
- 5f2:	c3                   	ret    
-
-000005f3 <unlink>:
-SYSCALL(unlink)
- 5f3:	b8 12 00 00 00       	mov    $0x12,%eax
- 5f8:	cd 40                	int    $0x40
- 5fa:	c3                   	ret    
-
-000005fb <fstat>:
-SYSCALL(fstat)
- 5fb:	b8 08 00 00 00       	mov    $0x8,%eax
- 600:	cd 40                	int    $0x40
- 602:	c3                   	ret    
-
-00000603 <link>:
-SYSCALL(link)
- 603:	b8 13 00 00 00       	mov    $0x13,%eax
- 608:	cd 40                	int    $0x40
- 60a:	c3                   	ret    
-
-0000060b <mkdir>:
-SYSCALL(mkdir)
- 60b:	b8 14 00 00 00       	mov    $0x14,%eax
- 610:	cd 40                	int    $0x40
- 612:	c3                   	ret    
-
-00000613 <chdir>:
-SYSCALL(chdir)
- 613:	b8 09 00 00 00       	mov    $0x9,%eax
- 618:	cd 40                	int    $0x40
- 61a:	c3                   	ret    
-
-0000061b <dup>:
-SYSCALL(dup)
- 61b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 620:	cd 40                	int    $0x40
- 622:	c3                   	ret    
-
-00000623 <getpid>:
-SYSCALL(getpid)
- 623:	b8 0b 00 00 00       	mov    $0xb,%eax
- 628:	cd 40                	int    $0x40
- 62a:	c3                   	ret    
-
-0000062b <sbrk>:
-SYSCALL(sbrk)
- 62b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 630:	cd 40                	int    $0x40
- 632:	c3                   	ret    
-
-00000633 <sleep>:
-SYSCALL(sleep)
- 633:	b8 0d 00 00 00       	mov    $0xd,%eax
- 638:	cd 40                	int    $0x40
- 63a:	c3                   	ret    
-
-0000063b <uptime>:
-SYSCALL(uptime)
- 63b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 640:	cd 40                	int    $0x40
- 642:	c3                   	ret    
-
-00000643 <draw>:
-SYSCALL(draw)
- 643:	b8 16 00 00 00       	mov    $0x16,%eax
- 648:	cd 40                	int    $0x40
- 64a:	c3                   	ret    
-
-0000064b <thread_create>:
-SYSCALL(thread_create)
- 64b:	b8 18 00 00 00       	mov    $0x18,%eax
- 650:	cd 40                	int    $0x40
- 652:	c3                   	ret    
-
-00000653 <thread_join>:
-SYSCALL(thread_join)
- 653:	b8 19 00 00 00       	mov    $0x19,%eax
- 658:	cd 40                	int    $0x40
- 65a:	c3                   	ret    
-
-0000065b <thread_exit>:
-SYSCALL(thread_exit)
- 65b:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 660:	cd 40                	int    $0x40
- 662:	c3                   	ret    
- 663:	66 90                	xchg   %ax,%ax
- 665:	66 90                	xchg   %ax,%ax
- 667:	66 90                	xchg   %ax,%ax
- 669:	66 90                	xchg   %ax,%ax
- 66b:	66 90                	xchg   %ax,%ax
- 66d:	66 90                	xchg   %ax,%ax
- 66f:	90                   	nop
-
-00000670 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 670:	55                   	push   %ebp
- 671:	89 e5                	mov    %esp,%ebp
- 673:	57                   	push   %edi
- 674:	56                   	push   %esi
- 675:	53                   	push   %ebx
- 676:	83 ec 3c             	sub    $0x3c,%esp
- 679:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 67c:	89 d1                	mov    %edx,%ecx
-{
- 67e:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 681:	85 d2                	test   %edx,%edx
- 683:	0f 89 7f 00 00 00    	jns    708 <printint+0x98>
- 689:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 68d:	74 79                	je     708 <printint+0x98>
-    neg = 1;
- 68f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 696:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 698:	31 db                	xor    %ebx,%ebx
- 69a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 69d:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 6a0:	89 c8                	mov    %ecx,%eax
- 6a2:	31 d2                	xor    %edx,%edx
- 6a4:	89 cf                	mov    %ecx,%edi
- 6a6:	f7 75 c4             	divl   -0x3c(%ebp)
- 6a9:	0f b6 92 c8 0a 00 00 	movzbl 0xac8(%edx),%edx
- 6b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 6b3:	89 d8                	mov    %ebx,%eax
- 6b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 6b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 6bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 6be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 6c1:	76 dd                	jbe    6a0 <printint+0x30>
-  if(neg)
- 6c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 6c6:	85 c9                	test   %ecx,%ecx
- 6c8:	74 0c                	je     6d6 <printint+0x66>
-    buf[i++] = '-';
- 6ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 6cf:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 6d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 6d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 6d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 6dd:	eb 07                	jmp    6e6 <printint+0x76>
- 6df:	90                   	nop
- 6e0:	0f b6 13             	movzbl (%ebx),%edx
- 6e3:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 6e6:	83 ec 04             	sub    $0x4,%esp
- 6e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 6ec:	6a 01                	push   $0x1
- 6ee:	56                   	push   %esi
- 6ef:	57                   	push   %edi
- 6f0:	e8 ce fe ff ff       	call   5c3 <write>
-  while(--i >= 0)
- 6f5:	83 c4 10             	add    $0x10,%esp
- 6f8:	39 de                	cmp    %ebx,%esi
- 6fa:	75 e4                	jne    6e0 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 6fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 6ff:	5b                   	pop    %ebx
- 700:	5e                   	pop    %esi
- 701:	5f                   	pop    %edi
- 702:	5d                   	pop    %ebp
- 703:	c3                   	ret    
- 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 708:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 70f:	eb 87                	jmp    698 <printint+0x28>
- 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 71f:	90                   	nop
-
-00000720 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 720:	f3 0f 1e fb          	endbr32 
- 724:	55                   	push   %ebp
- 725:	89 e5                	mov    %esp,%ebp
- 727:	57                   	push   %edi
- 728:	56                   	push   %esi
- 729:	53                   	push   %ebx
- 72a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 72d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 730:	0f b6 1e             	movzbl (%esi),%ebx
- 733:	84 db                	test   %bl,%bl
- 735:	0f 84 b4 00 00 00    	je     7ef <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 73b:	8d 45 10             	lea    0x10(%ebp),%eax
- 73e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 741:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 744:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 746:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 749:	eb 33                	jmp    77e <printf+0x5e>
- 74b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 74f:	90                   	nop
- 750:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 753:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 758:	83 f8 25             	cmp    $0x25,%eax
- 75b:	74 17                	je     774 <printf+0x54>
-  write(fd, &c, 1);
- 75d:	83 ec 04             	sub    $0x4,%esp
- 760:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 763:	6a 01                	push   $0x1
- 765:	57                   	push   %edi
- 766:	ff 75 08             	pushl  0x8(%ebp)
- 769:	e8 55 fe ff ff       	call   5c3 <write>
- 76e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 771:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 774:	0f b6 1e             	movzbl (%esi),%ebx
- 777:	83 c6 01             	add    $0x1,%esi
- 77a:	84 db                	test   %bl,%bl
- 77c:	74 71                	je     7ef <printf+0xcf>
-    c = fmt[i] & 0xff;
- 77e:	0f be cb             	movsbl %bl,%ecx
- 781:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 784:	85 d2                	test   %edx,%edx
- 786:	74 c8                	je     750 <printf+0x30>
-      }
-    } else if(state == '%'){
- 788:	83 fa 25             	cmp    $0x25,%edx
- 78b:	75 e7                	jne    774 <printf+0x54>
-      if(c == 'd'){
- 78d:	83 f8 64             	cmp    $0x64,%eax
- 790:	0f 84 9a 00 00 00    	je     830 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 796:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 79c:	83 f9 70             	cmp    $0x70,%ecx
- 79f:	74 5f                	je     800 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 7a1:	83 f8 73             	cmp    $0x73,%eax
- 7a4:	0f 84 d6 00 00 00    	je     880 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 7aa:	83 f8 63             	cmp    $0x63,%eax
- 7ad:	0f 84 8d 00 00 00    	je     840 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 7b3:	83 f8 25             	cmp    $0x25,%eax
- 7b6:	0f 84 b4 00 00 00    	je     870 <printf+0x150>
-  write(fd, &c, 1);
- 7bc:	83 ec 04             	sub    $0x4,%esp
- 7bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 7c3:	6a 01                	push   $0x1
- 7c5:	57                   	push   %edi
- 7c6:	ff 75 08             	pushl  0x8(%ebp)
- 7c9:	e8 f5 fd ff ff       	call   5c3 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 7ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 7d1:	83 c4 0c             	add    $0xc,%esp
- 7d4:	6a 01                	push   $0x1
- 7d6:	83 c6 01             	add    $0x1,%esi
- 7d9:	57                   	push   %edi
- 7da:	ff 75 08             	pushl  0x8(%ebp)
- 7dd:	e8 e1 fd ff ff       	call   5c3 <write>
-  for(i = 0; fmt[i]; i++){
- 7e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 7e6:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 7e9:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 7eb:	84 db                	test   %bl,%bl
- 7ed:	75 8f                	jne    77e <printf+0x5e>
-    }
-  }
-}
- 7ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 7f2:	5b                   	pop    %ebx
- 7f3:	5e                   	pop    %esi
- 7f4:	5f                   	pop    %edi
- 7f5:	5d                   	pop    %ebp
- 7f6:	c3                   	ret    
- 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7fe:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 800:	83 ec 0c             	sub    $0xc,%esp
- 803:	b9 10 00 00 00       	mov    $0x10,%ecx
- 808:	6a 00                	push   $0x0
- 80a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 80d:	8b 45 08             	mov    0x8(%ebp),%eax
- 810:	8b 13                	mov    (%ebx),%edx
- 812:	e8 59 fe ff ff       	call   670 <printint>
-        ap++;
- 817:	89 d8                	mov    %ebx,%eax
- 819:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 81c:	31 d2                	xor    %edx,%edx
-        ap++;
- 81e:	83 c0 04             	add    $0x4,%eax
- 821:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 824:	e9 4b ff ff ff       	jmp    774 <printf+0x54>
- 829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 830:	83 ec 0c             	sub    $0xc,%esp
- 833:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 838:	6a 01                	push   $0x1
- 83a:	eb ce                	jmp    80a <printf+0xea>
- 83c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 840:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 843:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 846:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 848:	6a 01                	push   $0x1
-        ap++;
- 84a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 84d:	57                   	push   %edi
- 84e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 851:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 854:	e8 6a fd ff ff       	call   5c3 <write>
-        ap++;
- 859:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 85c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 85f:	31 d2                	xor    %edx,%edx
- 861:	e9 0e ff ff ff       	jmp    774 <printf+0x54>
- 866:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 86d:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 870:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 873:	83 ec 04             	sub    $0x4,%esp
- 876:	e9 59 ff ff ff       	jmp    7d4 <printf+0xb4>
- 87b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 87f:	90                   	nop
-        s = (char*)*ap;
- 880:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 883:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 885:	83 c0 04             	add    $0x4,%eax
- 888:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 88b:	85 db                	test   %ebx,%ebx
- 88d:	74 17                	je     8a6 <printf+0x186>
-        while(*s != 0){
- 88f:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 892:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 894:	84 c0                	test   %al,%al
- 896:	0f 84 d8 fe ff ff    	je     774 <printf+0x54>
- 89c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 89f:	89 de                	mov    %ebx,%esi
- 8a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 8a4:	eb 1a                	jmp    8c0 <printf+0x1a0>
-          s = "(null)";
- 8a6:	bb be 0a 00 00       	mov    $0xabe,%ebx
-        while(*s != 0){
- 8ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 8ae:	b8 28 00 00 00       	mov    $0x28,%eax
- 8b3:	89 de                	mov    %ebx,%esi
- 8b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 8b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 8bf:	90                   	nop
-  write(fd, &c, 1);
- 8c0:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 8c3:	83 c6 01             	add    $0x1,%esi
- 8c6:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 8c9:	6a 01                	push   $0x1
- 8cb:	57                   	push   %edi
- 8cc:	53                   	push   %ebx
- 8cd:	e8 f1 fc ff ff       	call   5c3 <write>
-        while(*s != 0){
- 8d2:	0f b6 06             	movzbl (%esi),%eax
- 8d5:	83 c4 10             	add    $0x10,%esp
- 8d8:	84 c0                	test   %al,%al
- 8da:	75 e4                	jne    8c0 <printf+0x1a0>
- 8dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 8df:	31 d2                	xor    %edx,%edx
- 8e1:	e9 8e fe ff ff       	jmp    774 <printf+0x54>
- 8e6:	66 90                	xchg   %ax,%ax
- 8e8:	66 90                	xchg   %ax,%ax
- 8ea:	66 90                	xchg   %ax,%ax
- 8ec:	66 90                	xchg   %ax,%ax
- 8ee:	66 90                	xchg   %ax,%ax
-
-000008f0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 8f0:	f3 0f 1e fb          	endbr32 
- 8f4:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8f5:	a1 80 0e 00 00       	mov    0xe80,%eax
-{
- 8fa:	89 e5                	mov    %esp,%ebp
- 8fc:	57                   	push   %edi
- 8fd:	56                   	push   %esi
- 8fe:	53                   	push   %ebx
- 8ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 902:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 904:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 907:	39 c8                	cmp    %ecx,%eax
- 909:	73 15                	jae    920 <free+0x30>
- 90b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 90f:	90                   	nop
- 910:	39 d1                	cmp    %edx,%ecx
- 912:	72 14                	jb     928 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 914:	39 d0                	cmp    %edx,%eax
- 916:	73 10                	jae    928 <free+0x38>
-{
- 918:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 91a:	8b 10                	mov    (%eax),%edx
- 91c:	39 c8                	cmp    %ecx,%eax
- 91e:	72 f0                	jb     910 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 920:	39 d0                	cmp    %edx,%eax
- 922:	72 f4                	jb     918 <free+0x28>
- 924:	39 d1                	cmp    %edx,%ecx
- 926:	73 f0                	jae    918 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 928:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 92b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 92e:	39 fa                	cmp    %edi,%edx
- 930:	74 1e                	je     950 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 932:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 935:	8b 50 04             	mov    0x4(%eax),%edx
- 938:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 93b:	39 f1                	cmp    %esi,%ecx
- 93d:	74 28                	je     967 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 93f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 941:	5b                   	pop    %ebx
-  freep = p;
- 942:	a3 80 0e 00 00       	mov    %eax,0xe80
-}
- 947:	5e                   	pop    %esi
- 948:	5f                   	pop    %edi
- 949:	5d                   	pop    %ebp
- 94a:	c3                   	ret    
- 94b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 94f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 950:	03 72 04             	add    0x4(%edx),%esi
- 953:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 956:	8b 10                	mov    (%eax),%edx
- 958:	8b 12                	mov    (%edx),%edx
- 95a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 95d:	8b 50 04             	mov    0x4(%eax),%edx
- 960:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 963:	39 f1                	cmp    %esi,%ecx
- 965:	75 d8                	jne    93f <free+0x4f>
-    p->s.size += bp->s.size;
- 967:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 96a:	a3 80 0e 00 00       	mov    %eax,0xe80
-    p->s.size += bp->s.size;
- 96f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 972:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 975:	89 10                	mov    %edx,(%eax)
-}
- 977:	5b                   	pop    %ebx
- 978:	5e                   	pop    %esi
- 979:	5f                   	pop    %edi
- 97a:	5d                   	pop    %ebp
- 97b:	c3                   	ret    
- 97c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000980 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 980:	f3 0f 1e fb          	endbr32 
- 984:	55                   	push   %ebp
- 985:	89 e5                	mov    %esp,%ebp
- 987:	57                   	push   %edi
- 988:	56                   	push   %esi
- 989:	53                   	push   %ebx
- 98a:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 98d:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 990:	8b 3d 80 0e 00 00    	mov    0xe80,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 996:	8d 70 07             	lea    0x7(%eax),%esi
- 999:	c1 ee 03             	shr    $0x3,%esi
- 99c:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 99f:	85 ff                	test   %edi,%edi
- 9a1:	0f 84 a9 00 00 00    	je     a50 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9a7:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 9a9:	8b 48 04             	mov    0x4(%eax),%ecx
- 9ac:	39 f1                	cmp    %esi,%ecx
- 9ae:	73 6d                	jae    a1d <malloc+0x9d>
- 9b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 9b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 9bb:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 9be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 9c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 9c8:	eb 17                	jmp    9e1 <malloc+0x61>
- 9ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9d0:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 9d2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 9d5:	39 f1                	cmp    %esi,%ecx
- 9d7:	73 4f                	jae    a28 <malloc+0xa8>
- 9d9:	8b 3d 80 0e 00 00    	mov    0xe80,%edi
- 9df:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 9e1:	39 c7                	cmp    %eax,%edi
- 9e3:	75 eb                	jne    9d0 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 9e5:	83 ec 0c             	sub    $0xc,%esp
- 9e8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 9eb:	e8 3b fc ff ff       	call   62b <sbrk>
-  if(p == (char*)-1)
- 9f0:	83 c4 10             	add    $0x10,%esp
- 9f3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 9f6:	74 1b                	je     a13 <malloc+0x93>
-  hp->s.size = nu;
- 9f8:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 9fb:	83 ec 0c             	sub    $0xc,%esp
- 9fe:	83 c0 08             	add    $0x8,%eax
- a01:	50                   	push   %eax
- a02:	e8 e9 fe ff ff       	call   8f0 <free>
-  return freep;
- a07:	a1 80 0e 00 00       	mov    0xe80,%eax
-      if((p = morecore(nunits)) == 0)
- a0c:	83 c4 10             	add    $0x10,%esp
- a0f:	85 c0                	test   %eax,%eax
- a11:	75 bd                	jne    9d0 <malloc+0x50>
-        return 0;
-  }
-}
- a13:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- a16:	31 c0                	xor    %eax,%eax
-}
- a18:	5b                   	pop    %ebx
- a19:	5e                   	pop    %esi
- a1a:	5f                   	pop    %edi
- a1b:	5d                   	pop    %ebp
- a1c:	c3                   	ret    
-    if(p->s.size >= nunits){
- a1d:	89 c2                	mov    %eax,%edx
- a1f:	89 f8                	mov    %edi,%eax
- a21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- a28:	39 ce                	cmp    %ecx,%esi
- a2a:	74 54                	je     a80 <malloc+0x100>
-        p->s.size -= nunits;
- a2c:	29 f1                	sub    %esi,%ecx
- a2e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- a31:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- a34:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- a37:	a3 80 0e 00 00       	mov    %eax,0xe80
-}
- a3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- a3f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- a42:	5b                   	pop    %ebx
- a43:	5e                   	pop    %esi
- a44:	5f                   	pop    %edi
- a45:	5d                   	pop    %ebp
- a46:	c3                   	ret    
- a47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- a4e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- a50:	c7 05 80 0e 00 00 84 	movl   $0xe84,0xe80
- a57:	0e 00 00 
-    base.s.size = 0;
- a5a:	bf 84 0e 00 00       	mov    $0xe84,%edi
-    base.s.ptr = freep = prevp = &base;
- a5f:	c7 05 84 0e 00 00 84 	movl   $0xe84,0xe84
- a66:	0e 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a69:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- a6b:	c7 05 88 0e 00 00 00 	movl   $0x0,0xe88
- a72:	00 00 00 
-    if(p->s.size >= nunits){
- a75:	e9 36 ff ff ff       	jmp    9b0 <malloc+0x30>
- a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- a80:	8b 0a                	mov    (%edx),%ecx
- a82:	89 08                	mov    %ecx,(%eax)
- a84:	eb b1                	jmp    a37 <malloc+0xb7>
diff -ruN xv6-public/grep.c xv6-public-mynew/grep.c
--- xv6-public/grep.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/grep.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,107 +0,0 @@
-// Simple grep.  Only supports ^ . * $ operators.
-
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-char buf[1024];
-int match(char*, char*);
-
-void
-grep(char *pattern, int fd)
-{
-  int n, m;
-  char *p, *q;
-
-  m = 0;
-  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
-    m += n;
-    buf[m] = '\0';
-    p = buf;
-    while((q = strchr(p, '\n')) != 0){
-      *q = 0;
-      if(match(pattern, p)){
-        *q = '\n';
-        write(1, p, q+1 - p);
-      }
-      p = q+1;
-    }
-    if(p == buf)
-      m = 0;
-    if(m > 0){
-      m -= p - buf;
-      memmove(buf, p, m);
-    }
-  }
-}
-
-int
-main(int argc, char *argv[])
-{
-  int fd, i;
-  char *pattern;
-
-  if(argc <= 1){
-    printf(2, "usage: grep pattern [file ...]\n");
-    exit();
-  }
-  pattern = argv[1];
-
-  if(argc <= 2){
-    grep(pattern, 0);
-    exit();
-  }
-
-  for(i = 2; i < argc; i++){
-    if((fd = open(argv[i], 0)) < 0){
-      printf(1, "grep: cannot open %s\n", argv[i]);
-      exit();
-    }
-    grep(pattern, fd);
-    close(fd);
-  }
-  exit();
-}
-
-// Regexp matcher from Kernighan & Pike,
-// The Practice of Programming, Chapter 9.
-
-int matchhere(char*, char*);
-int matchstar(int, char*, char*);
-
-int
-match(char *re, char *text)
-{
-  if(re[0] == '^')
-    return matchhere(re+1, text);
-  do{  // must look at empty string
-    if(matchhere(re, text))
-      return 1;
-  }while(*text++ != '\0');
-  return 0;
-}
-
-// matchhere: search for re at beginning of text
-int matchhere(char *re, char *text)
-{
-  if(re[0] == '\0')
-    return 1;
-  if(re[1] == '*')
-    return matchstar(re[0], re+2, text);
-  if(re[0] == '$' && re[1] == '\0')
-    return *text == '\0';
-  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
-    return matchhere(re+1, text+1);
-  return 0;
-}
-
-// matchstar: search for c*re at beginning of text
-int matchstar(int c, char *re, char *text)
-{
-  do{  // a * matches zero or more instances
-    if(matchhere(re, text))
-      return 1;
-  }while(*text!='\0' && (*text++==c || c=='.'));
-  return 0;
-}
-
diff -ruN xv6-public/grep.d xv6-public-mynew/grep.d
--- xv6-public/grep.d	2022-09-05 09:51:05.170999136 +0530
+++ xv6-public-mynew/grep.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/grep.o and xv6-public-mynew/grep.o differ
diff -ruN xv6-public/grep.sym xv6-public-mynew/grep.sym
--- xv6-public/grep.sym	2022-09-05 09:51:05.198999136 +0530
+++ xv6-public-mynew/grep.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,66 +0,0 @@
-00000000 .text
-00000a88 .rodata
-00000adc .eh_frame
-00000e80 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 grep.c
-00000000 ulib.c
-00000000 printf.c
-00000670 printint
-00000ac8 digits.1097
-00000000 umalloc.c
-00000e80 freep
-00000e84 base
-00000340 strcpy
-00000720 printf
-0000065b thread_exit
-00000570 memmove
-00000120 matchhere
-000005eb mknod
-00000460 gets
-00000623 getpid
-00000230 grep
-00000980 malloc
-00000633 sleep
-000005b3 pipe
-000005c3 write
-000005fb fstat
-000005d3 kill
-00000613 chdir
-000005db exec
-000005ab wait
-000005bb read
-000005f3 unlink
-0000059b fork
-0000062b sbrk
-0000063b uptime
-00000e64 __bss_start
-00000400 memset
-00000000 main
-000000c0 matchstar
-00000370 strcmp
-0000061b dup
-00000ea0 buf
-000004e0 stat
-00000e64 _edata
-000012a0 _end
-000001c0 match
-00000603 link
-000005a3 exit
-00000530 atoi
-00000643 draw
-000003c0 strlen
-000005e3 open
-00000420 strchr
-0000064b thread_create
-0000060b mkdir
-000005cb close
-00000653 thread_join
-000008f0 free
diff -ruN xv6-public/ide.c xv6-public-mynew/ide.c
--- xv6-public/ide.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/ide.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,168 +0,0 @@
-// Simple PIO-based (non-DMA) IDE driver code.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-#include "traps.h"
-#include "spinlock.h"
-#include "sleeplock.h"
-#include "fs.h"
-#include "buf.h"
-
-#define SECTOR_SIZE   512
-#define IDE_BSY       0x80
-#define IDE_DRDY      0x40
-#define IDE_DF        0x20
-#define IDE_ERR       0x01
-
-#define IDE_CMD_READ  0x20
-#define IDE_CMD_WRITE 0x30
-#define IDE_CMD_RDMUL 0xc4
-#define IDE_CMD_WRMUL 0xc5
-
-// idequeue points to the buf now being read/written to the disk.
-// idequeue->qnext points to the next buf to be processed.
-// You must hold idelock while manipulating queue.
-
-static struct spinlock idelock;
-static struct buf *idequeue;
-
-static int havedisk1;
-static void idestart(struct buf*);
-
-// Wait for IDE disk to become ready.
-static int
-idewait(int checkerr)
-{
-  int r;
-
-  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
-    ;
-  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
-    return -1;
-  return 0;
-}
-
-void
-ideinit(void)
-{
-  int i;
-
-  initlock(&idelock, "ide");
-  ioapicenable(IRQ_IDE, ncpu - 1);
-  idewait(0);
-
-  // Check if disk 1 is present
-  outb(0x1f6, 0xe0 | (1<<4));
-  for(i=0; i<1000; i++){
-    if(inb(0x1f7) != 0){
-      havedisk1 = 1;
-      break;
-    }
-  }
-
-  // Switch back to disk 0.
-  outb(0x1f6, 0xe0 | (0<<4));
-}
-
-// Start the request for b.  Caller must hold idelock.
-static void
-idestart(struct buf *b)
-{
-  if(b == 0)
-    panic("idestart");
-  if(b->blockno >= FSSIZE)
-    panic("incorrect blockno");
-  int sector_per_block =  BSIZE/SECTOR_SIZE;
-  int sector = b->blockno * sector_per_block;
-  int read_cmd = (sector_per_block == 1) ? IDE_CMD_READ :  IDE_CMD_RDMUL;
-  int write_cmd = (sector_per_block == 1) ? IDE_CMD_WRITE : IDE_CMD_WRMUL;
-
-  if (sector_per_block > 7) panic("idestart");
-
-  idewait(0);
-  outb(0x3f6, 0);  // generate interrupt
-  outb(0x1f2, sector_per_block);  // number of sectors
-  outb(0x1f3, sector & 0xff);
-  outb(0x1f4, (sector >> 8) & 0xff);
-  outb(0x1f5, (sector >> 16) & 0xff);
-  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
-  if(b->flags & B_DIRTY){
-    outb(0x1f7, write_cmd);
-    outsl(0x1f0, b->data, BSIZE/4);
-  } else {
-    outb(0x1f7, read_cmd);
-  }
-}
-
-// Interrupt handler.
-void
-ideintr(void)
-{
-  struct buf *b;
-
-  // First queued buffer is the active request.
-  acquire(&idelock);
-
-  if((b = idequeue) == 0){
-    release(&idelock);
-    return;
-  }
-  idequeue = b->qnext;
-
-  // Read data if needed.
-  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
-    insl(0x1f0, b->data, BSIZE/4);
-
-  // Wake process waiting for this buf.
-  b->flags |= B_VALID;
-  b->flags &= ~B_DIRTY;
-  wakeup(b);
-
-  // Start disk on next buf in queue.
-  if(idequeue != 0)
-    idestart(idequeue);
-
-  release(&idelock);
-}
-
-//PAGEBREAK!
-// Sync buf with disk.
-// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
-// Else if B_VALID is not set, read buf from disk, set B_VALID.
-void
-iderw(struct buf *b)
-{
-  struct buf **pp;
-
-  if(!holdingsleep(&b->lock))
-    panic("iderw: buf not locked");
-  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
-    panic("iderw: nothing to do");
-  if(b->dev != 0 && !havedisk1)
-    panic("iderw: ide disk 1 not present");
-
-  acquire(&idelock);  //DOC:acquire-lock
-
-  // Append b to idequeue.
-  b->qnext = 0;
-  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-    ;
-  *pp = b;
-
-  // Start disk if necessary.
-  if(idequeue == b)
-    idestart(b);
-
-  // Wait for request to finish.
-  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
-    sleep(b, &idelock);
-  }
-
-
-  release(&idelock);
-}
diff -ruN xv6-public/ide.d xv6-public-mynew/ide.d
--- xv6-public/ide.d	2022-09-05 09:51:07.474999202 +0530
+++ xv6-public-mynew/ide.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-ide.o: ide.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h proc.h x86.h traps.h spinlock.h sleeplock.h fs.h buf.h
Binary files xv6-public/ide.o and xv6-public-mynew/ide.o differ
Binary files xv6-public/_init and xv6-public-mynew/_init differ
diff -ruN xv6-public/init.asm xv6-public-mynew/init.asm
--- xv6-public/init.asm	2022-09-05 09:51:05.250999138 +0530
+++ xv6-public-mynew/init.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1278 +0,0 @@
-
-_init:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-
-char *argv[] = { "sh", 0 };
-
-int
-main(void)
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	53                   	push   %ebx
-  12:	51                   	push   %ecx
-  int pid, wpid;
-
-  if(open("console", O_RDWR) < 0){
-  13:	83 ec 08             	sub    $0x8,%esp
-  16:	6a 02                	push   $0x2
-  18:	68 38 08 00 00       	push   $0x838
-  1d:	e8 71 03 00 00       	call   393 <open>
-  22:	83 c4 10             	add    $0x10,%esp
-  25:	85 c0                	test   %eax,%eax
-  27:	0f 88 9b 00 00 00    	js     c8 <main+0xc8>
-    mknod("console", 1, 1);
-    open("console", O_RDWR);
-  }
-  dup(0);  // stdout
-  2d:	83 ec 0c             	sub    $0xc,%esp
-  30:	6a 00                	push   $0x0
-  32:	e8 94 03 00 00       	call   3cb <dup>
-  dup(0);  // stderr
-  37:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  3e:	e8 88 03 00 00       	call   3cb <dup>
-  43:	83 c4 10             	add    $0x10,%esp
-  46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  4d:	8d 76 00             	lea    0x0(%esi),%esi
-
-  for(;;){
-    printf(1, "init: starting sh\n");
-  50:	83 ec 08             	sub    $0x8,%esp
-  53:	68 40 08 00 00       	push   $0x840
-  58:	6a 01                	push   $0x1
-  5a:	e8 71 04 00 00       	call   4d0 <printf>
-    pid = fork();
-  5f:	e8 e7 02 00 00       	call   34b <fork>
-    if(pid < 0){
-  64:	83 c4 10             	add    $0x10,%esp
-    pid = fork();
-  67:	89 c3                	mov    %eax,%ebx
-    if(pid < 0){
-  69:	85 c0                	test   %eax,%eax
-  6b:	78 24                	js     91 <main+0x91>
-      printf(1, "init: fork failed\n");
-      exit();
-    }
-    if(pid == 0){
-  6d:	74 35                	je     a4 <main+0xa4>
-  6f:	90                   	nop
-      exec("sh", argv);
-      printf(1, "init: exec sh failed\n");
-      exit();
-    }
-    while((wpid=wait()) >= 0 && wpid != pid)
-  70:	e8 e6 02 00 00       	call   35b <wait>
-  75:	85 c0                	test   %eax,%eax
-  77:	78 d7                	js     50 <main+0x50>
-  79:	39 c3                	cmp    %eax,%ebx
-  7b:	74 d3                	je     50 <main+0x50>
-      printf(1, "zombie!\n");
-  7d:	83 ec 08             	sub    $0x8,%esp
-  80:	68 7f 08 00 00       	push   $0x87f
-  85:	6a 01                	push   $0x1
-  87:	e8 44 04 00 00       	call   4d0 <printf>
-  8c:	83 c4 10             	add    $0x10,%esp
-  8f:	eb df                	jmp    70 <main+0x70>
-      printf(1, "init: fork failed\n");
-  91:	53                   	push   %ebx
-  92:	53                   	push   %ebx
-  93:	68 53 08 00 00       	push   $0x853
-  98:	6a 01                	push   $0x1
-  9a:	e8 31 04 00 00       	call   4d0 <printf>
-      exit();
-  9f:	e8 af 02 00 00       	call   353 <exit>
-      exec("sh", argv);
-  a4:	50                   	push   %eax
-  a5:	50                   	push   %eax
-  a6:	68 3c 0b 00 00       	push   $0xb3c
-  ab:	68 66 08 00 00       	push   $0x866
-  b0:	e8 d6 02 00 00       	call   38b <exec>
-      printf(1, "init: exec sh failed\n");
-  b5:	5a                   	pop    %edx
-  b6:	59                   	pop    %ecx
-  b7:	68 69 08 00 00       	push   $0x869
-  bc:	6a 01                	push   $0x1
-  be:	e8 0d 04 00 00       	call   4d0 <printf>
-      exit();
-  c3:	e8 8b 02 00 00       	call   353 <exit>
-    mknod("console", 1, 1);
-  c8:	50                   	push   %eax
-  c9:	6a 01                	push   $0x1
-  cb:	6a 01                	push   $0x1
-  cd:	68 38 08 00 00       	push   $0x838
-  d2:	e8 c4 02 00 00       	call   39b <mknod>
-    open("console", O_RDWR);
-  d7:	58                   	pop    %eax
-  d8:	5a                   	pop    %edx
-  d9:	6a 02                	push   $0x2
-  db:	68 38 08 00 00       	push   $0x838
-  e0:	e8 ae 02 00 00       	call   393 <open>
-  e5:	83 c4 10             	add    $0x10,%esp
-  e8:	e9 40 ff ff ff       	jmp    2d <main+0x2d>
-  ed:	66 90                	xchg   %ax,%ax
-  ef:	90                   	nop
-
-000000f0 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  f0:	f3 0f 1e fb          	endbr32 
-  f4:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  f5:	31 c0                	xor    %eax,%eax
-{
-  f7:	89 e5                	mov    %esp,%ebp
-  f9:	53                   	push   %ebx
-  fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  fd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
- 100:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 104:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 107:	83 c0 01             	add    $0x1,%eax
- 10a:	84 d2                	test   %dl,%dl
- 10c:	75 f2                	jne    100 <strcpy+0x10>
-    ;
-  return os;
-}
- 10e:	89 c8                	mov    %ecx,%eax
- 110:	5b                   	pop    %ebx
- 111:	5d                   	pop    %ebp
- 112:	c3                   	ret    
- 113:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 11a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000120 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 120:	f3 0f 1e fb          	endbr32 
- 124:	55                   	push   %ebp
- 125:	89 e5                	mov    %esp,%ebp
- 127:	53                   	push   %ebx
- 128:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 12b:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
- 12e:	0f b6 01             	movzbl (%ecx),%eax
- 131:	0f b6 1a             	movzbl (%edx),%ebx
- 134:	84 c0                	test   %al,%al
- 136:	75 19                	jne    151 <strcmp+0x31>
- 138:	eb 26                	jmp    160 <strcmp+0x40>
- 13a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 140:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
- 144:	83 c1 01             	add    $0x1,%ecx
- 147:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
- 14a:	0f b6 1a             	movzbl (%edx),%ebx
- 14d:	84 c0                	test   %al,%al
- 14f:	74 0f                	je     160 <strcmp+0x40>
- 151:	38 d8                	cmp    %bl,%al
- 153:	74 eb                	je     140 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
- 155:	29 d8                	sub    %ebx,%eax
-}
- 157:	5b                   	pop    %ebx
- 158:	5d                   	pop    %ebp
- 159:	c3                   	ret    
- 15a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 160:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
- 162:	29 d8                	sub    %ebx,%eax
-}
- 164:	5b                   	pop    %ebx
- 165:	5d                   	pop    %ebp
- 166:	c3                   	ret    
- 167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 16e:	66 90                	xchg   %ax,%ax
-
-00000170 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 170:	f3 0f 1e fb          	endbr32 
- 174:	55                   	push   %ebp
- 175:	89 e5                	mov    %esp,%ebp
- 177:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 17a:	80 3a 00             	cmpb   $0x0,(%edx)
- 17d:	74 21                	je     1a0 <strlen+0x30>
- 17f:	31 c0                	xor    %eax,%eax
- 181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 188:	83 c0 01             	add    $0x1,%eax
- 18b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 18f:	89 c1                	mov    %eax,%ecx
- 191:	75 f5                	jne    188 <strlen+0x18>
-    ;
-  return n;
-}
- 193:	89 c8                	mov    %ecx,%eax
- 195:	5d                   	pop    %ebp
- 196:	c3                   	ret    
- 197:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 19e:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 1a0:	31 c9                	xor    %ecx,%ecx
-}
- 1a2:	5d                   	pop    %ebp
- 1a3:	89 c8                	mov    %ecx,%eax
- 1a5:	c3                   	ret    
- 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-000001b0 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 1b0:	f3 0f 1e fb          	endbr32 
- 1b4:	55                   	push   %ebp
- 1b5:	89 e5                	mov    %esp,%ebp
- 1b7:	57                   	push   %edi
- 1b8:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 1bb:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 1be:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1c1:	89 d7                	mov    %edx,%edi
- 1c3:	fc                   	cld    
- 1c4:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 1c6:	89 d0                	mov    %edx,%eax
- 1c8:	5f                   	pop    %edi
- 1c9:	5d                   	pop    %ebp
- 1ca:	c3                   	ret    
- 1cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 1cf:	90                   	nop
-
-000001d0 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 1d0:	f3 0f 1e fb          	endbr32 
- 1d4:	55                   	push   %ebp
- 1d5:	89 e5                	mov    %esp,%ebp
- 1d7:	8b 45 08             	mov    0x8(%ebp),%eax
- 1da:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 1de:	0f b6 10             	movzbl (%eax),%edx
- 1e1:	84 d2                	test   %dl,%dl
- 1e3:	75 16                	jne    1fb <strchr+0x2b>
- 1e5:	eb 21                	jmp    208 <strchr+0x38>
- 1e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1ee:	66 90                	xchg   %ax,%ax
- 1f0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 1f4:	83 c0 01             	add    $0x1,%eax
- 1f7:	84 d2                	test   %dl,%dl
- 1f9:	74 0d                	je     208 <strchr+0x38>
-    if(*s == c)
- 1fb:	38 d1                	cmp    %dl,%cl
- 1fd:	75 f1                	jne    1f0 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 1ff:	5d                   	pop    %ebp
- 200:	c3                   	ret    
- 201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 208:	31 c0                	xor    %eax,%eax
-}
- 20a:	5d                   	pop    %ebp
- 20b:	c3                   	ret    
- 20c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000210 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 210:	f3 0f 1e fb          	endbr32 
- 214:	55                   	push   %ebp
- 215:	89 e5                	mov    %esp,%ebp
- 217:	57                   	push   %edi
- 218:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 219:	31 f6                	xor    %esi,%esi
-{
- 21b:	53                   	push   %ebx
- 21c:	89 f3                	mov    %esi,%ebx
- 21e:	83 ec 1c             	sub    $0x1c,%esp
- 221:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 224:	eb 33                	jmp    259 <gets+0x49>
- 226:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 22d:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 230:	83 ec 04             	sub    $0x4,%esp
- 233:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 236:	6a 01                	push   $0x1
- 238:	50                   	push   %eax
- 239:	6a 00                	push   $0x0
- 23b:	e8 2b 01 00 00       	call   36b <read>
-    if(cc < 1)
- 240:	83 c4 10             	add    $0x10,%esp
- 243:	85 c0                	test   %eax,%eax
- 245:	7e 1c                	jle    263 <gets+0x53>
-      break;
-    buf[i++] = c;
- 247:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 24b:	83 c7 01             	add    $0x1,%edi
- 24e:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 251:	3c 0a                	cmp    $0xa,%al
- 253:	74 23                	je     278 <gets+0x68>
- 255:	3c 0d                	cmp    $0xd,%al
- 257:	74 1f                	je     278 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 259:	83 c3 01             	add    $0x1,%ebx
- 25c:	89 fe                	mov    %edi,%esi
- 25e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 261:	7c cd                	jl     230 <gets+0x20>
- 263:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 265:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 268:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 26b:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 26e:	5b                   	pop    %ebx
- 26f:	5e                   	pop    %esi
- 270:	5f                   	pop    %edi
- 271:	5d                   	pop    %ebp
- 272:	c3                   	ret    
- 273:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 277:	90                   	nop
- 278:	8b 75 08             	mov    0x8(%ebp),%esi
- 27b:	8b 45 08             	mov    0x8(%ebp),%eax
- 27e:	01 de                	add    %ebx,%esi
- 280:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 282:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 285:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 288:	5b                   	pop    %ebx
- 289:	5e                   	pop    %esi
- 28a:	5f                   	pop    %edi
- 28b:	5d                   	pop    %ebp
- 28c:	c3                   	ret    
- 28d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000290 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 290:	f3 0f 1e fb          	endbr32 
- 294:	55                   	push   %ebp
- 295:	89 e5                	mov    %esp,%ebp
- 297:	56                   	push   %esi
- 298:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 299:	83 ec 08             	sub    $0x8,%esp
- 29c:	6a 00                	push   $0x0
- 29e:	ff 75 08             	pushl  0x8(%ebp)
- 2a1:	e8 ed 00 00 00       	call   393 <open>
-  if(fd < 0)
- 2a6:	83 c4 10             	add    $0x10,%esp
- 2a9:	85 c0                	test   %eax,%eax
- 2ab:	78 2b                	js     2d8 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 2ad:	83 ec 08             	sub    $0x8,%esp
- 2b0:	ff 75 0c             	pushl  0xc(%ebp)
- 2b3:	89 c3                	mov    %eax,%ebx
- 2b5:	50                   	push   %eax
- 2b6:	e8 f0 00 00 00       	call   3ab <fstat>
-  close(fd);
- 2bb:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 2be:	89 c6                	mov    %eax,%esi
-  close(fd);
- 2c0:	e8 b6 00 00 00       	call   37b <close>
-  return r;
- 2c5:	83 c4 10             	add    $0x10,%esp
-}
- 2c8:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 2cb:	89 f0                	mov    %esi,%eax
- 2cd:	5b                   	pop    %ebx
- 2ce:	5e                   	pop    %esi
- 2cf:	5d                   	pop    %ebp
- 2d0:	c3                   	ret    
- 2d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 2d8:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 2dd:	eb e9                	jmp    2c8 <stat+0x38>
- 2df:	90                   	nop
-
-000002e0 <atoi>:
-
-int
-atoi(const char *s)
-{
- 2e0:	f3 0f 1e fb          	endbr32 
- 2e4:	55                   	push   %ebp
- 2e5:	89 e5                	mov    %esp,%ebp
- 2e7:	53                   	push   %ebx
- 2e8:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 2eb:	0f be 02             	movsbl (%edx),%eax
- 2ee:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 2f1:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 2f4:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 2f9:	77 1a                	ja     315 <atoi+0x35>
- 2fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 2ff:	90                   	nop
-    n = n*10 + *s++ - '0';
- 300:	83 c2 01             	add    $0x1,%edx
- 303:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 306:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 30a:	0f be 02             	movsbl (%edx),%eax
- 30d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 310:	80 fb 09             	cmp    $0x9,%bl
- 313:	76 eb                	jbe    300 <atoi+0x20>
-  return n;
-}
- 315:	89 c8                	mov    %ecx,%eax
- 317:	5b                   	pop    %ebx
- 318:	5d                   	pop    %ebp
- 319:	c3                   	ret    
- 31a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000320 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 320:	f3 0f 1e fb          	endbr32 
- 324:	55                   	push   %ebp
- 325:	89 e5                	mov    %esp,%ebp
- 327:	57                   	push   %edi
- 328:	8b 45 10             	mov    0x10(%ebp),%eax
- 32b:	8b 55 08             	mov    0x8(%ebp),%edx
- 32e:	56                   	push   %esi
- 32f:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 332:	85 c0                	test   %eax,%eax
- 334:	7e 0f                	jle    345 <memmove+0x25>
- 336:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 338:	89 d7                	mov    %edx,%edi
- 33a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 340:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 341:	39 f8                	cmp    %edi,%eax
- 343:	75 fb                	jne    340 <memmove+0x20>
-  return vdst;
-}
- 345:	5e                   	pop    %esi
- 346:	89 d0                	mov    %edx,%eax
- 348:	5f                   	pop    %edi
- 349:	5d                   	pop    %ebp
- 34a:	c3                   	ret    
-
-0000034b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 34b:	b8 01 00 00 00       	mov    $0x1,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret    
-
-00000353 <exit>:
-SYSCALL(exit)
- 353:	b8 02 00 00 00       	mov    $0x2,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret    
-
-0000035b <wait>:
-SYSCALL(wait)
- 35b:	b8 03 00 00 00       	mov    $0x3,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret    
-
-00000363 <pipe>:
-SYSCALL(pipe)
- 363:	b8 04 00 00 00       	mov    $0x4,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret    
-
-0000036b <read>:
-SYSCALL(read)
- 36b:	b8 05 00 00 00       	mov    $0x5,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret    
-
-00000373 <write>:
-SYSCALL(write)
- 373:	b8 10 00 00 00       	mov    $0x10,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret    
-
-0000037b <close>:
-SYSCALL(close)
- 37b:	b8 15 00 00 00       	mov    $0x15,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret    
-
-00000383 <kill>:
-SYSCALL(kill)
- 383:	b8 06 00 00 00       	mov    $0x6,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret    
-
-0000038b <exec>:
-SYSCALL(exec)
- 38b:	b8 07 00 00 00       	mov    $0x7,%eax
- 390:	cd 40                	int    $0x40
- 392:	c3                   	ret    
-
-00000393 <open>:
-SYSCALL(open)
- 393:	b8 0f 00 00 00       	mov    $0xf,%eax
- 398:	cd 40                	int    $0x40
- 39a:	c3                   	ret    
-
-0000039b <mknod>:
-SYSCALL(mknod)
- 39b:	b8 11 00 00 00       	mov    $0x11,%eax
- 3a0:	cd 40                	int    $0x40
- 3a2:	c3                   	ret    
-
-000003a3 <unlink>:
-SYSCALL(unlink)
- 3a3:	b8 12 00 00 00       	mov    $0x12,%eax
- 3a8:	cd 40                	int    $0x40
- 3aa:	c3                   	ret    
-
-000003ab <fstat>:
-SYSCALL(fstat)
- 3ab:	b8 08 00 00 00       	mov    $0x8,%eax
- 3b0:	cd 40                	int    $0x40
- 3b2:	c3                   	ret    
-
-000003b3 <link>:
-SYSCALL(link)
- 3b3:	b8 13 00 00 00       	mov    $0x13,%eax
- 3b8:	cd 40                	int    $0x40
- 3ba:	c3                   	ret    
-
-000003bb <mkdir>:
-SYSCALL(mkdir)
- 3bb:	b8 14 00 00 00       	mov    $0x14,%eax
- 3c0:	cd 40                	int    $0x40
- 3c2:	c3                   	ret    
-
-000003c3 <chdir>:
-SYSCALL(chdir)
- 3c3:	b8 09 00 00 00       	mov    $0x9,%eax
- 3c8:	cd 40                	int    $0x40
- 3ca:	c3                   	ret    
-
-000003cb <dup>:
-SYSCALL(dup)
- 3cb:	b8 0a 00 00 00       	mov    $0xa,%eax
- 3d0:	cd 40                	int    $0x40
- 3d2:	c3                   	ret    
-
-000003d3 <getpid>:
-SYSCALL(getpid)
- 3d3:	b8 0b 00 00 00       	mov    $0xb,%eax
- 3d8:	cd 40                	int    $0x40
- 3da:	c3                   	ret    
-
-000003db <sbrk>:
-SYSCALL(sbrk)
- 3db:	b8 0c 00 00 00       	mov    $0xc,%eax
- 3e0:	cd 40                	int    $0x40
- 3e2:	c3                   	ret    
-
-000003e3 <sleep>:
-SYSCALL(sleep)
- 3e3:	b8 0d 00 00 00       	mov    $0xd,%eax
- 3e8:	cd 40                	int    $0x40
- 3ea:	c3                   	ret    
-
-000003eb <uptime>:
-SYSCALL(uptime)
- 3eb:	b8 0e 00 00 00       	mov    $0xe,%eax
- 3f0:	cd 40                	int    $0x40
- 3f2:	c3                   	ret    
-
-000003f3 <draw>:
-SYSCALL(draw)
- 3f3:	b8 16 00 00 00       	mov    $0x16,%eax
- 3f8:	cd 40                	int    $0x40
- 3fa:	c3                   	ret    
-
-000003fb <thread_create>:
-SYSCALL(thread_create)
- 3fb:	b8 18 00 00 00       	mov    $0x18,%eax
- 400:	cd 40                	int    $0x40
- 402:	c3                   	ret    
-
-00000403 <thread_join>:
-SYSCALL(thread_join)
- 403:	b8 19 00 00 00       	mov    $0x19,%eax
- 408:	cd 40                	int    $0x40
- 40a:	c3                   	ret    
-
-0000040b <thread_exit>:
-SYSCALL(thread_exit)
- 40b:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 410:	cd 40                	int    $0x40
- 412:	c3                   	ret    
- 413:	66 90                	xchg   %ax,%ax
- 415:	66 90                	xchg   %ax,%ax
- 417:	66 90                	xchg   %ax,%ax
- 419:	66 90                	xchg   %ax,%ax
- 41b:	66 90                	xchg   %ax,%ax
- 41d:	66 90                	xchg   %ax,%ax
- 41f:	90                   	nop
-
-00000420 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 420:	55                   	push   %ebp
- 421:	89 e5                	mov    %esp,%ebp
- 423:	57                   	push   %edi
- 424:	56                   	push   %esi
- 425:	53                   	push   %ebx
- 426:	83 ec 3c             	sub    $0x3c,%esp
- 429:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 42c:	89 d1                	mov    %edx,%ecx
-{
- 42e:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 431:	85 d2                	test   %edx,%edx
- 433:	0f 89 7f 00 00 00    	jns    4b8 <printint+0x98>
- 439:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 43d:	74 79                	je     4b8 <printint+0x98>
-    neg = 1;
- 43f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 446:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 448:	31 db                	xor    %ebx,%ebx
- 44a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 44d:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 450:	89 c8                	mov    %ecx,%eax
- 452:	31 d2                	xor    %edx,%edx
- 454:	89 cf                	mov    %ecx,%edi
- 456:	f7 75 c4             	divl   -0x3c(%ebp)
- 459:	0f b6 92 90 08 00 00 	movzbl 0x890(%edx),%edx
- 460:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 463:	89 d8                	mov    %ebx,%eax
- 465:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 468:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 46b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 46e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 471:	76 dd                	jbe    450 <printint+0x30>
-  if(neg)
- 473:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 476:	85 c9                	test   %ecx,%ecx
- 478:	74 0c                	je     486 <printint+0x66>
-    buf[i++] = '-';
- 47a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 47f:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 481:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 486:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 489:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 48d:	eb 07                	jmp    496 <printint+0x76>
- 48f:	90                   	nop
- 490:	0f b6 13             	movzbl (%ebx),%edx
- 493:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 496:	83 ec 04             	sub    $0x4,%esp
- 499:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 49c:	6a 01                	push   $0x1
- 49e:	56                   	push   %esi
- 49f:	57                   	push   %edi
- 4a0:	e8 ce fe ff ff       	call   373 <write>
-  while(--i >= 0)
- 4a5:	83 c4 10             	add    $0x10,%esp
- 4a8:	39 de                	cmp    %ebx,%esi
- 4aa:	75 e4                	jne    490 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 4ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4af:	5b                   	pop    %ebx
- 4b0:	5e                   	pop    %esi
- 4b1:	5f                   	pop    %edi
- 4b2:	5d                   	pop    %ebp
- 4b3:	c3                   	ret    
- 4b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 4b8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 4bf:	eb 87                	jmp    448 <printint+0x28>
- 4c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4cf:	90                   	nop
-
-000004d0 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 4d0:	f3 0f 1e fb          	endbr32 
- 4d4:	55                   	push   %ebp
- 4d5:	89 e5                	mov    %esp,%ebp
- 4d7:	57                   	push   %edi
- 4d8:	56                   	push   %esi
- 4d9:	53                   	push   %ebx
- 4da:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 4dd:	8b 75 0c             	mov    0xc(%ebp),%esi
- 4e0:	0f b6 1e             	movzbl (%esi),%ebx
- 4e3:	84 db                	test   %bl,%bl
- 4e5:	0f 84 b4 00 00 00    	je     59f <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 4eb:	8d 45 10             	lea    0x10(%ebp),%eax
- 4ee:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 4f1:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 4f4:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 4f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 4f9:	eb 33                	jmp    52e <printf+0x5e>
- 4fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 4ff:	90                   	nop
- 500:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 503:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 508:	83 f8 25             	cmp    $0x25,%eax
- 50b:	74 17                	je     524 <printf+0x54>
-  write(fd, &c, 1);
- 50d:	83 ec 04             	sub    $0x4,%esp
- 510:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 513:	6a 01                	push   $0x1
- 515:	57                   	push   %edi
- 516:	ff 75 08             	pushl  0x8(%ebp)
- 519:	e8 55 fe ff ff       	call   373 <write>
- 51e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 521:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 524:	0f b6 1e             	movzbl (%esi),%ebx
- 527:	83 c6 01             	add    $0x1,%esi
- 52a:	84 db                	test   %bl,%bl
- 52c:	74 71                	je     59f <printf+0xcf>
-    c = fmt[i] & 0xff;
- 52e:	0f be cb             	movsbl %bl,%ecx
- 531:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 534:	85 d2                	test   %edx,%edx
- 536:	74 c8                	je     500 <printf+0x30>
-      }
-    } else if(state == '%'){
- 538:	83 fa 25             	cmp    $0x25,%edx
- 53b:	75 e7                	jne    524 <printf+0x54>
-      if(c == 'd'){
- 53d:	83 f8 64             	cmp    $0x64,%eax
- 540:	0f 84 9a 00 00 00    	je     5e0 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 546:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 54c:	83 f9 70             	cmp    $0x70,%ecx
- 54f:	74 5f                	je     5b0 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 551:	83 f8 73             	cmp    $0x73,%eax
- 554:	0f 84 d6 00 00 00    	je     630 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 55a:	83 f8 63             	cmp    $0x63,%eax
- 55d:	0f 84 8d 00 00 00    	je     5f0 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 563:	83 f8 25             	cmp    $0x25,%eax
- 566:	0f 84 b4 00 00 00    	je     620 <printf+0x150>
-  write(fd, &c, 1);
- 56c:	83 ec 04             	sub    $0x4,%esp
- 56f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 573:	6a 01                	push   $0x1
- 575:	57                   	push   %edi
- 576:	ff 75 08             	pushl  0x8(%ebp)
- 579:	e8 f5 fd ff ff       	call   373 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 57e:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 581:	83 c4 0c             	add    $0xc,%esp
- 584:	6a 01                	push   $0x1
- 586:	83 c6 01             	add    $0x1,%esi
- 589:	57                   	push   %edi
- 58a:	ff 75 08             	pushl  0x8(%ebp)
- 58d:	e8 e1 fd ff ff       	call   373 <write>
-  for(i = 0; fmt[i]; i++){
- 592:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 596:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 599:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 59b:	84 db                	test   %bl,%bl
- 59d:	75 8f                	jne    52e <printf+0x5e>
-    }
-  }
-}
- 59f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 5a2:	5b                   	pop    %ebx
- 5a3:	5e                   	pop    %esi
- 5a4:	5f                   	pop    %edi
- 5a5:	5d                   	pop    %ebp
- 5a6:	c3                   	ret    
- 5a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5ae:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 5b0:	83 ec 0c             	sub    $0xc,%esp
- 5b3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5b8:	6a 00                	push   $0x0
- 5ba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 5bd:	8b 45 08             	mov    0x8(%ebp),%eax
- 5c0:	8b 13                	mov    (%ebx),%edx
- 5c2:	e8 59 fe ff ff       	call   420 <printint>
-        ap++;
- 5c7:	89 d8                	mov    %ebx,%eax
- 5c9:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 5cc:	31 d2                	xor    %edx,%edx
-        ap++;
- 5ce:	83 c0 04             	add    $0x4,%eax
- 5d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 5d4:	e9 4b ff ff ff       	jmp    524 <printf+0x54>
- 5d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 5e0:	83 ec 0c             	sub    $0xc,%esp
- 5e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 5e8:	6a 01                	push   $0x1
- 5ea:	eb ce                	jmp    5ba <printf+0xea>
- 5ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 5f0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 5f3:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 5f6:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 5f8:	6a 01                	push   $0x1
-        ap++;
- 5fa:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 5fd:	57                   	push   %edi
- 5fe:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 601:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 604:	e8 6a fd ff ff       	call   373 <write>
-        ap++;
- 609:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 60c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 60f:	31 d2                	xor    %edx,%edx
- 611:	e9 0e ff ff ff       	jmp    524 <printf+0x54>
- 616:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 61d:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 620:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 623:	83 ec 04             	sub    $0x4,%esp
- 626:	e9 59 ff ff ff       	jmp    584 <printf+0xb4>
- 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 62f:	90                   	nop
-        s = (char*)*ap;
- 630:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 633:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 635:	83 c0 04             	add    $0x4,%eax
- 638:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 63b:	85 db                	test   %ebx,%ebx
- 63d:	74 17                	je     656 <printf+0x186>
-        while(*s != 0){
- 63f:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 642:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 644:	84 c0                	test   %al,%al
- 646:	0f 84 d8 fe ff ff    	je     524 <printf+0x54>
- 64c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 64f:	89 de                	mov    %ebx,%esi
- 651:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 654:	eb 1a                	jmp    670 <printf+0x1a0>
-          s = "(null)";
- 656:	bb 88 08 00 00       	mov    $0x888,%ebx
-        while(*s != 0){
- 65b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 65e:	b8 28 00 00 00       	mov    $0x28,%eax
- 663:	89 de                	mov    %ebx,%esi
- 665:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 668:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 66f:	90                   	nop
-  write(fd, &c, 1);
- 670:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 673:	83 c6 01             	add    $0x1,%esi
- 676:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 679:	6a 01                	push   $0x1
- 67b:	57                   	push   %edi
- 67c:	53                   	push   %ebx
- 67d:	e8 f1 fc ff ff       	call   373 <write>
-        while(*s != 0){
- 682:	0f b6 06             	movzbl (%esi),%eax
- 685:	83 c4 10             	add    $0x10,%esp
- 688:	84 c0                	test   %al,%al
- 68a:	75 e4                	jne    670 <printf+0x1a0>
- 68c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 68f:	31 d2                	xor    %edx,%edx
- 691:	e9 8e fe ff ff       	jmp    524 <printf+0x54>
- 696:	66 90                	xchg   %ax,%ax
- 698:	66 90                	xchg   %ax,%ax
- 69a:	66 90                	xchg   %ax,%ax
- 69c:	66 90                	xchg   %ax,%ax
- 69e:	66 90                	xchg   %ax,%ax
-
-000006a0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 6a0:	f3 0f 1e fb          	endbr32 
- 6a4:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6a5:	a1 44 0b 00 00       	mov    0xb44,%eax
-{
- 6aa:	89 e5                	mov    %esp,%ebp
- 6ac:	57                   	push   %edi
- 6ad:	56                   	push   %esi
- 6ae:	53                   	push   %ebx
- 6af:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6b2:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 6b4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6b7:	39 c8                	cmp    %ecx,%eax
- 6b9:	73 15                	jae    6d0 <free+0x30>
- 6bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6bf:	90                   	nop
- 6c0:	39 d1                	cmp    %edx,%ecx
- 6c2:	72 14                	jb     6d8 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6c4:	39 d0                	cmp    %edx,%eax
- 6c6:	73 10                	jae    6d8 <free+0x38>
-{
- 6c8:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6ca:	8b 10                	mov    (%eax),%edx
- 6cc:	39 c8                	cmp    %ecx,%eax
- 6ce:	72 f0                	jb     6c0 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6d0:	39 d0                	cmp    %edx,%eax
- 6d2:	72 f4                	jb     6c8 <free+0x28>
- 6d4:	39 d1                	cmp    %edx,%ecx
- 6d6:	73 f0                	jae    6c8 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 6d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6de:	39 fa                	cmp    %edi,%edx
- 6e0:	74 1e                	je     700 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 6e2:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 6e5:	8b 50 04             	mov    0x4(%eax),%edx
- 6e8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6eb:	39 f1                	cmp    %esi,%ecx
- 6ed:	74 28                	je     717 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 6ef:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 6f1:	5b                   	pop    %ebx
-  freep = p;
- 6f2:	a3 44 0b 00 00       	mov    %eax,0xb44
-}
- 6f7:	5e                   	pop    %esi
- 6f8:	5f                   	pop    %edi
- 6f9:	5d                   	pop    %ebp
- 6fa:	c3                   	ret    
- 6fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6ff:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 700:	03 72 04             	add    0x4(%edx),%esi
- 703:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 706:	8b 10                	mov    (%eax),%edx
- 708:	8b 12                	mov    (%edx),%edx
- 70a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 70d:	8b 50 04             	mov    0x4(%eax),%edx
- 710:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 713:	39 f1                	cmp    %esi,%ecx
- 715:	75 d8                	jne    6ef <free+0x4f>
-    p->s.size += bp->s.size;
- 717:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 71a:	a3 44 0b 00 00       	mov    %eax,0xb44
-    p->s.size += bp->s.size;
- 71f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 722:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 725:	89 10                	mov    %edx,(%eax)
-}
- 727:	5b                   	pop    %ebx
- 728:	5e                   	pop    %esi
- 729:	5f                   	pop    %edi
- 72a:	5d                   	pop    %ebp
- 72b:	c3                   	ret    
- 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000730 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 730:	f3 0f 1e fb          	endbr32 
- 734:	55                   	push   %ebp
- 735:	89 e5                	mov    %esp,%ebp
- 737:	57                   	push   %edi
- 738:	56                   	push   %esi
- 739:	53                   	push   %ebx
- 73a:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 73d:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 740:	8b 3d 44 0b 00 00    	mov    0xb44,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 746:	8d 70 07             	lea    0x7(%eax),%esi
- 749:	c1 ee 03             	shr    $0x3,%esi
- 74c:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 74f:	85 ff                	test   %edi,%edi
- 751:	0f 84 a9 00 00 00    	je     800 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 757:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 759:	8b 48 04             	mov    0x4(%eax),%ecx
- 75c:	39 f1                	cmp    %esi,%ecx
- 75e:	73 6d                	jae    7cd <malloc+0x9d>
- 760:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 766:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 76b:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 76e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 775:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 778:	eb 17                	jmp    791 <malloc+0x61>
- 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 780:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 782:	8b 4a 04             	mov    0x4(%edx),%ecx
- 785:	39 f1                	cmp    %esi,%ecx
- 787:	73 4f                	jae    7d8 <malloc+0xa8>
- 789:	8b 3d 44 0b 00 00    	mov    0xb44,%edi
- 78f:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 791:	39 c7                	cmp    %eax,%edi
- 793:	75 eb                	jne    780 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 795:	83 ec 0c             	sub    $0xc,%esp
- 798:	ff 75 e4             	pushl  -0x1c(%ebp)
- 79b:	e8 3b fc ff ff       	call   3db <sbrk>
-  if(p == (char*)-1)
- 7a0:	83 c4 10             	add    $0x10,%esp
- 7a3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 7a6:	74 1b                	je     7c3 <malloc+0x93>
-  hp->s.size = nu;
- 7a8:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 7ab:	83 ec 0c             	sub    $0xc,%esp
- 7ae:	83 c0 08             	add    $0x8,%eax
- 7b1:	50                   	push   %eax
- 7b2:	e8 e9 fe ff ff       	call   6a0 <free>
-  return freep;
- 7b7:	a1 44 0b 00 00       	mov    0xb44,%eax
-      if((p = morecore(nunits)) == 0)
- 7bc:	83 c4 10             	add    $0x10,%esp
- 7bf:	85 c0                	test   %eax,%eax
- 7c1:	75 bd                	jne    780 <malloc+0x50>
-        return 0;
-  }
-}
- 7c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 7c6:	31 c0                	xor    %eax,%eax
-}
- 7c8:	5b                   	pop    %ebx
- 7c9:	5e                   	pop    %esi
- 7ca:	5f                   	pop    %edi
- 7cb:	5d                   	pop    %ebp
- 7cc:	c3                   	ret    
-    if(p->s.size >= nunits){
- 7cd:	89 c2                	mov    %eax,%edx
- 7cf:	89 f8                	mov    %edi,%eax
- 7d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- 7d8:	39 ce                	cmp    %ecx,%esi
- 7da:	74 54                	je     830 <malloc+0x100>
-        p->s.size -= nunits;
- 7dc:	29 f1                	sub    %esi,%ecx
- 7de:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- 7e1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- 7e4:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- 7e7:	a3 44 0b 00 00       	mov    %eax,0xb44
-}
- 7ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 7ef:	8d 42 08             	lea    0x8(%edx),%eax
-}
- 7f2:	5b                   	pop    %ebx
- 7f3:	5e                   	pop    %esi
- 7f4:	5f                   	pop    %edi
- 7f5:	5d                   	pop    %ebp
- 7f6:	c3                   	ret    
- 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7fe:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- 800:	c7 05 44 0b 00 00 48 	movl   $0xb48,0xb44
- 807:	0b 00 00 
-    base.s.size = 0;
- 80a:	bf 48 0b 00 00       	mov    $0xb48,%edi
-    base.s.ptr = freep = prevp = &base;
- 80f:	c7 05 48 0b 00 00 48 	movl   $0xb48,0xb48
- 816:	0b 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 819:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- 81b:	c7 05 4c 0b 00 00 00 	movl   $0x0,0xb4c
- 822:	00 00 00 
-    if(p->s.size >= nunits){
- 825:	e9 36 ff ff ff       	jmp    760 <malloc+0x30>
- 82a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- 830:	8b 0a                	mov    (%edx),%ecx
- 832:	89 08                	mov    %ecx,(%eax)
- 834:	eb b1                	jmp    7e7 <malloc+0xb7>
diff -ruN xv6-public/init.c xv6-public-mynew/init.c
--- xv6-public/init.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/init.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,37 +0,0 @@
-// init: The initial user-level program
-
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-#include "fcntl.h"
-
-char *argv[] = { "sh", 0 };
-
-int
-main(void)
-{
-  int pid, wpid;
-
-  if(open("console", O_RDWR) < 0){
-    mknod("console", 1, 1);
-    open("console", O_RDWR);
-  }
-  dup(0);  // stdout
-  dup(0);  // stderr
-
-  for(;;){
-    printf(1, "init: starting sh\n");
-    pid = fork();
-    if(pid < 0){
-      printf(1, "init: fork failed\n");
-      exit();
-    }
-    if(pid == 0){
-      exec("sh", argv);
-      printf(1, "init: exec sh failed\n");
-      exit();
-    }
-    while((wpid=wait()) >= 0 && wpid != pid)
-      printf(1, "zombie!\n");
-  }
-}
Binary files xv6-public/initcode and xv6-public-mynew/initcode differ
diff -ruN xv6-public/initcode.asm xv6-public-mynew/initcode.asm
--- xv6-public/initcode.asm	2022-09-05 09:51:09.106999249 +0530
+++ xv6-public-mynew/initcode.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,43 +0,0 @@
-
-initcode.o:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <start>:
-
-
-# exec(init, argv)
-.globl start
-start:
-  pushl $argv
-   0:	68 24 00 00 00       	push   $0x24
-  pushl $init
-   5:	68 1c 00 00 00       	push   $0x1c
-  pushl $0  // where caller pc would be
-   a:	6a 00                	push   $0x0
-  movl $SYS_exec, %eax
-   c:	b8 07 00 00 00       	mov    $0x7,%eax
-  int $T_SYSCALL
-  11:	cd 40                	int    $0x40
-
-00000013 <exit>:
-
-# for(;;) exit();
-exit:
-  movl $SYS_exit, %eax
-  13:	b8 02 00 00 00       	mov    $0x2,%eax
-  int $T_SYSCALL
-  18:	cd 40                	int    $0x40
-  jmp exit
-  1a:	eb f7                	jmp    13 <exit>
-
-0000001c <init>:
-  1c:	2f                   	das    
-  1d:	69 6e 69 74 00 00 90 	imul   $0x90000074,0x69(%esi),%ebp
-
-00000024 <argv>:
-  24:	1c 00                	sbb    $0x0,%al
-  26:	00 00                	add    %al,(%eax)
-  28:	00 00                	add    %al,(%eax)
-	...
diff -ruN xv6-public/initcode.d xv6-public-mynew/initcode.d
--- xv6-public/initcode.d	2022-09-05 09:51:09.090999249 +0530
+++ xv6-public-mynew/initcode.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-initcode.o: initcode.S syscall.h traps.h
Binary files xv6-public/initcode.o and xv6-public-mynew/initcode.o differ
Binary files xv6-public/initcode.out and xv6-public-mynew/initcode.out differ
diff -ruN xv6-public/initcode.S xv6-public-mynew/initcode.S
--- xv6-public/initcode.S	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/initcode.S	1970-01-01 05:30:00.000000000 +0530
@@ -1,32 +0,0 @@
-# Initial process execs /init.
-# This code runs in user space.
-
-#include "syscall.h"
-#include "traps.h"
-
-
-# exec(init, argv)
-.globl start
-start:
-  pushl $argv
-  pushl $init
-  pushl $0  // where caller pc would be
-  movl $SYS_exec, %eax
-  int $T_SYSCALL
-
-# for(;;) exit();
-exit:
-  movl $SYS_exit, %eax
-  int $T_SYSCALL
-  jmp exit
-
-# char init[] = "/init\0";
-init:
-  .string "/init\0"
-
-# char *argv[] = { init, 0 };
-.p2align 2
-argv:
-  .long init
-  .long 0
-
diff -ruN xv6-public/init.d xv6-public-mynew/init.d
--- xv6-public/init.d	2022-09-05 09:51:05.230999137 +0530
+++ xv6-public-mynew/init.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h fcntl.h
Binary files xv6-public/init.o and xv6-public-mynew/init.o differ
diff -ruN xv6-public/init.sym xv6-public-mynew/init.sym
--- xv6-public/init.sym	2022-09-05 09:51:05.258999138 +0530
+++ xv6-public-mynew/init.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,63 +0,0 @@
-00000000 .text
-00000838 .rodata
-000008a4 .eh_frame
-00000b3c .data
-00000b44 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 init.c
-00000000 ulib.c
-00000000 printf.c
-00000420 printint
-00000890 digits.1097
-00000000 umalloc.c
-00000b44 freep
-00000b48 base
-000000f0 strcpy
-000004d0 printf
-0000040b thread_exit
-00000b3c argv
-00000320 memmove
-0000039b mknod
-00000210 gets
-000003d3 getpid
-00000730 malloc
-000003e3 sleep
-00000363 pipe
-00000373 write
-000003ab fstat
-00000383 kill
-000003c3 chdir
-0000038b exec
-0000035b wait
-0000036b read
-000003a3 unlink
-0000034b fork
-000003db sbrk
-000003eb uptime
-00000b44 __bss_start
-000001b0 memset
-00000000 main
-00000120 strcmp
-000003cb dup
-00000290 stat
-00000b44 _edata
-00000b50 _end
-000003b3 link
-00000353 exit
-000002e0 atoi
-000003f3 draw
-00000170 strlen
-00000393 open
-000001d0 strchr
-000003fb thread_create
-000003bb mkdir
-0000037b close
-00000403 thread_join
-000006a0 free
diff -ruN xv6-public/ioapic.c xv6-public-mynew/ioapic.c
--- xv6-public/ioapic.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/ioapic.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,75 +0,0 @@
-// The I/O APIC manages hardware interrupts for an SMP system.
-// http://www.intel.com/design/chipsets/datashts/29056601.pdf
-// See also picirq.c.
-
-#include "types.h"
-#include "defs.h"
-#include "traps.h"
-
-#define IOAPIC  0xFEC00000   // Default physical address of IO APIC
-
-#define REG_ID     0x00  // Register index: ID
-#define REG_VER    0x01  // Register index: version
-#define REG_TABLE  0x10  // Redirection table base
-
-// The redirection table starts at REG_TABLE and uses
-// two registers to configure each interrupt.
-// The first (low) register in a pair contains configuration bits.
-// The second (high) register contains a bitmask telling which
-// CPUs can serve that interrupt.
-#define INT_DISABLED   0x00010000  // Interrupt disabled
-#define INT_LEVEL      0x00008000  // Level-triggered (vs edge-)
-#define INT_ACTIVELOW  0x00002000  // Active low (vs high)
-#define INT_LOGICAL    0x00000800  // Destination is CPU id (vs APIC ID)
-
-volatile struct ioapic *ioapic;
-
-// IO APIC MMIO structure: write reg, then read or write data.
-struct ioapic {
-  uint reg;
-  uint pad[3];
-  uint data;
-};
-
-static uint
-ioapicread(int reg)
-{
-  ioapic->reg = reg;
-  return ioapic->data;
-}
-
-static void
-ioapicwrite(int reg, uint data)
-{
-  ioapic->reg = reg;
-  ioapic->data = data;
-}
-
-void
-ioapicinit(void)
-{
-  int i, id, maxintr;
-
-  ioapic = (volatile struct ioapic*)IOAPIC;
-  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
-  id = ioapicread(REG_ID) >> 24;
-  if(id != ioapicid)
-    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
-
-  // Mark all interrupts edge-triggered, active high, disabled,
-  // and not routed to any CPUs.
-  for(i = 0; i <= maxintr; i++){
-    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
-    ioapicwrite(REG_TABLE+2*i+1, 0);
-  }
-}
-
-void
-ioapicenable(int irq, int cpunum)
-{
-  // Mark interrupt edge-triggered, active high,
-  // enabled, and routed to the given cpunum,
-  // which happens to be that cpu's APIC ID.
-  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
-  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
-}
diff -ruN xv6-public/ioapic.d xv6-public-mynew/ioapic.d
--- xv6-public/ioapic.d	2022-09-05 09:51:07.518999203 +0530
+++ xv6-public-mynew/ioapic.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-ioapic.o: ioapic.c /usr/include/stdc-predef.h types.h defs.h traps.h
Binary files xv6-public/ioapic.o and xv6-public-mynew/ioapic.o differ
diff -ruN xv6-public/kalloc.c xv6-public-mynew/kalloc.c
--- xv6-public/kalloc.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/kalloc.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,96 +0,0 @@
-// Physical memory allocator, intended to allocate
-// memory for user processes, kernel stacks, page table pages,
-// and pipe buffers. Allocates 4096-byte pages.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "spinlock.h"
-
-void freerange(void *vstart, void *vend);
-extern char end[]; // first address after kernel loaded from ELF file
-                   // defined by the kernel linker script in kernel.ld
-
-struct run {
-  struct run *next;
-};
-
-struct {
-  struct spinlock lock;
-  int use_lock;
-  struct run *freelist;
-} kmem;
-
-// Initialization happens in two phases.
-// 1. main() calls kinit1() while still using entrypgdir to place just
-// the pages mapped by entrypgdir on free list.
-// 2. main() calls kinit2() with the rest of the physical pages
-// after installing a full page table that maps them on all cores.
-void
-kinit1(void *vstart, void *vend)
-{
-  initlock(&kmem.lock, "kmem");
-  kmem.use_lock = 0;
-  freerange(vstart, vend);
-}
-
-void
-kinit2(void *vstart, void *vend)
-{
-  freerange(vstart, vend);
-  kmem.use_lock = 1;
-}
-
-void
-freerange(void *vstart, void *vend)
-{
-  char *p;
-  p = (char*)PGROUNDUP((uint)vstart);
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-    kfree(p);
-}
-//PAGEBREAK: 21
-// Free the page of physical memory pointed at by v,
-// which normally should have been returned by a
-// call to kalloc().  (The exception is when
-// initializing the allocator; see kinit above.)
-void
-kfree(char *v)
-{
-  struct run *r;
-
-  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
-    panic("kfree");
-
-  // Fill with junk to catch dangling refs.
-  memset(v, 1, PGSIZE);
-
-  if(kmem.use_lock)
-    acquire(&kmem.lock);
-  r = (struct run*)v;
-  r->next = kmem.freelist;
-  kmem.freelist = r;
-  if(kmem.use_lock)
-    release(&kmem.lock);
-}
-
-// Allocate one 4096-byte page of physical memory.
-// Returns a pointer that the kernel can use.
-// Returns 0 if the memory cannot be allocated.
-char*
-kalloc(void)
-{
-  struct run *r;
-
-  if(kmem.use_lock)
-    acquire(&kmem.lock);
-  r = kmem.freelist;
-  if(r)
-    kmem.freelist = r->next;
-  if(kmem.use_lock)
-    release(&kmem.lock);
-  return (char*)r;
-}
-
diff -ruN xv6-public/kalloc.d xv6-public-mynew/kalloc.d
--- xv6-public/kalloc.d	2022-09-05 09:51:07.574999205 +0530
+++ xv6-public-mynew/kalloc.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-kalloc.o: kalloc.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h spinlock.h
Binary files xv6-public/kalloc.o and xv6-public-mynew/kalloc.o differ
diff -ruN xv6-public/kbd.c xv6-public-mynew/kbd.c
--- xv6-public/kbd.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/kbd.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,50 +0,0 @@
-#include "types.h"
-#include "x86.h"
-#include "defs.h"
-#include "kbd.h"
-
-int
-kbdgetc(void)
-{
-  static uint shift;
-  static uchar *charcode[4] = {
-    normalmap, shiftmap, ctlmap, ctlmap
-  };
-  uint st, data, c;
-
-  st = inb(KBSTATP);
-  if((st & KBS_DIB) == 0)
-    return -1;
-  data = inb(KBDATAP);
-
-  if(data == 0xE0){
-    shift |= E0ESC;
-    return 0;
-  } else if(data & 0x80){
-    // Key released
-    data = (shift & E0ESC ? data : data & 0x7F);
-    shift &= ~(shiftcode[data] | E0ESC);
-    return 0;
-  } else if(shift & E0ESC){
-    // Last character was an E0 escape; or with 0x80
-    data |= 0x80;
-    shift &= ~E0ESC;
-  }
-
-  shift |= shiftcode[data];
-  shift ^= togglecode[data];
-  c = charcode[shift & (CTL | SHIFT)][data];
-  if(shift & CAPSLOCK){
-    if('a' <= c && c <= 'z')
-      c += 'A' - 'a';
-    else if('A' <= c && c <= 'Z')
-      c += 'a' - 'A';
-  }
-  return c;
-}
-
-void
-kbdintr(void)
-{
-  consoleintr(kbdgetc);
-}
diff -ruN xv6-public/kbd.d xv6-public-mynew/kbd.d
--- xv6-public/kbd.d	2022-09-05 09:51:07.622999206 +0530
+++ xv6-public-mynew/kbd.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-kbd.o: kbd.c /usr/include/stdc-predef.h types.h x86.h defs.h kbd.h
diff -ruN xv6-public/kbd.h xv6-public-mynew/kbd.h
--- xv6-public/kbd.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/kbd.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,112 +0,0 @@
-// PC keyboard interface constants
-
-#define KBSTATP         0x64    // kbd controller status port(I)
-#define KBS_DIB         0x01    // kbd data in buffer
-#define KBDATAP         0x60    // kbd data port(I)
-
-#define NO              0
-
-#define SHIFT           (1<<0)
-#define CTL             (1<<1)
-#define ALT             (1<<2)
-
-#define CAPSLOCK        (1<<3)
-#define NUMLOCK         (1<<4)
-#define SCROLLLOCK      (1<<5)
-
-#define E0ESC           (1<<6)
-
-// Special keycodes
-#define KEY_HOME        0xE0
-#define KEY_END         0xE1
-#define KEY_UP          0xE2
-#define KEY_DN          0xE3
-#define KEY_LF          0xE4
-#define KEY_RT          0xE5
-#define KEY_PGUP        0xE6
-#define KEY_PGDN        0xE7
-#define KEY_INS         0xE8
-#define KEY_DEL         0xE9
-
-// C('A') == Control-A
-#define C(x) (x - '@')
-
-static uchar shiftcode[256] =
-{
-  [0x1D] CTL,
-  [0x2A] SHIFT,
-  [0x36] SHIFT,
-  [0x38] ALT,
-  [0x9D] CTL,
-  [0xB8] ALT
-};
-
-static uchar togglecode[256] =
-{
-  [0x3A] CAPSLOCK,
-  [0x45] NUMLOCK,
-  [0x46] SCROLLLOCK
-};
-
-static uchar normalmap[256] =
-{
-  NO,   0x1B, '1',  '2',  '3',  '4',  '5',  '6',  // 0x00
-  '7',  '8',  '9',  '0',  '-',  '=',  '\b', '\t',
-  'q',  'w',  'e',  'r',  't',  'y',  'u',  'i',  // 0x10
-  'o',  'p',  '[',  ']',  '\n', NO,   'a',  's',
-  'd',  'f',  'g',  'h',  'j',  'k',  'l',  ';',  // 0x20
-  '\'', '`',  NO,   '\\', 'z',  'x',  'c',  'v',
-  'b',  'n',  'm',  ',',  '.',  '/',  NO,   '*',  // 0x30
-  NO,   ' ',  NO,   NO,   NO,   NO,   NO,   NO,
-  NO,   NO,   NO,   NO,   NO,   NO,   NO,   '7',  // 0x40
-  '8',  '9',  '-',  '4',  '5',  '6',  '+',  '1',
-  '2',  '3',  '0',  '.',  NO,   NO,   NO,   NO,   // 0x50
-  [0x9C] '\n',      // KP_Enter
-  [0xB5] '/',       // KP_Div
-  [0xC8] KEY_UP,    [0xD0] KEY_DN,
-  [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
-  [0xCB] KEY_LF,    [0xCD] KEY_RT,
-  [0x97] KEY_HOME,  [0xCF] KEY_END,
-  [0xD2] KEY_INS,   [0xD3] KEY_DEL
-};
-
-static uchar shiftmap[256] =
-{
-  NO,   033,  '!',  '@',  '#',  '$',  '%',  '^',  // 0x00
-  '&',  '*',  '(',  ')',  '_',  '+',  '\b', '\t',
-  'Q',  'W',  'E',  'R',  'T',  'Y',  'U',  'I',  // 0x10
-  'O',  'P',  '{',  '}',  '\n', NO,   'A',  'S',
-  'D',  'F',  'G',  'H',  'J',  'K',  'L',  ':',  // 0x20
-  '"',  '~',  NO,   '|',  'Z',  'X',  'C',  'V',
-  'B',  'N',  'M',  '<',  '>',  '?',  NO,   '*',  // 0x30
-  NO,   ' ',  NO,   NO,   NO,   NO,   NO,   NO,
-  NO,   NO,   NO,   NO,   NO,   NO,   NO,   '7',  // 0x40
-  '8',  '9',  '-',  '4',  '5',  '6',  '+',  '1',
-  '2',  '3',  '0',  '.',  NO,   NO,   NO,   NO,   // 0x50
-  [0x9C] '\n',      // KP_Enter
-  [0xB5] '/',       // KP_Div
-  [0xC8] KEY_UP,    [0xD0] KEY_DN,
-  [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
-  [0xCB] KEY_LF,    [0xCD] KEY_RT,
-  [0x97] KEY_HOME,  [0xCF] KEY_END,
-  [0xD2] KEY_INS,   [0xD3] KEY_DEL
-};
-
-static uchar ctlmap[256] =
-{
-  NO,      NO,      NO,      NO,      NO,      NO,      NO,      NO,
-  NO,      NO,      NO,      NO,      NO,      NO,      NO,      NO,
-  C('Q'),  C('W'),  C('E'),  C('R'),  C('T'),  C('Y'),  C('U'),  C('I'),
-  C('O'),  C('P'),  NO,      NO,      '\r',    NO,      C('A'),  C('S'),
-  C('D'),  C('F'),  C('G'),  C('H'),  C('J'),  C('K'),  C('L'),  NO,
-  NO,      NO,      NO,      C('\\'), C('Z'),  C('X'),  C('C'),  C('V'),
-  C('B'),  C('N'),  C('M'),  NO,      NO,      C('/'),  NO,      NO,
-  [0x9C] '\r',      // KP_Enter
-  [0xB5] C('/'),    // KP_Div
-  [0xC8] KEY_UP,    [0xD0] KEY_DN,
-  [0xC9] KEY_PGUP,  [0xD1] KEY_PGDN,
-  [0xCB] KEY_LF,    [0xCD] KEY_RT,
-  [0x97] KEY_HOME,  [0xCF] KEY_END,
-  [0xD2] KEY_INS,   [0xD3] KEY_DEL
-};
-
Binary files xv6-public/kbd.o and xv6-public-mynew/kbd.o differ
Binary files xv6-public/kernel and xv6-public-mynew/kernel differ
diff -ruN xv6-public/kernel.asm xv6-public-mynew/kernel.asm
--- xv6-public/kernel.asm	2022-09-05 14:45:51.179290096 +0530
+++ xv6-public-mynew/kernel.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,16161 +0,0 @@
-
-kernel:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-80100000 <multiboot_header>:
-80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
-80100006:	00 00                	add    %al,(%eax)
-80100008:	fe 4f 52             	decb   0x52(%edi)
-8010000b:	e4                   	.byte 0xe4
-
-8010000c <entry>:
-
-# Entering xv6 on boot processor, with paging off.
-.globl entry
-entry:
-  # Turn on page size extension for 4Mbyte pages
-  movl    %cr4, %eax
-8010000c:	0f 20 e0             	mov    %cr4,%eax
-  orl     $(CR4_PSE), %eax
-8010000f:	83 c8 10             	or     $0x10,%eax
-  movl    %eax, %cr4
-80100012:	0f 22 e0             	mov    %eax,%cr4
-  # Set page directory
-  movl    $(V2P_WO(entrypgdir)), %eax
-80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
-  movl    %eax, %cr3
-8010001a:	0f 22 d8             	mov    %eax,%cr3
-  # Turn on paging.
-  movl    %cr0, %eax
-8010001d:	0f 20 c0             	mov    %cr0,%eax
-  orl     $(CR0_PG|CR0_WP), %eax
-80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
-  movl    %eax, %cr0
-80100025:	0f 22 c0             	mov    %eax,%cr0
-
-  # Set up the stack pointer.
-  movl $(stack + KSTACKSIZE), %esp
-80100028:	bc c0 b5 10 80       	mov    $0x8010b5c0,%esp
-
-  # Jump to main(), and switch to executing at
-  # high addresses. The indirect call is needed because
-  # the assembler produces a PC-relative instruction
-  # for a direct jump.
-  mov $main, %eax
-8010002d:	b8 40 30 10 80       	mov    $0x80103040,%eax
-  jmp *%eax
-80100032:	ff e0                	jmp    *%eax
-80100034:	66 90                	xchg   %ax,%ax
-80100036:	66 90                	xchg   %ax,%ax
-80100038:	66 90                	xchg   %ax,%ax
-8010003a:	66 90                	xchg   %ax,%ax
-8010003c:	66 90                	xchg   %ax,%ax
-8010003e:	66 90                	xchg   %ax,%ax
-
-80100040 <binit>:
-  struct buf head;
-} bcache;
-
-void
-binit(void)
-{
-80100040:	f3 0f 1e fb          	endbr32 
-80100044:	55                   	push   %ebp
-80100045:	89 e5                	mov    %esp,%ebp
-80100047:	53                   	push   %ebx
-
-//PAGEBREAK!
-  // Create linked list of buffers
-  bcache.head.prev = &bcache.head;
-  bcache.head.next = &bcache.head;
-  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-80100048:	bb f4 b5 10 80       	mov    $0x8010b5f4,%ebx
-{
-8010004d:	83 ec 0c             	sub    $0xc,%esp
-  initlock(&bcache.lock, "bcache");
-80100050:	68 40 75 10 80       	push   $0x80107540
-80100055:	68 c0 b5 10 80       	push   $0x8010b5c0
-8010005a:	e8 e1 46 00 00       	call   80104740 <initlock>
-  bcache.head.next = &bcache.head;
-8010005f:	83 c4 10             	add    $0x10,%esp
-80100062:	b8 bc fc 10 80       	mov    $0x8010fcbc,%eax
-  bcache.head.prev = &bcache.head;
-80100067:	c7 05 0c fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd0c
-8010006e:	fc 10 80 
-  bcache.head.next = &bcache.head;
-80100071:	c7 05 10 fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd10
-80100078:	fc 10 80 
-  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-8010007b:	eb 05                	jmp    80100082 <binit+0x42>
-8010007d:	8d 76 00             	lea    0x0(%esi),%esi
-80100080:	89 d3                	mov    %edx,%ebx
-    b->next = bcache.head.next;
-80100082:	89 43 54             	mov    %eax,0x54(%ebx)
-    b->prev = &bcache.head;
-    initsleeplock(&b->lock, "buffer");
-80100085:	83 ec 08             	sub    $0x8,%esp
-80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
-    b->prev = &bcache.head;
-8010008b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
-    initsleeplock(&b->lock, "buffer");
-80100092:	68 47 75 10 80       	push   $0x80107547
-80100097:	50                   	push   %eax
-80100098:	e8 63 45 00 00       	call   80104600 <initsleeplock>
-    bcache.head.next->prev = b;
-8010009d:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
-  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-801000a2:	8d 93 5c 02 00 00    	lea    0x25c(%ebx),%edx
-801000a8:	83 c4 10             	add    $0x10,%esp
-    bcache.head.next->prev = b;
-801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
-    bcache.head.next = b;
-801000ae:	89 d8                	mov    %ebx,%eax
-801000b0:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
-  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-801000b6:	81 fb 60 fa 10 80    	cmp    $0x8010fa60,%ebx
-801000bc:	75 c2                	jne    80100080 <binit+0x40>
-  }
-}
-801000be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801000c1:	c9                   	leave  
-801000c2:	c3                   	ret    
-801000c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801000ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801000d0 <bread>:
-}
-
-// Return a locked buf with the contents of the indicated block.
-struct buf*
-bread(uint dev, uint blockno)
-{
-801000d0:	f3 0f 1e fb          	endbr32 
-801000d4:	55                   	push   %ebp
-801000d5:	89 e5                	mov    %esp,%ebp
-801000d7:	57                   	push   %edi
-801000d8:	56                   	push   %esi
-801000d9:	53                   	push   %ebx
-801000da:	83 ec 18             	sub    $0x18,%esp
-801000dd:	8b 7d 08             	mov    0x8(%ebp),%edi
-801000e0:	8b 75 0c             	mov    0xc(%ebp),%esi
-  acquire(&bcache.lock);
-801000e3:	68 c0 b5 10 80       	push   $0x8010b5c0
-801000e8:	e8 d3 47 00 00       	call   801048c0 <acquire>
-  for(b = bcache.head.next; b != &bcache.head; b = b->next){
-801000ed:	8b 1d 10 fd 10 80    	mov    0x8010fd10,%ebx
-801000f3:	83 c4 10             	add    $0x10,%esp
-801000f6:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
-801000fc:	75 0d                	jne    8010010b <bread+0x3b>
-801000fe:	eb 20                	jmp    80100120 <bread+0x50>
-80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
-80100103:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
-80100109:	74 15                	je     80100120 <bread+0x50>
-    if(b->dev == dev && b->blockno == blockno){
-8010010b:	3b 7b 04             	cmp    0x4(%ebx),%edi
-8010010e:	75 f0                	jne    80100100 <bread+0x30>
-80100110:	3b 73 08             	cmp    0x8(%ebx),%esi
-80100113:	75 eb                	jne    80100100 <bread+0x30>
-      b->refcnt++;
-80100115:	83 43 4c 01          	addl   $0x1,0x4c(%ebx)
-      release(&bcache.lock);
-80100119:	eb 3f                	jmp    8010015a <bread+0x8a>
-8010011b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010011f:	90                   	nop
-  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-80100120:	8b 1d 0c fd 10 80    	mov    0x8010fd0c,%ebx
-80100126:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
-8010012c:	75 0d                	jne    8010013b <bread+0x6b>
-8010012e:	eb 70                	jmp    801001a0 <bread+0xd0>
-80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
-80100133:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
-80100139:	74 65                	je     801001a0 <bread+0xd0>
-    if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
-8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
-8010013e:	85 c0                	test   %eax,%eax
-80100140:	75 ee                	jne    80100130 <bread+0x60>
-80100142:	f6 03 04             	testb  $0x4,(%ebx)
-80100145:	75 e9                	jne    80100130 <bread+0x60>
-      b->dev = dev;
-80100147:	89 7b 04             	mov    %edi,0x4(%ebx)
-      b->blockno = blockno;
-8010014a:	89 73 08             	mov    %esi,0x8(%ebx)
-      b->flags = 0;
-8010014d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-      b->refcnt = 1;
-80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
-      release(&bcache.lock);
-8010015a:	83 ec 0c             	sub    $0xc,%esp
-8010015d:	68 c0 b5 10 80       	push   $0x8010b5c0
-80100162:	e8 19 48 00 00       	call   80104980 <release>
-      acquiresleep(&b->lock);
-80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
-8010016a:	89 04 24             	mov    %eax,(%esp)
-8010016d:	e8 ce 44 00 00       	call   80104640 <acquiresleep>
-      return b;
-80100172:	83 c4 10             	add    $0x10,%esp
-  struct buf *b;
-
-  b = bget(dev, blockno);
-  if((b->flags & B_VALID) == 0) {
-80100175:	f6 03 02             	testb  $0x2,(%ebx)
-80100178:	74 0e                	je     80100188 <bread+0xb8>
-    iderw(b);
-  }
-  return b;
-}
-8010017a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010017d:	89 d8                	mov    %ebx,%eax
-8010017f:	5b                   	pop    %ebx
-80100180:	5e                   	pop    %esi
-80100181:	5f                   	pop    %edi
-80100182:	5d                   	pop    %ebp
-80100183:	c3                   	ret    
-80100184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    iderw(b);
-80100188:	83 ec 0c             	sub    $0xc,%esp
-8010018b:	53                   	push   %ebx
-8010018c:	e8 ef 20 00 00       	call   80102280 <iderw>
-80100191:	83 c4 10             	add    $0x10,%esp
-}
-80100194:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100197:	89 d8                	mov    %ebx,%eax
-80100199:	5b                   	pop    %ebx
-8010019a:	5e                   	pop    %esi
-8010019b:	5f                   	pop    %edi
-8010019c:	5d                   	pop    %ebp
-8010019d:	c3                   	ret    
-8010019e:	66 90                	xchg   %ax,%ax
-  panic("bget: no buffers");
-801001a0:	83 ec 0c             	sub    $0xc,%esp
-801001a3:	68 4e 75 10 80       	push   $0x8010754e
-801001a8:	e8 e3 01 00 00       	call   80100390 <panic>
-801001ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-801001b0 <bwrite>:
-
-// Write b's contents to disk.  Must be locked.
-void
-bwrite(struct buf *b)
-{
-801001b0:	f3 0f 1e fb          	endbr32 
-801001b4:	55                   	push   %ebp
-801001b5:	89 e5                	mov    %esp,%ebp
-801001b7:	53                   	push   %ebx
-801001b8:	83 ec 10             	sub    $0x10,%esp
-801001bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(!holdingsleep(&b->lock))
-801001be:	8d 43 0c             	lea    0xc(%ebx),%eax
-801001c1:	50                   	push   %eax
-801001c2:	e8 19 45 00 00       	call   801046e0 <holdingsleep>
-801001c7:	83 c4 10             	add    $0x10,%esp
-801001ca:	85 c0                	test   %eax,%eax
-801001cc:	74 0f                	je     801001dd <bwrite+0x2d>
-    panic("bwrite");
-  b->flags |= B_DIRTY;
-801001ce:	83 0b 04             	orl    $0x4,(%ebx)
-  iderw(b);
-801001d1:	89 5d 08             	mov    %ebx,0x8(%ebp)
-}
-801001d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801001d7:	c9                   	leave  
-  iderw(b);
-801001d8:	e9 a3 20 00 00       	jmp    80102280 <iderw>
-    panic("bwrite");
-801001dd:	83 ec 0c             	sub    $0xc,%esp
-801001e0:	68 5f 75 10 80       	push   $0x8010755f
-801001e5:	e8 a6 01 00 00       	call   80100390 <panic>
-801001ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801001f0 <brelse>:
-
-// Release a locked buffer.
-// Move to the head of the MRU list.
-void
-brelse(struct buf *b)
-{
-801001f0:	f3 0f 1e fb          	endbr32 
-801001f4:	55                   	push   %ebp
-801001f5:	89 e5                	mov    %esp,%ebp
-801001f7:	56                   	push   %esi
-801001f8:	53                   	push   %ebx
-801001f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(!holdingsleep(&b->lock))
-801001fc:	8d 73 0c             	lea    0xc(%ebx),%esi
-801001ff:	83 ec 0c             	sub    $0xc,%esp
-80100202:	56                   	push   %esi
-80100203:	e8 d8 44 00 00       	call   801046e0 <holdingsleep>
-80100208:	83 c4 10             	add    $0x10,%esp
-8010020b:	85 c0                	test   %eax,%eax
-8010020d:	74 66                	je     80100275 <brelse+0x85>
-    panic("brelse");
-
-  releasesleep(&b->lock);
-8010020f:	83 ec 0c             	sub    $0xc,%esp
-80100212:	56                   	push   %esi
-80100213:	e8 88 44 00 00       	call   801046a0 <releasesleep>
-
-  acquire(&bcache.lock);
-80100218:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
-8010021f:	e8 9c 46 00 00       	call   801048c0 <acquire>
-  b->refcnt--;
-80100224:	8b 43 4c             	mov    0x4c(%ebx),%eax
-  if (b->refcnt == 0) {
-80100227:	83 c4 10             	add    $0x10,%esp
-  b->refcnt--;
-8010022a:	83 e8 01             	sub    $0x1,%eax
-8010022d:	89 43 4c             	mov    %eax,0x4c(%ebx)
-  if (b->refcnt == 0) {
-80100230:	85 c0                	test   %eax,%eax
-80100232:	75 2f                	jne    80100263 <brelse+0x73>
-    // no one is waiting for it.
-    b->next->prev = b->prev;
-80100234:	8b 43 54             	mov    0x54(%ebx),%eax
-80100237:	8b 53 50             	mov    0x50(%ebx),%edx
-8010023a:	89 50 50             	mov    %edx,0x50(%eax)
-    b->prev->next = b->next;
-8010023d:	8b 43 50             	mov    0x50(%ebx),%eax
-80100240:	8b 53 54             	mov    0x54(%ebx),%edx
-80100243:	89 50 54             	mov    %edx,0x54(%eax)
-    b->next = bcache.head.next;
-80100246:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
-    b->prev = &bcache.head;
-8010024b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
-    b->next = bcache.head.next;
-80100252:	89 43 54             	mov    %eax,0x54(%ebx)
-    bcache.head.next->prev = b;
-80100255:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
-8010025a:	89 58 50             	mov    %ebx,0x50(%eax)
-    bcache.head.next = b;
-8010025d:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
-  }
-  
-  release(&bcache.lock);
-80100263:	c7 45 08 c0 b5 10 80 	movl   $0x8010b5c0,0x8(%ebp)
-}
-8010026a:	8d 65 f8             	lea    -0x8(%ebp),%esp
-8010026d:	5b                   	pop    %ebx
-8010026e:	5e                   	pop    %esi
-8010026f:	5d                   	pop    %ebp
-  release(&bcache.lock);
-80100270:	e9 0b 47 00 00       	jmp    80104980 <release>
-    panic("brelse");
-80100275:	83 ec 0c             	sub    $0xc,%esp
-80100278:	68 66 75 10 80       	push   $0x80107566
-8010027d:	e8 0e 01 00 00       	call   80100390 <panic>
-80100282:	66 90                	xchg   %ax,%ax
-80100284:	66 90                	xchg   %ax,%ax
-80100286:	66 90                	xchg   %ax,%ax
-80100288:	66 90                	xchg   %ax,%ax
-8010028a:	66 90                	xchg   %ax,%ax
-8010028c:	66 90                	xchg   %ax,%ax
-8010028e:	66 90                	xchg   %ax,%ax
-
-80100290 <consoleread>:
-  }
-}
-
-int
-consoleread(struct inode *ip, char *dst, int n)
-{
-80100290:	f3 0f 1e fb          	endbr32 
-80100294:	55                   	push   %ebp
-80100295:	89 e5                	mov    %esp,%ebp
-80100297:	57                   	push   %edi
-80100298:	56                   	push   %esi
-80100299:	53                   	push   %ebx
-8010029a:	83 ec 18             	sub    $0x18,%esp
-  uint target;
-  int c;
-
-  iunlock(ip);
-8010029d:	ff 75 08             	pushl  0x8(%ebp)
-{
-801002a0:	8b 5d 10             	mov    0x10(%ebp),%ebx
-  target = n;
-801002a3:	89 de                	mov    %ebx,%esi
-  iunlock(ip);
-801002a5:	e8 96 15 00 00       	call   80101840 <iunlock>
-  acquire(&cons.lock);
-801002aa:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-801002b1:	e8 0a 46 00 00       	call   801048c0 <acquire>
-        // caller gets a 0-byte result.
-        input.r--;
-      }
-      break;
-    }
-    *dst++ = c;
-801002b6:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  while(n > 0){
-801002b9:	83 c4 10             	add    $0x10,%esp
-    *dst++ = c;
-801002bc:	01 df                	add    %ebx,%edi
-  while(n > 0){
-801002be:	85 db                	test   %ebx,%ebx
-801002c0:	0f 8e 97 00 00 00    	jle    8010035d <consoleread+0xcd>
-    while(input.r == input.w){
-801002c6:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
-801002cb:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
-801002d1:	74 27                	je     801002fa <consoleread+0x6a>
-801002d3:	eb 5b                	jmp    80100330 <consoleread+0xa0>
-801002d5:	8d 76 00             	lea    0x0(%esi),%esi
-      sleep(&input.r, &cons.lock);
-801002d8:	83 ec 08             	sub    $0x8,%esp
-801002db:	68 20 a5 10 80       	push   $0x8010a520
-801002e0:	68 a0 ff 10 80       	push   $0x8010ffa0
-801002e5:	e8 36 3c 00 00       	call   80103f20 <sleep>
-    while(input.r == input.w){
-801002ea:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
-801002ef:	83 c4 10             	add    $0x10,%esp
-801002f2:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
-801002f8:	75 36                	jne    80100330 <consoleread+0xa0>
-      if(myproc()->killed){
-801002fa:	e8 61 36 00 00       	call   80103960 <myproc>
-801002ff:	8b 48 24             	mov    0x24(%eax),%ecx
-80100302:	85 c9                	test   %ecx,%ecx
-80100304:	74 d2                	je     801002d8 <consoleread+0x48>
-        release(&cons.lock);
-80100306:	83 ec 0c             	sub    $0xc,%esp
-80100309:	68 20 a5 10 80       	push   $0x8010a520
-8010030e:	e8 6d 46 00 00       	call   80104980 <release>
-        ilock(ip);
-80100313:	5a                   	pop    %edx
-80100314:	ff 75 08             	pushl  0x8(%ebp)
-80100317:	e8 44 14 00 00       	call   80101760 <ilock>
-        return -1;
-8010031c:	83 c4 10             	add    $0x10,%esp
-  }
-  release(&cons.lock);
-  ilock(ip);
-
-  return target - n;
-}
-8010031f:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return -1;
-80100322:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80100327:	5b                   	pop    %ebx
-80100328:	5e                   	pop    %esi
-80100329:	5f                   	pop    %edi
-8010032a:	5d                   	pop    %ebp
-8010032b:	c3                   	ret    
-8010032c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    c = input.buf[input.r++ % INPUT_BUF];
-80100330:	8d 50 01             	lea    0x1(%eax),%edx
-80100333:	89 15 a0 ff 10 80    	mov    %edx,0x8010ffa0
-80100339:	89 c2                	mov    %eax,%edx
-8010033b:	83 e2 7f             	and    $0x7f,%edx
-8010033e:	0f be 8a 20 ff 10 80 	movsbl -0x7fef00e0(%edx),%ecx
-    if(c == C('D')){  // EOF
-80100345:	80 f9 04             	cmp    $0x4,%cl
-80100348:	74 38                	je     80100382 <consoleread+0xf2>
-    *dst++ = c;
-8010034a:	89 d8                	mov    %ebx,%eax
-    --n;
-8010034c:	83 eb 01             	sub    $0x1,%ebx
-    *dst++ = c;
-8010034f:	f7 d8                	neg    %eax
-80100351:	88 0c 07             	mov    %cl,(%edi,%eax,1)
-    if(c == '\n')
-80100354:	83 f9 0a             	cmp    $0xa,%ecx
-80100357:	0f 85 61 ff ff ff    	jne    801002be <consoleread+0x2e>
-  release(&cons.lock);
-8010035d:	83 ec 0c             	sub    $0xc,%esp
-80100360:	68 20 a5 10 80       	push   $0x8010a520
-80100365:	e8 16 46 00 00       	call   80104980 <release>
-  ilock(ip);
-8010036a:	58                   	pop    %eax
-8010036b:	ff 75 08             	pushl  0x8(%ebp)
-8010036e:	e8 ed 13 00 00       	call   80101760 <ilock>
-  return target - n;
-80100373:	89 f0                	mov    %esi,%eax
-80100375:	83 c4 10             	add    $0x10,%esp
-}
-80100378:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return target - n;
-8010037b:	29 d8                	sub    %ebx,%eax
-}
-8010037d:	5b                   	pop    %ebx
-8010037e:	5e                   	pop    %esi
-8010037f:	5f                   	pop    %edi
-80100380:	5d                   	pop    %ebp
-80100381:	c3                   	ret    
-      if(n < target){
-80100382:	39 f3                	cmp    %esi,%ebx
-80100384:	73 d7                	jae    8010035d <consoleread+0xcd>
-        input.r--;
-80100386:	a3 a0 ff 10 80       	mov    %eax,0x8010ffa0
-8010038b:	eb d0                	jmp    8010035d <consoleread+0xcd>
-8010038d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80100390 <panic>:
-{
-80100390:	f3 0f 1e fb          	endbr32 
-80100394:	55                   	push   %ebp
-80100395:	89 e5                	mov    %esp,%ebp
-80100397:	56                   	push   %esi
-80100398:	53                   	push   %ebx
-80100399:	83 ec 30             	sub    $0x30,%esp
-}
-
-static inline void
-cli(void)
-{
-  asm volatile("cli");
-8010039c:	fa                   	cli    
-  cons.locking = 0;
-8010039d:	c7 05 54 a5 10 80 00 	movl   $0x0,0x8010a554
-801003a4:	00 00 00 
-  getcallerpcs(&s, pcs);
-801003a7:	8d 5d d0             	lea    -0x30(%ebp),%ebx
-801003aa:	8d 75 f8             	lea    -0x8(%ebp),%esi
-  cprintf("lapicid %d: panic: ", lapicid());
-801003ad:	e8 ee 24 00 00       	call   801028a0 <lapicid>
-801003b2:	83 ec 08             	sub    $0x8,%esp
-801003b5:	50                   	push   %eax
-801003b6:	68 6d 75 10 80       	push   $0x8010756d
-801003bb:	e8 f0 02 00 00       	call   801006b0 <cprintf>
-  cprintf(s);
-801003c0:	58                   	pop    %eax
-801003c1:	ff 75 08             	pushl  0x8(%ebp)
-801003c4:	e8 e7 02 00 00       	call   801006b0 <cprintf>
-  cprintf("\n");
-801003c9:	c7 04 24 4b 7f 10 80 	movl   $0x80107f4b,(%esp)
-801003d0:	e8 db 02 00 00       	call   801006b0 <cprintf>
-  getcallerpcs(&s, pcs);
-801003d5:	8d 45 08             	lea    0x8(%ebp),%eax
-801003d8:	5a                   	pop    %edx
-801003d9:	59                   	pop    %ecx
-801003da:	53                   	push   %ebx
-801003db:	50                   	push   %eax
-801003dc:	e8 7f 43 00 00       	call   80104760 <getcallerpcs>
-  for(i=0; i<10; i++)
-801003e1:	83 c4 10             	add    $0x10,%esp
-    cprintf(" %p", pcs[i]);
-801003e4:	83 ec 08             	sub    $0x8,%esp
-801003e7:	ff 33                	pushl  (%ebx)
-801003e9:	83 c3 04             	add    $0x4,%ebx
-801003ec:	68 81 75 10 80       	push   $0x80107581
-801003f1:	e8 ba 02 00 00       	call   801006b0 <cprintf>
-  for(i=0; i<10; i++)
-801003f6:	83 c4 10             	add    $0x10,%esp
-801003f9:	39 f3                	cmp    %esi,%ebx
-801003fb:	75 e7                	jne    801003e4 <panic+0x54>
-  panicked = 1; // freeze other CPU
-801003fd:	c7 05 58 a5 10 80 01 	movl   $0x1,0x8010a558
-80100404:	00 00 00 
-  for(;;)
-80100407:	eb fe                	jmp    80100407 <panic+0x77>
-80100409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80100410 <consputc.part.0>:
-consputc(int c)
-80100410:	55                   	push   %ebp
-80100411:	89 e5                	mov    %esp,%ebp
-80100413:	57                   	push   %edi
-80100414:	56                   	push   %esi
-80100415:	53                   	push   %ebx
-80100416:	89 c3                	mov    %eax,%ebx
-80100418:	83 ec 1c             	sub    $0x1c,%esp
-  if(c == BACKSPACE){
-8010041b:	3d 00 01 00 00       	cmp    $0x100,%eax
-80100420:	0f 84 ea 00 00 00    	je     80100510 <consputc.part.0+0x100>
-    uartputc(c);
-80100426:	83 ec 0c             	sub    $0xc,%esp
-80100429:	50                   	push   %eax
-8010042a:	e8 01 5d 00 00       	call   80106130 <uartputc>
-8010042f:	83 c4 10             	add    $0x10,%esp
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80100432:	bf d4 03 00 00       	mov    $0x3d4,%edi
-80100437:	b8 0e 00 00 00       	mov    $0xe,%eax
-8010043c:	89 fa                	mov    %edi,%edx
-8010043e:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010043f:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
-80100444:	89 ca                	mov    %ecx,%edx
-80100446:	ec                   	in     (%dx),%al
-  pos = inb(CRTPORT+1) << 8;
-80100447:	0f b6 c0             	movzbl %al,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010044a:	89 fa                	mov    %edi,%edx
-8010044c:	c1 e0 08             	shl    $0x8,%eax
-8010044f:	89 c6                	mov    %eax,%esi
-80100451:	b8 0f 00 00 00       	mov    $0xf,%eax
-80100456:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80100457:	89 ca                	mov    %ecx,%edx
-80100459:	ec                   	in     (%dx),%al
-  pos |= inb(CRTPORT+1);
-8010045a:	0f b6 c0             	movzbl %al,%eax
-8010045d:	09 f0                	or     %esi,%eax
-  if(c == '\n')
-8010045f:	83 fb 0a             	cmp    $0xa,%ebx
-80100462:	0f 84 90 00 00 00    	je     801004f8 <consputc.part.0+0xe8>
-  else if(c == BACKSPACE){
-80100468:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
-8010046e:	74 70                	je     801004e0 <consputc.part.0+0xd0>
-    crt[pos++] = (c&0xff) | 0x0700;  // black on white
-80100470:	0f b6 db             	movzbl %bl,%ebx
-80100473:	8d 70 01             	lea    0x1(%eax),%esi
-80100476:	80 cf 07             	or     $0x7,%bh
-80100479:	66 89 9c 00 00 80 0b 	mov    %bx,-0x7ff48000(%eax,%eax,1)
-80100480:	80 
-  if(pos < 0 || pos > 25*80)
-80100481:	81 fe d0 07 00 00    	cmp    $0x7d0,%esi
-80100487:	0f 8f f9 00 00 00    	jg     80100586 <consputc.part.0+0x176>
-  if((pos/80) >= 24){  // Scroll up.
-8010048d:	81 fe 7f 07 00 00    	cmp    $0x77f,%esi
-80100493:	0f 8f a7 00 00 00    	jg     80100540 <consputc.part.0+0x130>
-80100499:	89 f0                	mov    %esi,%eax
-8010049b:	8d b4 36 00 80 0b 80 	lea    -0x7ff48000(%esi,%esi,1),%esi
-801004a2:	88 45 e7             	mov    %al,-0x19(%ebp)
-801004a5:	0f b6 fc             	movzbl %ah,%edi
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801004a8:	bb d4 03 00 00       	mov    $0x3d4,%ebx
-801004ad:	b8 0e 00 00 00       	mov    $0xe,%eax
-801004b2:	89 da                	mov    %ebx,%edx
-801004b4:	ee                   	out    %al,(%dx)
-801004b5:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
-801004ba:	89 f8                	mov    %edi,%eax
-801004bc:	89 ca                	mov    %ecx,%edx
-801004be:	ee                   	out    %al,(%dx)
-801004bf:	b8 0f 00 00 00       	mov    $0xf,%eax
-801004c4:	89 da                	mov    %ebx,%edx
-801004c6:	ee                   	out    %al,(%dx)
-801004c7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
-801004cb:	89 ca                	mov    %ecx,%edx
-801004cd:	ee                   	out    %al,(%dx)
-  crt[pos] = ' ' | 0x0700;
-801004ce:	b8 20 07 00 00       	mov    $0x720,%eax
-801004d3:	66 89 06             	mov    %ax,(%esi)
-}
-801004d6:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801004d9:	5b                   	pop    %ebx
-801004da:	5e                   	pop    %esi
-801004db:	5f                   	pop    %edi
-801004dc:	5d                   	pop    %ebp
-801004dd:	c3                   	ret    
-801004de:	66 90                	xchg   %ax,%ax
-    if(pos > 0) --pos;
-801004e0:	8d 70 ff             	lea    -0x1(%eax),%esi
-801004e3:	85 c0                	test   %eax,%eax
-801004e5:	75 9a                	jne    80100481 <consputc.part.0+0x71>
-801004e7:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
-801004eb:	be 00 80 0b 80       	mov    $0x800b8000,%esi
-801004f0:	31 ff                	xor    %edi,%edi
-801004f2:	eb b4                	jmp    801004a8 <consputc.part.0+0x98>
-801004f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    pos += 80 - pos%80;
-801004f8:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
-801004fd:	f7 e2                	mul    %edx
-801004ff:	c1 ea 06             	shr    $0x6,%edx
-80100502:	8d 04 92             	lea    (%edx,%edx,4),%eax
-80100505:	c1 e0 04             	shl    $0x4,%eax
-80100508:	8d 70 50             	lea    0x50(%eax),%esi
-8010050b:	e9 71 ff ff ff       	jmp    80100481 <consputc.part.0+0x71>
-    uartputc('\b'); uartputc(' '); uartputc('\b');
-80100510:	83 ec 0c             	sub    $0xc,%esp
-80100513:	6a 08                	push   $0x8
-80100515:	e8 16 5c 00 00       	call   80106130 <uartputc>
-8010051a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80100521:	e8 0a 5c 00 00       	call   80106130 <uartputc>
-80100526:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-8010052d:	e8 fe 5b 00 00       	call   80106130 <uartputc>
-80100532:	83 c4 10             	add    $0x10,%esp
-80100535:	e9 f8 fe ff ff       	jmp    80100432 <consputc.part.0+0x22>
-8010053a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    memmove(crt, crt+80, sizeof(crt[0])*23*80);
-80100540:	83 ec 04             	sub    $0x4,%esp
-    pos -= 80;
-80100543:	8d 5e b0             	lea    -0x50(%esi),%ebx
-    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
-80100546:	8d b4 36 60 7f 0b 80 	lea    -0x7ff480a0(%esi,%esi,1),%esi
-8010054d:	bf 07 00 00 00       	mov    $0x7,%edi
-    memmove(crt, crt+80, sizeof(crt[0])*23*80);
-80100552:	68 60 0e 00 00       	push   $0xe60
-80100557:	68 a0 80 0b 80       	push   $0x800b80a0
-8010055c:	68 00 80 0b 80       	push   $0x800b8000
-80100561:	e8 0a 45 00 00       	call   80104a70 <memmove>
-    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
-80100566:	b8 80 07 00 00       	mov    $0x780,%eax
-8010056b:	83 c4 0c             	add    $0xc,%esp
-8010056e:	29 d8                	sub    %ebx,%eax
-80100570:	01 c0                	add    %eax,%eax
-80100572:	50                   	push   %eax
-80100573:	6a 00                	push   $0x0
-80100575:	56                   	push   %esi
-80100576:	e8 55 44 00 00       	call   801049d0 <memset>
-8010057b:	88 5d e7             	mov    %bl,-0x19(%ebp)
-8010057e:	83 c4 10             	add    $0x10,%esp
-80100581:	e9 22 ff ff ff       	jmp    801004a8 <consputc.part.0+0x98>
-    panic("pos under/overflow");
-80100586:	83 ec 0c             	sub    $0xc,%esp
-80100589:	68 85 75 10 80       	push   $0x80107585
-8010058e:	e8 fd fd ff ff       	call   80100390 <panic>
-80100593:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010059a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801005a0 <printint>:
-{
-801005a0:	55                   	push   %ebp
-801005a1:	89 e5                	mov    %esp,%ebp
-801005a3:	57                   	push   %edi
-801005a4:	56                   	push   %esi
-801005a5:	53                   	push   %ebx
-801005a6:	83 ec 2c             	sub    $0x2c,%esp
-801005a9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-  if(sign && (sign = xx < 0))
-801005ac:	85 c9                	test   %ecx,%ecx
-801005ae:	74 04                	je     801005b4 <printint+0x14>
-801005b0:	85 c0                	test   %eax,%eax
-801005b2:	78 6d                	js     80100621 <printint+0x81>
-    x = xx;
-801005b4:	89 c1                	mov    %eax,%ecx
-801005b6:	31 f6                	xor    %esi,%esi
-  i = 0;
-801005b8:	89 75 cc             	mov    %esi,-0x34(%ebp)
-801005bb:	31 db                	xor    %ebx,%ebx
-801005bd:	8d 7d d7             	lea    -0x29(%ebp),%edi
-    buf[i++] = digits[x % base];
-801005c0:	89 c8                	mov    %ecx,%eax
-801005c2:	31 d2                	xor    %edx,%edx
-801005c4:	89 ce                	mov    %ecx,%esi
-801005c6:	f7 75 d4             	divl   -0x2c(%ebp)
-801005c9:	0f b6 92 b0 75 10 80 	movzbl -0x7fef8a50(%edx),%edx
-801005d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
-801005d3:	89 d8                	mov    %ebx,%eax
-801005d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
-801005d8:	8b 4d d0             	mov    -0x30(%ebp),%ecx
-801005db:	89 75 d0             	mov    %esi,-0x30(%ebp)
-    buf[i++] = digits[x % base];
-801005de:	88 14 1f             	mov    %dl,(%edi,%ebx,1)
-  }while((x /= base) != 0);
-801005e1:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-801005e4:	39 75 d0             	cmp    %esi,-0x30(%ebp)
-801005e7:	73 d7                	jae    801005c0 <printint+0x20>
-801005e9:	8b 75 cc             	mov    -0x34(%ebp),%esi
-  if(sign)
-801005ec:	85 f6                	test   %esi,%esi
-801005ee:	74 0c                	je     801005fc <printint+0x5c>
-    buf[i++] = '-';
-801005f0:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
-801005f5:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
-801005f7:	ba 2d 00 00 00       	mov    $0x2d,%edx
-  while(--i >= 0)
-801005fc:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
-80100600:	0f be c2             	movsbl %dl,%eax
-  if(panicked){
-80100603:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
-80100609:	85 d2                	test   %edx,%edx
-8010060b:	74 03                	je     80100610 <printint+0x70>
-  asm volatile("cli");
-8010060d:	fa                   	cli    
-    for(;;)
-8010060e:	eb fe                	jmp    8010060e <printint+0x6e>
-80100610:	e8 fb fd ff ff       	call   80100410 <consputc.part.0>
-  while(--i >= 0)
-80100615:	39 fb                	cmp    %edi,%ebx
-80100617:	74 10                	je     80100629 <printint+0x89>
-80100619:	0f be 03             	movsbl (%ebx),%eax
-8010061c:	83 eb 01             	sub    $0x1,%ebx
-8010061f:	eb e2                	jmp    80100603 <printint+0x63>
-    x = -xx;
-80100621:	f7 d8                	neg    %eax
-80100623:	89 ce                	mov    %ecx,%esi
-80100625:	89 c1                	mov    %eax,%ecx
-80100627:	eb 8f                	jmp    801005b8 <printint+0x18>
-}
-80100629:	83 c4 2c             	add    $0x2c,%esp
-8010062c:	5b                   	pop    %ebx
-8010062d:	5e                   	pop    %esi
-8010062e:	5f                   	pop    %edi
-8010062f:	5d                   	pop    %ebp
-80100630:	c3                   	ret    
-80100631:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100638:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010063f:	90                   	nop
-
-80100640 <consolewrite>:
-
-int
-consolewrite(struct inode *ip, char *buf, int n)
-{
-80100640:	f3 0f 1e fb          	endbr32 
-80100644:	55                   	push   %ebp
-80100645:	89 e5                	mov    %esp,%ebp
-80100647:	57                   	push   %edi
-80100648:	56                   	push   %esi
-80100649:	53                   	push   %ebx
-8010064a:	83 ec 18             	sub    $0x18,%esp
-  int i;
-
-  iunlock(ip);
-8010064d:	ff 75 08             	pushl  0x8(%ebp)
-{
-80100650:	8b 5d 10             	mov    0x10(%ebp),%ebx
-  iunlock(ip);
-80100653:	e8 e8 11 00 00       	call   80101840 <iunlock>
-  acquire(&cons.lock);
-80100658:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010065f:	e8 5c 42 00 00       	call   801048c0 <acquire>
-  for(i = 0; i < n; i++)
-80100664:	83 c4 10             	add    $0x10,%esp
-80100667:	85 db                	test   %ebx,%ebx
-80100669:	7e 24                	jle    8010068f <consolewrite+0x4f>
-8010066b:	8b 7d 0c             	mov    0xc(%ebp),%edi
-8010066e:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
-  if(panicked){
-80100671:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
-80100677:	85 d2                	test   %edx,%edx
-80100679:	74 05                	je     80100680 <consolewrite+0x40>
-8010067b:	fa                   	cli    
-    for(;;)
-8010067c:	eb fe                	jmp    8010067c <consolewrite+0x3c>
-8010067e:	66 90                	xchg   %ax,%ax
-    consputc(buf[i] & 0xff);
-80100680:	0f b6 07             	movzbl (%edi),%eax
-80100683:	83 c7 01             	add    $0x1,%edi
-80100686:	e8 85 fd ff ff       	call   80100410 <consputc.part.0>
-  for(i = 0; i < n; i++)
-8010068b:	39 fe                	cmp    %edi,%esi
-8010068d:	75 e2                	jne    80100671 <consolewrite+0x31>
-  release(&cons.lock);
-8010068f:	83 ec 0c             	sub    $0xc,%esp
-80100692:	68 20 a5 10 80       	push   $0x8010a520
-80100697:	e8 e4 42 00 00       	call   80104980 <release>
-  ilock(ip);
-8010069c:	58                   	pop    %eax
-8010069d:	ff 75 08             	pushl  0x8(%ebp)
-801006a0:	e8 bb 10 00 00       	call   80101760 <ilock>
-
-  return n;
-}
-801006a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801006a8:	89 d8                	mov    %ebx,%eax
-801006aa:	5b                   	pop    %ebx
-801006ab:	5e                   	pop    %esi
-801006ac:	5f                   	pop    %edi
-801006ad:	5d                   	pop    %ebp
-801006ae:	c3                   	ret    
-801006af:	90                   	nop
-
-801006b0 <cprintf>:
-{
-801006b0:	f3 0f 1e fb          	endbr32 
-801006b4:	55                   	push   %ebp
-801006b5:	89 e5                	mov    %esp,%ebp
-801006b7:	57                   	push   %edi
-801006b8:	56                   	push   %esi
-801006b9:	53                   	push   %ebx
-801006ba:	83 ec 1c             	sub    $0x1c,%esp
-  locking = cons.locking;
-801006bd:	a1 54 a5 10 80       	mov    0x8010a554,%eax
-801006c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  if(locking)
-801006c5:	85 c0                	test   %eax,%eax
-801006c7:	0f 85 e8 00 00 00    	jne    801007b5 <cprintf+0x105>
-  if (fmt == 0)
-801006cd:	8b 45 08             	mov    0x8(%ebp),%eax
-801006d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-801006d3:	85 c0                	test   %eax,%eax
-801006d5:	0f 84 5a 01 00 00    	je     80100835 <cprintf+0x185>
-  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-801006db:	0f b6 00             	movzbl (%eax),%eax
-801006de:	85 c0                	test   %eax,%eax
-801006e0:	74 36                	je     80100718 <cprintf+0x68>
-  argp = (uint*)(void*)(&fmt + 1);
-801006e2:	8d 5d 0c             	lea    0xc(%ebp),%ebx
-  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-801006e5:	31 f6                	xor    %esi,%esi
-    if(c != '%'){
-801006e7:	83 f8 25             	cmp    $0x25,%eax
-801006ea:	74 44                	je     80100730 <cprintf+0x80>
-  if(panicked){
-801006ec:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
-801006f2:	85 c9                	test   %ecx,%ecx
-801006f4:	74 0f                	je     80100705 <cprintf+0x55>
-801006f6:	fa                   	cli    
-    for(;;)
-801006f7:	eb fe                	jmp    801006f7 <cprintf+0x47>
-801006f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100700:	b8 25 00 00 00       	mov    $0x25,%eax
-80100705:	e8 06 fd ff ff       	call   80100410 <consputc.part.0>
-  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-8010070a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-8010070d:	83 c6 01             	add    $0x1,%esi
-80100710:	0f b6 04 30          	movzbl (%eax,%esi,1),%eax
-80100714:	85 c0                	test   %eax,%eax
-80100716:	75 cf                	jne    801006e7 <cprintf+0x37>
-  if(locking)
-80100718:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010071b:	85 c0                	test   %eax,%eax
-8010071d:	0f 85 fd 00 00 00    	jne    80100820 <cprintf+0x170>
-}
-80100723:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100726:	5b                   	pop    %ebx
-80100727:	5e                   	pop    %esi
-80100728:	5f                   	pop    %edi
-80100729:	5d                   	pop    %ebp
-8010072a:	c3                   	ret    
-8010072b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010072f:	90                   	nop
-    c = fmt[++i] & 0xff;
-80100730:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80100733:	83 c6 01             	add    $0x1,%esi
-80100736:	0f b6 3c 30          	movzbl (%eax,%esi,1),%edi
-    if(c == 0)
-8010073a:	85 ff                	test   %edi,%edi
-8010073c:	74 da                	je     80100718 <cprintf+0x68>
-    switch(c){
-8010073e:	83 ff 70             	cmp    $0x70,%edi
-80100741:	74 5a                	je     8010079d <cprintf+0xed>
-80100743:	7f 2a                	jg     8010076f <cprintf+0xbf>
-80100745:	83 ff 25             	cmp    $0x25,%edi
-80100748:	0f 84 92 00 00 00    	je     801007e0 <cprintf+0x130>
-8010074e:	83 ff 64             	cmp    $0x64,%edi
-80100751:	0f 85 a1 00 00 00    	jne    801007f8 <cprintf+0x148>
-      printint(*argp++, 10, 1);
-80100757:	8b 03                	mov    (%ebx),%eax
-80100759:	8d 7b 04             	lea    0x4(%ebx),%edi
-8010075c:	b9 01 00 00 00       	mov    $0x1,%ecx
-80100761:	ba 0a 00 00 00       	mov    $0xa,%edx
-80100766:	89 fb                	mov    %edi,%ebx
-80100768:	e8 33 fe ff ff       	call   801005a0 <printint>
-      break;
-8010076d:	eb 9b                	jmp    8010070a <cprintf+0x5a>
-    switch(c){
-8010076f:	83 ff 73             	cmp    $0x73,%edi
-80100772:	75 24                	jne    80100798 <cprintf+0xe8>
-      if((s = (char*)*argp++) == 0)
-80100774:	8d 7b 04             	lea    0x4(%ebx),%edi
-80100777:	8b 1b                	mov    (%ebx),%ebx
-80100779:	85 db                	test   %ebx,%ebx
-8010077b:	75 55                	jne    801007d2 <cprintf+0x122>
-        s = "(null)";
-8010077d:	bb 98 75 10 80       	mov    $0x80107598,%ebx
-      for(; *s; s++)
-80100782:	b8 28 00 00 00       	mov    $0x28,%eax
-  if(panicked){
-80100787:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
-8010078d:	85 d2                	test   %edx,%edx
-8010078f:	74 39                	je     801007ca <cprintf+0x11a>
-80100791:	fa                   	cli    
-    for(;;)
-80100792:	eb fe                	jmp    80100792 <cprintf+0xe2>
-80100794:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    switch(c){
-80100798:	83 ff 78             	cmp    $0x78,%edi
-8010079b:	75 5b                	jne    801007f8 <cprintf+0x148>
-      printint(*argp++, 16, 0);
-8010079d:	8b 03                	mov    (%ebx),%eax
-8010079f:	8d 7b 04             	lea    0x4(%ebx),%edi
-801007a2:	31 c9                	xor    %ecx,%ecx
-801007a4:	ba 10 00 00 00       	mov    $0x10,%edx
-801007a9:	89 fb                	mov    %edi,%ebx
-801007ab:	e8 f0 fd ff ff       	call   801005a0 <printint>
-      break;
-801007b0:	e9 55 ff ff ff       	jmp    8010070a <cprintf+0x5a>
-    acquire(&cons.lock);
-801007b5:	83 ec 0c             	sub    $0xc,%esp
-801007b8:	68 20 a5 10 80       	push   $0x8010a520
-801007bd:	e8 fe 40 00 00       	call   801048c0 <acquire>
-801007c2:	83 c4 10             	add    $0x10,%esp
-801007c5:	e9 03 ff ff ff       	jmp    801006cd <cprintf+0x1d>
-801007ca:	e8 41 fc ff ff       	call   80100410 <consputc.part.0>
-      for(; *s; s++)
-801007cf:	83 c3 01             	add    $0x1,%ebx
-801007d2:	0f be 03             	movsbl (%ebx),%eax
-801007d5:	84 c0                	test   %al,%al
-801007d7:	75 ae                	jne    80100787 <cprintf+0xd7>
-      if((s = (char*)*argp++) == 0)
-801007d9:	89 fb                	mov    %edi,%ebx
-801007db:	e9 2a ff ff ff       	jmp    8010070a <cprintf+0x5a>
-  if(panicked){
-801007e0:	8b 3d 58 a5 10 80    	mov    0x8010a558,%edi
-801007e6:	85 ff                	test   %edi,%edi
-801007e8:	0f 84 12 ff ff ff    	je     80100700 <cprintf+0x50>
-801007ee:	fa                   	cli    
-    for(;;)
-801007ef:	eb fe                	jmp    801007ef <cprintf+0x13f>
-801007f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  if(panicked){
-801007f8:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
-801007fe:	85 c9                	test   %ecx,%ecx
-80100800:	74 06                	je     80100808 <cprintf+0x158>
-80100802:	fa                   	cli    
-    for(;;)
-80100803:	eb fe                	jmp    80100803 <cprintf+0x153>
-80100805:	8d 76 00             	lea    0x0(%esi),%esi
-80100808:	b8 25 00 00 00       	mov    $0x25,%eax
-8010080d:	e8 fe fb ff ff       	call   80100410 <consputc.part.0>
-  if(panicked){
-80100812:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
-80100818:	85 d2                	test   %edx,%edx
-8010081a:	74 2c                	je     80100848 <cprintf+0x198>
-8010081c:	fa                   	cli    
-    for(;;)
-8010081d:	eb fe                	jmp    8010081d <cprintf+0x16d>
-8010081f:	90                   	nop
-    release(&cons.lock);
-80100820:	83 ec 0c             	sub    $0xc,%esp
-80100823:	68 20 a5 10 80       	push   $0x8010a520
-80100828:	e8 53 41 00 00       	call   80104980 <release>
-8010082d:	83 c4 10             	add    $0x10,%esp
-}
-80100830:	e9 ee fe ff ff       	jmp    80100723 <cprintf+0x73>
-    panic("null fmt");
-80100835:	83 ec 0c             	sub    $0xc,%esp
-80100838:	68 9f 75 10 80       	push   $0x8010759f
-8010083d:	e8 4e fb ff ff       	call   80100390 <panic>
-80100842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80100848:	89 f8                	mov    %edi,%eax
-8010084a:	e8 c1 fb ff ff       	call   80100410 <consputc.part.0>
-8010084f:	e9 b6 fe ff ff       	jmp    8010070a <cprintf+0x5a>
-80100854:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010085b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010085f:	90                   	nop
-
-80100860 <consoleintr>:
-{
-80100860:	f3 0f 1e fb          	endbr32 
-80100864:	55                   	push   %ebp
-80100865:	89 e5                	mov    %esp,%ebp
-80100867:	57                   	push   %edi
-80100868:	56                   	push   %esi
-  int c, doprocdump = 0;
-80100869:	31 f6                	xor    %esi,%esi
-{
-8010086b:	53                   	push   %ebx
-8010086c:	83 ec 18             	sub    $0x18,%esp
-8010086f:	8b 7d 08             	mov    0x8(%ebp),%edi
-  acquire(&cons.lock);
-80100872:	68 20 a5 10 80       	push   $0x8010a520
-80100877:	e8 44 40 00 00       	call   801048c0 <acquire>
-  while((c = getc()) >= 0){
-8010087c:	83 c4 10             	add    $0x10,%esp
-8010087f:	eb 17                	jmp    80100898 <consoleintr+0x38>
-    switch(c){
-80100881:	83 fb 08             	cmp    $0x8,%ebx
-80100884:	0f 84 f6 00 00 00    	je     80100980 <consoleintr+0x120>
-8010088a:	83 fb 10             	cmp    $0x10,%ebx
-8010088d:	0f 85 15 01 00 00    	jne    801009a8 <consoleintr+0x148>
-80100893:	be 01 00 00 00       	mov    $0x1,%esi
-  while((c = getc()) >= 0){
-80100898:	ff d7                	call   *%edi
-8010089a:	89 c3                	mov    %eax,%ebx
-8010089c:	85 c0                	test   %eax,%eax
-8010089e:	0f 88 23 01 00 00    	js     801009c7 <consoleintr+0x167>
-    switch(c){
-801008a4:	83 fb 15             	cmp    $0x15,%ebx
-801008a7:	74 77                	je     80100920 <consoleintr+0xc0>
-801008a9:	7e d6                	jle    80100881 <consoleintr+0x21>
-801008ab:	83 fb 7f             	cmp    $0x7f,%ebx
-801008ae:	0f 84 cc 00 00 00    	je     80100980 <consoleintr+0x120>
-      if(c != 0 && input.e-input.r < INPUT_BUF){
-801008b4:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-801008b9:	89 c2                	mov    %eax,%edx
-801008bb:	2b 15 a0 ff 10 80    	sub    0x8010ffa0,%edx
-801008c1:	83 fa 7f             	cmp    $0x7f,%edx
-801008c4:	77 d2                	ja     80100898 <consoleintr+0x38>
-        c = (c == '\r') ? '\n' : c;
-801008c6:	8d 48 01             	lea    0x1(%eax),%ecx
-801008c9:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
-801008cf:	83 e0 7f             	and    $0x7f,%eax
-        input.buf[input.e++ % INPUT_BUF] = c;
-801008d2:	89 0d a8 ff 10 80    	mov    %ecx,0x8010ffa8
-        c = (c == '\r') ? '\n' : c;
-801008d8:	83 fb 0d             	cmp    $0xd,%ebx
-801008db:	0f 84 02 01 00 00    	je     801009e3 <consoleintr+0x183>
-        input.buf[input.e++ % INPUT_BUF] = c;
-801008e1:	88 98 20 ff 10 80    	mov    %bl,-0x7fef00e0(%eax)
-  if(panicked){
-801008e7:	85 d2                	test   %edx,%edx
-801008e9:	0f 85 ff 00 00 00    	jne    801009ee <consoleintr+0x18e>
-801008ef:	89 d8                	mov    %ebx,%eax
-801008f1:	e8 1a fb ff ff       	call   80100410 <consputc.part.0>
-        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-801008f6:	83 fb 0a             	cmp    $0xa,%ebx
-801008f9:	0f 84 0f 01 00 00    	je     80100a0e <consoleintr+0x1ae>
-801008ff:	83 fb 04             	cmp    $0x4,%ebx
-80100902:	0f 84 06 01 00 00    	je     80100a0e <consoleintr+0x1ae>
-80100908:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
-8010090d:	83 e8 80             	sub    $0xffffff80,%eax
-80100910:	39 05 a8 ff 10 80    	cmp    %eax,0x8010ffa8
-80100916:	75 80                	jne    80100898 <consoleintr+0x38>
-80100918:	e9 f6 00 00 00       	jmp    80100a13 <consoleintr+0x1b3>
-8010091d:	8d 76 00             	lea    0x0(%esi),%esi
-      while(input.e != input.w &&
-80100920:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-80100925:	39 05 a4 ff 10 80    	cmp    %eax,0x8010ffa4
-8010092b:	0f 84 67 ff ff ff    	je     80100898 <consoleintr+0x38>
-            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-80100931:	83 e8 01             	sub    $0x1,%eax
-80100934:	89 c2                	mov    %eax,%edx
-80100936:	83 e2 7f             	and    $0x7f,%edx
-      while(input.e != input.w &&
-80100939:	80 ba 20 ff 10 80 0a 	cmpb   $0xa,-0x7fef00e0(%edx)
-80100940:	0f 84 52 ff ff ff    	je     80100898 <consoleintr+0x38>
-  if(panicked){
-80100946:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
-        input.e--;
-8010094c:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
-  if(panicked){
-80100951:	85 d2                	test   %edx,%edx
-80100953:	74 0b                	je     80100960 <consoleintr+0x100>
-80100955:	fa                   	cli    
-    for(;;)
-80100956:	eb fe                	jmp    80100956 <consoleintr+0xf6>
-80100958:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010095f:	90                   	nop
-80100960:	b8 00 01 00 00       	mov    $0x100,%eax
-80100965:	e8 a6 fa ff ff       	call   80100410 <consputc.part.0>
-      while(input.e != input.w &&
-8010096a:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-8010096f:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
-80100975:	75 ba                	jne    80100931 <consoleintr+0xd1>
-80100977:	e9 1c ff ff ff       	jmp    80100898 <consoleintr+0x38>
-8010097c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-      if(input.e != input.w){
-80100980:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-80100985:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
-8010098b:	0f 84 07 ff ff ff    	je     80100898 <consoleintr+0x38>
-        input.e--;
-80100991:	83 e8 01             	sub    $0x1,%eax
-80100994:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
-  if(panicked){
-80100999:	a1 58 a5 10 80       	mov    0x8010a558,%eax
-8010099e:	85 c0                	test   %eax,%eax
-801009a0:	74 16                	je     801009b8 <consoleintr+0x158>
-801009a2:	fa                   	cli    
-    for(;;)
-801009a3:	eb fe                	jmp    801009a3 <consoleintr+0x143>
-801009a5:	8d 76 00             	lea    0x0(%esi),%esi
-      if(c != 0 && input.e-input.r < INPUT_BUF){
-801009a8:	85 db                	test   %ebx,%ebx
-801009aa:	0f 84 e8 fe ff ff    	je     80100898 <consoleintr+0x38>
-801009b0:	e9 ff fe ff ff       	jmp    801008b4 <consoleintr+0x54>
-801009b5:	8d 76 00             	lea    0x0(%esi),%esi
-801009b8:	b8 00 01 00 00       	mov    $0x100,%eax
-801009bd:	e8 4e fa ff ff       	call   80100410 <consputc.part.0>
-801009c2:	e9 d1 fe ff ff       	jmp    80100898 <consoleintr+0x38>
-  release(&cons.lock);
-801009c7:	83 ec 0c             	sub    $0xc,%esp
-801009ca:	68 20 a5 10 80       	push   $0x8010a520
-801009cf:	e8 ac 3f 00 00       	call   80104980 <release>
-  if(doprocdump) {
-801009d4:	83 c4 10             	add    $0x10,%esp
-801009d7:	85 f6                	test   %esi,%esi
-801009d9:	75 1d                	jne    801009f8 <consoleintr+0x198>
-}
-801009db:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801009de:	5b                   	pop    %ebx
-801009df:	5e                   	pop    %esi
-801009e0:	5f                   	pop    %edi
-801009e1:	5d                   	pop    %ebp
-801009e2:	c3                   	ret    
-        input.buf[input.e++ % INPUT_BUF] = c;
-801009e3:	c6 80 20 ff 10 80 0a 	movb   $0xa,-0x7fef00e0(%eax)
-  if(panicked){
-801009ea:	85 d2                	test   %edx,%edx
-801009ec:	74 16                	je     80100a04 <consoleintr+0x1a4>
-801009ee:	fa                   	cli    
-    for(;;)
-801009ef:	eb fe                	jmp    801009ef <consoleintr+0x18f>
-801009f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-}
-801009f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801009fb:	5b                   	pop    %ebx
-801009fc:	5e                   	pop    %esi
-801009fd:	5f                   	pop    %edi
-801009fe:	5d                   	pop    %ebp
-    procdump();  // now call procdump() wo. cons.lock held
-801009ff:	e9 cc 37 00 00       	jmp    801041d0 <procdump>
-80100a04:	b8 0a 00 00 00       	mov    $0xa,%eax
-80100a09:	e8 02 fa ff ff       	call   80100410 <consputc.part.0>
-        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-80100a0e:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
-          wakeup(&input.r);
-80100a13:	83 ec 0c             	sub    $0xc,%esp
-          input.w = input.e;
-80100a16:	a3 a4 ff 10 80       	mov    %eax,0x8010ffa4
-          wakeup(&input.r);
-80100a1b:	68 a0 ff 10 80       	push   $0x8010ffa0
-80100a20:	e8 bb 36 00 00       	call   801040e0 <wakeup>
-80100a25:	83 c4 10             	add    $0x10,%esp
-80100a28:	e9 6b fe ff ff       	jmp    80100898 <consoleintr+0x38>
-80100a2d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80100a30 <consoleinit>:
-
-void
-consoleinit(void)
-{
-80100a30:	f3 0f 1e fb          	endbr32 
-80100a34:	55                   	push   %ebp
-80100a35:	89 e5                	mov    %esp,%ebp
-80100a37:	83 ec 10             	sub    $0x10,%esp
-  initlock(&cons.lock, "console");
-80100a3a:	68 a8 75 10 80       	push   $0x801075a8
-80100a3f:	68 20 a5 10 80       	push   $0x8010a520
-80100a44:	e8 f7 3c 00 00       	call   80104740 <initlock>
-
-  devsw[CONSOLE].write = consolewrite;
-  devsw[CONSOLE].read = consoleread;
-  cons.locking = 1;
-
-  ioapicenable(IRQ_KBD, 0);
-80100a49:	58                   	pop    %eax
-80100a4a:	5a                   	pop    %edx
-80100a4b:	6a 00                	push   $0x0
-80100a4d:	6a 01                	push   $0x1
-  devsw[CONSOLE].write = consolewrite;
-80100a4f:	c7 05 6c 09 11 80 40 	movl   $0x80100640,0x8011096c
-80100a56:	06 10 80 
-  devsw[CONSOLE].read = consoleread;
-80100a59:	c7 05 68 09 11 80 90 	movl   $0x80100290,0x80110968
-80100a60:	02 10 80 
-  cons.locking = 1;
-80100a63:	c7 05 54 a5 10 80 01 	movl   $0x1,0x8010a554
-80100a6a:	00 00 00 
-  ioapicenable(IRQ_KBD, 0);
-80100a6d:	e8 be 19 00 00       	call   80102430 <ioapicenable>
-}
-80100a72:	83 c4 10             	add    $0x10,%esp
-80100a75:	c9                   	leave  
-80100a76:	c3                   	ret    
-80100a77:	66 90                	xchg   %ax,%ax
-80100a79:	66 90                	xchg   %ax,%ax
-80100a7b:	66 90                	xchg   %ax,%ax
-80100a7d:	66 90                	xchg   %ax,%ax
-80100a7f:	90                   	nop
-
-80100a80 <exec>:
-#include "x86.h"
-#include "elf.h"
-
-int
-exec(char *path, char **argv)
-{
-80100a80:	f3 0f 1e fb          	endbr32 
-80100a84:	55                   	push   %ebp
-80100a85:	89 e5                	mov    %esp,%ebp
-80100a87:	57                   	push   %edi
-80100a88:	56                   	push   %esi
-80100a89:	53                   	push   %ebx
-80100a8a:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
-  uint argc, sz, sp, ustack[3+MAXARG+1];
-  struct elfhdr elf;
-  struct inode *ip;
-  struct proghdr ph;
-  pde_t *pgdir, *oldpgdir;
-  struct proc *curproc = myproc();
-80100a90:	e8 cb 2e 00 00       	call   80103960 <myproc>
-80100a95:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
-
-  begin_op();
-80100a9b:	e8 90 22 00 00       	call   80102d30 <begin_op>
-
-  if((ip = namei(path)) == 0){
-80100aa0:	83 ec 0c             	sub    $0xc,%esp
-80100aa3:	ff 75 08             	pushl  0x8(%ebp)
-80100aa6:	e8 85 15 00 00       	call   80102030 <namei>
-80100aab:	83 c4 10             	add    $0x10,%esp
-80100aae:	85 c0                	test   %eax,%eax
-80100ab0:	0f 84 fe 02 00 00    	je     80100db4 <exec+0x334>
-    end_op();
-    cprintf("exec: fail\n");
-    return -1;
-  }
-  ilock(ip);
-80100ab6:	83 ec 0c             	sub    $0xc,%esp
-80100ab9:	89 c3                	mov    %eax,%ebx
-80100abb:	50                   	push   %eax
-80100abc:	e8 9f 0c 00 00       	call   80101760 <ilock>
-  pgdir = 0;
-
-  // Check ELF header
-  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
-80100ac1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
-80100ac7:	6a 34                	push   $0x34
-80100ac9:	6a 00                	push   $0x0
-80100acb:	50                   	push   %eax
-80100acc:	53                   	push   %ebx
-80100acd:	e8 8e 0f 00 00       	call   80101a60 <readi>
-80100ad2:	83 c4 20             	add    $0x20,%esp
-80100ad5:	83 f8 34             	cmp    $0x34,%eax
-80100ad8:	74 26                	je     80100b00 <exec+0x80>
-
- bad:
-  if(pgdir)
-    freevm(pgdir);
-  if(ip){
-    iunlockput(ip);
-80100ada:	83 ec 0c             	sub    $0xc,%esp
-80100add:	53                   	push   %ebx
-80100ade:	e8 1d 0f 00 00       	call   80101a00 <iunlockput>
-    end_op();
-80100ae3:	e8 b8 22 00 00       	call   80102da0 <end_op>
-80100ae8:	83 c4 10             	add    $0x10,%esp
-  }
-  return -1;
-80100aeb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80100af0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100af3:	5b                   	pop    %ebx
-80100af4:	5e                   	pop    %esi
-80100af5:	5f                   	pop    %edi
-80100af6:	5d                   	pop    %ebp
-80100af7:	c3                   	ret    
-80100af8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100aff:	90                   	nop
-  if(elf.magic != ELF_MAGIC)
-80100b00:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
-80100b07:	45 4c 46 
-80100b0a:	75 ce                	jne    80100ada <exec+0x5a>
-  if((pgdir = setupkvm()) == 0)
-80100b0c:	e8 8f 67 00 00       	call   801072a0 <setupkvm>
-80100b11:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
-80100b17:	85 c0                	test   %eax,%eax
-80100b19:	74 bf                	je     80100ada <exec+0x5a>
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-80100b1b:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
-80100b22:	00 
-80100b23:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
-80100b29:	0f 84 a4 02 00 00    	je     80100dd3 <exec+0x353>
-  sz = 0;
-80100b2f:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
-80100b36:	00 00 00 
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-80100b39:	31 ff                	xor    %edi,%edi
-80100b3b:	e9 86 00 00 00       	jmp    80100bc6 <exec+0x146>
-    if(ph.type != ELF_PROG_LOAD)
-80100b40:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
-80100b47:	75 6c                	jne    80100bb5 <exec+0x135>
-    if(ph.memsz < ph.filesz)
-80100b49:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
-80100b4f:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
-80100b55:	0f 82 87 00 00 00    	jb     80100be2 <exec+0x162>
-    if(ph.vaddr + ph.memsz < ph.vaddr)
-80100b5b:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
-80100b61:	72 7f                	jb     80100be2 <exec+0x162>
-    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
-80100b63:	83 ec 04             	sub    $0x4,%esp
-80100b66:	50                   	push   %eax
-80100b67:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
-80100b6d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100b73:	e8 48 65 00 00       	call   801070c0 <allocuvm>
-80100b78:	83 c4 10             	add    $0x10,%esp
-80100b7b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
-80100b81:	85 c0                	test   %eax,%eax
-80100b83:	74 5d                	je     80100be2 <exec+0x162>
-    if(ph.vaddr % PGSIZE != 0)
-80100b85:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
-80100b8b:	a9 ff 0f 00 00       	test   $0xfff,%eax
-80100b90:	75 50                	jne    80100be2 <exec+0x162>
-    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
-80100b92:	83 ec 0c             	sub    $0xc,%esp
-80100b95:	ff b5 14 ff ff ff    	pushl  -0xec(%ebp)
-80100b9b:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
-80100ba1:	53                   	push   %ebx
-80100ba2:	50                   	push   %eax
-80100ba3:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100ba9:	e8 42 64 00 00       	call   80106ff0 <loaduvm>
-80100bae:	83 c4 20             	add    $0x20,%esp
-80100bb1:	85 c0                	test   %eax,%eax
-80100bb3:	78 2d                	js     80100be2 <exec+0x162>
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-80100bb5:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
-80100bbc:	83 c7 01             	add    $0x1,%edi
-80100bbf:	83 c6 20             	add    $0x20,%esi
-80100bc2:	39 f8                	cmp    %edi,%eax
-80100bc4:	7e 3a                	jle    80100c00 <exec+0x180>
-    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
-80100bc6:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
-80100bcc:	6a 20                	push   $0x20
-80100bce:	56                   	push   %esi
-80100bcf:	50                   	push   %eax
-80100bd0:	53                   	push   %ebx
-80100bd1:	e8 8a 0e 00 00       	call   80101a60 <readi>
-80100bd6:	83 c4 10             	add    $0x10,%esp
-80100bd9:	83 f8 20             	cmp    $0x20,%eax
-80100bdc:	0f 84 5e ff ff ff    	je     80100b40 <exec+0xc0>
-    freevm(pgdir);
-80100be2:	83 ec 0c             	sub    $0xc,%esp
-80100be5:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100beb:	e8 30 66 00 00       	call   80107220 <freevm>
-  if(ip){
-80100bf0:	83 c4 10             	add    $0x10,%esp
-80100bf3:	e9 e2 fe ff ff       	jmp    80100ada <exec+0x5a>
-80100bf8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100bff:	90                   	nop
-80100c00:	8b bd f0 fe ff ff    	mov    -0x110(%ebp),%edi
-80100c06:	81 c7 ff 0f 00 00    	add    $0xfff,%edi
-80100c0c:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
-80100c12:	8d b7 00 20 00 00    	lea    0x2000(%edi),%esi
-  iunlockput(ip);
-80100c18:	83 ec 0c             	sub    $0xc,%esp
-80100c1b:	53                   	push   %ebx
-80100c1c:	e8 df 0d 00 00       	call   80101a00 <iunlockput>
-  end_op();
-80100c21:	e8 7a 21 00 00       	call   80102da0 <end_op>
-  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
-80100c26:	83 c4 0c             	add    $0xc,%esp
-80100c29:	56                   	push   %esi
-80100c2a:	57                   	push   %edi
-80100c2b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
-80100c31:	57                   	push   %edi
-80100c32:	e8 89 64 00 00       	call   801070c0 <allocuvm>
-80100c37:	83 c4 10             	add    $0x10,%esp
-80100c3a:	89 c6                	mov    %eax,%esi
-80100c3c:	85 c0                	test   %eax,%eax
-80100c3e:	0f 84 94 00 00 00    	je     80100cd8 <exec+0x258>
-  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100c44:	83 ec 08             	sub    $0x8,%esp
-80100c47:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
-  for(argc = 0; argv[argc]; argc++) {
-80100c4d:	89 f3                	mov    %esi,%ebx
-  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100c4f:	50                   	push   %eax
-80100c50:	57                   	push   %edi
-  for(argc = 0; argv[argc]; argc++) {
-80100c51:	31 ff                	xor    %edi,%edi
-  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100c53:	e8 e8 66 00 00       	call   80107340 <clearpteu>
-  for(argc = 0; argv[argc]; argc++) {
-80100c58:	8b 45 0c             	mov    0xc(%ebp),%eax
-80100c5b:	83 c4 10             	add    $0x10,%esp
-80100c5e:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
-80100c64:	8b 00                	mov    (%eax),%eax
-80100c66:	85 c0                	test   %eax,%eax
-80100c68:	0f 84 8b 00 00 00    	je     80100cf9 <exec+0x279>
-80100c6e:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
-80100c74:	8b b5 f4 fe ff ff    	mov    -0x10c(%ebp),%esi
-80100c7a:	eb 23                	jmp    80100c9f <exec+0x21f>
-80100c7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80100c80:	8b 45 0c             	mov    0xc(%ebp),%eax
-    ustack[3+argc] = sp;
-80100c83:	89 9c bd 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%edi,4)
-  for(argc = 0; argv[argc]; argc++) {
-80100c8a:	83 c7 01             	add    $0x1,%edi
-    ustack[3+argc] = sp;
-80100c8d:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
-  for(argc = 0; argv[argc]; argc++) {
-80100c93:	8b 04 b8             	mov    (%eax,%edi,4),%eax
-80100c96:	85 c0                	test   %eax,%eax
-80100c98:	74 59                	je     80100cf3 <exec+0x273>
-    if(argc >= MAXARG)
-80100c9a:	83 ff 20             	cmp    $0x20,%edi
-80100c9d:	74 39                	je     80100cd8 <exec+0x258>
-    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
-80100c9f:	83 ec 0c             	sub    $0xc,%esp
-80100ca2:	50                   	push   %eax
-80100ca3:	e8 28 3f 00 00       	call   80104bd0 <strlen>
-80100ca8:	f7 d0                	not    %eax
-80100caa:	01 c3                	add    %eax,%ebx
-    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-80100cac:	58                   	pop    %eax
-80100cad:	8b 45 0c             	mov    0xc(%ebp),%eax
-    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
-80100cb0:	83 e3 fc             	and    $0xfffffffc,%ebx
-    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-80100cb3:	ff 34 b8             	pushl  (%eax,%edi,4)
-80100cb6:	e8 15 3f 00 00       	call   80104bd0 <strlen>
-80100cbb:	83 c0 01             	add    $0x1,%eax
-80100cbe:	50                   	push   %eax
-80100cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
-80100cc2:	ff 34 b8             	pushl  (%eax,%edi,4)
-80100cc5:	53                   	push   %ebx
-80100cc6:	56                   	push   %esi
-80100cc7:	e8 d4 67 00 00       	call   801074a0 <copyout>
-80100ccc:	83 c4 20             	add    $0x20,%esp
-80100ccf:	85 c0                	test   %eax,%eax
-80100cd1:	79 ad                	jns    80100c80 <exec+0x200>
-80100cd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80100cd7:	90                   	nop
-    freevm(pgdir);
-80100cd8:	83 ec 0c             	sub    $0xc,%esp
-80100cdb:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80100ce1:	e8 3a 65 00 00       	call   80107220 <freevm>
-80100ce6:	83 c4 10             	add    $0x10,%esp
-  return -1;
-80100ce9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80100cee:	e9 fd fd ff ff       	jmp    80100af0 <exec+0x70>
-80100cf3:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
-  ustack[2] = sp - (argc+1)*4;  // argv pointer
-80100cf9:	8d 04 bd 04 00 00 00 	lea    0x4(,%edi,4),%eax
-80100d00:	89 d9                	mov    %ebx,%ecx
-  ustack[3+argc] = 0;
-80100d02:	c7 84 bd 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%edi,4)
-80100d09:	00 00 00 00 
-  ustack[2] = sp - (argc+1)*4;  // argv pointer
-80100d0d:	29 c1                	sub    %eax,%ecx
-  sp -= (3+argc+1) * 4;
-80100d0f:	83 c0 0c             	add    $0xc,%eax
-  ustack[1] = argc;
-80100d12:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%ebp)
-  sp -= (3+argc+1) * 4;
-80100d18:	29 c3                	sub    %eax,%ebx
-  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100d1a:	50                   	push   %eax
-80100d1b:	52                   	push   %edx
-80100d1c:	53                   	push   %ebx
-80100d1d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-  ustack[0] = 0xffffffff;  // fake return PC
-80100d23:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
-80100d2a:	ff ff ff 
-  ustack[2] = sp - (argc+1)*4;  // argv pointer
-80100d2d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
-  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100d33:	e8 68 67 00 00       	call   801074a0 <copyout>
-80100d38:	83 c4 10             	add    $0x10,%esp
-80100d3b:	85 c0                	test   %eax,%eax
-80100d3d:	78 99                	js     80100cd8 <exec+0x258>
-  for(last=s=path; *s; s++)
-80100d3f:	8b 45 08             	mov    0x8(%ebp),%eax
-80100d42:	8b 55 08             	mov    0x8(%ebp),%edx
-80100d45:	0f b6 00             	movzbl (%eax),%eax
-80100d48:	84 c0                	test   %al,%al
-80100d4a:	74 13                	je     80100d5f <exec+0x2df>
-80100d4c:	89 d1                	mov    %edx,%ecx
-80100d4e:	66 90                	xchg   %ax,%ax
-    if(*s == '/')
-80100d50:	83 c1 01             	add    $0x1,%ecx
-80100d53:	3c 2f                	cmp    $0x2f,%al
-  for(last=s=path; *s; s++)
-80100d55:	0f b6 01             	movzbl (%ecx),%eax
-    if(*s == '/')
-80100d58:	0f 44 d1             	cmove  %ecx,%edx
-  for(last=s=path; *s; s++)
-80100d5b:	84 c0                	test   %al,%al
-80100d5d:	75 f1                	jne    80100d50 <exec+0x2d0>
-  safestrcpy(curproc->name, last, sizeof(curproc->name));
-80100d5f:	8b bd ec fe ff ff    	mov    -0x114(%ebp),%edi
-80100d65:	83 ec 04             	sub    $0x4,%esp
-80100d68:	6a 10                	push   $0x10
-80100d6a:	89 f8                	mov    %edi,%eax
-80100d6c:	52                   	push   %edx
-80100d6d:	83 c0 6c             	add    $0x6c,%eax
-80100d70:	50                   	push   %eax
-80100d71:	e8 1a 3e 00 00       	call   80104b90 <safestrcpy>
-  curproc->pgdir = pgdir;
-80100d76:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
-  oldpgdir = curproc->pgdir;
-80100d7c:	89 f8                	mov    %edi,%eax
-80100d7e:	8b 7f 04             	mov    0x4(%edi),%edi
-  curproc->sz = sz;
-80100d81:	89 30                	mov    %esi,(%eax)
-  curproc->pgdir = pgdir;
-80100d83:	89 48 04             	mov    %ecx,0x4(%eax)
-  curproc->tf->eip = elf.entry;  // main
-80100d86:	89 c1                	mov    %eax,%ecx
-80100d88:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
-80100d8e:	8b 40 18             	mov    0x18(%eax),%eax
-80100d91:	89 50 38             	mov    %edx,0x38(%eax)
-  curproc->tf->esp = sp;
-80100d94:	8b 41 18             	mov    0x18(%ecx),%eax
-80100d97:	89 58 44             	mov    %ebx,0x44(%eax)
-  switchuvm(curproc);
-80100d9a:	89 0c 24             	mov    %ecx,(%esp)
-80100d9d:	e8 be 60 00 00       	call   80106e60 <switchuvm>
-  freevm(oldpgdir);
-80100da2:	89 3c 24             	mov    %edi,(%esp)
-80100da5:	e8 76 64 00 00       	call   80107220 <freevm>
-  return 0;
-80100daa:	83 c4 10             	add    $0x10,%esp
-80100dad:	31 c0                	xor    %eax,%eax
-80100daf:	e9 3c fd ff ff       	jmp    80100af0 <exec+0x70>
-    end_op();
-80100db4:	e8 e7 1f 00 00       	call   80102da0 <end_op>
-    cprintf("exec: fail\n");
-80100db9:	83 ec 0c             	sub    $0xc,%esp
-80100dbc:	68 c1 75 10 80       	push   $0x801075c1
-80100dc1:	e8 ea f8 ff ff       	call   801006b0 <cprintf>
-    return -1;
-80100dc6:	83 c4 10             	add    $0x10,%esp
-80100dc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80100dce:	e9 1d fd ff ff       	jmp    80100af0 <exec+0x70>
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-80100dd3:	31 ff                	xor    %edi,%edi
-80100dd5:	be 00 20 00 00       	mov    $0x2000,%esi
-80100dda:	e9 39 fe ff ff       	jmp    80100c18 <exec+0x198>
-80100ddf:	90                   	nop
-
-80100de0 <fileinit>:
-  struct file file[NFILE];
-} ftable;
-
-void
-fileinit(void)
-{
-80100de0:	f3 0f 1e fb          	endbr32 
-80100de4:	55                   	push   %ebp
-80100de5:	89 e5                	mov    %esp,%ebp
-80100de7:	83 ec 10             	sub    $0x10,%esp
-  initlock(&ftable.lock, "ftable");
-80100dea:	68 cd 75 10 80       	push   $0x801075cd
-80100def:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100df4:	e8 47 39 00 00       	call   80104740 <initlock>
-}
-80100df9:	83 c4 10             	add    $0x10,%esp
-80100dfc:	c9                   	leave  
-80100dfd:	c3                   	ret    
-80100dfe:	66 90                	xchg   %ax,%ax
-
-80100e00 <filealloc>:
-
-// Allocate a file structure.
-struct file*
-filealloc(void)
-{
-80100e00:	f3 0f 1e fb          	endbr32 
-80100e04:	55                   	push   %ebp
-80100e05:	89 e5                	mov    %esp,%ebp
-80100e07:	53                   	push   %ebx
-  struct file *f;
-
-  acquire(&ftable.lock);
-  for(f = ftable.file; f < ftable.file + NFILE; f++){
-80100e08:	bb f4 ff 10 80       	mov    $0x8010fff4,%ebx
-{
-80100e0d:	83 ec 10             	sub    $0x10,%esp
-  acquire(&ftable.lock);
-80100e10:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e15:	e8 a6 3a 00 00       	call   801048c0 <acquire>
-80100e1a:	83 c4 10             	add    $0x10,%esp
-80100e1d:	eb 0c                	jmp    80100e2b <filealloc+0x2b>
-80100e1f:	90                   	nop
-  for(f = ftable.file; f < ftable.file + NFILE; f++){
-80100e20:	83 c3 18             	add    $0x18,%ebx
-80100e23:	81 fb 54 09 11 80    	cmp    $0x80110954,%ebx
-80100e29:	74 25                	je     80100e50 <filealloc+0x50>
-    if(f->ref == 0){
-80100e2b:	8b 43 04             	mov    0x4(%ebx),%eax
-80100e2e:	85 c0                	test   %eax,%eax
-80100e30:	75 ee                	jne    80100e20 <filealloc+0x20>
-      f->ref = 1;
-      release(&ftable.lock);
-80100e32:	83 ec 0c             	sub    $0xc,%esp
-      f->ref = 1;
-80100e35:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
-      release(&ftable.lock);
-80100e3c:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e41:	e8 3a 3b 00 00       	call   80104980 <release>
-      return f;
-    }
-  }
-  release(&ftable.lock);
-  return 0;
-}
-80100e46:	89 d8                	mov    %ebx,%eax
-      return f;
-80100e48:	83 c4 10             	add    $0x10,%esp
-}
-80100e4b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80100e4e:	c9                   	leave  
-80100e4f:	c3                   	ret    
-  release(&ftable.lock);
-80100e50:	83 ec 0c             	sub    $0xc,%esp
-  return 0;
-80100e53:	31 db                	xor    %ebx,%ebx
-  release(&ftable.lock);
-80100e55:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e5a:	e8 21 3b 00 00       	call   80104980 <release>
-}
-80100e5f:	89 d8                	mov    %ebx,%eax
-  return 0;
-80100e61:	83 c4 10             	add    $0x10,%esp
-}
-80100e64:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80100e67:	c9                   	leave  
-80100e68:	c3                   	ret    
-80100e69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80100e70 <filedup>:
-
-// Increment ref count for file f.
-struct file*
-filedup(struct file *f)
-{
-80100e70:	f3 0f 1e fb          	endbr32 
-80100e74:	55                   	push   %ebp
-80100e75:	89 e5                	mov    %esp,%ebp
-80100e77:	53                   	push   %ebx
-80100e78:	83 ec 10             	sub    $0x10,%esp
-80100e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  acquire(&ftable.lock);
-80100e7e:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100e83:	e8 38 3a 00 00       	call   801048c0 <acquire>
-  if(f->ref < 1)
-80100e88:	8b 43 04             	mov    0x4(%ebx),%eax
-80100e8b:	83 c4 10             	add    $0x10,%esp
-80100e8e:	85 c0                	test   %eax,%eax
-80100e90:	7e 1a                	jle    80100eac <filedup+0x3c>
-    panic("filedup");
-  f->ref++;
-80100e92:	83 c0 01             	add    $0x1,%eax
-  release(&ftable.lock);
-80100e95:	83 ec 0c             	sub    $0xc,%esp
-  f->ref++;
-80100e98:	89 43 04             	mov    %eax,0x4(%ebx)
-  release(&ftable.lock);
-80100e9b:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100ea0:	e8 db 3a 00 00       	call   80104980 <release>
-  return f;
-}
-80100ea5:	89 d8                	mov    %ebx,%eax
-80100ea7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80100eaa:	c9                   	leave  
-80100eab:	c3                   	ret    
-    panic("filedup");
-80100eac:	83 ec 0c             	sub    $0xc,%esp
-80100eaf:	68 d4 75 10 80       	push   $0x801075d4
-80100eb4:	e8 d7 f4 ff ff       	call   80100390 <panic>
-80100eb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80100ec0 <fileclose>:
-
-// Close file f.  (Decrement ref count, close when reaches 0.)
-void
-fileclose(struct file *f)
-{
-80100ec0:	f3 0f 1e fb          	endbr32 
-80100ec4:	55                   	push   %ebp
-80100ec5:	89 e5                	mov    %esp,%ebp
-80100ec7:	57                   	push   %edi
-80100ec8:	56                   	push   %esi
-80100ec9:	53                   	push   %ebx
-80100eca:	83 ec 28             	sub    $0x28,%esp
-80100ecd:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  struct file ff;
-
-  acquire(&ftable.lock);
-80100ed0:	68 c0 ff 10 80       	push   $0x8010ffc0
-80100ed5:	e8 e6 39 00 00       	call   801048c0 <acquire>
-  if(f->ref < 1)
-80100eda:	8b 53 04             	mov    0x4(%ebx),%edx
-80100edd:	83 c4 10             	add    $0x10,%esp
-80100ee0:	85 d2                	test   %edx,%edx
-80100ee2:	0f 8e a1 00 00 00    	jle    80100f89 <fileclose+0xc9>
-    panic("fileclose");
-  if(--f->ref > 0){
-80100ee8:	83 ea 01             	sub    $0x1,%edx
-80100eeb:	89 53 04             	mov    %edx,0x4(%ebx)
-80100eee:	75 40                	jne    80100f30 <fileclose+0x70>
-    release(&ftable.lock);
-    return;
-  }
-  ff = *f;
-80100ef0:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
-  f->ref = 0;
-  f->type = FD_NONE;
-  release(&ftable.lock);
-80100ef4:	83 ec 0c             	sub    $0xc,%esp
-  ff = *f;
-80100ef7:	8b 3b                	mov    (%ebx),%edi
-  f->type = FD_NONE;
-80100ef9:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-  ff = *f;
-80100eff:	8b 73 0c             	mov    0xc(%ebx),%esi
-80100f02:	88 45 e7             	mov    %al,-0x19(%ebp)
-80100f05:	8b 43 10             	mov    0x10(%ebx),%eax
-  release(&ftable.lock);
-80100f08:	68 c0 ff 10 80       	push   $0x8010ffc0
-  ff = *f;
-80100f0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  release(&ftable.lock);
-80100f10:	e8 6b 3a 00 00       	call   80104980 <release>
-
-  if(ff.type == FD_PIPE)
-80100f15:	83 c4 10             	add    $0x10,%esp
-80100f18:	83 ff 01             	cmp    $0x1,%edi
-80100f1b:	74 53                	je     80100f70 <fileclose+0xb0>
-    pipeclose(ff.pipe, ff.writable);
-  else if(ff.type == FD_INODE){
-80100f1d:	83 ff 02             	cmp    $0x2,%edi
-80100f20:	74 26                	je     80100f48 <fileclose+0x88>
-    begin_op();
-    iput(ff.ip);
-    end_op();
-  }
-}
-80100f22:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100f25:	5b                   	pop    %ebx
-80100f26:	5e                   	pop    %esi
-80100f27:	5f                   	pop    %edi
-80100f28:	5d                   	pop    %ebp
-80100f29:	c3                   	ret    
-80100f2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    release(&ftable.lock);
-80100f30:	c7 45 08 c0 ff 10 80 	movl   $0x8010ffc0,0x8(%ebp)
-}
-80100f37:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100f3a:	5b                   	pop    %ebx
-80100f3b:	5e                   	pop    %esi
-80100f3c:	5f                   	pop    %edi
-80100f3d:	5d                   	pop    %ebp
-    release(&ftable.lock);
-80100f3e:	e9 3d 3a 00 00       	jmp    80104980 <release>
-80100f43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80100f47:	90                   	nop
-    begin_op();
-80100f48:	e8 e3 1d 00 00       	call   80102d30 <begin_op>
-    iput(ff.ip);
-80100f4d:	83 ec 0c             	sub    $0xc,%esp
-80100f50:	ff 75 e0             	pushl  -0x20(%ebp)
-80100f53:	e8 38 09 00 00       	call   80101890 <iput>
-    end_op();
-80100f58:	83 c4 10             	add    $0x10,%esp
-}
-80100f5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100f5e:	5b                   	pop    %ebx
-80100f5f:	5e                   	pop    %esi
-80100f60:	5f                   	pop    %edi
-80100f61:	5d                   	pop    %ebp
-    end_op();
-80100f62:	e9 39 1e 00 00       	jmp    80102da0 <end_op>
-80100f67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100f6e:	66 90                	xchg   %ax,%ax
-    pipeclose(ff.pipe, ff.writable);
-80100f70:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
-80100f74:	83 ec 08             	sub    $0x8,%esp
-80100f77:	53                   	push   %ebx
-80100f78:	56                   	push   %esi
-80100f79:	e8 82 25 00 00       	call   80103500 <pipeclose>
-80100f7e:	83 c4 10             	add    $0x10,%esp
-}
-80100f81:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100f84:	5b                   	pop    %ebx
-80100f85:	5e                   	pop    %esi
-80100f86:	5f                   	pop    %edi
-80100f87:	5d                   	pop    %ebp
-80100f88:	c3                   	ret    
-    panic("fileclose");
-80100f89:	83 ec 0c             	sub    $0xc,%esp
-80100f8c:	68 dc 75 10 80       	push   $0x801075dc
-80100f91:	e8 fa f3 ff ff       	call   80100390 <panic>
-80100f96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100f9d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80100fa0 <filestat>:
-
-// Get metadata about file f.
-int
-filestat(struct file *f, struct stat *st)
-{
-80100fa0:	f3 0f 1e fb          	endbr32 
-80100fa4:	55                   	push   %ebp
-80100fa5:	89 e5                	mov    %esp,%ebp
-80100fa7:	53                   	push   %ebx
-80100fa8:	83 ec 04             	sub    $0x4,%esp
-80100fab:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(f->type == FD_INODE){
-80100fae:	83 3b 02             	cmpl   $0x2,(%ebx)
-80100fb1:	75 2d                	jne    80100fe0 <filestat+0x40>
-    ilock(f->ip);
-80100fb3:	83 ec 0c             	sub    $0xc,%esp
-80100fb6:	ff 73 10             	pushl  0x10(%ebx)
-80100fb9:	e8 a2 07 00 00       	call   80101760 <ilock>
-    stati(f->ip, st);
-80100fbe:	58                   	pop    %eax
-80100fbf:	5a                   	pop    %edx
-80100fc0:	ff 75 0c             	pushl  0xc(%ebp)
-80100fc3:	ff 73 10             	pushl  0x10(%ebx)
-80100fc6:	e8 65 0a 00 00       	call   80101a30 <stati>
-    iunlock(f->ip);
-80100fcb:	59                   	pop    %ecx
-80100fcc:	ff 73 10             	pushl  0x10(%ebx)
-80100fcf:	e8 6c 08 00 00       	call   80101840 <iunlock>
-    return 0;
-  }
-  return -1;
-}
-80100fd4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    return 0;
-80100fd7:	83 c4 10             	add    $0x10,%esp
-80100fda:	31 c0                	xor    %eax,%eax
-}
-80100fdc:	c9                   	leave  
-80100fdd:	c3                   	ret    
-80100fde:	66 90                	xchg   %ax,%ax
-80100fe0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  return -1;
-80100fe3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80100fe8:	c9                   	leave  
-80100fe9:	c3                   	ret    
-80100fea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80100ff0 <fileread>:
-
-// Read from file f.
-int
-fileread(struct file *f, char *addr, int n)
-{
-80100ff0:	f3 0f 1e fb          	endbr32 
-80100ff4:	55                   	push   %ebp
-80100ff5:	89 e5                	mov    %esp,%ebp
-80100ff7:	57                   	push   %edi
-80100ff8:	56                   	push   %esi
-80100ff9:	53                   	push   %ebx
-80100ffa:	83 ec 0c             	sub    $0xc,%esp
-80100ffd:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80101000:	8b 75 0c             	mov    0xc(%ebp),%esi
-80101003:	8b 7d 10             	mov    0x10(%ebp),%edi
-  int r;
-
-  if(f->readable == 0)
-80101006:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
-8010100a:	74 64                	je     80101070 <fileread+0x80>
-    return -1;
-  if(f->type == FD_PIPE)
-8010100c:	8b 03                	mov    (%ebx),%eax
-8010100e:	83 f8 01             	cmp    $0x1,%eax
-80101011:	74 45                	je     80101058 <fileread+0x68>
-    return piperead(f->pipe, addr, n);
-  if(f->type == FD_INODE){
-80101013:	83 f8 02             	cmp    $0x2,%eax
-80101016:	75 5f                	jne    80101077 <fileread+0x87>
-    ilock(f->ip);
-80101018:	83 ec 0c             	sub    $0xc,%esp
-8010101b:	ff 73 10             	pushl  0x10(%ebx)
-8010101e:	e8 3d 07 00 00       	call   80101760 <ilock>
-    if((r = readi(f->ip, addr, f->off, n)) > 0)
-80101023:	57                   	push   %edi
-80101024:	ff 73 14             	pushl  0x14(%ebx)
-80101027:	56                   	push   %esi
-80101028:	ff 73 10             	pushl  0x10(%ebx)
-8010102b:	e8 30 0a 00 00       	call   80101a60 <readi>
-80101030:	83 c4 20             	add    $0x20,%esp
-80101033:	89 c6                	mov    %eax,%esi
-80101035:	85 c0                	test   %eax,%eax
-80101037:	7e 03                	jle    8010103c <fileread+0x4c>
-      f->off += r;
-80101039:	01 43 14             	add    %eax,0x14(%ebx)
-    iunlock(f->ip);
-8010103c:	83 ec 0c             	sub    $0xc,%esp
-8010103f:	ff 73 10             	pushl  0x10(%ebx)
-80101042:	e8 f9 07 00 00       	call   80101840 <iunlock>
-    return r;
-80101047:	83 c4 10             	add    $0x10,%esp
-  }
-  panic("fileread");
-}
-8010104a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010104d:	89 f0                	mov    %esi,%eax
-8010104f:	5b                   	pop    %ebx
-80101050:	5e                   	pop    %esi
-80101051:	5f                   	pop    %edi
-80101052:	5d                   	pop    %ebp
-80101053:	c3                   	ret    
-80101054:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    return piperead(f->pipe, addr, n);
-80101058:	8b 43 0c             	mov    0xc(%ebx),%eax
-8010105b:	89 45 08             	mov    %eax,0x8(%ebp)
-}
-8010105e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101061:	5b                   	pop    %ebx
-80101062:	5e                   	pop    %esi
-80101063:	5f                   	pop    %edi
-80101064:	5d                   	pop    %ebp
-    return piperead(f->pipe, addr, n);
-80101065:	e9 36 26 00 00       	jmp    801036a0 <piperead>
-8010106a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return -1;
-80101070:	be ff ff ff ff       	mov    $0xffffffff,%esi
-80101075:	eb d3                	jmp    8010104a <fileread+0x5a>
-  panic("fileread");
-80101077:	83 ec 0c             	sub    $0xc,%esp
-8010107a:	68 e6 75 10 80       	push   $0x801075e6
-8010107f:	e8 0c f3 ff ff       	call   80100390 <panic>
-80101084:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010108b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010108f:	90                   	nop
-
-80101090 <filewrite>:
-
-//PAGEBREAK!
-// Write to file f.
-int
-filewrite(struct file *f, char *addr, int n)
-{
-80101090:	f3 0f 1e fb          	endbr32 
-80101094:	55                   	push   %ebp
-80101095:	89 e5                	mov    %esp,%ebp
-80101097:	57                   	push   %edi
-80101098:	56                   	push   %esi
-80101099:	53                   	push   %ebx
-8010109a:	83 ec 1c             	sub    $0x1c,%esp
-8010109d:	8b 45 0c             	mov    0xc(%ebp),%eax
-801010a0:	8b 75 08             	mov    0x8(%ebp),%esi
-801010a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
-801010a6:	8b 45 10             	mov    0x10(%ebp),%eax
-  int r;
-
-  if(f->writable == 0)
-801010a9:	80 7e 09 00          	cmpb   $0x0,0x9(%esi)
-{
-801010ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  if(f->writable == 0)
-801010b0:	0f 84 c1 00 00 00    	je     80101177 <filewrite+0xe7>
-    return -1;
-  if(f->type == FD_PIPE)
-801010b6:	8b 06                	mov    (%esi),%eax
-801010b8:	83 f8 01             	cmp    $0x1,%eax
-801010bb:	0f 84 c3 00 00 00    	je     80101184 <filewrite+0xf4>
-    return pipewrite(f->pipe, addr, n);
-  if(f->type == FD_INODE){
-801010c1:	83 f8 02             	cmp    $0x2,%eax
-801010c4:	0f 85 cc 00 00 00    	jne    80101196 <filewrite+0x106>
-    // and 2 blocks of slop for non-aligned writes.
-    // this really belongs lower down, since writei()
-    // might be writing a device like the console.
-    int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
-    int i = 0;
-    while(i < n){
-801010ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    int i = 0;
-801010cd:	31 ff                	xor    %edi,%edi
-    while(i < n){
-801010cf:	85 c0                	test   %eax,%eax
-801010d1:	7f 34                	jg     80101107 <filewrite+0x77>
-801010d3:	e9 98 00 00 00       	jmp    80101170 <filewrite+0xe0>
-801010d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801010df:	90                   	nop
-        n1 = max;
-
-      begin_op();
-      ilock(f->ip);
-      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
-        f->off += r;
-801010e0:	01 46 14             	add    %eax,0x14(%esi)
-      iunlock(f->ip);
-801010e3:	83 ec 0c             	sub    $0xc,%esp
-801010e6:	ff 76 10             	pushl  0x10(%esi)
-        f->off += r;
-801010e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
-      iunlock(f->ip);
-801010ec:	e8 4f 07 00 00       	call   80101840 <iunlock>
-      end_op();
-801010f1:	e8 aa 1c 00 00       	call   80102da0 <end_op>
-
-      if(r < 0)
-        break;
-      if(r != n1)
-801010f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801010f9:	83 c4 10             	add    $0x10,%esp
-801010fc:	39 c3                	cmp    %eax,%ebx
-801010fe:	75 60                	jne    80101160 <filewrite+0xd0>
-        panic("short filewrite");
-      i += r;
-80101100:	01 df                	add    %ebx,%edi
-    while(i < n){
-80101102:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-80101105:	7e 69                	jle    80101170 <filewrite+0xe0>
-      int n1 = n - i;
-80101107:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-8010110a:	b8 00 06 00 00       	mov    $0x600,%eax
-8010110f:	29 fb                	sub    %edi,%ebx
-      if(n1 > max)
-80101111:	81 fb 00 06 00 00    	cmp    $0x600,%ebx
-80101117:	0f 4f d8             	cmovg  %eax,%ebx
-      begin_op();
-8010111a:	e8 11 1c 00 00       	call   80102d30 <begin_op>
-      ilock(f->ip);
-8010111f:	83 ec 0c             	sub    $0xc,%esp
-80101122:	ff 76 10             	pushl  0x10(%esi)
-80101125:	e8 36 06 00 00       	call   80101760 <ilock>
-      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
-8010112a:	8b 45 dc             	mov    -0x24(%ebp),%eax
-8010112d:	53                   	push   %ebx
-8010112e:	ff 76 14             	pushl  0x14(%esi)
-80101131:	01 f8                	add    %edi,%eax
-80101133:	50                   	push   %eax
-80101134:	ff 76 10             	pushl  0x10(%esi)
-80101137:	e8 24 0a 00 00       	call   80101b60 <writei>
-8010113c:	83 c4 20             	add    $0x20,%esp
-8010113f:	85 c0                	test   %eax,%eax
-80101141:	7f 9d                	jg     801010e0 <filewrite+0x50>
-      iunlock(f->ip);
-80101143:	83 ec 0c             	sub    $0xc,%esp
-80101146:	ff 76 10             	pushl  0x10(%esi)
-80101149:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-8010114c:	e8 ef 06 00 00       	call   80101840 <iunlock>
-      end_op();
-80101151:	e8 4a 1c 00 00       	call   80102da0 <end_op>
-      if(r < 0)
-80101156:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80101159:	83 c4 10             	add    $0x10,%esp
-8010115c:	85 c0                	test   %eax,%eax
-8010115e:	75 17                	jne    80101177 <filewrite+0xe7>
-        panic("short filewrite");
-80101160:	83 ec 0c             	sub    $0xc,%esp
-80101163:	68 ef 75 10 80       	push   $0x801075ef
-80101168:	e8 23 f2 ff ff       	call   80100390 <panic>
-8010116d:	8d 76 00             	lea    0x0(%esi),%esi
-    }
-    return i == n ? n : -1;
-80101170:	89 f8                	mov    %edi,%eax
-80101172:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
-80101175:	74 05                	je     8010117c <filewrite+0xec>
-80101177:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-  }
-  panic("filewrite");
-}
-8010117c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010117f:	5b                   	pop    %ebx
-80101180:	5e                   	pop    %esi
-80101181:	5f                   	pop    %edi
-80101182:	5d                   	pop    %ebp
-80101183:	c3                   	ret    
-    return pipewrite(f->pipe, addr, n);
-80101184:	8b 46 0c             	mov    0xc(%esi),%eax
-80101187:	89 45 08             	mov    %eax,0x8(%ebp)
-}
-8010118a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010118d:	5b                   	pop    %ebx
-8010118e:	5e                   	pop    %esi
-8010118f:	5f                   	pop    %edi
-80101190:	5d                   	pop    %ebp
-    return pipewrite(f->pipe, addr, n);
-80101191:	e9 0a 24 00 00       	jmp    801035a0 <pipewrite>
-  panic("filewrite");
-80101196:	83 ec 0c             	sub    $0xc,%esp
-80101199:	68 f5 75 10 80       	push   $0x801075f5
-8010119e:	e8 ed f1 ff ff       	call   80100390 <panic>
-801011a3:	66 90                	xchg   %ax,%ax
-801011a5:	66 90                	xchg   %ax,%ax
-801011a7:	66 90                	xchg   %ax,%ax
-801011a9:	66 90                	xchg   %ax,%ax
-801011ab:	66 90                	xchg   %ax,%ax
-801011ad:	66 90                	xchg   %ax,%ax
-801011af:	90                   	nop
-
-801011b0 <bfree>:
-}
-
-// Free a disk block.
-static void
-bfree(int dev, uint b)
-{
-801011b0:	55                   	push   %ebp
-801011b1:	89 c1                	mov    %eax,%ecx
-  struct buf *bp;
-  int bi, m;
-
-  bp = bread(dev, BBLOCK(b, sb));
-801011b3:	89 d0                	mov    %edx,%eax
-801011b5:	c1 e8 0c             	shr    $0xc,%eax
-801011b8:	03 05 d8 09 11 80    	add    0x801109d8,%eax
-{
-801011be:	89 e5                	mov    %esp,%ebp
-801011c0:	56                   	push   %esi
-801011c1:	53                   	push   %ebx
-801011c2:	89 d3                	mov    %edx,%ebx
-  bp = bread(dev, BBLOCK(b, sb));
-801011c4:	83 ec 08             	sub    $0x8,%esp
-801011c7:	50                   	push   %eax
-801011c8:	51                   	push   %ecx
-801011c9:	e8 02 ef ff ff       	call   801000d0 <bread>
-  bi = b % BPB;
-  m = 1 << (bi % 8);
-801011ce:	89 d9                	mov    %ebx,%ecx
-  if((bp->data[bi/8] & m) == 0)
-801011d0:	c1 fb 03             	sar    $0x3,%ebx
-  m = 1 << (bi % 8);
-801011d3:	ba 01 00 00 00       	mov    $0x1,%edx
-801011d8:	83 e1 07             	and    $0x7,%ecx
-  if((bp->data[bi/8] & m) == 0)
-801011db:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
-801011e1:	83 c4 10             	add    $0x10,%esp
-  m = 1 << (bi % 8);
-801011e4:	d3 e2                	shl    %cl,%edx
-  if((bp->data[bi/8] & m) == 0)
-801011e6:	0f b6 4c 18 5c       	movzbl 0x5c(%eax,%ebx,1),%ecx
-801011eb:	85 d1                	test   %edx,%ecx
-801011ed:	74 25                	je     80101214 <bfree+0x64>
-    panic("freeing free block");
-  bp->data[bi/8] &= ~m;
-801011ef:	f7 d2                	not    %edx
-  log_write(bp);
-801011f1:	83 ec 0c             	sub    $0xc,%esp
-801011f4:	89 c6                	mov    %eax,%esi
-  bp->data[bi/8] &= ~m;
-801011f6:	21 ca                	and    %ecx,%edx
-801011f8:	88 54 18 5c          	mov    %dl,0x5c(%eax,%ebx,1)
-  log_write(bp);
-801011fc:	50                   	push   %eax
-801011fd:	e8 0e 1d 00 00       	call   80102f10 <log_write>
-  brelse(bp);
-80101202:	89 34 24             	mov    %esi,(%esp)
-80101205:	e8 e6 ef ff ff       	call   801001f0 <brelse>
-}
-8010120a:	83 c4 10             	add    $0x10,%esp
-8010120d:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80101210:	5b                   	pop    %ebx
-80101211:	5e                   	pop    %esi
-80101212:	5d                   	pop    %ebp
-80101213:	c3                   	ret    
-    panic("freeing free block");
-80101214:	83 ec 0c             	sub    $0xc,%esp
-80101217:	68 ff 75 10 80       	push   $0x801075ff
-8010121c:	e8 6f f1 ff ff       	call   80100390 <panic>
-80101221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010122f:	90                   	nop
-
-80101230 <balloc>:
-{
-80101230:	55                   	push   %ebp
-80101231:	89 e5                	mov    %esp,%ebp
-80101233:	57                   	push   %edi
-80101234:	56                   	push   %esi
-80101235:	53                   	push   %ebx
-80101236:	83 ec 1c             	sub    $0x1c,%esp
-  for(b = 0; b < sb.size; b += BPB){
-80101239:	8b 0d c0 09 11 80    	mov    0x801109c0,%ecx
-{
-8010123f:	89 45 d8             	mov    %eax,-0x28(%ebp)
-  for(b = 0; b < sb.size; b += BPB){
-80101242:	85 c9                	test   %ecx,%ecx
-80101244:	0f 84 87 00 00 00    	je     801012d1 <balloc+0xa1>
-8010124a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
-    bp = bread(dev, BBLOCK(b, sb));
-80101251:	8b 75 dc             	mov    -0x24(%ebp),%esi
-80101254:	83 ec 08             	sub    $0x8,%esp
-80101257:	89 f0                	mov    %esi,%eax
-80101259:	c1 f8 0c             	sar    $0xc,%eax
-8010125c:	03 05 d8 09 11 80    	add    0x801109d8,%eax
-80101262:	50                   	push   %eax
-80101263:	ff 75 d8             	pushl  -0x28(%ebp)
-80101266:	e8 65 ee ff ff       	call   801000d0 <bread>
-8010126b:	83 c4 10             	add    $0x10,%esp
-8010126e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-80101271:	a1 c0 09 11 80       	mov    0x801109c0,%eax
-80101276:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80101279:	31 c0                	xor    %eax,%eax
-8010127b:	eb 2f                	jmp    801012ac <balloc+0x7c>
-8010127d:	8d 76 00             	lea    0x0(%esi),%esi
-      m = 1 << (bi % 8);
-80101280:	89 c1                	mov    %eax,%ecx
-80101282:	bb 01 00 00 00       	mov    $0x1,%ebx
-      if((bp->data[bi/8] & m) == 0){  // Is block free?
-80101287:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-      m = 1 << (bi % 8);
-8010128a:	83 e1 07             	and    $0x7,%ecx
-8010128d:	d3 e3                	shl    %cl,%ebx
-      if((bp->data[bi/8] & m) == 0){  // Is block free?
-8010128f:	89 c1                	mov    %eax,%ecx
-80101291:	c1 f9 03             	sar    $0x3,%ecx
-80101294:	0f b6 7c 0a 5c       	movzbl 0x5c(%edx,%ecx,1),%edi
-80101299:	89 fa                	mov    %edi,%edx
-8010129b:	85 df                	test   %ebx,%edi
-8010129d:	74 41                	je     801012e0 <balloc+0xb0>
-    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-8010129f:	83 c0 01             	add    $0x1,%eax
-801012a2:	83 c6 01             	add    $0x1,%esi
-801012a5:	3d 00 10 00 00       	cmp    $0x1000,%eax
-801012aa:	74 05                	je     801012b1 <balloc+0x81>
-801012ac:	39 75 e0             	cmp    %esi,-0x20(%ebp)
-801012af:	77 cf                	ja     80101280 <balloc+0x50>
-    brelse(bp);
-801012b1:	83 ec 0c             	sub    $0xc,%esp
-801012b4:	ff 75 e4             	pushl  -0x1c(%ebp)
-801012b7:	e8 34 ef ff ff       	call   801001f0 <brelse>
-  for(b = 0; b < sb.size; b += BPB){
-801012bc:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
-801012c3:	83 c4 10             	add    $0x10,%esp
-801012c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801012c9:	39 05 c0 09 11 80    	cmp    %eax,0x801109c0
-801012cf:	77 80                	ja     80101251 <balloc+0x21>
-  panic("balloc: out of blocks");
-801012d1:	83 ec 0c             	sub    $0xc,%esp
-801012d4:	68 12 76 10 80       	push   $0x80107612
-801012d9:	e8 b2 f0 ff ff       	call   80100390 <panic>
-801012de:	66 90                	xchg   %ax,%ax
-        bp->data[bi/8] |= m;  // Mark block in use.
-801012e0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-        log_write(bp);
-801012e3:	83 ec 0c             	sub    $0xc,%esp
-        bp->data[bi/8] |= m;  // Mark block in use.
-801012e6:	09 da                	or     %ebx,%edx
-801012e8:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
-        log_write(bp);
-801012ec:	57                   	push   %edi
-801012ed:	e8 1e 1c 00 00       	call   80102f10 <log_write>
-        brelse(bp);
-801012f2:	89 3c 24             	mov    %edi,(%esp)
-801012f5:	e8 f6 ee ff ff       	call   801001f0 <brelse>
-  bp = bread(dev, bno);
-801012fa:	58                   	pop    %eax
-801012fb:	5a                   	pop    %edx
-801012fc:	56                   	push   %esi
-801012fd:	ff 75 d8             	pushl  -0x28(%ebp)
-80101300:	e8 cb ed ff ff       	call   801000d0 <bread>
-  memset(bp->data, 0, BSIZE);
-80101305:	83 c4 0c             	add    $0xc,%esp
-  bp = bread(dev, bno);
-80101308:	89 c3                	mov    %eax,%ebx
-  memset(bp->data, 0, BSIZE);
-8010130a:	8d 40 5c             	lea    0x5c(%eax),%eax
-8010130d:	68 00 02 00 00       	push   $0x200
-80101312:	6a 00                	push   $0x0
-80101314:	50                   	push   %eax
-80101315:	e8 b6 36 00 00       	call   801049d0 <memset>
-  log_write(bp);
-8010131a:	89 1c 24             	mov    %ebx,(%esp)
-8010131d:	e8 ee 1b 00 00       	call   80102f10 <log_write>
-  brelse(bp);
-80101322:	89 1c 24             	mov    %ebx,(%esp)
-80101325:	e8 c6 ee ff ff       	call   801001f0 <brelse>
-}
-8010132a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010132d:	89 f0                	mov    %esi,%eax
-8010132f:	5b                   	pop    %ebx
-80101330:	5e                   	pop    %esi
-80101331:	5f                   	pop    %edi
-80101332:	5d                   	pop    %ebp
-80101333:	c3                   	ret    
-80101334:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010133b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010133f:	90                   	nop
-
-80101340 <iget>:
-// Find the inode with number inum on device dev
-// and return the in-memory copy. Does not lock
-// the inode and does not read it from disk.
-static struct inode*
-iget(uint dev, uint inum)
-{
-80101340:	55                   	push   %ebp
-80101341:	89 e5                	mov    %esp,%ebp
-80101343:	57                   	push   %edi
-80101344:	89 c7                	mov    %eax,%edi
-80101346:	56                   	push   %esi
-  struct inode *ip, *empty;
-
-  acquire(&icache.lock);
-
-  // Is the inode already cached?
-  empty = 0;
-80101347:	31 f6                	xor    %esi,%esi
-{
-80101349:	53                   	push   %ebx
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010134a:	bb 14 0a 11 80       	mov    $0x80110a14,%ebx
-{
-8010134f:	83 ec 28             	sub    $0x28,%esp
-80101352:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-  acquire(&icache.lock);
-80101355:	68 e0 09 11 80       	push   $0x801109e0
-8010135a:	e8 61 35 00 00       	call   801048c0 <acquire>
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010135f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-  acquire(&icache.lock);
-80101362:	83 c4 10             	add    $0x10,%esp
-80101365:	eb 1b                	jmp    80101382 <iget+0x42>
-80101367:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010136e:	66 90                	xchg   %ax,%ax
-    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-80101370:	39 3b                	cmp    %edi,(%ebx)
-80101372:	74 6c                	je     801013e0 <iget+0xa0>
-80101374:	81 c3 90 00 00 00    	add    $0x90,%ebx
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010137a:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
-80101380:	73 26                	jae    801013a8 <iget+0x68>
-    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-80101382:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80101385:	85 c9                	test   %ecx,%ecx
-80101387:	7f e7                	jg     80101370 <iget+0x30>
-      ip->ref++;
-      release(&icache.lock);
-      return ip;
-    }
-    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
-80101389:	85 f6                	test   %esi,%esi
-8010138b:	75 e7                	jne    80101374 <iget+0x34>
-8010138d:	89 d8                	mov    %ebx,%eax
-8010138f:	81 c3 90 00 00 00    	add    $0x90,%ebx
-80101395:	85 c9                	test   %ecx,%ecx
-80101397:	75 6e                	jne    80101407 <iget+0xc7>
-80101399:	89 c6                	mov    %eax,%esi
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010139b:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
-801013a1:	72 df                	jb     80101382 <iget+0x42>
-801013a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801013a7:	90                   	nop
-      empty = ip;
-  }
-
-  // Recycle an inode cache entry.
-  if(empty == 0)
-801013a8:	85 f6                	test   %esi,%esi
-801013aa:	74 73                	je     8010141f <iget+0xdf>
-  ip = empty;
-  ip->dev = dev;
-  ip->inum = inum;
-  ip->ref = 1;
-  ip->valid = 0;
-  release(&icache.lock);
-801013ac:	83 ec 0c             	sub    $0xc,%esp
-  ip->dev = dev;
-801013af:	89 3e                	mov    %edi,(%esi)
-  ip->inum = inum;
-801013b1:	89 56 04             	mov    %edx,0x4(%esi)
-  ip->ref = 1;
-801013b4:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
-  ip->valid = 0;
-801013bb:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
-  release(&icache.lock);
-801013c2:	68 e0 09 11 80       	push   $0x801109e0
-801013c7:	e8 b4 35 00 00       	call   80104980 <release>
-
-  return ip;
-801013cc:	83 c4 10             	add    $0x10,%esp
-}
-801013cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801013d2:	89 f0                	mov    %esi,%eax
-801013d4:	5b                   	pop    %ebx
-801013d5:	5e                   	pop    %esi
-801013d6:	5f                   	pop    %edi
-801013d7:	5d                   	pop    %ebp
-801013d8:	c3                   	ret    
-801013d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-801013e0:	39 53 04             	cmp    %edx,0x4(%ebx)
-801013e3:	75 8f                	jne    80101374 <iget+0x34>
-      release(&icache.lock);
-801013e5:	83 ec 0c             	sub    $0xc,%esp
-      ip->ref++;
-801013e8:	83 c1 01             	add    $0x1,%ecx
-      return ip;
-801013eb:	89 de                	mov    %ebx,%esi
-      release(&icache.lock);
-801013ed:	68 e0 09 11 80       	push   $0x801109e0
-      ip->ref++;
-801013f2:	89 4b 08             	mov    %ecx,0x8(%ebx)
-      release(&icache.lock);
-801013f5:	e8 86 35 00 00       	call   80104980 <release>
-      return ip;
-801013fa:	83 c4 10             	add    $0x10,%esp
-}
-801013fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101400:	89 f0                	mov    %esi,%eax
-80101402:	5b                   	pop    %ebx
-80101403:	5e                   	pop    %esi
-80101404:	5f                   	pop    %edi
-80101405:	5d                   	pop    %ebp
-80101406:	c3                   	ret    
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-80101407:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
-8010140d:	73 10                	jae    8010141f <iget+0xdf>
-    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-8010140f:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80101412:	85 c9                	test   %ecx,%ecx
-80101414:	0f 8f 56 ff ff ff    	jg     80101370 <iget+0x30>
-8010141a:	e9 6e ff ff ff       	jmp    8010138d <iget+0x4d>
-    panic("iget: no inodes");
-8010141f:	83 ec 0c             	sub    $0xc,%esp
-80101422:	68 28 76 10 80       	push   $0x80107628
-80101427:	e8 64 ef ff ff       	call   80100390 <panic>
-8010142c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80101430 <bmap>:
-
-// Return the disk block address of the nth block in inode ip.
-// If there is no such block, bmap allocates one.
-static uint
-bmap(struct inode *ip, uint bn)
-{
-80101430:	55                   	push   %ebp
-80101431:	89 e5                	mov    %esp,%ebp
-80101433:	57                   	push   %edi
-80101434:	56                   	push   %esi
-80101435:	89 c6                	mov    %eax,%esi
-80101437:	53                   	push   %ebx
-80101438:	83 ec 1c             	sub    $0x1c,%esp
-  uint addr, *a;
-  struct buf *bp;
-
-  if(bn < NDIRECT){
-8010143b:	83 fa 0b             	cmp    $0xb,%edx
-8010143e:	0f 86 84 00 00 00    	jbe    801014c8 <bmap+0x98>
-    if((addr = ip->addrs[bn]) == 0)
-      ip->addrs[bn] = addr = balloc(ip->dev);
-    return addr;
-  }
-  bn -= NDIRECT;
-80101444:	8d 5a f4             	lea    -0xc(%edx),%ebx
-
-  if(bn < NINDIRECT){
-80101447:	83 fb 7f             	cmp    $0x7f,%ebx
-8010144a:	0f 87 98 00 00 00    	ja     801014e8 <bmap+0xb8>
-    // Load indirect block, allocating if necessary.
-    if((addr = ip->addrs[NDIRECT]) == 0)
-80101450:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
-80101456:	8b 16                	mov    (%esi),%edx
-80101458:	85 c0                	test   %eax,%eax
-8010145a:	74 54                	je     801014b0 <bmap+0x80>
-      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
-    bp = bread(ip->dev, addr);
-8010145c:	83 ec 08             	sub    $0x8,%esp
-8010145f:	50                   	push   %eax
-80101460:	52                   	push   %edx
-80101461:	e8 6a ec ff ff       	call   801000d0 <bread>
-    a = (uint*)bp->data;
-    if((addr = a[bn]) == 0){
-80101466:	83 c4 10             	add    $0x10,%esp
-80101469:	8d 54 98 5c          	lea    0x5c(%eax,%ebx,4),%edx
-    bp = bread(ip->dev, addr);
-8010146d:	89 c7                	mov    %eax,%edi
-    if((addr = a[bn]) == 0){
-8010146f:	8b 1a                	mov    (%edx),%ebx
-80101471:	85 db                	test   %ebx,%ebx
-80101473:	74 1b                	je     80101490 <bmap+0x60>
-      a[bn] = addr = balloc(ip->dev);
-      log_write(bp);
-    }
-    brelse(bp);
-80101475:	83 ec 0c             	sub    $0xc,%esp
-80101478:	57                   	push   %edi
-80101479:	e8 72 ed ff ff       	call   801001f0 <brelse>
-    return addr;
-8010147e:	83 c4 10             	add    $0x10,%esp
-  }
-
-  panic("bmap: out of range");
-}
-80101481:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101484:	89 d8                	mov    %ebx,%eax
-80101486:	5b                   	pop    %ebx
-80101487:	5e                   	pop    %esi
-80101488:	5f                   	pop    %edi
-80101489:	5d                   	pop    %ebp
-8010148a:	c3                   	ret    
-8010148b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010148f:	90                   	nop
-      a[bn] = addr = balloc(ip->dev);
-80101490:	8b 06                	mov    (%esi),%eax
-80101492:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-80101495:	e8 96 fd ff ff       	call   80101230 <balloc>
-8010149a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-      log_write(bp);
-8010149d:	83 ec 0c             	sub    $0xc,%esp
-      a[bn] = addr = balloc(ip->dev);
-801014a0:	89 c3                	mov    %eax,%ebx
-801014a2:	89 02                	mov    %eax,(%edx)
-      log_write(bp);
-801014a4:	57                   	push   %edi
-801014a5:	e8 66 1a 00 00       	call   80102f10 <log_write>
-801014aa:	83 c4 10             	add    $0x10,%esp
-801014ad:	eb c6                	jmp    80101475 <bmap+0x45>
-801014af:	90                   	nop
-      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
-801014b0:	89 d0                	mov    %edx,%eax
-801014b2:	e8 79 fd ff ff       	call   80101230 <balloc>
-801014b7:	8b 16                	mov    (%esi),%edx
-801014b9:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
-801014bf:	eb 9b                	jmp    8010145c <bmap+0x2c>
-801014c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if((addr = ip->addrs[bn]) == 0)
-801014c8:	8d 3c 90             	lea    (%eax,%edx,4),%edi
-801014cb:	8b 5f 5c             	mov    0x5c(%edi),%ebx
-801014ce:	85 db                	test   %ebx,%ebx
-801014d0:	75 af                	jne    80101481 <bmap+0x51>
-      ip->addrs[bn] = addr = balloc(ip->dev);
-801014d2:	8b 00                	mov    (%eax),%eax
-801014d4:	e8 57 fd ff ff       	call   80101230 <balloc>
-801014d9:	89 47 5c             	mov    %eax,0x5c(%edi)
-801014dc:	89 c3                	mov    %eax,%ebx
-}
-801014de:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801014e1:	89 d8                	mov    %ebx,%eax
-801014e3:	5b                   	pop    %ebx
-801014e4:	5e                   	pop    %esi
-801014e5:	5f                   	pop    %edi
-801014e6:	5d                   	pop    %ebp
-801014e7:	c3                   	ret    
-  panic("bmap: out of range");
-801014e8:	83 ec 0c             	sub    $0xc,%esp
-801014eb:	68 38 76 10 80       	push   $0x80107638
-801014f0:	e8 9b ee ff ff       	call   80100390 <panic>
-801014f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801014fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80101500 <readsb>:
-{
-80101500:	f3 0f 1e fb          	endbr32 
-80101504:	55                   	push   %ebp
-80101505:	89 e5                	mov    %esp,%ebp
-80101507:	56                   	push   %esi
-80101508:	53                   	push   %ebx
-80101509:	8b 75 0c             	mov    0xc(%ebp),%esi
-  bp = bread(dev, 1);
-8010150c:	83 ec 08             	sub    $0x8,%esp
-8010150f:	6a 01                	push   $0x1
-80101511:	ff 75 08             	pushl  0x8(%ebp)
-80101514:	e8 b7 eb ff ff       	call   801000d0 <bread>
-  memmove(sb, bp->data, sizeof(*sb));
-80101519:	83 c4 0c             	add    $0xc,%esp
-  bp = bread(dev, 1);
-8010151c:	89 c3                	mov    %eax,%ebx
-  memmove(sb, bp->data, sizeof(*sb));
-8010151e:	8d 40 5c             	lea    0x5c(%eax),%eax
-80101521:	6a 1c                	push   $0x1c
-80101523:	50                   	push   %eax
-80101524:	56                   	push   %esi
-80101525:	e8 46 35 00 00       	call   80104a70 <memmove>
-  brelse(bp);
-8010152a:	89 5d 08             	mov    %ebx,0x8(%ebp)
-8010152d:	83 c4 10             	add    $0x10,%esp
-}
-80101530:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80101533:	5b                   	pop    %ebx
-80101534:	5e                   	pop    %esi
-80101535:	5d                   	pop    %ebp
-  brelse(bp);
-80101536:	e9 b5 ec ff ff       	jmp    801001f0 <brelse>
-8010153b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010153f:	90                   	nop
-
-80101540 <iinit>:
-{
-80101540:	f3 0f 1e fb          	endbr32 
-80101544:	55                   	push   %ebp
-80101545:	89 e5                	mov    %esp,%ebp
-80101547:	53                   	push   %ebx
-80101548:	bb 20 0a 11 80       	mov    $0x80110a20,%ebx
-8010154d:	83 ec 0c             	sub    $0xc,%esp
-  initlock(&icache.lock, "icache");
-80101550:	68 4b 76 10 80       	push   $0x8010764b
-80101555:	68 e0 09 11 80       	push   $0x801109e0
-8010155a:	e8 e1 31 00 00       	call   80104740 <initlock>
-  for(i = 0; i < NINODE; i++) {
-8010155f:	83 c4 10             	add    $0x10,%esp
-80101562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    initsleeplock(&icache.inode[i].lock, "inode");
-80101568:	83 ec 08             	sub    $0x8,%esp
-8010156b:	68 52 76 10 80       	push   $0x80107652
-80101570:	53                   	push   %ebx
-80101571:	81 c3 90 00 00 00    	add    $0x90,%ebx
-80101577:	e8 84 30 00 00       	call   80104600 <initsleeplock>
-  for(i = 0; i < NINODE; i++) {
-8010157c:	83 c4 10             	add    $0x10,%esp
-8010157f:	81 fb 40 26 11 80    	cmp    $0x80112640,%ebx
-80101585:	75 e1                	jne    80101568 <iinit+0x28>
-  readsb(dev, &sb);
-80101587:	83 ec 08             	sub    $0x8,%esp
-8010158a:	68 c0 09 11 80       	push   $0x801109c0
-8010158f:	ff 75 08             	pushl  0x8(%ebp)
-80101592:	e8 69 ff ff ff       	call   80101500 <readsb>
-  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
-80101597:	ff 35 d8 09 11 80    	pushl  0x801109d8
-8010159d:	ff 35 d4 09 11 80    	pushl  0x801109d4
-801015a3:	ff 35 d0 09 11 80    	pushl  0x801109d0
-801015a9:	ff 35 cc 09 11 80    	pushl  0x801109cc
-801015af:	ff 35 c8 09 11 80    	pushl  0x801109c8
-801015b5:	ff 35 c4 09 11 80    	pushl  0x801109c4
-801015bb:	ff 35 c0 09 11 80    	pushl  0x801109c0
-801015c1:	68 b8 76 10 80       	push   $0x801076b8
-801015c6:	e8 e5 f0 ff ff       	call   801006b0 <cprintf>
-}
-801015cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801015ce:	83 c4 30             	add    $0x30,%esp
-801015d1:	c9                   	leave  
-801015d2:	c3                   	ret    
-801015d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801015da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801015e0 <ialloc>:
-{
-801015e0:	f3 0f 1e fb          	endbr32 
-801015e4:	55                   	push   %ebp
-801015e5:	89 e5                	mov    %esp,%ebp
-801015e7:	57                   	push   %edi
-801015e8:	56                   	push   %esi
-801015e9:	53                   	push   %ebx
-801015ea:	83 ec 1c             	sub    $0x1c,%esp
-801015ed:	8b 45 0c             	mov    0xc(%ebp),%eax
-  for(inum = 1; inum < sb.ninodes; inum++){
-801015f0:	83 3d c8 09 11 80 01 	cmpl   $0x1,0x801109c8
-{
-801015f7:	8b 75 08             	mov    0x8(%ebp),%esi
-801015fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  for(inum = 1; inum < sb.ninodes; inum++){
-801015fd:	0f 86 8d 00 00 00    	jbe    80101690 <ialloc+0xb0>
-80101603:	bf 01 00 00 00       	mov    $0x1,%edi
-80101608:	eb 1d                	jmp    80101627 <ialloc+0x47>
-8010160a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    brelse(bp);
-80101610:	83 ec 0c             	sub    $0xc,%esp
-  for(inum = 1; inum < sb.ninodes; inum++){
-80101613:	83 c7 01             	add    $0x1,%edi
-    brelse(bp);
-80101616:	53                   	push   %ebx
-80101617:	e8 d4 eb ff ff       	call   801001f0 <brelse>
-  for(inum = 1; inum < sb.ninodes; inum++){
-8010161c:	83 c4 10             	add    $0x10,%esp
-8010161f:	3b 3d c8 09 11 80    	cmp    0x801109c8,%edi
-80101625:	73 69                	jae    80101690 <ialloc+0xb0>
-    bp = bread(dev, IBLOCK(inum, sb));
-80101627:	89 f8                	mov    %edi,%eax
-80101629:	83 ec 08             	sub    $0x8,%esp
-8010162c:	c1 e8 03             	shr    $0x3,%eax
-8010162f:	03 05 d4 09 11 80    	add    0x801109d4,%eax
-80101635:	50                   	push   %eax
-80101636:	56                   	push   %esi
-80101637:	e8 94 ea ff ff       	call   801000d0 <bread>
-    if(dip->type == 0){  // a free inode
-8010163c:	83 c4 10             	add    $0x10,%esp
-    bp = bread(dev, IBLOCK(inum, sb));
-8010163f:	89 c3                	mov    %eax,%ebx
-    dip = (struct dinode*)bp->data + inum%IPB;
-80101641:	89 f8                	mov    %edi,%eax
-80101643:	83 e0 07             	and    $0x7,%eax
-80101646:	c1 e0 06             	shl    $0x6,%eax
-80101649:	8d 4c 03 5c          	lea    0x5c(%ebx,%eax,1),%ecx
-    if(dip->type == 0){  // a free inode
-8010164d:	66 83 39 00          	cmpw   $0x0,(%ecx)
-80101651:	75 bd                	jne    80101610 <ialloc+0x30>
-      memset(dip, 0, sizeof(*dip));
-80101653:	83 ec 04             	sub    $0x4,%esp
-80101656:	89 4d e0             	mov    %ecx,-0x20(%ebp)
-80101659:	6a 40                	push   $0x40
-8010165b:	6a 00                	push   $0x0
-8010165d:	51                   	push   %ecx
-8010165e:	e8 6d 33 00 00       	call   801049d0 <memset>
-      dip->type = type;
-80101663:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-80101667:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-8010166a:	66 89 01             	mov    %ax,(%ecx)
-      log_write(bp);   // mark it allocated on the disk
-8010166d:	89 1c 24             	mov    %ebx,(%esp)
-80101670:	e8 9b 18 00 00       	call   80102f10 <log_write>
-      brelse(bp);
-80101675:	89 1c 24             	mov    %ebx,(%esp)
-80101678:	e8 73 eb ff ff       	call   801001f0 <brelse>
-      return iget(dev, inum);
-8010167d:	83 c4 10             	add    $0x10,%esp
-}
-80101680:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return iget(dev, inum);
-80101683:	89 fa                	mov    %edi,%edx
-}
-80101685:	5b                   	pop    %ebx
-      return iget(dev, inum);
-80101686:	89 f0                	mov    %esi,%eax
-}
-80101688:	5e                   	pop    %esi
-80101689:	5f                   	pop    %edi
-8010168a:	5d                   	pop    %ebp
-      return iget(dev, inum);
-8010168b:	e9 b0 fc ff ff       	jmp    80101340 <iget>
-  panic("ialloc: no inodes");
-80101690:	83 ec 0c             	sub    $0xc,%esp
-80101693:	68 58 76 10 80       	push   $0x80107658
-80101698:	e8 f3 ec ff ff       	call   80100390 <panic>
-8010169d:	8d 76 00             	lea    0x0(%esi),%esi
-
-801016a0 <iupdate>:
-{
-801016a0:	f3 0f 1e fb          	endbr32 
-801016a4:	55                   	push   %ebp
-801016a5:	89 e5                	mov    %esp,%ebp
-801016a7:	56                   	push   %esi
-801016a8:	53                   	push   %ebx
-801016a9:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-801016ac:	8b 43 04             	mov    0x4(%ebx),%eax
-  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-801016af:	83 c3 5c             	add    $0x5c,%ebx
-  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-801016b2:	83 ec 08             	sub    $0x8,%esp
-801016b5:	c1 e8 03             	shr    $0x3,%eax
-801016b8:	03 05 d4 09 11 80    	add    0x801109d4,%eax
-801016be:	50                   	push   %eax
-801016bf:	ff 73 a4             	pushl  -0x5c(%ebx)
-801016c2:	e8 09 ea ff ff       	call   801000d0 <bread>
-  dip->type = ip->type;
-801016c7:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
-  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-801016cb:	83 c4 0c             	add    $0xc,%esp
-  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-801016ce:	89 c6                	mov    %eax,%esi
-  dip = (struct dinode*)bp->data + ip->inum%IPB;
-801016d0:	8b 43 a8             	mov    -0x58(%ebx),%eax
-801016d3:	83 e0 07             	and    $0x7,%eax
-801016d6:	c1 e0 06             	shl    $0x6,%eax
-801016d9:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
-  dip->type = ip->type;
-801016dd:	66 89 10             	mov    %dx,(%eax)
-  dip->major = ip->major;
-801016e0:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
-  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-801016e4:	83 c0 0c             	add    $0xc,%eax
-  dip->major = ip->major;
-801016e7:	66 89 50 f6          	mov    %dx,-0xa(%eax)
-  dip->minor = ip->minor;
-801016eb:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
-801016ef:	66 89 50 f8          	mov    %dx,-0x8(%eax)
-  dip->nlink = ip->nlink;
-801016f3:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
-801016f7:	66 89 50 fa          	mov    %dx,-0x6(%eax)
-  dip->size = ip->size;
-801016fb:	8b 53 fc             	mov    -0x4(%ebx),%edx
-801016fe:	89 50 fc             	mov    %edx,-0x4(%eax)
-  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-80101701:	6a 34                	push   $0x34
-80101703:	53                   	push   %ebx
-80101704:	50                   	push   %eax
-80101705:	e8 66 33 00 00       	call   80104a70 <memmove>
-  log_write(bp);
-8010170a:	89 34 24             	mov    %esi,(%esp)
-8010170d:	e8 fe 17 00 00       	call   80102f10 <log_write>
-  brelse(bp);
-80101712:	89 75 08             	mov    %esi,0x8(%ebp)
-80101715:	83 c4 10             	add    $0x10,%esp
-}
-80101718:	8d 65 f8             	lea    -0x8(%ebp),%esp
-8010171b:	5b                   	pop    %ebx
-8010171c:	5e                   	pop    %esi
-8010171d:	5d                   	pop    %ebp
-  brelse(bp);
-8010171e:	e9 cd ea ff ff       	jmp    801001f0 <brelse>
-80101723:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010172a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80101730 <idup>:
-{
-80101730:	f3 0f 1e fb          	endbr32 
-80101734:	55                   	push   %ebp
-80101735:	89 e5                	mov    %esp,%ebp
-80101737:	53                   	push   %ebx
-80101738:	83 ec 10             	sub    $0x10,%esp
-8010173b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  acquire(&icache.lock);
-8010173e:	68 e0 09 11 80       	push   $0x801109e0
-80101743:	e8 78 31 00 00       	call   801048c0 <acquire>
-  ip->ref++;
-80101748:	83 43 08 01          	addl   $0x1,0x8(%ebx)
-  release(&icache.lock);
-8010174c:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101753:	e8 28 32 00 00       	call   80104980 <release>
-}
-80101758:	89 d8                	mov    %ebx,%eax
-8010175a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010175d:	c9                   	leave  
-8010175e:	c3                   	ret    
-8010175f:	90                   	nop
-
-80101760 <ilock>:
-{
-80101760:	f3 0f 1e fb          	endbr32 
-80101764:	55                   	push   %ebp
-80101765:	89 e5                	mov    %esp,%ebp
-80101767:	56                   	push   %esi
-80101768:	53                   	push   %ebx
-80101769:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(ip == 0 || ip->ref < 1)
-8010176c:	85 db                	test   %ebx,%ebx
-8010176e:	0f 84 b3 00 00 00    	je     80101827 <ilock+0xc7>
-80101774:	8b 53 08             	mov    0x8(%ebx),%edx
-80101777:	85 d2                	test   %edx,%edx
-80101779:	0f 8e a8 00 00 00    	jle    80101827 <ilock+0xc7>
-  acquiresleep(&ip->lock);
-8010177f:	83 ec 0c             	sub    $0xc,%esp
-80101782:	8d 43 0c             	lea    0xc(%ebx),%eax
-80101785:	50                   	push   %eax
-80101786:	e8 b5 2e 00 00       	call   80104640 <acquiresleep>
-  if(ip->valid == 0){
-8010178b:	8b 43 4c             	mov    0x4c(%ebx),%eax
-8010178e:	83 c4 10             	add    $0x10,%esp
-80101791:	85 c0                	test   %eax,%eax
-80101793:	74 0b                	je     801017a0 <ilock+0x40>
-}
-80101795:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80101798:	5b                   	pop    %ebx
-80101799:	5e                   	pop    %esi
-8010179a:	5d                   	pop    %ebp
-8010179b:	c3                   	ret    
-8010179c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-801017a0:	8b 43 04             	mov    0x4(%ebx),%eax
-801017a3:	83 ec 08             	sub    $0x8,%esp
-801017a6:	c1 e8 03             	shr    $0x3,%eax
-801017a9:	03 05 d4 09 11 80    	add    0x801109d4,%eax
-801017af:	50                   	push   %eax
-801017b0:	ff 33                	pushl  (%ebx)
-801017b2:	e8 19 e9 ff ff       	call   801000d0 <bread>
-    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
-801017b7:	83 c4 0c             	add    $0xc,%esp
-    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-801017ba:	89 c6                	mov    %eax,%esi
-    dip = (struct dinode*)bp->data + ip->inum%IPB;
-801017bc:	8b 43 04             	mov    0x4(%ebx),%eax
-801017bf:	83 e0 07             	and    $0x7,%eax
-801017c2:	c1 e0 06             	shl    $0x6,%eax
-801017c5:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
-    ip->type = dip->type;
-801017c9:	0f b7 10             	movzwl (%eax),%edx
-    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
-801017cc:	83 c0 0c             	add    $0xc,%eax
-    ip->type = dip->type;
-801017cf:	66 89 53 50          	mov    %dx,0x50(%ebx)
-    ip->major = dip->major;
-801017d3:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
-801017d7:	66 89 53 52          	mov    %dx,0x52(%ebx)
-    ip->minor = dip->minor;
-801017db:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
-801017df:	66 89 53 54          	mov    %dx,0x54(%ebx)
-    ip->nlink = dip->nlink;
-801017e3:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
-801017e7:	66 89 53 56          	mov    %dx,0x56(%ebx)
-    ip->size = dip->size;
-801017eb:	8b 50 fc             	mov    -0x4(%eax),%edx
-801017ee:	89 53 58             	mov    %edx,0x58(%ebx)
-    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
-801017f1:	6a 34                	push   $0x34
-801017f3:	50                   	push   %eax
-801017f4:	8d 43 5c             	lea    0x5c(%ebx),%eax
-801017f7:	50                   	push   %eax
-801017f8:	e8 73 32 00 00       	call   80104a70 <memmove>
-    brelse(bp);
-801017fd:	89 34 24             	mov    %esi,(%esp)
-80101800:	e8 eb e9 ff ff       	call   801001f0 <brelse>
-    if(ip->type == 0)
-80101805:	83 c4 10             	add    $0x10,%esp
-80101808:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
-    ip->valid = 1;
-8010180d:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
-    if(ip->type == 0)
-80101814:	0f 85 7b ff ff ff    	jne    80101795 <ilock+0x35>
-      panic("ilock: no type");
-8010181a:	83 ec 0c             	sub    $0xc,%esp
-8010181d:	68 70 76 10 80       	push   $0x80107670
-80101822:	e8 69 eb ff ff       	call   80100390 <panic>
-    panic("ilock");
-80101827:	83 ec 0c             	sub    $0xc,%esp
-8010182a:	68 6a 76 10 80       	push   $0x8010766a
-8010182f:	e8 5c eb ff ff       	call   80100390 <panic>
-80101834:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010183b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010183f:	90                   	nop
-
-80101840 <iunlock>:
-{
-80101840:	f3 0f 1e fb          	endbr32 
-80101844:	55                   	push   %ebp
-80101845:	89 e5                	mov    %esp,%ebp
-80101847:	56                   	push   %esi
-80101848:	53                   	push   %ebx
-80101849:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
-8010184c:	85 db                	test   %ebx,%ebx
-8010184e:	74 28                	je     80101878 <iunlock+0x38>
-80101850:	83 ec 0c             	sub    $0xc,%esp
-80101853:	8d 73 0c             	lea    0xc(%ebx),%esi
-80101856:	56                   	push   %esi
-80101857:	e8 84 2e 00 00       	call   801046e0 <holdingsleep>
-8010185c:	83 c4 10             	add    $0x10,%esp
-8010185f:	85 c0                	test   %eax,%eax
-80101861:	74 15                	je     80101878 <iunlock+0x38>
-80101863:	8b 43 08             	mov    0x8(%ebx),%eax
-80101866:	85 c0                	test   %eax,%eax
-80101868:	7e 0e                	jle    80101878 <iunlock+0x38>
-  releasesleep(&ip->lock);
-8010186a:	89 75 08             	mov    %esi,0x8(%ebp)
-}
-8010186d:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80101870:	5b                   	pop    %ebx
-80101871:	5e                   	pop    %esi
-80101872:	5d                   	pop    %ebp
-  releasesleep(&ip->lock);
-80101873:	e9 28 2e 00 00       	jmp    801046a0 <releasesleep>
-    panic("iunlock");
-80101878:	83 ec 0c             	sub    $0xc,%esp
-8010187b:	68 7f 76 10 80       	push   $0x8010767f
-80101880:	e8 0b eb ff ff       	call   80100390 <panic>
-80101885:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010188c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80101890 <iput>:
-{
-80101890:	f3 0f 1e fb          	endbr32 
-80101894:	55                   	push   %ebp
-80101895:	89 e5                	mov    %esp,%ebp
-80101897:	57                   	push   %edi
-80101898:	56                   	push   %esi
-80101899:	53                   	push   %ebx
-8010189a:	83 ec 28             	sub    $0x28,%esp
-8010189d:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  acquiresleep(&ip->lock);
-801018a0:	8d 7b 0c             	lea    0xc(%ebx),%edi
-801018a3:	57                   	push   %edi
-801018a4:	e8 97 2d 00 00       	call   80104640 <acquiresleep>
-  if(ip->valid && ip->nlink == 0){
-801018a9:	8b 53 4c             	mov    0x4c(%ebx),%edx
-801018ac:	83 c4 10             	add    $0x10,%esp
-801018af:	85 d2                	test   %edx,%edx
-801018b1:	74 07                	je     801018ba <iput+0x2a>
-801018b3:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-801018b8:	74 36                	je     801018f0 <iput+0x60>
-  releasesleep(&ip->lock);
-801018ba:	83 ec 0c             	sub    $0xc,%esp
-801018bd:	57                   	push   %edi
-801018be:	e8 dd 2d 00 00       	call   801046a0 <releasesleep>
-  acquire(&icache.lock);
-801018c3:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-801018ca:	e8 f1 2f 00 00       	call   801048c0 <acquire>
-  ip->ref--;
-801018cf:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
-  release(&icache.lock);
-801018d3:	83 c4 10             	add    $0x10,%esp
-801018d6:	c7 45 08 e0 09 11 80 	movl   $0x801109e0,0x8(%ebp)
-}
-801018dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801018e0:	5b                   	pop    %ebx
-801018e1:	5e                   	pop    %esi
-801018e2:	5f                   	pop    %edi
-801018e3:	5d                   	pop    %ebp
-  release(&icache.lock);
-801018e4:	e9 97 30 00 00       	jmp    80104980 <release>
-801018e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    acquire(&icache.lock);
-801018f0:	83 ec 0c             	sub    $0xc,%esp
-801018f3:	68 e0 09 11 80       	push   $0x801109e0
-801018f8:	e8 c3 2f 00 00       	call   801048c0 <acquire>
-    int r = ip->ref;
-801018fd:	8b 73 08             	mov    0x8(%ebx),%esi
-    release(&icache.lock);
-80101900:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101907:	e8 74 30 00 00       	call   80104980 <release>
-    if(r == 1){
-8010190c:	83 c4 10             	add    $0x10,%esp
-8010190f:	83 fe 01             	cmp    $0x1,%esi
-80101912:	75 a6                	jne    801018ba <iput+0x2a>
-80101914:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
-8010191a:	89 7d e4             	mov    %edi,-0x1c(%ebp)
-8010191d:	8d 73 5c             	lea    0x5c(%ebx),%esi
-80101920:	89 cf                	mov    %ecx,%edi
-80101922:	eb 0b                	jmp    8010192f <iput+0x9f>
-80101924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-{
-  int i, j;
-  struct buf *bp;
-  uint *a;
-
-  for(i = 0; i < NDIRECT; i++){
-80101928:	83 c6 04             	add    $0x4,%esi
-8010192b:	39 fe                	cmp    %edi,%esi
-8010192d:	74 19                	je     80101948 <iput+0xb8>
-    if(ip->addrs[i]){
-8010192f:	8b 16                	mov    (%esi),%edx
-80101931:	85 d2                	test   %edx,%edx
-80101933:	74 f3                	je     80101928 <iput+0x98>
-      bfree(ip->dev, ip->addrs[i]);
-80101935:	8b 03                	mov    (%ebx),%eax
-80101937:	e8 74 f8 ff ff       	call   801011b0 <bfree>
-      ip->addrs[i] = 0;
-8010193c:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
-80101942:	eb e4                	jmp    80101928 <iput+0x98>
-80101944:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    }
-  }
-
-  if(ip->addrs[NDIRECT]){
-80101948:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
-8010194e:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-80101951:	85 c0                	test   %eax,%eax
-80101953:	75 33                	jne    80101988 <iput+0xf8>
-    bfree(ip->dev, ip->addrs[NDIRECT]);
-    ip->addrs[NDIRECT] = 0;
-  }
-
-  ip->size = 0;
-  iupdate(ip);
-80101955:	83 ec 0c             	sub    $0xc,%esp
-  ip->size = 0;
-80101958:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
-  iupdate(ip);
-8010195f:	53                   	push   %ebx
-80101960:	e8 3b fd ff ff       	call   801016a0 <iupdate>
-      ip->type = 0;
-80101965:	31 c0                	xor    %eax,%eax
-80101967:	66 89 43 50          	mov    %ax,0x50(%ebx)
-      iupdate(ip);
-8010196b:	89 1c 24             	mov    %ebx,(%esp)
-8010196e:	e8 2d fd ff ff       	call   801016a0 <iupdate>
-      ip->valid = 0;
-80101973:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
-8010197a:	83 c4 10             	add    $0x10,%esp
-8010197d:	e9 38 ff ff ff       	jmp    801018ba <iput+0x2a>
-80101982:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    bp = bread(ip->dev, ip->addrs[NDIRECT]);
-80101988:	83 ec 08             	sub    $0x8,%esp
-8010198b:	50                   	push   %eax
-8010198c:	ff 33                	pushl  (%ebx)
-8010198e:	e8 3d e7 ff ff       	call   801000d0 <bread>
-80101993:	89 7d e0             	mov    %edi,-0x20(%ebp)
-80101996:	83 c4 10             	add    $0x10,%esp
-80101999:	8d 88 5c 02 00 00    	lea    0x25c(%eax),%ecx
-8010199f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    for(j = 0; j < NINDIRECT; j++){
-801019a2:	8d 70 5c             	lea    0x5c(%eax),%esi
-801019a5:	89 cf                	mov    %ecx,%edi
-801019a7:	eb 0e                	jmp    801019b7 <iput+0x127>
-801019a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801019b0:	83 c6 04             	add    $0x4,%esi
-801019b3:	39 f7                	cmp    %esi,%edi
-801019b5:	74 19                	je     801019d0 <iput+0x140>
-      if(a[j])
-801019b7:	8b 16                	mov    (%esi),%edx
-801019b9:	85 d2                	test   %edx,%edx
-801019bb:	74 f3                	je     801019b0 <iput+0x120>
-        bfree(ip->dev, a[j]);
-801019bd:	8b 03                	mov    (%ebx),%eax
-801019bf:	e8 ec f7 ff ff       	call   801011b0 <bfree>
-801019c4:	eb ea                	jmp    801019b0 <iput+0x120>
-801019c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801019cd:	8d 76 00             	lea    0x0(%esi),%esi
-    brelse(bp);
-801019d0:	83 ec 0c             	sub    $0xc,%esp
-801019d3:	ff 75 e4             	pushl  -0x1c(%ebp)
-801019d6:	8b 7d e0             	mov    -0x20(%ebp),%edi
-801019d9:	e8 12 e8 ff ff       	call   801001f0 <brelse>
-    bfree(ip->dev, ip->addrs[NDIRECT]);
-801019de:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
-801019e4:	8b 03                	mov    (%ebx),%eax
-801019e6:	e8 c5 f7 ff ff       	call   801011b0 <bfree>
-    ip->addrs[NDIRECT] = 0;
-801019eb:	83 c4 10             	add    $0x10,%esp
-801019ee:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
-801019f5:	00 00 00 
-801019f8:	e9 58 ff ff ff       	jmp    80101955 <iput+0xc5>
-801019fd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80101a00 <iunlockput>:
-{
-80101a00:	f3 0f 1e fb          	endbr32 
-80101a04:	55                   	push   %ebp
-80101a05:	89 e5                	mov    %esp,%ebp
-80101a07:	53                   	push   %ebx
-80101a08:	83 ec 10             	sub    $0x10,%esp
-80101a0b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  iunlock(ip);
-80101a0e:	53                   	push   %ebx
-80101a0f:	e8 2c fe ff ff       	call   80101840 <iunlock>
-  iput(ip);
-80101a14:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80101a17:	83 c4 10             	add    $0x10,%esp
-}
-80101a1a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80101a1d:	c9                   	leave  
-  iput(ip);
-80101a1e:	e9 6d fe ff ff       	jmp    80101890 <iput>
-80101a23:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80101a30 <stati>:
-
-// Copy stat information from inode.
-// Caller must hold ip->lock.
-void
-stati(struct inode *ip, struct stat *st)
-{
-80101a30:	f3 0f 1e fb          	endbr32 
-80101a34:	55                   	push   %ebp
-80101a35:	89 e5                	mov    %esp,%ebp
-80101a37:	8b 55 08             	mov    0x8(%ebp),%edx
-80101a3a:	8b 45 0c             	mov    0xc(%ebp),%eax
-  st->dev = ip->dev;
-80101a3d:	8b 0a                	mov    (%edx),%ecx
-80101a3f:	89 48 04             	mov    %ecx,0x4(%eax)
-  st->ino = ip->inum;
-80101a42:	8b 4a 04             	mov    0x4(%edx),%ecx
-80101a45:	89 48 08             	mov    %ecx,0x8(%eax)
-  st->type = ip->type;
-80101a48:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
-80101a4c:	66 89 08             	mov    %cx,(%eax)
-  st->nlink = ip->nlink;
-80101a4f:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
-80101a53:	66 89 48 0c          	mov    %cx,0xc(%eax)
-  st->size = ip->size;
-80101a57:	8b 52 58             	mov    0x58(%edx),%edx
-80101a5a:	89 50 10             	mov    %edx,0x10(%eax)
-}
-80101a5d:	5d                   	pop    %ebp
-80101a5e:	c3                   	ret    
-80101a5f:	90                   	nop
-
-80101a60 <readi>:
-//PAGEBREAK!
-// Read data from inode.
-// Caller must hold ip->lock.
-int
-readi(struct inode *ip, char *dst, uint off, uint n)
-{
-80101a60:	f3 0f 1e fb          	endbr32 
-80101a64:	55                   	push   %ebp
-80101a65:	89 e5                	mov    %esp,%ebp
-80101a67:	57                   	push   %edi
-80101a68:	56                   	push   %esi
-80101a69:	53                   	push   %ebx
-80101a6a:	83 ec 1c             	sub    $0x1c,%esp
-80101a6d:	8b 7d 0c             	mov    0xc(%ebp),%edi
-80101a70:	8b 45 08             	mov    0x8(%ebp),%eax
-80101a73:	8b 75 10             	mov    0x10(%ebp),%esi
-80101a76:	89 7d e0             	mov    %edi,-0x20(%ebp)
-80101a79:	8b 7d 14             	mov    0x14(%ebp),%edi
-  uint tot, m;
-  struct buf *bp;
-
-  if(ip->type == T_DEV){
-80101a7c:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
-{
-80101a81:	89 45 d8             	mov    %eax,-0x28(%ebp)
-80101a84:	89 7d e4             	mov    %edi,-0x1c(%ebp)
-  if(ip->type == T_DEV){
-80101a87:	0f 84 a3 00 00 00    	je     80101b30 <readi+0xd0>
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
-      return -1;
-    return devsw[ip->major].read(ip, dst, n);
-  }
-
-  if(off > ip->size || off + n < off)
-80101a8d:	8b 45 d8             	mov    -0x28(%ebp),%eax
-80101a90:	8b 40 58             	mov    0x58(%eax),%eax
-80101a93:	39 c6                	cmp    %eax,%esi
-80101a95:	0f 87 b6 00 00 00    	ja     80101b51 <readi+0xf1>
-80101a9b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80101a9e:	31 c9                	xor    %ecx,%ecx
-80101aa0:	89 da                	mov    %ebx,%edx
-80101aa2:	01 f2                	add    %esi,%edx
-80101aa4:	0f 92 c1             	setb   %cl
-80101aa7:	89 cf                	mov    %ecx,%edi
-80101aa9:	0f 82 a2 00 00 00    	jb     80101b51 <readi+0xf1>
-    return -1;
-  if(off + n > ip->size)
-    n = ip->size - off;
-80101aaf:	89 c1                	mov    %eax,%ecx
-80101ab1:	29 f1                	sub    %esi,%ecx
-80101ab3:	39 d0                	cmp    %edx,%eax
-80101ab5:	0f 43 cb             	cmovae %ebx,%ecx
-80101ab8:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-
-  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-80101abb:	85 c9                	test   %ecx,%ecx
-80101abd:	74 63                	je     80101b22 <readi+0xc2>
-80101abf:	90                   	nop
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80101ac0:	8b 5d d8             	mov    -0x28(%ebp),%ebx
-80101ac3:	89 f2                	mov    %esi,%edx
-80101ac5:	c1 ea 09             	shr    $0x9,%edx
-80101ac8:	89 d8                	mov    %ebx,%eax
-80101aca:	e8 61 f9 ff ff       	call   80101430 <bmap>
-80101acf:	83 ec 08             	sub    $0x8,%esp
-80101ad2:	50                   	push   %eax
-80101ad3:	ff 33                	pushl  (%ebx)
-80101ad5:	e8 f6 e5 ff ff       	call   801000d0 <bread>
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101ada:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80101add:	b9 00 02 00 00       	mov    $0x200,%ecx
-80101ae2:	83 c4 0c             	add    $0xc,%esp
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80101ae5:	89 c2                	mov    %eax,%edx
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101ae7:	89 f0                	mov    %esi,%eax
-80101ae9:	25 ff 01 00 00       	and    $0x1ff,%eax
-80101aee:	29 fb                	sub    %edi,%ebx
-    memmove(dst, bp->data + off%BSIZE, m);
-80101af0:	89 55 dc             	mov    %edx,-0x24(%ebp)
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101af3:	29 c1                	sub    %eax,%ecx
-    memmove(dst, bp->data + off%BSIZE, m);
-80101af5:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101af9:	39 d9                	cmp    %ebx,%ecx
-80101afb:	0f 46 d9             	cmovbe %ecx,%ebx
-    memmove(dst, bp->data + off%BSIZE, m);
-80101afe:	53                   	push   %ebx
-  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-80101aff:	01 df                	add    %ebx,%edi
-80101b01:	01 de                	add    %ebx,%esi
-    memmove(dst, bp->data + off%BSIZE, m);
-80101b03:	50                   	push   %eax
-80101b04:	ff 75 e0             	pushl  -0x20(%ebp)
-80101b07:	e8 64 2f 00 00       	call   80104a70 <memmove>
-    brelse(bp);
-80101b0c:	8b 55 dc             	mov    -0x24(%ebp),%edx
-80101b0f:	89 14 24             	mov    %edx,(%esp)
-80101b12:	e8 d9 e6 ff ff       	call   801001f0 <brelse>
-  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-80101b17:	01 5d e0             	add    %ebx,-0x20(%ebp)
-80101b1a:	83 c4 10             	add    $0x10,%esp
-80101b1d:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-80101b20:	77 9e                	ja     80101ac0 <readi+0x60>
-  }
-  return n;
-80101b22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-}
-80101b25:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101b28:	5b                   	pop    %ebx
-80101b29:	5e                   	pop    %esi
-80101b2a:	5f                   	pop    %edi
-80101b2b:	5d                   	pop    %ebp
-80101b2c:	c3                   	ret    
-80101b2d:	8d 76 00             	lea    0x0(%esi),%esi
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
-80101b30:	0f bf 40 52          	movswl 0x52(%eax),%eax
-80101b34:	66 83 f8 09          	cmp    $0x9,%ax
-80101b38:	77 17                	ja     80101b51 <readi+0xf1>
-80101b3a:	8b 04 c5 60 09 11 80 	mov    -0x7feef6a0(,%eax,8),%eax
-80101b41:	85 c0                	test   %eax,%eax
-80101b43:	74 0c                	je     80101b51 <readi+0xf1>
-    return devsw[ip->major].read(ip, dst, n);
-80101b45:	89 7d 10             	mov    %edi,0x10(%ebp)
-}
-80101b48:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101b4b:	5b                   	pop    %ebx
-80101b4c:	5e                   	pop    %esi
-80101b4d:	5f                   	pop    %edi
-80101b4e:	5d                   	pop    %ebp
-    return devsw[ip->major].read(ip, dst, n);
-80101b4f:	ff e0                	jmp    *%eax
-      return -1;
-80101b51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80101b56:	eb cd                	jmp    80101b25 <readi+0xc5>
-80101b58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101b5f:	90                   	nop
-
-80101b60 <writei>:
-// PAGEBREAK!
-// Write data to inode.
-// Caller must hold ip->lock.
-int
-writei(struct inode *ip, char *src, uint off, uint n)
-{
-80101b60:	f3 0f 1e fb          	endbr32 
-80101b64:	55                   	push   %ebp
-80101b65:	89 e5                	mov    %esp,%ebp
-80101b67:	57                   	push   %edi
-80101b68:	56                   	push   %esi
-80101b69:	53                   	push   %ebx
-80101b6a:	83 ec 1c             	sub    $0x1c,%esp
-80101b6d:	8b 45 08             	mov    0x8(%ebp),%eax
-80101b70:	8b 75 0c             	mov    0xc(%ebp),%esi
-80101b73:	8b 7d 14             	mov    0x14(%ebp),%edi
-  uint tot, m;
-  struct buf *bp;
-
-  if(ip->type == T_DEV){
-80101b76:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
-{
-80101b7b:	89 75 dc             	mov    %esi,-0x24(%ebp)
-80101b7e:	89 45 d8             	mov    %eax,-0x28(%ebp)
-80101b81:	8b 75 10             	mov    0x10(%ebp),%esi
-80101b84:	89 7d e0             	mov    %edi,-0x20(%ebp)
-  if(ip->type == T_DEV){
-80101b87:	0f 84 b3 00 00 00    	je     80101c40 <writei+0xe0>
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
-      return -1;
-    return devsw[ip->major].write(ip, src, n);
-  }
-
-  if(off > ip->size || off + n < off)
-80101b8d:	8b 45 d8             	mov    -0x28(%ebp),%eax
-80101b90:	39 70 58             	cmp    %esi,0x58(%eax)
-80101b93:	0f 82 e3 00 00 00    	jb     80101c7c <writei+0x11c>
-    return -1;
-  if(off + n > MAXFILE*BSIZE)
-80101b99:	8b 7d e0             	mov    -0x20(%ebp),%edi
-80101b9c:	89 f8                	mov    %edi,%eax
-80101b9e:	01 f0                	add    %esi,%eax
-80101ba0:	0f 82 d6 00 00 00    	jb     80101c7c <writei+0x11c>
-80101ba6:	3d 00 18 01 00       	cmp    $0x11800,%eax
-80101bab:	0f 87 cb 00 00 00    	ja     80101c7c <writei+0x11c>
-    return -1;
-
-  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-80101bb1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-80101bb8:	85 ff                	test   %edi,%edi
-80101bba:	74 75                	je     80101c31 <writei+0xd1>
-80101bbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80101bc0:	8b 7d d8             	mov    -0x28(%ebp),%edi
-80101bc3:	89 f2                	mov    %esi,%edx
-80101bc5:	c1 ea 09             	shr    $0x9,%edx
-80101bc8:	89 f8                	mov    %edi,%eax
-80101bca:	e8 61 f8 ff ff       	call   80101430 <bmap>
-80101bcf:	83 ec 08             	sub    $0x8,%esp
-80101bd2:	50                   	push   %eax
-80101bd3:	ff 37                	pushl  (%edi)
-80101bd5:	e8 f6 e4 ff ff       	call   801000d0 <bread>
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101bda:	b9 00 02 00 00       	mov    $0x200,%ecx
-80101bdf:	8b 5d e0             	mov    -0x20(%ebp),%ebx
-80101be2:	2b 5d e4             	sub    -0x1c(%ebp),%ebx
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80101be5:	89 c7                	mov    %eax,%edi
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101be7:	89 f0                	mov    %esi,%eax
-80101be9:	83 c4 0c             	add    $0xc,%esp
-80101bec:	25 ff 01 00 00       	and    $0x1ff,%eax
-80101bf1:	29 c1                	sub    %eax,%ecx
-    memmove(bp->data + off%BSIZE, src, m);
-80101bf3:	8d 44 07 5c          	lea    0x5c(%edi,%eax,1),%eax
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101bf7:	39 d9                	cmp    %ebx,%ecx
-80101bf9:	0f 46 d9             	cmovbe %ecx,%ebx
-    memmove(bp->data + off%BSIZE, src, m);
-80101bfc:	53                   	push   %ebx
-  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-80101bfd:	01 de                	add    %ebx,%esi
-    memmove(bp->data + off%BSIZE, src, m);
-80101bff:	ff 75 dc             	pushl  -0x24(%ebp)
-80101c02:	50                   	push   %eax
-80101c03:	e8 68 2e 00 00       	call   80104a70 <memmove>
-    log_write(bp);
-80101c08:	89 3c 24             	mov    %edi,(%esp)
-80101c0b:	e8 00 13 00 00       	call   80102f10 <log_write>
-    brelse(bp);
-80101c10:	89 3c 24             	mov    %edi,(%esp)
-80101c13:	e8 d8 e5 ff ff       	call   801001f0 <brelse>
-  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-80101c18:	01 5d e4             	add    %ebx,-0x1c(%ebp)
-80101c1b:	83 c4 10             	add    $0x10,%esp
-80101c1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80101c21:	01 5d dc             	add    %ebx,-0x24(%ebp)
-80101c24:	39 45 e0             	cmp    %eax,-0x20(%ebp)
-80101c27:	77 97                	ja     80101bc0 <writei+0x60>
-  }
-
-  if(n > 0 && off > ip->size){
-80101c29:	8b 45 d8             	mov    -0x28(%ebp),%eax
-80101c2c:	3b 70 58             	cmp    0x58(%eax),%esi
-80101c2f:	77 37                	ja     80101c68 <writei+0x108>
-    ip->size = off;
-    iupdate(ip);
-  }
-  return n;
-80101c31:	8b 45 e0             	mov    -0x20(%ebp),%eax
-}
-80101c34:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101c37:	5b                   	pop    %ebx
-80101c38:	5e                   	pop    %esi
-80101c39:	5f                   	pop    %edi
-80101c3a:	5d                   	pop    %ebp
-80101c3b:	c3                   	ret    
-80101c3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
-80101c40:	0f bf 40 52          	movswl 0x52(%eax),%eax
-80101c44:	66 83 f8 09          	cmp    $0x9,%ax
-80101c48:	77 32                	ja     80101c7c <writei+0x11c>
-80101c4a:	8b 04 c5 64 09 11 80 	mov    -0x7feef69c(,%eax,8),%eax
-80101c51:	85 c0                	test   %eax,%eax
-80101c53:	74 27                	je     80101c7c <writei+0x11c>
-    return devsw[ip->major].write(ip, src, n);
-80101c55:	89 7d 10             	mov    %edi,0x10(%ebp)
-}
-80101c58:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101c5b:	5b                   	pop    %ebx
-80101c5c:	5e                   	pop    %esi
-80101c5d:	5f                   	pop    %edi
-80101c5e:	5d                   	pop    %ebp
-    return devsw[ip->major].write(ip, src, n);
-80101c5f:	ff e0                	jmp    *%eax
-80101c61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    ip->size = off;
-80101c68:	8b 45 d8             	mov    -0x28(%ebp),%eax
-    iupdate(ip);
-80101c6b:	83 ec 0c             	sub    $0xc,%esp
-    ip->size = off;
-80101c6e:	89 70 58             	mov    %esi,0x58(%eax)
-    iupdate(ip);
-80101c71:	50                   	push   %eax
-80101c72:	e8 29 fa ff ff       	call   801016a0 <iupdate>
-80101c77:	83 c4 10             	add    $0x10,%esp
-80101c7a:	eb b5                	jmp    80101c31 <writei+0xd1>
-      return -1;
-80101c7c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80101c81:	eb b1                	jmp    80101c34 <writei+0xd4>
-80101c83:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101c8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80101c90 <namecmp>:
-//PAGEBREAK!
-// Directories
-
-int
-namecmp(const char *s, const char *t)
-{
-80101c90:	f3 0f 1e fb          	endbr32 
-80101c94:	55                   	push   %ebp
-80101c95:	89 e5                	mov    %esp,%ebp
-80101c97:	83 ec 0c             	sub    $0xc,%esp
-  return strncmp(s, t, DIRSIZ);
-80101c9a:	6a 0e                	push   $0xe
-80101c9c:	ff 75 0c             	pushl  0xc(%ebp)
-80101c9f:	ff 75 08             	pushl  0x8(%ebp)
-80101ca2:	e8 39 2e 00 00       	call   80104ae0 <strncmp>
-}
-80101ca7:	c9                   	leave  
-80101ca8:	c3                   	ret    
-80101ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80101cb0 <dirlookup>:
-
-// Look for a directory entry in a directory.
-// If found, set *poff to byte offset of entry.
-struct inode*
-dirlookup(struct inode *dp, char *name, uint *poff)
-{
-80101cb0:	f3 0f 1e fb          	endbr32 
-80101cb4:	55                   	push   %ebp
-80101cb5:	89 e5                	mov    %esp,%ebp
-80101cb7:	57                   	push   %edi
-80101cb8:	56                   	push   %esi
-80101cb9:	53                   	push   %ebx
-80101cba:	83 ec 1c             	sub    $0x1c,%esp
-80101cbd:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  uint off, inum;
-  struct dirent de;
-
-  if(dp->type != T_DIR)
-80101cc0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80101cc5:	0f 85 89 00 00 00    	jne    80101d54 <dirlookup+0xa4>
-    panic("dirlookup not DIR");
-
-  for(off = 0; off < dp->size; off += sizeof(de)){
-80101ccb:	8b 53 58             	mov    0x58(%ebx),%edx
-80101cce:	31 ff                	xor    %edi,%edi
-80101cd0:	8d 75 d8             	lea    -0x28(%ebp),%esi
-80101cd3:	85 d2                	test   %edx,%edx
-80101cd5:	74 42                	je     80101d19 <dirlookup+0x69>
-80101cd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101cde:	66 90                	xchg   %ax,%ax
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80101ce0:	6a 10                	push   $0x10
-80101ce2:	57                   	push   %edi
-80101ce3:	56                   	push   %esi
-80101ce4:	53                   	push   %ebx
-80101ce5:	e8 76 fd ff ff       	call   80101a60 <readi>
-80101cea:	83 c4 10             	add    $0x10,%esp
-80101ced:	83 f8 10             	cmp    $0x10,%eax
-80101cf0:	75 55                	jne    80101d47 <dirlookup+0x97>
-      panic("dirlookup read");
-    if(de.inum == 0)
-80101cf2:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80101cf7:	74 18                	je     80101d11 <dirlookup+0x61>
-  return strncmp(s, t, DIRSIZ);
-80101cf9:	83 ec 04             	sub    $0x4,%esp
-80101cfc:	8d 45 da             	lea    -0x26(%ebp),%eax
-80101cff:	6a 0e                	push   $0xe
-80101d01:	50                   	push   %eax
-80101d02:	ff 75 0c             	pushl  0xc(%ebp)
-80101d05:	e8 d6 2d 00 00       	call   80104ae0 <strncmp>
-      continue;
-    if(namecmp(name, de.name) == 0){
-80101d0a:	83 c4 10             	add    $0x10,%esp
-80101d0d:	85 c0                	test   %eax,%eax
-80101d0f:	74 17                	je     80101d28 <dirlookup+0x78>
-  for(off = 0; off < dp->size; off += sizeof(de)){
-80101d11:	83 c7 10             	add    $0x10,%edi
-80101d14:	3b 7b 58             	cmp    0x58(%ebx),%edi
-80101d17:	72 c7                	jb     80101ce0 <dirlookup+0x30>
-      return iget(dp->dev, inum);
-    }
-  }
-
-  return 0;
-}
-80101d19:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
-80101d1c:	31 c0                	xor    %eax,%eax
-}
-80101d1e:	5b                   	pop    %ebx
-80101d1f:	5e                   	pop    %esi
-80101d20:	5f                   	pop    %edi
-80101d21:	5d                   	pop    %ebp
-80101d22:	c3                   	ret    
-80101d23:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80101d27:	90                   	nop
-      if(poff)
-80101d28:	8b 45 10             	mov    0x10(%ebp),%eax
-80101d2b:	85 c0                	test   %eax,%eax
-80101d2d:	74 05                	je     80101d34 <dirlookup+0x84>
-        *poff = off;
-80101d2f:	8b 45 10             	mov    0x10(%ebp),%eax
-80101d32:	89 38                	mov    %edi,(%eax)
-      inum = de.inum;
-80101d34:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
-      return iget(dp->dev, inum);
-80101d38:	8b 03                	mov    (%ebx),%eax
-80101d3a:	e8 01 f6 ff ff       	call   80101340 <iget>
-}
-80101d3f:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101d42:	5b                   	pop    %ebx
-80101d43:	5e                   	pop    %esi
-80101d44:	5f                   	pop    %edi
-80101d45:	5d                   	pop    %ebp
-80101d46:	c3                   	ret    
-      panic("dirlookup read");
-80101d47:	83 ec 0c             	sub    $0xc,%esp
-80101d4a:	68 99 76 10 80       	push   $0x80107699
-80101d4f:	e8 3c e6 ff ff       	call   80100390 <panic>
-    panic("dirlookup not DIR");
-80101d54:	83 ec 0c             	sub    $0xc,%esp
-80101d57:	68 87 76 10 80       	push   $0x80107687
-80101d5c:	e8 2f e6 ff ff       	call   80100390 <panic>
-80101d61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101d68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101d6f:	90                   	nop
-
-80101d70 <namex>:
-// If parent != 0, return the inode for the parent and copy the final
-// path element into name, which must have room for DIRSIZ bytes.
-// Must be called inside a transaction since it calls iput().
-static struct inode*
-namex(char *path, int nameiparent, char *name)
-{
-80101d70:	55                   	push   %ebp
-80101d71:	89 e5                	mov    %esp,%ebp
-80101d73:	57                   	push   %edi
-80101d74:	56                   	push   %esi
-80101d75:	53                   	push   %ebx
-80101d76:	89 c3                	mov    %eax,%ebx
-80101d78:	83 ec 1c             	sub    $0x1c,%esp
-  struct inode *ip, *next;
-
-  if(*path == '/')
-80101d7b:	80 38 2f             	cmpb   $0x2f,(%eax)
-{
-80101d7e:	89 55 e0             	mov    %edx,-0x20(%ebp)
-80101d81:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-  if(*path == '/')
-80101d84:	0f 84 86 01 00 00    	je     80101f10 <namex+0x1a0>
-    ip = iget(ROOTDEV, ROOTINO);
-  else
-    ip = idup(myproc()->cwd);
-80101d8a:	e8 d1 1b 00 00       	call   80103960 <myproc>
-  acquire(&icache.lock);
-80101d8f:	83 ec 0c             	sub    $0xc,%esp
-80101d92:	89 df                	mov    %ebx,%edi
-    ip = idup(myproc()->cwd);
-80101d94:	8b 70 68             	mov    0x68(%eax),%esi
-  acquire(&icache.lock);
-80101d97:	68 e0 09 11 80       	push   $0x801109e0
-80101d9c:	e8 1f 2b 00 00       	call   801048c0 <acquire>
-  ip->ref++;
-80101da1:	83 46 08 01          	addl   $0x1,0x8(%esi)
-  release(&icache.lock);
-80101da5:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
-80101dac:	e8 cf 2b 00 00       	call   80104980 <release>
-80101db1:	83 c4 10             	add    $0x10,%esp
-80101db4:	eb 0d                	jmp    80101dc3 <namex+0x53>
-80101db6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101dbd:	8d 76 00             	lea    0x0(%esi),%esi
-    path++;
-80101dc0:	83 c7 01             	add    $0x1,%edi
-  while(*path == '/')
-80101dc3:	0f b6 07             	movzbl (%edi),%eax
-80101dc6:	3c 2f                	cmp    $0x2f,%al
-80101dc8:	74 f6                	je     80101dc0 <namex+0x50>
-  if(*path == 0)
-80101dca:	84 c0                	test   %al,%al
-80101dcc:	0f 84 ee 00 00 00    	je     80101ec0 <namex+0x150>
-  while(*path != '/' && *path != 0)
-80101dd2:	0f b6 07             	movzbl (%edi),%eax
-80101dd5:	84 c0                	test   %al,%al
-80101dd7:	0f 84 fb 00 00 00    	je     80101ed8 <namex+0x168>
-80101ddd:	89 fb                	mov    %edi,%ebx
-80101ddf:	3c 2f                	cmp    $0x2f,%al
-80101de1:	0f 84 f1 00 00 00    	je     80101ed8 <namex+0x168>
-80101de7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101dee:	66 90                	xchg   %ax,%ax
-80101df0:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
-    path++;
-80101df4:	83 c3 01             	add    $0x1,%ebx
-  while(*path != '/' && *path != 0)
-80101df7:	3c 2f                	cmp    $0x2f,%al
-80101df9:	74 04                	je     80101dff <namex+0x8f>
-80101dfb:	84 c0                	test   %al,%al
-80101dfd:	75 f1                	jne    80101df0 <namex+0x80>
-  len = path - s;
-80101dff:	89 d8                	mov    %ebx,%eax
-80101e01:	29 f8                	sub    %edi,%eax
-  if(len >= DIRSIZ)
-80101e03:	83 f8 0d             	cmp    $0xd,%eax
-80101e06:	0f 8e 84 00 00 00    	jle    80101e90 <namex+0x120>
-    memmove(name, s, DIRSIZ);
-80101e0c:	83 ec 04             	sub    $0x4,%esp
-80101e0f:	6a 0e                	push   $0xe
-80101e11:	57                   	push   %edi
-    path++;
-80101e12:	89 df                	mov    %ebx,%edi
-    memmove(name, s, DIRSIZ);
-80101e14:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101e17:	e8 54 2c 00 00       	call   80104a70 <memmove>
-80101e1c:	83 c4 10             	add    $0x10,%esp
-  while(*path == '/')
-80101e1f:	80 3b 2f             	cmpb   $0x2f,(%ebx)
-80101e22:	75 0c                	jne    80101e30 <namex+0xc0>
-80101e24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    path++;
-80101e28:	83 c7 01             	add    $0x1,%edi
-  while(*path == '/')
-80101e2b:	80 3f 2f             	cmpb   $0x2f,(%edi)
-80101e2e:	74 f8                	je     80101e28 <namex+0xb8>
-
-  while((path = skipelem(path, name)) != 0){
-    ilock(ip);
-80101e30:	83 ec 0c             	sub    $0xc,%esp
-80101e33:	56                   	push   %esi
-80101e34:	e8 27 f9 ff ff       	call   80101760 <ilock>
-    if(ip->type != T_DIR){
-80101e39:	83 c4 10             	add    $0x10,%esp
-80101e3c:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80101e41:	0f 85 a1 00 00 00    	jne    80101ee8 <namex+0x178>
-      iunlockput(ip);
-      return 0;
-    }
-    if(nameiparent && *path == '\0'){
-80101e47:	8b 55 e0             	mov    -0x20(%ebp),%edx
-80101e4a:	85 d2                	test   %edx,%edx
-80101e4c:	74 09                	je     80101e57 <namex+0xe7>
-80101e4e:	80 3f 00             	cmpb   $0x0,(%edi)
-80101e51:	0f 84 d9 00 00 00    	je     80101f30 <namex+0x1c0>
-      // Stop one level early.
-      iunlock(ip);
-      return ip;
-    }
-    if((next = dirlookup(ip, name, 0)) == 0){
-80101e57:	83 ec 04             	sub    $0x4,%esp
-80101e5a:	6a 00                	push   $0x0
-80101e5c:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101e5f:	56                   	push   %esi
-80101e60:	e8 4b fe ff ff       	call   80101cb0 <dirlookup>
-80101e65:	83 c4 10             	add    $0x10,%esp
-80101e68:	89 c3                	mov    %eax,%ebx
-80101e6a:	85 c0                	test   %eax,%eax
-80101e6c:	74 7a                	je     80101ee8 <namex+0x178>
-  iunlock(ip);
-80101e6e:	83 ec 0c             	sub    $0xc,%esp
-80101e71:	56                   	push   %esi
-80101e72:	e8 c9 f9 ff ff       	call   80101840 <iunlock>
-  iput(ip);
-80101e77:	89 34 24             	mov    %esi,(%esp)
-80101e7a:	89 de                	mov    %ebx,%esi
-80101e7c:	e8 0f fa ff ff       	call   80101890 <iput>
-80101e81:	83 c4 10             	add    $0x10,%esp
-80101e84:	e9 3a ff ff ff       	jmp    80101dc3 <namex+0x53>
-80101e89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101e90:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80101e93:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
-80101e96:	89 4d dc             	mov    %ecx,-0x24(%ebp)
-    memmove(name, s, len);
-80101e99:	83 ec 04             	sub    $0x4,%esp
-80101e9c:	50                   	push   %eax
-80101e9d:	57                   	push   %edi
-    name[len] = 0;
-80101e9e:	89 df                	mov    %ebx,%edi
-    memmove(name, s, len);
-80101ea0:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101ea3:	e8 c8 2b 00 00       	call   80104a70 <memmove>
-    name[len] = 0;
-80101ea8:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80101eab:	83 c4 10             	add    $0x10,%esp
-80101eae:	c6 00 00             	movb   $0x0,(%eax)
-80101eb1:	e9 69 ff ff ff       	jmp    80101e1f <namex+0xaf>
-80101eb6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101ebd:	8d 76 00             	lea    0x0(%esi),%esi
-      return 0;
-    }
-    iunlockput(ip);
-    ip = next;
-  }
-  if(nameiparent){
-80101ec0:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80101ec3:	85 c0                	test   %eax,%eax
-80101ec5:	0f 85 85 00 00 00    	jne    80101f50 <namex+0x1e0>
-    iput(ip);
-    return 0;
-  }
-  return ip;
-}
-80101ecb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101ece:	89 f0                	mov    %esi,%eax
-80101ed0:	5b                   	pop    %ebx
-80101ed1:	5e                   	pop    %esi
-80101ed2:	5f                   	pop    %edi
-80101ed3:	5d                   	pop    %ebp
-80101ed4:	c3                   	ret    
-80101ed5:	8d 76 00             	lea    0x0(%esi),%esi
-  while(*path != '/' && *path != 0)
-80101ed8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80101edb:	89 fb                	mov    %edi,%ebx
-80101edd:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80101ee0:	31 c0                	xor    %eax,%eax
-80101ee2:	eb b5                	jmp    80101e99 <namex+0x129>
-80101ee4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  iunlock(ip);
-80101ee8:	83 ec 0c             	sub    $0xc,%esp
-80101eeb:	56                   	push   %esi
-80101eec:	e8 4f f9 ff ff       	call   80101840 <iunlock>
-  iput(ip);
-80101ef1:	89 34 24             	mov    %esi,(%esp)
-      return 0;
-80101ef4:	31 f6                	xor    %esi,%esi
-  iput(ip);
-80101ef6:	e8 95 f9 ff ff       	call   80101890 <iput>
-      return 0;
-80101efb:	83 c4 10             	add    $0x10,%esp
-}
-80101efe:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101f01:	89 f0                	mov    %esi,%eax
-80101f03:	5b                   	pop    %ebx
-80101f04:	5e                   	pop    %esi
-80101f05:	5f                   	pop    %edi
-80101f06:	5d                   	pop    %ebp
-80101f07:	c3                   	ret    
-80101f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101f0f:	90                   	nop
-    ip = iget(ROOTDEV, ROOTINO);
-80101f10:	ba 01 00 00 00       	mov    $0x1,%edx
-80101f15:	b8 01 00 00 00       	mov    $0x1,%eax
-80101f1a:	89 df                	mov    %ebx,%edi
-80101f1c:	e8 1f f4 ff ff       	call   80101340 <iget>
-80101f21:	89 c6                	mov    %eax,%esi
-80101f23:	e9 9b fe ff ff       	jmp    80101dc3 <namex+0x53>
-80101f28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101f2f:	90                   	nop
-      iunlock(ip);
-80101f30:	83 ec 0c             	sub    $0xc,%esp
-80101f33:	56                   	push   %esi
-80101f34:	e8 07 f9 ff ff       	call   80101840 <iunlock>
-      return ip;
-80101f39:	83 c4 10             	add    $0x10,%esp
-}
-80101f3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101f3f:	89 f0                	mov    %esi,%eax
-80101f41:	5b                   	pop    %ebx
-80101f42:	5e                   	pop    %esi
-80101f43:	5f                   	pop    %edi
-80101f44:	5d                   	pop    %ebp
-80101f45:	c3                   	ret    
-80101f46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101f4d:	8d 76 00             	lea    0x0(%esi),%esi
-    iput(ip);
-80101f50:	83 ec 0c             	sub    $0xc,%esp
-80101f53:	56                   	push   %esi
-    return 0;
-80101f54:	31 f6                	xor    %esi,%esi
-    iput(ip);
-80101f56:	e8 35 f9 ff ff       	call   80101890 <iput>
-    return 0;
-80101f5b:	83 c4 10             	add    $0x10,%esp
-80101f5e:	e9 68 ff ff ff       	jmp    80101ecb <namex+0x15b>
-80101f63:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101f6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80101f70 <dirlink>:
-{
-80101f70:	f3 0f 1e fb          	endbr32 
-80101f74:	55                   	push   %ebp
-80101f75:	89 e5                	mov    %esp,%ebp
-80101f77:	57                   	push   %edi
-80101f78:	56                   	push   %esi
-80101f79:	53                   	push   %ebx
-80101f7a:	83 ec 20             	sub    $0x20,%esp
-80101f7d:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if((ip = dirlookup(dp, name, 0)) != 0){
-80101f80:	6a 00                	push   $0x0
-80101f82:	ff 75 0c             	pushl  0xc(%ebp)
-80101f85:	53                   	push   %ebx
-80101f86:	e8 25 fd ff ff       	call   80101cb0 <dirlookup>
-80101f8b:	83 c4 10             	add    $0x10,%esp
-80101f8e:	85 c0                	test   %eax,%eax
-80101f90:	75 6b                	jne    80101ffd <dirlink+0x8d>
-  for(off = 0; off < dp->size; off += sizeof(de)){
-80101f92:	8b 7b 58             	mov    0x58(%ebx),%edi
-80101f95:	8d 75 d8             	lea    -0x28(%ebp),%esi
-80101f98:	85 ff                	test   %edi,%edi
-80101f9a:	74 2d                	je     80101fc9 <dirlink+0x59>
-80101f9c:	31 ff                	xor    %edi,%edi
-80101f9e:	8d 75 d8             	lea    -0x28(%ebp),%esi
-80101fa1:	eb 0d                	jmp    80101fb0 <dirlink+0x40>
-80101fa3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80101fa7:	90                   	nop
-80101fa8:	83 c7 10             	add    $0x10,%edi
-80101fab:	3b 7b 58             	cmp    0x58(%ebx),%edi
-80101fae:	73 19                	jae    80101fc9 <dirlink+0x59>
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80101fb0:	6a 10                	push   $0x10
-80101fb2:	57                   	push   %edi
-80101fb3:	56                   	push   %esi
-80101fb4:	53                   	push   %ebx
-80101fb5:	e8 a6 fa ff ff       	call   80101a60 <readi>
-80101fba:	83 c4 10             	add    $0x10,%esp
-80101fbd:	83 f8 10             	cmp    $0x10,%eax
-80101fc0:	75 4e                	jne    80102010 <dirlink+0xa0>
-    if(de.inum == 0)
-80101fc2:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80101fc7:	75 df                	jne    80101fa8 <dirlink+0x38>
-  strncpy(de.name, name, DIRSIZ);
-80101fc9:	83 ec 04             	sub    $0x4,%esp
-80101fcc:	8d 45 da             	lea    -0x26(%ebp),%eax
-80101fcf:	6a 0e                	push   $0xe
-80101fd1:	ff 75 0c             	pushl  0xc(%ebp)
-80101fd4:	50                   	push   %eax
-80101fd5:	e8 56 2b 00 00       	call   80104b30 <strncpy>
-  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80101fda:	6a 10                	push   $0x10
-  de.inum = inum;
-80101fdc:	8b 45 10             	mov    0x10(%ebp),%eax
-  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80101fdf:	57                   	push   %edi
-80101fe0:	56                   	push   %esi
-80101fe1:	53                   	push   %ebx
-  de.inum = inum;
-80101fe2:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
-  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80101fe6:	e8 75 fb ff ff       	call   80101b60 <writei>
-80101feb:	83 c4 20             	add    $0x20,%esp
-80101fee:	83 f8 10             	cmp    $0x10,%eax
-80101ff1:	75 2a                	jne    8010201d <dirlink+0xad>
-  return 0;
-80101ff3:	31 c0                	xor    %eax,%eax
-}
-80101ff5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101ff8:	5b                   	pop    %ebx
-80101ff9:	5e                   	pop    %esi
-80101ffa:	5f                   	pop    %edi
-80101ffb:	5d                   	pop    %ebp
-80101ffc:	c3                   	ret    
-    iput(ip);
-80101ffd:	83 ec 0c             	sub    $0xc,%esp
-80102000:	50                   	push   %eax
-80102001:	e8 8a f8 ff ff       	call   80101890 <iput>
-    return -1;
-80102006:	83 c4 10             	add    $0x10,%esp
-80102009:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010200e:	eb e5                	jmp    80101ff5 <dirlink+0x85>
-      panic("dirlink read");
-80102010:	83 ec 0c             	sub    $0xc,%esp
-80102013:	68 a8 76 10 80       	push   $0x801076a8
-80102018:	e8 73 e3 ff ff       	call   80100390 <panic>
-    panic("dirlink");
-8010201d:	83 ec 0c             	sub    $0xc,%esp
-80102020:	68 92 7c 10 80       	push   $0x80107c92
-80102025:	e8 66 e3 ff ff       	call   80100390 <panic>
-8010202a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80102030 <namei>:
-
-struct inode*
-namei(char *path)
-{
-80102030:	f3 0f 1e fb          	endbr32 
-80102034:	55                   	push   %ebp
-  char name[DIRSIZ];
-  return namex(path, 0, name);
-80102035:	31 d2                	xor    %edx,%edx
-{
-80102037:	89 e5                	mov    %esp,%ebp
-80102039:	83 ec 18             	sub    $0x18,%esp
-  return namex(path, 0, name);
-8010203c:	8b 45 08             	mov    0x8(%ebp),%eax
-8010203f:	8d 4d ea             	lea    -0x16(%ebp),%ecx
-80102042:	e8 29 fd ff ff       	call   80101d70 <namex>
-}
-80102047:	c9                   	leave  
-80102048:	c3                   	ret    
-80102049:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80102050 <nameiparent>:
-
-struct inode*
-nameiparent(char *path, char *name)
-{
-80102050:	f3 0f 1e fb          	endbr32 
-80102054:	55                   	push   %ebp
-  return namex(path, 1, name);
-80102055:	ba 01 00 00 00       	mov    $0x1,%edx
-{
-8010205a:	89 e5                	mov    %esp,%ebp
-  return namex(path, 1, name);
-8010205c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-8010205f:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-80102062:	5d                   	pop    %ebp
-  return namex(path, 1, name);
-80102063:	e9 08 fd ff ff       	jmp    80101d70 <namex>
-80102068:	66 90                	xchg   %ax,%ax
-8010206a:	66 90                	xchg   %ax,%ax
-8010206c:	66 90                	xchg   %ax,%ax
-8010206e:	66 90                	xchg   %ax,%ax
-
-80102070 <idestart>:
-}
-
-// Start the request for b.  Caller must hold idelock.
-static void
-idestart(struct buf *b)
-{
-80102070:	55                   	push   %ebp
-80102071:	89 e5                	mov    %esp,%ebp
-80102073:	57                   	push   %edi
-80102074:	56                   	push   %esi
-80102075:	53                   	push   %ebx
-80102076:	83 ec 0c             	sub    $0xc,%esp
-  if(b == 0)
-80102079:	85 c0                	test   %eax,%eax
-8010207b:	0f 84 b4 00 00 00    	je     80102135 <idestart+0xc5>
-    panic("idestart");
-  if(b->blockno >= FSSIZE)
-80102081:	8b 70 08             	mov    0x8(%eax),%esi
-80102084:	89 c3                	mov    %eax,%ebx
-80102086:	81 fe e7 03 00 00    	cmp    $0x3e7,%esi
-8010208c:	0f 87 96 00 00 00    	ja     80102128 <idestart+0xb8>
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102092:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
-80102097:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010209e:	66 90                	xchg   %ax,%ax
-801020a0:	89 ca                	mov    %ecx,%edx
-801020a2:	ec                   	in     (%dx),%al
-  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
-801020a3:	83 e0 c0             	and    $0xffffffc0,%eax
-801020a6:	3c 40                	cmp    $0x40,%al
-801020a8:	75 f6                	jne    801020a0 <idestart+0x30>
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801020aa:	31 ff                	xor    %edi,%edi
-801020ac:	ba f6 03 00 00       	mov    $0x3f6,%edx
-801020b1:	89 f8                	mov    %edi,%eax
-801020b3:	ee                   	out    %al,(%dx)
-801020b4:	b8 01 00 00 00       	mov    $0x1,%eax
-801020b9:	ba f2 01 00 00       	mov    $0x1f2,%edx
-801020be:	ee                   	out    %al,(%dx)
-801020bf:	ba f3 01 00 00       	mov    $0x1f3,%edx
-801020c4:	89 f0                	mov    %esi,%eax
-801020c6:	ee                   	out    %al,(%dx)
-
-  idewait(0);
-  outb(0x3f6, 0);  // generate interrupt
-  outb(0x1f2, sector_per_block);  // number of sectors
-  outb(0x1f3, sector & 0xff);
-  outb(0x1f4, (sector >> 8) & 0xff);
-801020c7:	89 f0                	mov    %esi,%eax
-801020c9:	ba f4 01 00 00       	mov    $0x1f4,%edx
-801020ce:	c1 f8 08             	sar    $0x8,%eax
-801020d1:	ee                   	out    %al,(%dx)
-801020d2:	ba f5 01 00 00       	mov    $0x1f5,%edx
-801020d7:	89 f8                	mov    %edi,%eax
-801020d9:	ee                   	out    %al,(%dx)
-  outb(0x1f5, (sector >> 16) & 0xff);
-  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
-801020da:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
-801020de:	ba f6 01 00 00       	mov    $0x1f6,%edx
-801020e3:	c1 e0 04             	shl    $0x4,%eax
-801020e6:	83 e0 10             	and    $0x10,%eax
-801020e9:	83 c8 e0             	or     $0xffffffe0,%eax
-801020ec:	ee                   	out    %al,(%dx)
-  if(b->flags & B_DIRTY){
-801020ed:	f6 03 04             	testb  $0x4,(%ebx)
-801020f0:	75 16                	jne    80102108 <idestart+0x98>
-801020f2:	b8 20 00 00 00       	mov    $0x20,%eax
-801020f7:	89 ca                	mov    %ecx,%edx
-801020f9:	ee                   	out    %al,(%dx)
-    outb(0x1f7, write_cmd);
-    outsl(0x1f0, b->data, BSIZE/4);
-  } else {
-    outb(0x1f7, read_cmd);
-  }
-}
-801020fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801020fd:	5b                   	pop    %ebx
-801020fe:	5e                   	pop    %esi
-801020ff:	5f                   	pop    %edi
-80102100:	5d                   	pop    %ebp
-80102101:	c3                   	ret    
-80102102:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80102108:	b8 30 00 00 00       	mov    $0x30,%eax
-8010210d:	89 ca                	mov    %ecx,%edx
-8010210f:	ee                   	out    %al,(%dx)
-  asm volatile("cld; rep outsl" :
-80102110:	b9 80 00 00 00       	mov    $0x80,%ecx
-    outsl(0x1f0, b->data, BSIZE/4);
-80102115:	8d 73 5c             	lea    0x5c(%ebx),%esi
-80102118:	ba f0 01 00 00       	mov    $0x1f0,%edx
-8010211d:	fc                   	cld    
-8010211e:	f3 6f                	rep outsl %ds:(%esi),(%dx)
-}
-80102120:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102123:	5b                   	pop    %ebx
-80102124:	5e                   	pop    %esi
-80102125:	5f                   	pop    %edi
-80102126:	5d                   	pop    %ebp
-80102127:	c3                   	ret    
-    panic("incorrect blockno");
-80102128:	83 ec 0c             	sub    $0xc,%esp
-8010212b:	68 14 77 10 80       	push   $0x80107714
-80102130:	e8 5b e2 ff ff       	call   80100390 <panic>
-    panic("idestart");
-80102135:	83 ec 0c             	sub    $0xc,%esp
-80102138:	68 0b 77 10 80       	push   $0x8010770b
-8010213d:	e8 4e e2 ff ff       	call   80100390 <panic>
-80102142:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80102150 <ideinit>:
-{
-80102150:	f3 0f 1e fb          	endbr32 
-80102154:	55                   	push   %ebp
-80102155:	89 e5                	mov    %esp,%ebp
-80102157:	83 ec 10             	sub    $0x10,%esp
-  initlock(&idelock, "ide");
-8010215a:	68 26 77 10 80       	push   $0x80107726
-8010215f:	68 80 a5 10 80       	push   $0x8010a580
-80102164:	e8 d7 25 00 00       	call   80104740 <initlock>
-  ioapicenable(IRQ_IDE, ncpu - 1);
-80102169:	58                   	pop    %eax
-8010216a:	a1 00 2d 11 80       	mov    0x80112d00,%eax
-8010216f:	5a                   	pop    %edx
-80102170:	83 e8 01             	sub    $0x1,%eax
-80102173:	50                   	push   %eax
-80102174:	6a 0e                	push   $0xe
-80102176:	e8 b5 02 00 00       	call   80102430 <ioapicenable>
-  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
-8010217b:	83 c4 10             	add    $0x10,%esp
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010217e:	ba f7 01 00 00       	mov    $0x1f7,%edx
-80102183:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102187:	90                   	nop
-80102188:	ec                   	in     (%dx),%al
-80102189:	83 e0 c0             	and    $0xffffffc0,%eax
-8010218c:	3c 40                	cmp    $0x40,%al
-8010218e:	75 f8                	jne    80102188 <ideinit+0x38>
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102190:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
-80102195:	ba f6 01 00 00       	mov    $0x1f6,%edx
-8010219a:	ee                   	out    %al,(%dx)
-8010219b:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801021a0:	ba f7 01 00 00       	mov    $0x1f7,%edx
-801021a5:	eb 0e                	jmp    801021b5 <ideinit+0x65>
-801021a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801021ae:	66 90                	xchg   %ax,%ax
-  for(i=0; i<1000; i++){
-801021b0:	83 e9 01             	sub    $0x1,%ecx
-801021b3:	74 0f                	je     801021c4 <ideinit+0x74>
-801021b5:	ec                   	in     (%dx),%al
-    if(inb(0x1f7) != 0){
-801021b6:	84 c0                	test   %al,%al
-801021b8:	74 f6                	je     801021b0 <ideinit+0x60>
-      havedisk1 = 1;
-801021ba:	c7 05 60 a5 10 80 01 	movl   $0x1,0x8010a560
-801021c1:	00 00 00 
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801021c4:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
-801021c9:	ba f6 01 00 00       	mov    $0x1f6,%edx
-801021ce:	ee                   	out    %al,(%dx)
-}
-801021cf:	c9                   	leave  
-801021d0:	c3                   	ret    
-801021d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801021d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801021df:	90                   	nop
-
-801021e0 <ideintr>:
-
-// Interrupt handler.
-void
-ideintr(void)
-{
-801021e0:	f3 0f 1e fb          	endbr32 
-801021e4:	55                   	push   %ebp
-801021e5:	89 e5                	mov    %esp,%ebp
-801021e7:	57                   	push   %edi
-801021e8:	56                   	push   %esi
-801021e9:	53                   	push   %ebx
-801021ea:	83 ec 18             	sub    $0x18,%esp
-  struct buf *b;
-
-  // First queued buffer is the active request.
-  acquire(&idelock);
-801021ed:	68 80 a5 10 80       	push   $0x8010a580
-801021f2:	e8 c9 26 00 00       	call   801048c0 <acquire>
-
-  if((b = idequeue) == 0){
-801021f7:	8b 1d 64 a5 10 80    	mov    0x8010a564,%ebx
-801021fd:	83 c4 10             	add    $0x10,%esp
-80102200:	85 db                	test   %ebx,%ebx
-80102202:	74 5f                	je     80102263 <ideintr+0x83>
-    release(&idelock);
-    return;
-  }
-  idequeue = b->qnext;
-80102204:	8b 43 58             	mov    0x58(%ebx),%eax
-80102207:	a3 64 a5 10 80       	mov    %eax,0x8010a564
-
-  // Read data if needed.
-  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
-8010220c:	8b 33                	mov    (%ebx),%esi
-8010220e:	f7 c6 04 00 00 00    	test   $0x4,%esi
-80102214:	75 2b                	jne    80102241 <ideintr+0x61>
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102216:	ba f7 01 00 00       	mov    $0x1f7,%edx
-8010221b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010221f:	90                   	nop
-80102220:	ec                   	in     (%dx),%al
-  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
-80102221:	89 c1                	mov    %eax,%ecx
-80102223:	83 e1 c0             	and    $0xffffffc0,%ecx
-80102226:	80 f9 40             	cmp    $0x40,%cl
-80102229:	75 f5                	jne    80102220 <ideintr+0x40>
-  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
-8010222b:	a8 21                	test   $0x21,%al
-8010222d:	75 12                	jne    80102241 <ideintr+0x61>
-    insl(0x1f0, b->data, BSIZE/4);
-8010222f:	8d 7b 5c             	lea    0x5c(%ebx),%edi
-  asm volatile("cld; rep insl" :
-80102232:	b9 80 00 00 00       	mov    $0x80,%ecx
-80102237:	ba f0 01 00 00       	mov    $0x1f0,%edx
-8010223c:	fc                   	cld    
-8010223d:	f3 6d                	rep insl (%dx),%es:(%edi)
-8010223f:	8b 33                	mov    (%ebx),%esi
-
-  // Wake process waiting for this buf.
-  b->flags |= B_VALID;
-  b->flags &= ~B_DIRTY;
-80102241:	83 e6 fb             	and    $0xfffffffb,%esi
-  wakeup(b);
-80102244:	83 ec 0c             	sub    $0xc,%esp
-  b->flags &= ~B_DIRTY;
-80102247:	83 ce 02             	or     $0x2,%esi
-8010224a:	89 33                	mov    %esi,(%ebx)
-  wakeup(b);
-8010224c:	53                   	push   %ebx
-8010224d:	e8 8e 1e 00 00       	call   801040e0 <wakeup>
-
-  // Start disk on next buf in queue.
-  if(idequeue != 0)
-80102252:	a1 64 a5 10 80       	mov    0x8010a564,%eax
-80102257:	83 c4 10             	add    $0x10,%esp
-8010225a:	85 c0                	test   %eax,%eax
-8010225c:	74 05                	je     80102263 <ideintr+0x83>
-    idestart(idequeue);
-8010225e:	e8 0d fe ff ff       	call   80102070 <idestart>
-    release(&idelock);
-80102263:	83 ec 0c             	sub    $0xc,%esp
-80102266:	68 80 a5 10 80       	push   $0x8010a580
-8010226b:	e8 10 27 00 00       	call   80104980 <release>
-
-  release(&idelock);
-}
-80102270:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102273:	5b                   	pop    %ebx
-80102274:	5e                   	pop    %esi
-80102275:	5f                   	pop    %edi
-80102276:	5d                   	pop    %ebp
-80102277:	c3                   	ret    
-80102278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010227f:	90                   	nop
-
-80102280 <iderw>:
-// Sync buf with disk.
-// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
-// Else if B_VALID is not set, read buf from disk, set B_VALID.
-void
-iderw(struct buf *b)
-{
-80102280:	f3 0f 1e fb          	endbr32 
-80102284:	55                   	push   %ebp
-80102285:	89 e5                	mov    %esp,%ebp
-80102287:	53                   	push   %ebx
-80102288:	83 ec 10             	sub    $0x10,%esp
-8010228b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  struct buf **pp;
-
-  if(!holdingsleep(&b->lock))
-8010228e:	8d 43 0c             	lea    0xc(%ebx),%eax
-80102291:	50                   	push   %eax
-80102292:	e8 49 24 00 00       	call   801046e0 <holdingsleep>
-80102297:	83 c4 10             	add    $0x10,%esp
-8010229a:	85 c0                	test   %eax,%eax
-8010229c:	0f 84 cf 00 00 00    	je     80102371 <iderw+0xf1>
-    panic("iderw: buf not locked");
-  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
-801022a2:	8b 03                	mov    (%ebx),%eax
-801022a4:	83 e0 06             	and    $0x6,%eax
-801022a7:	83 f8 02             	cmp    $0x2,%eax
-801022aa:	0f 84 b4 00 00 00    	je     80102364 <iderw+0xe4>
-    panic("iderw: nothing to do");
-  if(b->dev != 0 && !havedisk1)
-801022b0:	8b 53 04             	mov    0x4(%ebx),%edx
-801022b3:	85 d2                	test   %edx,%edx
-801022b5:	74 0d                	je     801022c4 <iderw+0x44>
-801022b7:	a1 60 a5 10 80       	mov    0x8010a560,%eax
-801022bc:	85 c0                	test   %eax,%eax
-801022be:	0f 84 93 00 00 00    	je     80102357 <iderw+0xd7>
-    panic("iderw: ide disk 1 not present");
-
-  acquire(&idelock);  //DOC:acquire-lock
-801022c4:	83 ec 0c             	sub    $0xc,%esp
-801022c7:	68 80 a5 10 80       	push   $0x8010a580
-801022cc:	e8 ef 25 00 00       	call   801048c0 <acquire>
-
-  // Append b to idequeue.
-  b->qnext = 0;
-  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-801022d1:	a1 64 a5 10 80       	mov    0x8010a564,%eax
-  b->qnext = 0;
-801022d6:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
-  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-801022dd:	83 c4 10             	add    $0x10,%esp
-801022e0:	85 c0                	test   %eax,%eax
-801022e2:	74 6c                	je     80102350 <iderw+0xd0>
-801022e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801022e8:	89 c2                	mov    %eax,%edx
-801022ea:	8b 40 58             	mov    0x58(%eax),%eax
-801022ed:	85 c0                	test   %eax,%eax
-801022ef:	75 f7                	jne    801022e8 <iderw+0x68>
-801022f1:	83 c2 58             	add    $0x58,%edx
-    ;
-  *pp = b;
-801022f4:	89 1a                	mov    %ebx,(%edx)
-
-  // Start disk if necessary.
-  if(idequeue == b)
-801022f6:	39 1d 64 a5 10 80    	cmp    %ebx,0x8010a564
-801022fc:	74 42                	je     80102340 <iderw+0xc0>
-    idestart(b);
-
-  // Wait for request to finish.
-  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
-801022fe:	8b 03                	mov    (%ebx),%eax
-80102300:	83 e0 06             	and    $0x6,%eax
-80102303:	83 f8 02             	cmp    $0x2,%eax
-80102306:	74 23                	je     8010232b <iderw+0xab>
-80102308:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010230f:	90                   	nop
-    sleep(b, &idelock);
-80102310:	83 ec 08             	sub    $0x8,%esp
-80102313:	68 80 a5 10 80       	push   $0x8010a580
-80102318:	53                   	push   %ebx
-80102319:	e8 02 1c 00 00       	call   80103f20 <sleep>
-  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
-8010231e:	8b 03                	mov    (%ebx),%eax
-80102320:	83 c4 10             	add    $0x10,%esp
-80102323:	83 e0 06             	and    $0x6,%eax
-80102326:	83 f8 02             	cmp    $0x2,%eax
-80102329:	75 e5                	jne    80102310 <iderw+0x90>
-  }
-
-
-  release(&idelock);
-8010232b:	c7 45 08 80 a5 10 80 	movl   $0x8010a580,0x8(%ebp)
-}
-80102332:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102335:	c9                   	leave  
-  release(&idelock);
-80102336:	e9 45 26 00 00       	jmp    80104980 <release>
-8010233b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010233f:	90                   	nop
-    idestart(b);
-80102340:	89 d8                	mov    %ebx,%eax
-80102342:	e8 29 fd ff ff       	call   80102070 <idestart>
-80102347:	eb b5                	jmp    801022fe <iderw+0x7e>
-80102349:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-80102350:	ba 64 a5 10 80       	mov    $0x8010a564,%edx
-80102355:	eb 9d                	jmp    801022f4 <iderw+0x74>
-    panic("iderw: ide disk 1 not present");
-80102357:	83 ec 0c             	sub    $0xc,%esp
-8010235a:	68 55 77 10 80       	push   $0x80107755
-8010235f:	e8 2c e0 ff ff       	call   80100390 <panic>
-    panic("iderw: nothing to do");
-80102364:	83 ec 0c             	sub    $0xc,%esp
-80102367:	68 40 77 10 80       	push   $0x80107740
-8010236c:	e8 1f e0 ff ff       	call   80100390 <panic>
-    panic("iderw: buf not locked");
-80102371:	83 ec 0c             	sub    $0xc,%esp
-80102374:	68 2a 77 10 80       	push   $0x8010772a
-80102379:	e8 12 e0 ff ff       	call   80100390 <panic>
-8010237e:	66 90                	xchg   %ax,%ax
-
-80102380 <ioapicinit>:
-  ioapic->data = data;
-}
-
-void
-ioapicinit(void)
-{
-80102380:	f3 0f 1e fb          	endbr32 
-80102384:	55                   	push   %ebp
-  int i, id, maxintr;
-
-  ioapic = (volatile struct ioapic*)IOAPIC;
-80102385:	c7 05 34 26 11 80 00 	movl   $0xfec00000,0x80112634
-8010238c:	00 c0 fe 
-{
-8010238f:	89 e5                	mov    %esp,%ebp
-80102391:	56                   	push   %esi
-80102392:	53                   	push   %ebx
-  ioapic->reg = reg;
-80102393:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
-8010239a:	00 00 00 
-  return ioapic->data;
-8010239d:	8b 15 34 26 11 80    	mov    0x80112634,%edx
-801023a3:	8b 72 10             	mov    0x10(%edx),%esi
-  ioapic->reg = reg;
-801023a6:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
-  return ioapic->data;
-801023ac:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
-  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
-  id = ioapicread(REG_ID) >> 24;
-  if(id != ioapicid)
-801023b2:	0f b6 15 60 27 11 80 	movzbl 0x80112760,%edx
-  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
-801023b9:	c1 ee 10             	shr    $0x10,%esi
-801023bc:	89 f0                	mov    %esi,%eax
-801023be:	0f b6 f0             	movzbl %al,%esi
-  return ioapic->data;
-801023c1:	8b 41 10             	mov    0x10(%ecx),%eax
-  id = ioapicread(REG_ID) >> 24;
-801023c4:	c1 e8 18             	shr    $0x18,%eax
-  if(id != ioapicid)
-801023c7:	39 c2                	cmp    %eax,%edx
-801023c9:	74 16                	je     801023e1 <ioapicinit+0x61>
-    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
-801023cb:	83 ec 0c             	sub    $0xc,%esp
-801023ce:	68 74 77 10 80       	push   $0x80107774
-801023d3:	e8 d8 e2 ff ff       	call   801006b0 <cprintf>
-801023d8:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
-801023de:	83 c4 10             	add    $0x10,%esp
-801023e1:	83 c6 21             	add    $0x21,%esi
-{
-801023e4:	ba 10 00 00 00       	mov    $0x10,%edx
-801023e9:	b8 20 00 00 00       	mov    $0x20,%eax
-801023ee:	66 90                	xchg   %ax,%ax
-  ioapic->reg = reg;
-801023f0:	89 11                	mov    %edx,(%ecx)
-
-  // Mark all interrupts edge-triggered, active high, disabled,
-  // and not routed to any CPUs.
-  for(i = 0; i <= maxintr; i++){
-    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
-801023f2:	89 c3                	mov    %eax,%ebx
-  ioapic->data = data;
-801023f4:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
-801023fa:	83 c0 01             	add    $0x1,%eax
-    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
-801023fd:	81 cb 00 00 01 00    	or     $0x10000,%ebx
-  ioapic->data = data;
-80102403:	89 59 10             	mov    %ebx,0x10(%ecx)
-  ioapic->reg = reg;
-80102406:	8d 5a 01             	lea    0x1(%edx),%ebx
-80102409:	83 c2 02             	add    $0x2,%edx
-8010240c:	89 19                	mov    %ebx,(%ecx)
-  ioapic->data = data;
-8010240e:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
-80102414:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
-  for(i = 0; i <= maxintr; i++){
-8010241b:	39 f0                	cmp    %esi,%eax
-8010241d:	75 d1                	jne    801023f0 <ioapicinit+0x70>
-    ioapicwrite(REG_TABLE+2*i+1, 0);
-  }
-}
-8010241f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80102422:	5b                   	pop    %ebx
-80102423:	5e                   	pop    %esi
-80102424:	5d                   	pop    %ebp
-80102425:	c3                   	ret    
-80102426:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010242d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80102430 <ioapicenable>:
-
-void
-ioapicenable(int irq, int cpunum)
-{
-80102430:	f3 0f 1e fb          	endbr32 
-80102434:	55                   	push   %ebp
-  ioapic->reg = reg;
-80102435:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
-{
-8010243b:	89 e5                	mov    %esp,%ebp
-8010243d:	8b 45 08             	mov    0x8(%ebp),%eax
-  // Mark interrupt edge-triggered, active high,
-  // enabled, and routed to the given cpunum,
-  // which happens to be that cpu's APIC ID.
-  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
-80102440:	8d 50 20             	lea    0x20(%eax),%edx
-80102443:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
-  ioapic->reg = reg;
-80102447:	89 01                	mov    %eax,(%ecx)
-  ioapic->data = data;
-80102449:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
-  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
-8010244f:	83 c0 01             	add    $0x1,%eax
-  ioapic->data = data;
-80102452:	89 51 10             	mov    %edx,0x10(%ecx)
-  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
-80102455:	8b 55 0c             	mov    0xc(%ebp),%edx
-  ioapic->reg = reg;
-80102458:	89 01                	mov    %eax,(%ecx)
-  ioapic->data = data;
-8010245a:	a1 34 26 11 80       	mov    0x80112634,%eax
-  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
-8010245f:	c1 e2 18             	shl    $0x18,%edx
-  ioapic->data = data;
-80102462:	89 50 10             	mov    %edx,0x10(%eax)
-}
-80102465:	5d                   	pop    %ebp
-80102466:	c3                   	ret    
-80102467:	66 90                	xchg   %ax,%ax
-80102469:	66 90                	xchg   %ax,%ax
-8010246b:	66 90                	xchg   %ax,%ax
-8010246d:	66 90                	xchg   %ax,%ax
-8010246f:	90                   	nop
-
-80102470 <kfree>:
-// which normally should have been returned by a
-// call to kalloc().  (The exception is when
-// initializing the allocator; see kinit above.)
-void
-kfree(char *v)
-{
-80102470:	f3 0f 1e fb          	endbr32 
-80102474:	55                   	push   %ebp
-80102475:	89 e5                	mov    %esp,%ebp
-80102477:	53                   	push   %ebx
-80102478:	83 ec 04             	sub    $0x4,%esp
-8010247b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  struct run *r;
-
-  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
-8010247e:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
-80102484:	75 7a                	jne    80102500 <kfree+0x90>
-80102486:	81 fb a8 55 11 80    	cmp    $0x801155a8,%ebx
-8010248c:	72 72                	jb     80102500 <kfree+0x90>
-8010248e:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80102494:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
-80102499:	77 65                	ja     80102500 <kfree+0x90>
-    panic("kfree");
-
-  // Fill with junk to catch dangling refs.
-  memset(v, 1, PGSIZE);
-8010249b:	83 ec 04             	sub    $0x4,%esp
-8010249e:	68 00 10 00 00       	push   $0x1000
-801024a3:	6a 01                	push   $0x1
-801024a5:	53                   	push   %ebx
-801024a6:	e8 25 25 00 00       	call   801049d0 <memset>
-
-  if(kmem.use_lock)
-801024ab:	8b 15 74 26 11 80    	mov    0x80112674,%edx
-801024b1:	83 c4 10             	add    $0x10,%esp
-801024b4:	85 d2                	test   %edx,%edx
-801024b6:	75 20                	jne    801024d8 <kfree+0x68>
-    acquire(&kmem.lock);
-  r = (struct run*)v;
-  r->next = kmem.freelist;
-801024b8:	a1 78 26 11 80       	mov    0x80112678,%eax
-801024bd:	89 03                	mov    %eax,(%ebx)
-  kmem.freelist = r;
-  if(kmem.use_lock)
-801024bf:	a1 74 26 11 80       	mov    0x80112674,%eax
-  kmem.freelist = r;
-801024c4:	89 1d 78 26 11 80    	mov    %ebx,0x80112678
-  if(kmem.use_lock)
-801024ca:	85 c0                	test   %eax,%eax
-801024cc:	75 22                	jne    801024f0 <kfree+0x80>
-    release(&kmem.lock);
-}
-801024ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801024d1:	c9                   	leave  
-801024d2:	c3                   	ret    
-801024d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801024d7:	90                   	nop
-    acquire(&kmem.lock);
-801024d8:	83 ec 0c             	sub    $0xc,%esp
-801024db:	68 40 26 11 80       	push   $0x80112640
-801024e0:	e8 db 23 00 00       	call   801048c0 <acquire>
-801024e5:	83 c4 10             	add    $0x10,%esp
-801024e8:	eb ce                	jmp    801024b8 <kfree+0x48>
-801024ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    release(&kmem.lock);
-801024f0:	c7 45 08 40 26 11 80 	movl   $0x80112640,0x8(%ebp)
-}
-801024f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801024fa:	c9                   	leave  
-    release(&kmem.lock);
-801024fb:	e9 80 24 00 00       	jmp    80104980 <release>
-    panic("kfree");
-80102500:	83 ec 0c             	sub    $0xc,%esp
-80102503:	68 a6 77 10 80       	push   $0x801077a6
-80102508:	e8 83 de ff ff       	call   80100390 <panic>
-8010250d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80102510 <freerange>:
-{
-80102510:	f3 0f 1e fb          	endbr32 
-80102514:	55                   	push   %ebp
-80102515:	89 e5                	mov    %esp,%ebp
-80102517:	56                   	push   %esi
-  p = (char*)PGROUNDUP((uint)vstart);
-80102518:	8b 45 08             	mov    0x8(%ebp),%eax
-{
-8010251b:	8b 75 0c             	mov    0xc(%ebp),%esi
-8010251e:	53                   	push   %ebx
-  p = (char*)PGROUNDUP((uint)vstart);
-8010251f:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80102525:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010252b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80102531:	39 de                	cmp    %ebx,%esi
-80102533:	72 1f                	jb     80102554 <freerange+0x44>
-80102535:	8d 76 00             	lea    0x0(%esi),%esi
-    kfree(p);
-80102538:	83 ec 0c             	sub    $0xc,%esp
-8010253b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102541:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-    kfree(p);
-80102547:	50                   	push   %eax
-80102548:	e8 23 ff ff ff       	call   80102470 <kfree>
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010254d:	83 c4 10             	add    $0x10,%esp
-80102550:	39 f3                	cmp    %esi,%ebx
-80102552:	76 e4                	jbe    80102538 <freerange+0x28>
-}
-80102554:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80102557:	5b                   	pop    %ebx
-80102558:	5e                   	pop    %esi
-80102559:	5d                   	pop    %ebp
-8010255a:	c3                   	ret    
-8010255b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010255f:	90                   	nop
-
-80102560 <kinit1>:
-{
-80102560:	f3 0f 1e fb          	endbr32 
-80102564:	55                   	push   %ebp
-80102565:	89 e5                	mov    %esp,%ebp
-80102567:	56                   	push   %esi
-80102568:	53                   	push   %ebx
-80102569:	8b 75 0c             	mov    0xc(%ebp),%esi
-  initlock(&kmem.lock, "kmem");
-8010256c:	83 ec 08             	sub    $0x8,%esp
-8010256f:	68 ac 77 10 80       	push   $0x801077ac
-80102574:	68 40 26 11 80       	push   $0x80112640
-80102579:	e8 c2 21 00 00       	call   80104740 <initlock>
-  p = (char*)PGROUNDUP((uint)vstart);
-8010257e:	8b 45 08             	mov    0x8(%ebp),%eax
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102581:	83 c4 10             	add    $0x10,%esp
-  kmem.use_lock = 0;
-80102584:	c7 05 74 26 11 80 00 	movl   $0x0,0x80112674
-8010258b:	00 00 00 
-  p = (char*)PGROUNDUP((uint)vstart);
-8010258e:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80102594:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010259a:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-801025a0:	39 de                	cmp    %ebx,%esi
-801025a2:	72 20                	jb     801025c4 <kinit1+0x64>
-801025a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    kfree(p);
-801025a8:	83 ec 0c             	sub    $0xc,%esp
-801025ab:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-801025b1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-    kfree(p);
-801025b7:	50                   	push   %eax
-801025b8:	e8 b3 fe ff ff       	call   80102470 <kfree>
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-801025bd:	83 c4 10             	add    $0x10,%esp
-801025c0:	39 de                	cmp    %ebx,%esi
-801025c2:	73 e4                	jae    801025a8 <kinit1+0x48>
-}
-801025c4:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801025c7:	5b                   	pop    %ebx
-801025c8:	5e                   	pop    %esi
-801025c9:	5d                   	pop    %ebp
-801025ca:	c3                   	ret    
-801025cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801025cf:	90                   	nop
-
-801025d0 <kinit2>:
-{
-801025d0:	f3 0f 1e fb          	endbr32 
-801025d4:	55                   	push   %ebp
-801025d5:	89 e5                	mov    %esp,%ebp
-801025d7:	56                   	push   %esi
-  p = (char*)PGROUNDUP((uint)vstart);
-801025d8:	8b 45 08             	mov    0x8(%ebp),%eax
-{
-801025db:	8b 75 0c             	mov    0xc(%ebp),%esi
-801025de:	53                   	push   %ebx
-  p = (char*)PGROUNDUP((uint)vstart);
-801025df:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-801025e5:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-801025eb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-801025f1:	39 de                	cmp    %ebx,%esi
-801025f3:	72 1f                	jb     80102614 <kinit2+0x44>
-801025f5:	8d 76 00             	lea    0x0(%esi),%esi
-    kfree(p);
-801025f8:	83 ec 0c             	sub    $0xc,%esp
-801025fb:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102601:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-    kfree(p);
-80102607:	50                   	push   %eax
-80102608:	e8 63 fe ff ff       	call   80102470 <kfree>
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010260d:	83 c4 10             	add    $0x10,%esp
-80102610:	39 de                	cmp    %ebx,%esi
-80102612:	73 e4                	jae    801025f8 <kinit2+0x28>
-  kmem.use_lock = 1;
-80102614:	c7 05 74 26 11 80 01 	movl   $0x1,0x80112674
-8010261b:	00 00 00 
-}
-8010261e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80102621:	5b                   	pop    %ebx
-80102622:	5e                   	pop    %esi
-80102623:	5d                   	pop    %ebp
-80102624:	c3                   	ret    
-80102625:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010262c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80102630 <kalloc>:
-// Allocate one 4096-byte page of physical memory.
-// Returns a pointer that the kernel can use.
-// Returns 0 if the memory cannot be allocated.
-char*
-kalloc(void)
-{
-80102630:	f3 0f 1e fb          	endbr32 
-  struct run *r;
-
-  if(kmem.use_lock)
-80102634:	a1 74 26 11 80       	mov    0x80112674,%eax
-80102639:	85 c0                	test   %eax,%eax
-8010263b:	75 1b                	jne    80102658 <kalloc+0x28>
-    acquire(&kmem.lock);
-  r = kmem.freelist;
-8010263d:	a1 78 26 11 80       	mov    0x80112678,%eax
-  if(r)
-80102642:	85 c0                	test   %eax,%eax
-80102644:	74 0a                	je     80102650 <kalloc+0x20>
-    kmem.freelist = r->next;
-80102646:	8b 10                	mov    (%eax),%edx
-80102648:	89 15 78 26 11 80    	mov    %edx,0x80112678
-  if(kmem.use_lock)
-8010264e:	c3                   	ret    
-8010264f:	90                   	nop
-    release(&kmem.lock);
-  return (char*)r;
-}
-80102650:	c3                   	ret    
-80102651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-{
-80102658:	55                   	push   %ebp
-80102659:	89 e5                	mov    %esp,%ebp
-8010265b:	83 ec 24             	sub    $0x24,%esp
-    acquire(&kmem.lock);
-8010265e:	68 40 26 11 80       	push   $0x80112640
-80102663:	e8 58 22 00 00       	call   801048c0 <acquire>
-  r = kmem.freelist;
-80102668:	a1 78 26 11 80       	mov    0x80112678,%eax
-  if(r)
-8010266d:	8b 15 74 26 11 80    	mov    0x80112674,%edx
-80102673:	83 c4 10             	add    $0x10,%esp
-80102676:	85 c0                	test   %eax,%eax
-80102678:	74 08                	je     80102682 <kalloc+0x52>
-    kmem.freelist = r->next;
-8010267a:	8b 08                	mov    (%eax),%ecx
-8010267c:	89 0d 78 26 11 80    	mov    %ecx,0x80112678
-  if(kmem.use_lock)
-80102682:	85 d2                	test   %edx,%edx
-80102684:	74 16                	je     8010269c <kalloc+0x6c>
-    release(&kmem.lock);
-80102686:	83 ec 0c             	sub    $0xc,%esp
-80102689:	89 45 f4             	mov    %eax,-0xc(%ebp)
-8010268c:	68 40 26 11 80       	push   $0x80112640
-80102691:	e8 ea 22 00 00       	call   80104980 <release>
-  return (char*)r;
-80102696:	8b 45 f4             	mov    -0xc(%ebp),%eax
-    release(&kmem.lock);
-80102699:	83 c4 10             	add    $0x10,%esp
-}
-8010269c:	c9                   	leave  
-8010269d:	c3                   	ret    
-8010269e:	66 90                	xchg   %ax,%ax
-
-801026a0 <kbdgetc>:
-#include "defs.h"
-#include "kbd.h"
-
-int
-kbdgetc(void)
-{
-801026a0:	f3 0f 1e fb          	endbr32 
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801026a4:	ba 64 00 00 00       	mov    $0x64,%edx
-801026a9:	ec                   	in     (%dx),%al
-    normalmap, shiftmap, ctlmap, ctlmap
-  };
-  uint st, data, c;
-
-  st = inb(KBSTATP);
-  if((st & KBS_DIB) == 0)
-801026aa:	a8 01                	test   $0x1,%al
-801026ac:	0f 84 be 00 00 00    	je     80102770 <kbdgetc+0xd0>
-{
-801026b2:	55                   	push   %ebp
-801026b3:	ba 60 00 00 00       	mov    $0x60,%edx
-801026b8:	89 e5                	mov    %esp,%ebp
-801026ba:	53                   	push   %ebx
-801026bb:	ec                   	in     (%dx),%al
-  return data;
-801026bc:	8b 1d b4 a5 10 80    	mov    0x8010a5b4,%ebx
-    return -1;
-  data = inb(KBDATAP);
-801026c2:	0f b6 d0             	movzbl %al,%edx
-
-  if(data == 0xE0){
-801026c5:	3c e0                	cmp    $0xe0,%al
-801026c7:	74 57                	je     80102720 <kbdgetc+0x80>
-    shift |= E0ESC;
-    return 0;
-  } else if(data & 0x80){
-801026c9:	89 d9                	mov    %ebx,%ecx
-801026cb:	83 e1 40             	and    $0x40,%ecx
-801026ce:	84 c0                	test   %al,%al
-801026d0:	78 5e                	js     80102730 <kbdgetc+0x90>
-    // Key released
-    data = (shift & E0ESC ? data : data & 0x7F);
-    shift &= ~(shiftcode[data] | E0ESC);
-    return 0;
-  } else if(shift & E0ESC){
-801026d2:	85 c9                	test   %ecx,%ecx
-801026d4:	74 09                	je     801026df <kbdgetc+0x3f>
-    // Last character was an E0 escape; or with 0x80
-    data |= 0x80;
-801026d6:	83 c8 80             	or     $0xffffff80,%eax
-    shift &= ~E0ESC;
-801026d9:	83 e3 bf             	and    $0xffffffbf,%ebx
-    data |= 0x80;
-801026dc:	0f b6 d0             	movzbl %al,%edx
-  }
-
-  shift |= shiftcode[data];
-801026df:	0f b6 8a e0 78 10 80 	movzbl -0x7fef8720(%edx),%ecx
-  shift ^= togglecode[data];
-801026e6:	0f b6 82 e0 77 10 80 	movzbl -0x7fef8820(%edx),%eax
-  shift |= shiftcode[data];
-801026ed:	09 d9                	or     %ebx,%ecx
-  shift ^= togglecode[data];
-801026ef:	31 c1                	xor    %eax,%ecx
-  c = charcode[shift & (CTL | SHIFT)][data];
-801026f1:	89 c8                	mov    %ecx,%eax
-  shift ^= togglecode[data];
-801026f3:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
-  c = charcode[shift & (CTL | SHIFT)][data];
-801026f9:	83 e0 03             	and    $0x3,%eax
-  if(shift & CAPSLOCK){
-801026fc:	83 e1 08             	and    $0x8,%ecx
-  c = charcode[shift & (CTL | SHIFT)][data];
-801026ff:	8b 04 85 c0 77 10 80 	mov    -0x7fef8840(,%eax,4),%eax
-80102706:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
-  if(shift & CAPSLOCK){
-8010270a:	74 0b                	je     80102717 <kbdgetc+0x77>
-    if('a' <= c && c <= 'z')
-8010270c:	8d 50 9f             	lea    -0x61(%eax),%edx
-8010270f:	83 fa 19             	cmp    $0x19,%edx
-80102712:	77 44                	ja     80102758 <kbdgetc+0xb8>
-      c += 'A' - 'a';
-80102714:	83 e8 20             	sub    $0x20,%eax
-    else if('A' <= c && c <= 'Z')
-      c += 'a' - 'A';
-  }
-  return c;
-}
-80102717:	5b                   	pop    %ebx
-80102718:	5d                   	pop    %ebp
-80102719:	c3                   	ret    
-8010271a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    shift |= E0ESC;
-80102720:	83 cb 40             	or     $0x40,%ebx
-    return 0;
-80102723:	31 c0                	xor    %eax,%eax
-    shift |= E0ESC;
-80102725:	89 1d b4 a5 10 80    	mov    %ebx,0x8010a5b4
-}
-8010272b:	5b                   	pop    %ebx
-8010272c:	5d                   	pop    %ebp
-8010272d:	c3                   	ret    
-8010272e:	66 90                	xchg   %ax,%ax
-    data = (shift & E0ESC ? data : data & 0x7F);
-80102730:	83 e0 7f             	and    $0x7f,%eax
-80102733:	85 c9                	test   %ecx,%ecx
-80102735:	0f 44 d0             	cmove  %eax,%edx
-    return 0;
-80102738:	31 c0                	xor    %eax,%eax
-    shift &= ~(shiftcode[data] | E0ESC);
-8010273a:	0f b6 8a e0 78 10 80 	movzbl -0x7fef8720(%edx),%ecx
-80102741:	83 c9 40             	or     $0x40,%ecx
-80102744:	0f b6 c9             	movzbl %cl,%ecx
-80102747:	f7 d1                	not    %ecx
-80102749:	21 d9                	and    %ebx,%ecx
-}
-8010274b:	5b                   	pop    %ebx
-8010274c:	5d                   	pop    %ebp
-    shift &= ~(shiftcode[data] | E0ESC);
-8010274d:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
-}
-80102753:	c3                   	ret    
-80102754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    else if('A' <= c && c <= 'Z')
-80102758:	8d 48 bf             	lea    -0x41(%eax),%ecx
-      c += 'a' - 'A';
-8010275b:	8d 50 20             	lea    0x20(%eax),%edx
-}
-8010275e:	5b                   	pop    %ebx
-8010275f:	5d                   	pop    %ebp
-      c += 'a' - 'A';
-80102760:	83 f9 1a             	cmp    $0x1a,%ecx
-80102763:	0f 42 c2             	cmovb  %edx,%eax
-}
-80102766:	c3                   	ret    
-80102767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010276e:	66 90                	xchg   %ax,%ax
-    return -1;
-80102770:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80102775:	c3                   	ret    
-80102776:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010277d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80102780 <kbdintr>:
-
-void
-kbdintr(void)
-{
-80102780:	f3 0f 1e fb          	endbr32 
-80102784:	55                   	push   %ebp
-80102785:	89 e5                	mov    %esp,%ebp
-80102787:	83 ec 14             	sub    $0x14,%esp
-  consoleintr(kbdgetc);
-8010278a:	68 a0 26 10 80       	push   $0x801026a0
-8010278f:	e8 cc e0 ff ff       	call   80100860 <consoleintr>
-}
-80102794:	83 c4 10             	add    $0x10,%esp
-80102797:	c9                   	leave  
-80102798:	c3                   	ret    
-80102799:	66 90                	xchg   %ax,%ax
-8010279b:	66 90                	xchg   %ax,%ax
-8010279d:	66 90                	xchg   %ax,%ax
-8010279f:	90                   	nop
-
-801027a0 <lapicinit>:
-  lapic[ID];  // wait for write to finish, by reading
-}
-
-void
-lapicinit(void)
-{
-801027a0:	f3 0f 1e fb          	endbr32 
-  if(!lapic)
-801027a4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
-801027a9:	85 c0                	test   %eax,%eax
-801027ab:	0f 84 c7 00 00 00    	je     80102878 <lapicinit+0xd8>
-  lapic[index] = value;
-801027b1:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
-801027b8:	01 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-801027bb:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-801027be:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
-801027c5:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-801027c8:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-801027cb:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
-801027d2:	00 02 00 
-  lapic[ID];  // wait for write to finish, by reading
-801027d5:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-801027d8:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
-801027df:	96 98 00 
-  lapic[ID];  // wait for write to finish, by reading
-801027e2:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-801027e5:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
-801027ec:	00 01 00 
-  lapic[ID];  // wait for write to finish, by reading
-801027ef:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-801027f2:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
-801027f9:	00 01 00 
-  lapic[ID];  // wait for write to finish, by reading
-801027fc:	8b 50 20             	mov    0x20(%eax),%edx
-  lapicw(LINT0, MASKED);
-  lapicw(LINT1, MASKED);
-
-  // Disable performance counter overflow interrupts
-  // on machines that provide that interrupt entry.
-  if(((lapic[VER]>>16) & 0xFF) >= 4)
-801027ff:	8b 50 30             	mov    0x30(%eax),%edx
-80102802:	c1 ea 10             	shr    $0x10,%edx
-80102805:	81 e2 fc 00 00 00    	and    $0xfc,%edx
-8010280b:	75 73                	jne    80102880 <lapicinit+0xe0>
-  lapic[index] = value;
-8010280d:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
-80102814:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-80102817:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-8010281a:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
-80102821:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-80102824:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-80102827:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
-8010282e:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-80102831:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-80102834:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
-8010283b:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-8010283e:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-80102841:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
-80102848:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-8010284b:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-8010284e:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
-80102855:	85 08 00 
-  lapic[ID];  // wait for write to finish, by reading
-80102858:	8b 50 20             	mov    0x20(%eax),%edx
-8010285b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010285f:	90                   	nop
-  lapicw(EOI, 0);
-
-  // Send an Init Level De-Assert to synchronise arbitration ID's.
-  lapicw(ICRHI, 0);
-  lapicw(ICRLO, BCAST | INIT | LEVEL);
-  while(lapic[ICRLO] & DELIVS)
-80102860:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
-80102866:	80 e6 10             	and    $0x10,%dh
-80102869:	75 f5                	jne    80102860 <lapicinit+0xc0>
-  lapic[index] = value;
-8010286b:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
-80102872:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-80102875:	8b 40 20             	mov    0x20(%eax),%eax
-    ;
-
-  // Enable interrupts on the APIC (but not on the processor).
-  lapicw(TPR, 0);
-}
-80102878:	c3                   	ret    
-80102879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  lapic[index] = value;
-80102880:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
-80102887:	00 01 00 
-  lapic[ID];  // wait for write to finish, by reading
-8010288a:	8b 50 20             	mov    0x20(%eax),%edx
-}
-8010288d:	e9 7b ff ff ff       	jmp    8010280d <lapicinit+0x6d>
-80102892:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102899:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-801028a0 <lapicid>:
-
-int
-lapicid(void)
-{
-801028a0:	f3 0f 1e fb          	endbr32 
-  if (!lapic)
-801028a4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
-801028a9:	85 c0                	test   %eax,%eax
-801028ab:	74 0b                	je     801028b8 <lapicid+0x18>
-    return 0;
-  return lapic[ID] >> 24;
-801028ad:	8b 40 20             	mov    0x20(%eax),%eax
-801028b0:	c1 e8 18             	shr    $0x18,%eax
-801028b3:	c3                   	ret    
-801028b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    return 0;
-801028b8:	31 c0                	xor    %eax,%eax
-}
-801028ba:	c3                   	ret    
-801028bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801028bf:	90                   	nop
-
-801028c0 <lapiceoi>:
-
-// Acknowledge interrupt.
-void
-lapiceoi(void)
-{
-801028c0:	f3 0f 1e fb          	endbr32 
-  if(lapic)
-801028c4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
-801028c9:	85 c0                	test   %eax,%eax
-801028cb:	74 0d                	je     801028da <lapiceoi+0x1a>
-  lapic[index] = value;
-801028cd:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
-801028d4:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-801028d7:	8b 40 20             	mov    0x20(%eax),%eax
-    lapicw(EOI, 0);
-}
-801028da:	c3                   	ret    
-801028db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801028df:	90                   	nop
-
-801028e0 <microdelay>:
-
-// Spin for a given number of microseconds.
-// On real hardware would want to tune this dynamically.
-void
-microdelay(int us)
-{
-801028e0:	f3 0f 1e fb          	endbr32 
-}
-801028e4:	c3                   	ret    
-801028e5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801028ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801028f0 <lapicstartap>:
-
-// Start additional processor running entry code at addr.
-// See Appendix B of MultiProcessor Specification.
-void
-lapicstartap(uchar apicid, uint addr)
-{
-801028f0:	f3 0f 1e fb          	endbr32 
-801028f4:	55                   	push   %ebp
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801028f5:	b8 0f 00 00 00       	mov    $0xf,%eax
-801028fa:	ba 70 00 00 00       	mov    $0x70,%edx
-801028ff:	89 e5                	mov    %esp,%ebp
-80102901:	53                   	push   %ebx
-80102902:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80102905:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80102908:	ee                   	out    %al,(%dx)
-80102909:	b8 0a 00 00 00       	mov    $0xa,%eax
-8010290e:	ba 71 00 00 00       	mov    $0x71,%edx
-80102913:	ee                   	out    %al,(%dx)
-  // and the warm reset vector (DWORD based at 40:67) to point at
-  // the AP startup code prior to the [universal startup algorithm]."
-  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
-  outb(CMOS_PORT+1, 0x0A);
-  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
-  wrv[0] = 0;
-80102914:	31 c0                	xor    %eax,%eax
-  wrv[1] = addr >> 4;
-
-  // "Universal startup algorithm."
-  // Send INIT (level-triggered) interrupt to reset other CPU.
-  lapicw(ICRHI, apicid<<24);
-80102916:	c1 e3 18             	shl    $0x18,%ebx
-  wrv[0] = 0;
-80102919:	66 a3 67 04 00 80    	mov    %ax,0x80000467
-  wrv[1] = addr >> 4;
-8010291f:	89 c8                	mov    %ecx,%eax
-  // when it is in the halted state due to an INIT.  So the second
-  // should be ignored, but it is part of the official Intel algorithm.
-  // Bochs complains about the second one.  Too bad for Bochs.
-  for(i = 0; i < 2; i++){
-    lapicw(ICRHI, apicid<<24);
-    lapicw(ICRLO, STARTUP | (addr>>12));
-80102921:	c1 e9 0c             	shr    $0xc,%ecx
-  lapicw(ICRHI, apicid<<24);
-80102924:	89 da                	mov    %ebx,%edx
-  wrv[1] = addr >> 4;
-80102926:	c1 e8 04             	shr    $0x4,%eax
-    lapicw(ICRLO, STARTUP | (addr>>12));
-80102929:	80 cd 06             	or     $0x6,%ch
-  wrv[1] = addr >> 4;
-8010292c:	66 a3 69 04 00 80    	mov    %ax,0x80000469
-  lapic[index] = value;
-80102932:	a1 7c 26 11 80       	mov    0x8011267c,%eax
-80102937:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
-  lapic[ID];  // wait for write to finish, by reading
-8010293d:	8b 58 20             	mov    0x20(%eax),%ebx
-  lapic[index] = value;
-80102940:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
-80102947:	c5 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-8010294a:	8b 58 20             	mov    0x20(%eax),%ebx
-  lapic[index] = value;
-8010294d:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
-80102954:	85 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-80102957:	8b 58 20             	mov    0x20(%eax),%ebx
-  lapic[index] = value;
-8010295a:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
-  lapic[ID];  // wait for write to finish, by reading
-80102960:	8b 58 20             	mov    0x20(%eax),%ebx
-  lapic[index] = value;
-80102963:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
-  lapic[ID];  // wait for write to finish, by reading
-80102969:	8b 58 20             	mov    0x20(%eax),%ebx
-  lapic[index] = value;
-8010296c:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
-  lapic[ID];  // wait for write to finish, by reading
-80102972:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-80102975:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
-    microdelay(200);
-  }
-}
-8010297b:	5b                   	pop    %ebx
-  lapic[ID];  // wait for write to finish, by reading
-8010297c:	8b 40 20             	mov    0x20(%eax),%eax
-}
-8010297f:	5d                   	pop    %ebp
-80102980:	c3                   	ret    
-80102981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010298f:	90                   	nop
-
-80102990 <cmostime>:
-}
-
-// qemu seems to use 24-hour GWT and the values are BCD encoded
-void
-cmostime(struct rtcdate *r)
-{
-80102990:	f3 0f 1e fb          	endbr32 
-80102994:	55                   	push   %ebp
-80102995:	b8 0b 00 00 00       	mov    $0xb,%eax
-8010299a:	ba 70 00 00 00       	mov    $0x70,%edx
-8010299f:	89 e5                	mov    %esp,%ebp
-801029a1:	57                   	push   %edi
-801029a2:	56                   	push   %esi
-801029a3:	53                   	push   %ebx
-801029a4:	83 ec 4c             	sub    $0x4c,%esp
-801029a7:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801029a8:	ba 71 00 00 00       	mov    $0x71,%edx
-801029ad:	ec                   	in     (%dx),%al
-  struct rtcdate t1, t2;
-  int sb, bcd;
-
-  sb = cmos_read(CMOS_STATB);
-
-  bcd = (sb & (1 << 2)) == 0;
-801029ae:	83 e0 04             	and    $0x4,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801029b1:	bb 70 00 00 00       	mov    $0x70,%ebx
-801029b6:	88 45 b3             	mov    %al,-0x4d(%ebp)
-801029b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801029c0:	31 c0                	xor    %eax,%eax
-801029c2:	89 da                	mov    %ebx,%edx
-801029c4:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801029c5:	b9 71 00 00 00       	mov    $0x71,%ecx
-801029ca:	89 ca                	mov    %ecx,%edx
-801029cc:	ec                   	in     (%dx),%al
-801029cd:	88 45 b7             	mov    %al,-0x49(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801029d0:	89 da                	mov    %ebx,%edx
-801029d2:	b8 02 00 00 00       	mov    $0x2,%eax
-801029d7:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801029d8:	89 ca                	mov    %ecx,%edx
-801029da:	ec                   	in     (%dx),%al
-801029db:	88 45 b6             	mov    %al,-0x4a(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801029de:	89 da                	mov    %ebx,%edx
-801029e0:	b8 04 00 00 00       	mov    $0x4,%eax
-801029e5:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801029e6:	89 ca                	mov    %ecx,%edx
-801029e8:	ec                   	in     (%dx),%al
-801029e9:	88 45 b5             	mov    %al,-0x4b(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801029ec:	89 da                	mov    %ebx,%edx
-801029ee:	b8 07 00 00 00       	mov    $0x7,%eax
-801029f3:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801029f4:	89 ca                	mov    %ecx,%edx
-801029f6:	ec                   	in     (%dx),%al
-801029f7:	88 45 b4             	mov    %al,-0x4c(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801029fa:	89 da                	mov    %ebx,%edx
-801029fc:	b8 08 00 00 00       	mov    $0x8,%eax
-80102a01:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a02:	89 ca                	mov    %ecx,%edx
-80102a04:	ec                   	in     (%dx),%al
-80102a05:	89 c7                	mov    %eax,%edi
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a07:	89 da                	mov    %ebx,%edx
-80102a09:	b8 09 00 00 00       	mov    $0x9,%eax
-80102a0e:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a0f:	89 ca                	mov    %ecx,%edx
-80102a11:	ec                   	in     (%dx),%al
-80102a12:	89 c6                	mov    %eax,%esi
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a14:	89 da                	mov    %ebx,%edx
-80102a16:	b8 0a 00 00 00       	mov    $0xa,%eax
-80102a1b:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a1c:	89 ca                	mov    %ecx,%edx
-80102a1e:	ec                   	in     (%dx),%al
-
-  // make sure CMOS doesn't modify time while we read it
-  for(;;) {
-    fill_rtcdate(&t1);
-    if(cmos_read(CMOS_STATA) & CMOS_UIP)
-80102a1f:	84 c0                	test   %al,%al
-80102a21:	78 9d                	js     801029c0 <cmostime+0x30>
-  return inb(CMOS_RETURN);
-80102a23:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
-80102a27:	89 fa                	mov    %edi,%edx
-80102a29:	0f b6 fa             	movzbl %dl,%edi
-80102a2c:	89 f2                	mov    %esi,%edx
-80102a2e:	89 45 b8             	mov    %eax,-0x48(%ebp)
-80102a31:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
-80102a35:	0f b6 f2             	movzbl %dl,%esi
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a38:	89 da                	mov    %ebx,%edx
-80102a3a:	89 7d c8             	mov    %edi,-0x38(%ebp)
-80102a3d:	89 45 bc             	mov    %eax,-0x44(%ebp)
-80102a40:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
-80102a44:	89 75 cc             	mov    %esi,-0x34(%ebp)
-80102a47:	89 45 c0             	mov    %eax,-0x40(%ebp)
-80102a4a:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
-80102a4e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
-80102a51:	31 c0                	xor    %eax,%eax
-80102a53:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a54:	89 ca                	mov    %ecx,%edx
-80102a56:	ec                   	in     (%dx),%al
-80102a57:	0f b6 c0             	movzbl %al,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a5a:	89 da                	mov    %ebx,%edx
-80102a5c:	89 45 d0             	mov    %eax,-0x30(%ebp)
-80102a5f:	b8 02 00 00 00       	mov    $0x2,%eax
-80102a64:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a65:	89 ca                	mov    %ecx,%edx
-80102a67:	ec                   	in     (%dx),%al
-80102a68:	0f b6 c0             	movzbl %al,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a6b:	89 da                	mov    %ebx,%edx
-80102a6d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-80102a70:	b8 04 00 00 00       	mov    $0x4,%eax
-80102a75:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a76:	89 ca                	mov    %ecx,%edx
-80102a78:	ec                   	in     (%dx),%al
-80102a79:	0f b6 c0             	movzbl %al,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a7c:	89 da                	mov    %ebx,%edx
-80102a7e:	89 45 d8             	mov    %eax,-0x28(%ebp)
-80102a81:	b8 07 00 00 00       	mov    $0x7,%eax
-80102a86:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a87:	89 ca                	mov    %ecx,%edx
-80102a89:	ec                   	in     (%dx),%al
-80102a8a:	0f b6 c0             	movzbl %al,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a8d:	89 da                	mov    %ebx,%edx
-80102a8f:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80102a92:	b8 08 00 00 00       	mov    $0x8,%eax
-80102a97:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a98:	89 ca                	mov    %ecx,%edx
-80102a9a:	ec                   	in     (%dx),%al
-80102a9b:	0f b6 c0             	movzbl %al,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a9e:	89 da                	mov    %ebx,%edx
-80102aa0:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80102aa3:	b8 09 00 00 00       	mov    $0x9,%eax
-80102aa8:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102aa9:	89 ca                	mov    %ecx,%edx
-80102aab:	ec                   	in     (%dx),%al
-80102aac:	0f b6 c0             	movzbl %al,%eax
-        continue;
-    fill_rtcdate(&t2);
-    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
-80102aaf:	83 ec 04             	sub    $0x4,%esp
-  return inb(CMOS_RETURN);
-80102ab2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
-80102ab5:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80102ab8:	6a 18                	push   $0x18
-80102aba:	50                   	push   %eax
-80102abb:	8d 45 b8             	lea    -0x48(%ebp),%eax
-80102abe:	50                   	push   %eax
-80102abf:	e8 5c 1f 00 00       	call   80104a20 <memcmp>
-80102ac4:	83 c4 10             	add    $0x10,%esp
-80102ac7:	85 c0                	test   %eax,%eax
-80102ac9:	0f 85 f1 fe ff ff    	jne    801029c0 <cmostime+0x30>
-      break;
-  }
-
-  // convert
-  if(bcd) {
-80102acf:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
-80102ad3:	75 78                	jne    80102b4d <cmostime+0x1bd>
-#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
-    CONV(second);
-80102ad5:	8b 45 b8             	mov    -0x48(%ebp),%eax
-80102ad8:	89 c2                	mov    %eax,%edx
-80102ada:	83 e0 0f             	and    $0xf,%eax
-80102add:	c1 ea 04             	shr    $0x4,%edx
-80102ae0:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102ae3:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102ae6:	89 45 b8             	mov    %eax,-0x48(%ebp)
-    CONV(minute);
-80102ae9:	8b 45 bc             	mov    -0x44(%ebp),%eax
-80102aec:	89 c2                	mov    %eax,%edx
-80102aee:	83 e0 0f             	and    $0xf,%eax
-80102af1:	c1 ea 04             	shr    $0x4,%edx
-80102af4:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102af7:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102afa:	89 45 bc             	mov    %eax,-0x44(%ebp)
-    CONV(hour  );
-80102afd:	8b 45 c0             	mov    -0x40(%ebp),%eax
-80102b00:	89 c2                	mov    %eax,%edx
-80102b02:	83 e0 0f             	and    $0xf,%eax
-80102b05:	c1 ea 04             	shr    $0x4,%edx
-80102b08:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102b0b:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102b0e:	89 45 c0             	mov    %eax,-0x40(%ebp)
-    CONV(day   );
-80102b11:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-80102b14:	89 c2                	mov    %eax,%edx
-80102b16:	83 e0 0f             	and    $0xf,%eax
-80102b19:	c1 ea 04             	shr    $0x4,%edx
-80102b1c:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102b1f:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102b22:	89 45 c4             	mov    %eax,-0x3c(%ebp)
-    CONV(month );
-80102b25:	8b 45 c8             	mov    -0x38(%ebp),%eax
-80102b28:	89 c2                	mov    %eax,%edx
-80102b2a:	83 e0 0f             	and    $0xf,%eax
-80102b2d:	c1 ea 04             	shr    $0x4,%edx
-80102b30:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102b33:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102b36:	89 45 c8             	mov    %eax,-0x38(%ebp)
-    CONV(year  );
-80102b39:	8b 45 cc             	mov    -0x34(%ebp),%eax
-80102b3c:	89 c2                	mov    %eax,%edx
-80102b3e:	83 e0 0f             	and    $0xf,%eax
-80102b41:	c1 ea 04             	shr    $0x4,%edx
-80102b44:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102b47:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102b4a:	89 45 cc             	mov    %eax,-0x34(%ebp)
-#undef     CONV
-  }
-
-  *r = t1;
-80102b4d:	8b 75 08             	mov    0x8(%ebp),%esi
-80102b50:	8b 45 b8             	mov    -0x48(%ebp),%eax
-80102b53:	89 06                	mov    %eax,(%esi)
-80102b55:	8b 45 bc             	mov    -0x44(%ebp),%eax
-80102b58:	89 46 04             	mov    %eax,0x4(%esi)
-80102b5b:	8b 45 c0             	mov    -0x40(%ebp),%eax
-80102b5e:	89 46 08             	mov    %eax,0x8(%esi)
-80102b61:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-80102b64:	89 46 0c             	mov    %eax,0xc(%esi)
-80102b67:	8b 45 c8             	mov    -0x38(%ebp),%eax
-80102b6a:	89 46 10             	mov    %eax,0x10(%esi)
-80102b6d:	8b 45 cc             	mov    -0x34(%ebp),%eax
-80102b70:	89 46 14             	mov    %eax,0x14(%esi)
-  r->year += 2000;
-80102b73:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
-}
-80102b7a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102b7d:	5b                   	pop    %ebx
-80102b7e:	5e                   	pop    %esi
-80102b7f:	5f                   	pop    %edi
-80102b80:	5d                   	pop    %ebp
-80102b81:	c3                   	ret    
-80102b82:	66 90                	xchg   %ax,%ax
-80102b84:	66 90                	xchg   %ax,%ax
-80102b86:	66 90                	xchg   %ax,%ax
-80102b88:	66 90                	xchg   %ax,%ax
-80102b8a:	66 90                	xchg   %ax,%ax
-80102b8c:	66 90                	xchg   %ax,%ax
-80102b8e:	66 90                	xchg   %ax,%ax
-
-80102b90 <install_trans>:
-static void
-install_trans(void)
-{
-  int tail;
-
-  for (tail = 0; tail < log.lh.n; tail++) {
-80102b90:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
-80102b96:	85 c9                	test   %ecx,%ecx
-80102b98:	0f 8e 8a 00 00 00    	jle    80102c28 <install_trans+0x98>
-{
-80102b9e:	55                   	push   %ebp
-80102b9f:	89 e5                	mov    %esp,%ebp
-80102ba1:	57                   	push   %edi
-  for (tail = 0; tail < log.lh.n; tail++) {
-80102ba2:	31 ff                	xor    %edi,%edi
-{
-80102ba4:	56                   	push   %esi
-80102ba5:	53                   	push   %ebx
-80102ba6:	83 ec 0c             	sub    $0xc,%esp
-80102ba9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-80102bb0:	a1 b4 26 11 80       	mov    0x801126b4,%eax
-80102bb5:	83 ec 08             	sub    $0x8,%esp
-80102bb8:	01 f8                	add    %edi,%eax
-80102bba:	83 c0 01             	add    $0x1,%eax
-80102bbd:	50                   	push   %eax
-80102bbe:	ff 35 c4 26 11 80    	pushl  0x801126c4
-80102bc4:	e8 07 d5 ff ff       	call   801000d0 <bread>
-80102bc9:	89 c6                	mov    %eax,%esi
-    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-80102bcb:	58                   	pop    %eax
-80102bcc:	5a                   	pop    %edx
-80102bcd:	ff 34 bd cc 26 11 80 	pushl  -0x7feed934(,%edi,4)
-80102bd4:	ff 35 c4 26 11 80    	pushl  0x801126c4
-  for (tail = 0; tail < log.lh.n; tail++) {
-80102bda:	83 c7 01             	add    $0x1,%edi
-    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-80102bdd:	e8 ee d4 ff ff       	call   801000d0 <bread>
-    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-80102be2:	83 c4 0c             	add    $0xc,%esp
-    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-80102be5:	89 c3                	mov    %eax,%ebx
-    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-80102be7:	8d 46 5c             	lea    0x5c(%esi),%eax
-80102bea:	68 00 02 00 00       	push   $0x200
-80102bef:	50                   	push   %eax
-80102bf0:	8d 43 5c             	lea    0x5c(%ebx),%eax
-80102bf3:	50                   	push   %eax
-80102bf4:	e8 77 1e 00 00       	call   80104a70 <memmove>
-    bwrite(dbuf);  // write dst to disk
-80102bf9:	89 1c 24             	mov    %ebx,(%esp)
-80102bfc:	e8 af d5 ff ff       	call   801001b0 <bwrite>
-    brelse(lbuf);
-80102c01:	89 34 24             	mov    %esi,(%esp)
-80102c04:	e8 e7 d5 ff ff       	call   801001f0 <brelse>
-    brelse(dbuf);
-80102c09:	89 1c 24             	mov    %ebx,(%esp)
-80102c0c:	e8 df d5 ff ff       	call   801001f0 <brelse>
-  for (tail = 0; tail < log.lh.n; tail++) {
-80102c11:	83 c4 10             	add    $0x10,%esp
-80102c14:	39 3d c8 26 11 80    	cmp    %edi,0x801126c8
-80102c1a:	7f 94                	jg     80102bb0 <install_trans+0x20>
-  }
-}
-80102c1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102c1f:	5b                   	pop    %ebx
-80102c20:	5e                   	pop    %esi
-80102c21:	5f                   	pop    %edi
-80102c22:	5d                   	pop    %ebp
-80102c23:	c3                   	ret    
-80102c24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102c28:	c3                   	ret    
-80102c29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80102c30 <write_head>:
-// Write in-memory log header to disk.
-// This is the true point at which the
-// current transaction commits.
-static void
-write_head(void)
-{
-80102c30:	55                   	push   %ebp
-80102c31:	89 e5                	mov    %esp,%ebp
-80102c33:	53                   	push   %ebx
-80102c34:	83 ec 0c             	sub    $0xc,%esp
-  struct buf *buf = bread(log.dev, log.start);
-80102c37:	ff 35 b4 26 11 80    	pushl  0x801126b4
-80102c3d:	ff 35 c4 26 11 80    	pushl  0x801126c4
-80102c43:	e8 88 d4 ff ff       	call   801000d0 <bread>
-  struct logheader *hb = (struct logheader *) (buf->data);
-  int i;
-  hb->n = log.lh.n;
-  for (i = 0; i < log.lh.n; i++) {
-80102c48:	83 c4 10             	add    $0x10,%esp
-  struct buf *buf = bread(log.dev, log.start);
-80102c4b:	89 c3                	mov    %eax,%ebx
-  hb->n = log.lh.n;
-80102c4d:	a1 c8 26 11 80       	mov    0x801126c8,%eax
-80102c52:	89 43 5c             	mov    %eax,0x5c(%ebx)
-  for (i = 0; i < log.lh.n; i++) {
-80102c55:	85 c0                	test   %eax,%eax
-80102c57:	7e 19                	jle    80102c72 <write_head+0x42>
-80102c59:	31 d2                	xor    %edx,%edx
-80102c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102c5f:	90                   	nop
-    hb->block[i] = log.lh.block[i];
-80102c60:	8b 0c 95 cc 26 11 80 	mov    -0x7feed934(,%edx,4),%ecx
-80102c67:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
-  for (i = 0; i < log.lh.n; i++) {
-80102c6b:	83 c2 01             	add    $0x1,%edx
-80102c6e:	39 d0                	cmp    %edx,%eax
-80102c70:	75 ee                	jne    80102c60 <write_head+0x30>
-  }
-  bwrite(buf);
-80102c72:	83 ec 0c             	sub    $0xc,%esp
-80102c75:	53                   	push   %ebx
-80102c76:	e8 35 d5 ff ff       	call   801001b0 <bwrite>
-  brelse(buf);
-80102c7b:	89 1c 24             	mov    %ebx,(%esp)
-80102c7e:	e8 6d d5 ff ff       	call   801001f0 <brelse>
-}
-80102c83:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102c86:	83 c4 10             	add    $0x10,%esp
-80102c89:	c9                   	leave  
-80102c8a:	c3                   	ret    
-80102c8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102c8f:	90                   	nop
-
-80102c90 <initlog>:
-{
-80102c90:	f3 0f 1e fb          	endbr32 
-80102c94:	55                   	push   %ebp
-80102c95:	89 e5                	mov    %esp,%ebp
-80102c97:	53                   	push   %ebx
-80102c98:	83 ec 2c             	sub    $0x2c,%esp
-80102c9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  initlock(&log.lock, "log");
-80102c9e:	68 e0 79 10 80       	push   $0x801079e0
-80102ca3:	68 80 26 11 80       	push   $0x80112680
-80102ca8:	e8 93 1a 00 00       	call   80104740 <initlock>
-  readsb(dev, &sb);
-80102cad:	58                   	pop    %eax
-80102cae:	8d 45 dc             	lea    -0x24(%ebp),%eax
-80102cb1:	5a                   	pop    %edx
-80102cb2:	50                   	push   %eax
-80102cb3:	53                   	push   %ebx
-80102cb4:	e8 47 e8 ff ff       	call   80101500 <readsb>
-  log.start = sb.logstart;
-80102cb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
-  struct buf *buf = bread(log.dev, log.start);
-80102cbc:	59                   	pop    %ecx
-  log.dev = dev;
-80102cbd:	89 1d c4 26 11 80    	mov    %ebx,0x801126c4
-  log.size = sb.nlog;
-80102cc3:	8b 55 e8             	mov    -0x18(%ebp),%edx
-  log.start = sb.logstart;
-80102cc6:	a3 b4 26 11 80       	mov    %eax,0x801126b4
-  log.size = sb.nlog;
-80102ccb:	89 15 b8 26 11 80    	mov    %edx,0x801126b8
-  struct buf *buf = bread(log.dev, log.start);
-80102cd1:	5a                   	pop    %edx
-80102cd2:	50                   	push   %eax
-80102cd3:	53                   	push   %ebx
-80102cd4:	e8 f7 d3 ff ff       	call   801000d0 <bread>
-  for (i = 0; i < log.lh.n; i++) {
-80102cd9:	83 c4 10             	add    $0x10,%esp
-  log.lh.n = lh->n;
-80102cdc:	8b 48 5c             	mov    0x5c(%eax),%ecx
-80102cdf:	89 0d c8 26 11 80    	mov    %ecx,0x801126c8
-  for (i = 0; i < log.lh.n; i++) {
-80102ce5:	85 c9                	test   %ecx,%ecx
-80102ce7:	7e 19                	jle    80102d02 <initlog+0x72>
-80102ce9:	31 d2                	xor    %edx,%edx
-80102ceb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102cef:	90                   	nop
-    log.lh.block[i] = lh->block[i];
-80102cf0:	8b 5c 90 60          	mov    0x60(%eax,%edx,4),%ebx
-80102cf4:	89 1c 95 cc 26 11 80 	mov    %ebx,-0x7feed934(,%edx,4)
-  for (i = 0; i < log.lh.n; i++) {
-80102cfb:	83 c2 01             	add    $0x1,%edx
-80102cfe:	39 d1                	cmp    %edx,%ecx
-80102d00:	75 ee                	jne    80102cf0 <initlog+0x60>
-  brelse(buf);
-80102d02:	83 ec 0c             	sub    $0xc,%esp
-80102d05:	50                   	push   %eax
-80102d06:	e8 e5 d4 ff ff       	call   801001f0 <brelse>
-
-static void
-recover_from_log(void)
-{
-  read_head();
-  install_trans(); // if committed, copy from log to disk
-80102d0b:	e8 80 fe ff ff       	call   80102b90 <install_trans>
-  log.lh.n = 0;
-80102d10:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
-80102d17:	00 00 00 
-  write_head(); // clear the log
-80102d1a:	e8 11 ff ff ff       	call   80102c30 <write_head>
-}
-80102d1f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102d22:	83 c4 10             	add    $0x10,%esp
-80102d25:	c9                   	leave  
-80102d26:	c3                   	ret    
-80102d27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102d2e:	66 90                	xchg   %ax,%ax
-
-80102d30 <begin_op>:
-}
-
-// called at the start of each FS system call.
-void
-begin_op(void)
-{
-80102d30:	f3 0f 1e fb          	endbr32 
-80102d34:	55                   	push   %ebp
-80102d35:	89 e5                	mov    %esp,%ebp
-80102d37:	83 ec 14             	sub    $0x14,%esp
-  acquire(&log.lock);
-80102d3a:	68 80 26 11 80       	push   $0x80112680
-80102d3f:	e8 7c 1b 00 00       	call   801048c0 <acquire>
-80102d44:	83 c4 10             	add    $0x10,%esp
-80102d47:	eb 1c                	jmp    80102d65 <begin_op+0x35>
-80102d49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  while(1){
-    if(log.committing){
-      sleep(&log, &log.lock);
-80102d50:	83 ec 08             	sub    $0x8,%esp
-80102d53:	68 80 26 11 80       	push   $0x80112680
-80102d58:	68 80 26 11 80       	push   $0x80112680
-80102d5d:	e8 be 11 00 00       	call   80103f20 <sleep>
-80102d62:	83 c4 10             	add    $0x10,%esp
-    if(log.committing){
-80102d65:	a1 c0 26 11 80       	mov    0x801126c0,%eax
-80102d6a:	85 c0                	test   %eax,%eax
-80102d6c:	75 e2                	jne    80102d50 <begin_op+0x20>
-    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-80102d6e:	a1 bc 26 11 80       	mov    0x801126bc,%eax
-80102d73:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
-80102d79:	83 c0 01             	add    $0x1,%eax
-80102d7c:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
-80102d7f:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
-80102d82:	83 fa 1e             	cmp    $0x1e,%edx
-80102d85:	7f c9                	jg     80102d50 <begin_op+0x20>
-      // this op might exhaust log space; wait for commit.
-      sleep(&log, &log.lock);
-    } else {
-      log.outstanding += 1;
-      release(&log.lock);
-80102d87:	83 ec 0c             	sub    $0xc,%esp
-      log.outstanding += 1;
-80102d8a:	a3 bc 26 11 80       	mov    %eax,0x801126bc
-      release(&log.lock);
-80102d8f:	68 80 26 11 80       	push   $0x80112680
-80102d94:	e8 e7 1b 00 00       	call   80104980 <release>
-      break;
-    }
-  }
-}
-80102d99:	83 c4 10             	add    $0x10,%esp
-80102d9c:	c9                   	leave  
-80102d9d:	c3                   	ret    
-80102d9e:	66 90                	xchg   %ax,%ax
-
-80102da0 <end_op>:
-
-// called at the end of each FS system call.
-// commits if this was the last outstanding operation.
-void
-end_op(void)
-{
-80102da0:	f3 0f 1e fb          	endbr32 
-80102da4:	55                   	push   %ebp
-80102da5:	89 e5                	mov    %esp,%ebp
-80102da7:	57                   	push   %edi
-80102da8:	56                   	push   %esi
-80102da9:	53                   	push   %ebx
-80102daa:	83 ec 18             	sub    $0x18,%esp
-  int do_commit = 0;
-
-  acquire(&log.lock);
-80102dad:	68 80 26 11 80       	push   $0x80112680
-80102db2:	e8 09 1b 00 00       	call   801048c0 <acquire>
-  log.outstanding -= 1;
-80102db7:	a1 bc 26 11 80       	mov    0x801126bc,%eax
-  if(log.committing)
-80102dbc:	8b 35 c0 26 11 80    	mov    0x801126c0,%esi
-80102dc2:	83 c4 10             	add    $0x10,%esp
-  log.outstanding -= 1;
-80102dc5:	8d 58 ff             	lea    -0x1(%eax),%ebx
-80102dc8:	89 1d bc 26 11 80    	mov    %ebx,0x801126bc
-  if(log.committing)
-80102dce:	85 f6                	test   %esi,%esi
-80102dd0:	0f 85 1e 01 00 00    	jne    80102ef4 <end_op+0x154>
-    panic("log.committing");
-  if(log.outstanding == 0){
-80102dd6:	85 db                	test   %ebx,%ebx
-80102dd8:	0f 85 f2 00 00 00    	jne    80102ed0 <end_op+0x130>
-    do_commit = 1;
-    log.committing = 1;
-80102dde:	c7 05 c0 26 11 80 01 	movl   $0x1,0x801126c0
-80102de5:	00 00 00 
-    // begin_op() may be waiting for log space,
-    // and decrementing log.outstanding has decreased
-    // the amount of reserved space.
-    wakeup(&log);
-  }
-  release(&log.lock);
-80102de8:	83 ec 0c             	sub    $0xc,%esp
-80102deb:	68 80 26 11 80       	push   $0x80112680
-80102df0:	e8 8b 1b 00 00       	call   80104980 <release>
-}
-
-static void
-commit()
-{
-  if (log.lh.n > 0) {
-80102df5:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
-80102dfb:	83 c4 10             	add    $0x10,%esp
-80102dfe:	85 c9                	test   %ecx,%ecx
-80102e00:	7f 3e                	jg     80102e40 <end_op+0xa0>
-    acquire(&log.lock);
-80102e02:	83 ec 0c             	sub    $0xc,%esp
-80102e05:	68 80 26 11 80       	push   $0x80112680
-80102e0a:	e8 b1 1a 00 00       	call   801048c0 <acquire>
-    wakeup(&log);
-80102e0f:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-    log.committing = 0;
-80102e16:	c7 05 c0 26 11 80 00 	movl   $0x0,0x801126c0
-80102e1d:	00 00 00 
-    wakeup(&log);
-80102e20:	e8 bb 12 00 00       	call   801040e0 <wakeup>
-    release(&log.lock);
-80102e25:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102e2c:	e8 4f 1b 00 00       	call   80104980 <release>
-80102e31:	83 c4 10             	add    $0x10,%esp
-}
-80102e34:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102e37:	5b                   	pop    %ebx
-80102e38:	5e                   	pop    %esi
-80102e39:	5f                   	pop    %edi
-80102e3a:	5d                   	pop    %ebp
-80102e3b:	c3                   	ret    
-80102e3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    struct buf *to = bread(log.dev, log.start+tail+1); // log block
-80102e40:	a1 b4 26 11 80       	mov    0x801126b4,%eax
-80102e45:	83 ec 08             	sub    $0x8,%esp
-80102e48:	01 d8                	add    %ebx,%eax
-80102e4a:	83 c0 01             	add    $0x1,%eax
-80102e4d:	50                   	push   %eax
-80102e4e:	ff 35 c4 26 11 80    	pushl  0x801126c4
-80102e54:	e8 77 d2 ff ff       	call   801000d0 <bread>
-80102e59:	89 c6                	mov    %eax,%esi
-    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-80102e5b:	58                   	pop    %eax
-80102e5c:	5a                   	pop    %edx
-80102e5d:	ff 34 9d cc 26 11 80 	pushl  -0x7feed934(,%ebx,4)
-80102e64:	ff 35 c4 26 11 80    	pushl  0x801126c4
-  for (tail = 0; tail < log.lh.n; tail++) {
-80102e6a:	83 c3 01             	add    $0x1,%ebx
-    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-80102e6d:	e8 5e d2 ff ff       	call   801000d0 <bread>
-    memmove(to->data, from->data, BSIZE);
-80102e72:	83 c4 0c             	add    $0xc,%esp
-    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-80102e75:	89 c7                	mov    %eax,%edi
-    memmove(to->data, from->data, BSIZE);
-80102e77:	8d 40 5c             	lea    0x5c(%eax),%eax
-80102e7a:	68 00 02 00 00       	push   $0x200
-80102e7f:	50                   	push   %eax
-80102e80:	8d 46 5c             	lea    0x5c(%esi),%eax
-80102e83:	50                   	push   %eax
-80102e84:	e8 e7 1b 00 00       	call   80104a70 <memmove>
-    bwrite(to);  // write the log
-80102e89:	89 34 24             	mov    %esi,(%esp)
-80102e8c:	e8 1f d3 ff ff       	call   801001b0 <bwrite>
-    brelse(from);
-80102e91:	89 3c 24             	mov    %edi,(%esp)
-80102e94:	e8 57 d3 ff ff       	call   801001f0 <brelse>
-    brelse(to);
-80102e99:	89 34 24             	mov    %esi,(%esp)
-80102e9c:	e8 4f d3 ff ff       	call   801001f0 <brelse>
-  for (tail = 0; tail < log.lh.n; tail++) {
-80102ea1:	83 c4 10             	add    $0x10,%esp
-80102ea4:	3b 1d c8 26 11 80    	cmp    0x801126c8,%ebx
-80102eaa:	7c 94                	jl     80102e40 <end_op+0xa0>
-    write_log();     // Write modified blocks from cache to log
-    write_head();    // Write header to disk -- the real commit
-80102eac:	e8 7f fd ff ff       	call   80102c30 <write_head>
-    install_trans(); // Now install writes to home locations
-80102eb1:	e8 da fc ff ff       	call   80102b90 <install_trans>
-    log.lh.n = 0;
-80102eb6:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
-80102ebd:	00 00 00 
-    write_head();    // Erase the transaction from the log
-80102ec0:	e8 6b fd ff ff       	call   80102c30 <write_head>
-80102ec5:	e9 38 ff ff ff       	jmp    80102e02 <end_op+0x62>
-80102eca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    wakeup(&log);
-80102ed0:	83 ec 0c             	sub    $0xc,%esp
-80102ed3:	68 80 26 11 80       	push   $0x80112680
-80102ed8:	e8 03 12 00 00       	call   801040e0 <wakeup>
-  release(&log.lock);
-80102edd:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
-80102ee4:	e8 97 1a 00 00       	call   80104980 <release>
-80102ee9:	83 c4 10             	add    $0x10,%esp
-}
-80102eec:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102eef:	5b                   	pop    %ebx
-80102ef0:	5e                   	pop    %esi
-80102ef1:	5f                   	pop    %edi
-80102ef2:	5d                   	pop    %ebp
-80102ef3:	c3                   	ret    
-    panic("log.committing");
-80102ef4:	83 ec 0c             	sub    $0xc,%esp
-80102ef7:	68 e4 79 10 80       	push   $0x801079e4
-80102efc:	e8 8f d4 ff ff       	call   80100390 <panic>
-80102f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102f0f:	90                   	nop
-
-80102f10 <log_write>:
-//   modify bp->data[]
-//   log_write(bp)
-//   brelse(bp)
-void
-log_write(struct buf *b)
-{
-80102f10:	f3 0f 1e fb          	endbr32 
-80102f14:	55                   	push   %ebp
-80102f15:	89 e5                	mov    %esp,%ebp
-80102f17:	53                   	push   %ebx
-80102f18:	83 ec 04             	sub    $0x4,%esp
-  int i;
-
-  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-80102f1b:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
-{
-80102f21:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-80102f24:	83 fa 1d             	cmp    $0x1d,%edx
-80102f27:	0f 8f 91 00 00 00    	jg     80102fbe <log_write+0xae>
-80102f2d:	a1 b8 26 11 80       	mov    0x801126b8,%eax
-80102f32:	83 e8 01             	sub    $0x1,%eax
-80102f35:	39 c2                	cmp    %eax,%edx
-80102f37:	0f 8d 81 00 00 00    	jge    80102fbe <log_write+0xae>
-    panic("too big a transaction");
-  if (log.outstanding < 1)
-80102f3d:	a1 bc 26 11 80       	mov    0x801126bc,%eax
-80102f42:	85 c0                	test   %eax,%eax
-80102f44:	0f 8e 81 00 00 00    	jle    80102fcb <log_write+0xbb>
-    panic("log_write outside of trans");
-
-  acquire(&log.lock);
-80102f4a:	83 ec 0c             	sub    $0xc,%esp
-80102f4d:	68 80 26 11 80       	push   $0x80112680
-80102f52:	e8 69 19 00 00       	call   801048c0 <acquire>
-  for (i = 0; i < log.lh.n; i++) {
-80102f57:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
-80102f5d:	83 c4 10             	add    $0x10,%esp
-80102f60:	85 d2                	test   %edx,%edx
-80102f62:	7e 4e                	jle    80102fb2 <log_write+0xa2>
-    if (log.lh.block[i] == b->blockno)   // log absorbtion
-80102f64:	8b 4b 08             	mov    0x8(%ebx),%ecx
-  for (i = 0; i < log.lh.n; i++) {
-80102f67:	31 c0                	xor    %eax,%eax
-80102f69:	eb 0c                	jmp    80102f77 <log_write+0x67>
-80102f6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102f6f:	90                   	nop
-80102f70:	83 c0 01             	add    $0x1,%eax
-80102f73:	39 c2                	cmp    %eax,%edx
-80102f75:	74 29                	je     80102fa0 <log_write+0x90>
-    if (log.lh.block[i] == b->blockno)   // log absorbtion
-80102f77:	39 0c 85 cc 26 11 80 	cmp    %ecx,-0x7feed934(,%eax,4)
-80102f7e:	75 f0                	jne    80102f70 <log_write+0x60>
-      break;
-  }
-  log.lh.block[i] = b->blockno;
-80102f80:	89 0c 85 cc 26 11 80 	mov    %ecx,-0x7feed934(,%eax,4)
-  if (i == log.lh.n)
-    log.lh.n++;
-  b->flags |= B_DIRTY; // prevent eviction
-80102f87:	83 0b 04             	orl    $0x4,(%ebx)
-  release(&log.lock);
-}
-80102f8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  release(&log.lock);
-80102f8d:	c7 45 08 80 26 11 80 	movl   $0x80112680,0x8(%ebp)
-}
-80102f94:	c9                   	leave  
-  release(&log.lock);
-80102f95:	e9 e6 19 00 00       	jmp    80104980 <release>
-80102f9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  log.lh.block[i] = b->blockno;
-80102fa0:	89 0c 95 cc 26 11 80 	mov    %ecx,-0x7feed934(,%edx,4)
-    log.lh.n++;
-80102fa7:	83 c2 01             	add    $0x1,%edx
-80102faa:	89 15 c8 26 11 80    	mov    %edx,0x801126c8
-80102fb0:	eb d5                	jmp    80102f87 <log_write+0x77>
-  log.lh.block[i] = b->blockno;
-80102fb2:	8b 43 08             	mov    0x8(%ebx),%eax
-80102fb5:	a3 cc 26 11 80       	mov    %eax,0x801126cc
-  if (i == log.lh.n)
-80102fba:	75 cb                	jne    80102f87 <log_write+0x77>
-80102fbc:	eb e9                	jmp    80102fa7 <log_write+0x97>
-    panic("too big a transaction");
-80102fbe:	83 ec 0c             	sub    $0xc,%esp
-80102fc1:	68 f3 79 10 80       	push   $0x801079f3
-80102fc6:	e8 c5 d3 ff ff       	call   80100390 <panic>
-    panic("log_write outside of trans");
-80102fcb:	83 ec 0c             	sub    $0xc,%esp
-80102fce:	68 09 7a 10 80       	push   $0x80107a09
-80102fd3:	e8 b8 d3 ff ff       	call   80100390 <panic>
-80102fd8:	66 90                	xchg   %ax,%ax
-80102fda:	66 90                	xchg   %ax,%ax
-80102fdc:	66 90                	xchg   %ax,%ax
-80102fde:	66 90                	xchg   %ax,%ax
-
-80102fe0 <mpmain>:
-}
-
-// Common CPU setup code.
-static void
-mpmain(void)
-{
-80102fe0:	55                   	push   %ebp
-80102fe1:	89 e5                	mov    %esp,%ebp
-80102fe3:	53                   	push   %ebx
-80102fe4:	83 ec 04             	sub    $0x4,%esp
-  cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
-80102fe7:	e8 54 09 00 00       	call   80103940 <cpuid>
-80102fec:	89 c3                	mov    %eax,%ebx
-80102fee:	e8 4d 09 00 00       	call   80103940 <cpuid>
-80102ff3:	83 ec 04             	sub    $0x4,%esp
-80102ff6:	53                   	push   %ebx
-80102ff7:	50                   	push   %eax
-80102ff8:	68 24 7a 10 80       	push   $0x80107a24
-80102ffd:	e8 ae d6 ff ff       	call   801006b0 <cprintf>
-  idtinit();       // load idt register
-80103002:	e8 69 2d 00 00       	call   80105d70 <idtinit>
-  xchg(&(mycpu()->started), 1); // tell startothers() we're up
-80103007:	e8 c4 08 00 00       	call   801038d0 <mycpu>
-8010300c:	89 c2                	mov    %eax,%edx
-xchg(volatile uint *addr, uint newval)
-{
-  uint result;
-
-  // The + in "+m" denotes a read-modify-write operand.
-  asm volatile("lock; xchgl %0, %1" :
-8010300e:	b8 01 00 00 00       	mov    $0x1,%eax
-80103013:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
-  scheduler();     // start running processes
-8010301a:	e8 11 0c 00 00       	call   80103c30 <scheduler>
-8010301f:	90                   	nop
-
-80103020 <mpenter>:
-{
-80103020:	f3 0f 1e fb          	endbr32 
-80103024:	55                   	push   %ebp
-80103025:	89 e5                	mov    %esp,%ebp
-80103027:	83 ec 08             	sub    $0x8,%esp
-  switchkvm();
-8010302a:	e8 11 3e 00 00       	call   80106e40 <switchkvm>
-  seginit();
-8010302f:	e8 7c 3d 00 00       	call   80106db0 <seginit>
-  lapicinit();
-80103034:	e8 67 f7 ff ff       	call   801027a0 <lapicinit>
-  mpmain();
-80103039:	e8 a2 ff ff ff       	call   80102fe0 <mpmain>
-8010303e:	66 90                	xchg   %ax,%ax
-
-80103040 <main>:
-{
-80103040:	f3 0f 1e fb          	endbr32 
-80103044:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-80103048:	83 e4 f0             	and    $0xfffffff0,%esp
-8010304b:	ff 71 fc             	pushl  -0x4(%ecx)
-8010304e:	55                   	push   %ebp
-8010304f:	89 e5                	mov    %esp,%ebp
-80103051:	53                   	push   %ebx
-80103052:	51                   	push   %ecx
-  kinit1(end, P2V(4*1024*1024)); // phys page allocator
-80103053:	83 ec 08             	sub    $0x8,%esp
-80103056:	68 00 00 40 80       	push   $0x80400000
-8010305b:	68 a8 55 11 80       	push   $0x801155a8
-80103060:	e8 fb f4 ff ff       	call   80102560 <kinit1>
-  kvmalloc();      // kernel page table
-80103065:	e8 b6 42 00 00       	call   80107320 <kvmalloc>
-  mpinit();        // detect other processors
-8010306a:	e8 81 01 00 00       	call   801031f0 <mpinit>
-  lapicinit();     // interrupt controller
-8010306f:	e8 2c f7 ff ff       	call   801027a0 <lapicinit>
-  seginit();       // segment descriptors
-80103074:	e8 37 3d 00 00       	call   80106db0 <seginit>
-  picinit();       // disable pic
-80103079:	e8 52 03 00 00       	call   801033d0 <picinit>
-  ioapicinit();    // another interrupt controller
-8010307e:	e8 fd f2 ff ff       	call   80102380 <ioapicinit>
-  consoleinit();   // console hardware
-80103083:	e8 a8 d9 ff ff       	call   80100a30 <consoleinit>
-  uartinit();      // serial port
-80103088:	e8 e3 2f 00 00       	call   80106070 <uartinit>
-  pinit();         // process table
-8010308d:	e8 1e 08 00 00       	call   801038b0 <pinit>
-  tvinit();        // trap vectors
-80103092:	e8 59 2c 00 00       	call   80105cf0 <tvinit>
-  binit();         // buffer cache
-80103097:	e8 a4 cf ff ff       	call   80100040 <binit>
-  fileinit();      // file table
-8010309c:	e8 3f dd ff ff       	call   80100de0 <fileinit>
-  ideinit();       // disk 
-801030a1:	e8 aa f0 ff ff       	call   80102150 <ideinit>
-
-  // Write entry code to unused memory at 0x7000.
-  // The linker has placed the image of entryother.S in
-  // _binary_entryother_start.
-  code = P2V(0x7000);
-  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
-801030a6:	83 c4 0c             	add    $0xc,%esp
-801030a9:	68 8a 00 00 00       	push   $0x8a
-801030ae:	68 8c a4 10 80       	push   $0x8010a48c
-801030b3:	68 00 70 00 80       	push   $0x80007000
-801030b8:	e8 b3 19 00 00       	call   80104a70 <memmove>
-
-  for(c = cpus; c < cpus+ncpu; c++){
-801030bd:	83 c4 10             	add    $0x10,%esp
-801030c0:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
-801030c7:	00 00 00 
-801030ca:	05 80 27 11 80       	add    $0x80112780,%eax
-801030cf:	3d 80 27 11 80       	cmp    $0x80112780,%eax
-801030d4:	76 7a                	jbe    80103150 <main+0x110>
-801030d6:	bb 80 27 11 80       	mov    $0x80112780,%ebx
-801030db:	eb 1c                	jmp    801030f9 <main+0xb9>
-801030dd:	8d 76 00             	lea    0x0(%esi),%esi
-801030e0:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
-801030e7:	00 00 00 
-801030ea:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
-801030f0:	05 80 27 11 80       	add    $0x80112780,%eax
-801030f5:	39 c3                	cmp    %eax,%ebx
-801030f7:	73 57                	jae    80103150 <main+0x110>
-    if(c == mycpu())  // We've started already.
-801030f9:	e8 d2 07 00 00       	call   801038d0 <mycpu>
-801030fe:	39 c3                	cmp    %eax,%ebx
-80103100:	74 de                	je     801030e0 <main+0xa0>
-      continue;
-
-    // Tell entryother.S what stack to use, where to enter, and what
-    // pgdir to use. We cannot use kpgdir yet, because the AP processor
-    // is running in low  memory, so we use entrypgdir for the APs too.
-    stack = kalloc();
-80103102:	e8 29 f5 ff ff       	call   80102630 <kalloc>
-    *(void**)(code-4) = stack + KSTACKSIZE;
-    *(void(**)(void))(code-8) = mpenter;
-    *(int**)(code-12) = (void *) V2P(entrypgdir);
-
-    lapicstartap(c->apicid, V2P(code));
-80103107:	83 ec 08             	sub    $0x8,%esp
-    *(void(**)(void))(code-8) = mpenter;
-8010310a:	c7 05 f8 6f 00 80 20 	movl   $0x80103020,0x80006ff8
-80103111:	30 10 80 
-    *(int**)(code-12) = (void *) V2P(entrypgdir);
-80103114:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
-8010311b:	90 10 00 
-    *(void**)(code-4) = stack + KSTACKSIZE;
-8010311e:	05 00 10 00 00       	add    $0x1000,%eax
-80103123:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
-    lapicstartap(c->apicid, V2P(code));
-80103128:	0f b6 03             	movzbl (%ebx),%eax
-8010312b:	68 00 70 00 00       	push   $0x7000
-80103130:	50                   	push   %eax
-80103131:	e8 ba f7 ff ff       	call   801028f0 <lapicstartap>
-
-    // wait for cpu to finish mpmain()
-    while(c->started == 0)
-80103136:	83 c4 10             	add    $0x10,%esp
-80103139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103140:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
-80103146:	85 c0                	test   %eax,%eax
-80103148:	74 f6                	je     80103140 <main+0x100>
-8010314a:	eb 94                	jmp    801030e0 <main+0xa0>
-8010314c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
-80103150:	83 ec 08             	sub    $0x8,%esp
-80103153:	68 00 00 00 8e       	push   $0x8e000000
-80103158:	68 00 00 40 80       	push   $0x80400000
-8010315d:	e8 6e f4 ff ff       	call   801025d0 <kinit2>
-  userinit();      // first user process
-80103162:	e8 29 08 00 00       	call   80103990 <userinit>
-  mpmain();        // finish this processor's setup
-80103167:	e8 74 fe ff ff       	call   80102fe0 <mpmain>
-8010316c:	66 90                	xchg   %ax,%ax
-8010316e:	66 90                	xchg   %ax,%ax
-
-80103170 <mpsearch1>:
-}
-
-// Look for an MP structure in the len bytes at addr.
-static struct mp*
-mpsearch1(uint a, int len)
-{
-80103170:	55                   	push   %ebp
-80103171:	89 e5                	mov    %esp,%ebp
-80103173:	57                   	push   %edi
-80103174:	56                   	push   %esi
-  uchar *e, *p, *addr;
-
-  addr = P2V(a);
-80103175:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
-{
-8010317b:	53                   	push   %ebx
-  e = addr+len;
-8010317c:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
-{
-8010317f:	83 ec 0c             	sub    $0xc,%esp
-  for(p = addr; p < e; p += sizeof(struct mp))
-80103182:	39 de                	cmp    %ebx,%esi
-80103184:	72 10                	jb     80103196 <mpsearch1+0x26>
-80103186:	eb 50                	jmp    801031d8 <mpsearch1+0x68>
-80103188:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010318f:	90                   	nop
-80103190:	89 fe                	mov    %edi,%esi
-80103192:	39 fb                	cmp    %edi,%ebx
-80103194:	76 42                	jbe    801031d8 <mpsearch1+0x68>
-    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-80103196:	83 ec 04             	sub    $0x4,%esp
-80103199:	8d 7e 10             	lea    0x10(%esi),%edi
-8010319c:	6a 04                	push   $0x4
-8010319e:	68 38 7a 10 80       	push   $0x80107a38
-801031a3:	56                   	push   %esi
-801031a4:	e8 77 18 00 00       	call   80104a20 <memcmp>
-801031a9:	83 c4 10             	add    $0x10,%esp
-801031ac:	85 c0                	test   %eax,%eax
-801031ae:	75 e0                	jne    80103190 <mpsearch1+0x20>
-801031b0:	89 f2                	mov    %esi,%edx
-801031b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    sum += addr[i];
-801031b8:	0f b6 0a             	movzbl (%edx),%ecx
-801031bb:	83 c2 01             	add    $0x1,%edx
-801031be:	01 c8                	add    %ecx,%eax
-  for(i=0; i<len; i++)
-801031c0:	39 fa                	cmp    %edi,%edx
-801031c2:	75 f4                	jne    801031b8 <mpsearch1+0x48>
-    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-801031c4:	84 c0                	test   %al,%al
-801031c6:	75 c8                	jne    80103190 <mpsearch1+0x20>
-      return (struct mp*)p;
-  return 0;
-}
-801031c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801031cb:	89 f0                	mov    %esi,%eax
-801031cd:	5b                   	pop    %ebx
-801031ce:	5e                   	pop    %esi
-801031cf:	5f                   	pop    %edi
-801031d0:	5d                   	pop    %ebp
-801031d1:	c3                   	ret    
-801031d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801031d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
-801031db:	31 f6                	xor    %esi,%esi
-}
-801031dd:	5b                   	pop    %ebx
-801031de:	89 f0                	mov    %esi,%eax
-801031e0:	5e                   	pop    %esi
-801031e1:	5f                   	pop    %edi
-801031e2:	5d                   	pop    %ebp
-801031e3:	c3                   	ret    
-801031e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801031eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801031ef:	90                   	nop
-
-801031f0 <mpinit>:
-  return conf;
-}
-
-void
-mpinit(void)
-{
-801031f0:	f3 0f 1e fb          	endbr32 
-801031f4:	55                   	push   %ebp
-801031f5:	89 e5                	mov    %esp,%ebp
-801031f7:	57                   	push   %edi
-801031f8:	56                   	push   %esi
-801031f9:	53                   	push   %ebx
-801031fa:	83 ec 1c             	sub    $0x1c,%esp
-  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
-801031fd:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
-80103204:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
-8010320b:	c1 e0 08             	shl    $0x8,%eax
-8010320e:	09 d0                	or     %edx,%eax
-80103210:	c1 e0 04             	shl    $0x4,%eax
-80103213:	75 1b                	jne    80103230 <mpinit+0x40>
-    p = ((bda[0x14]<<8)|bda[0x13])*1024;
-80103215:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
-8010321c:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
-80103223:	c1 e0 08             	shl    $0x8,%eax
-80103226:	09 d0                	or     %edx,%eax
-80103228:	c1 e0 0a             	shl    $0xa,%eax
-    if((mp = mpsearch1(p-1024, 1024)))
-8010322b:	2d 00 04 00 00       	sub    $0x400,%eax
-    if((mp = mpsearch1(p, 1024)))
-80103230:	ba 00 04 00 00       	mov    $0x400,%edx
-80103235:	e8 36 ff ff ff       	call   80103170 <mpsearch1>
-8010323a:	89 c6                	mov    %eax,%esi
-8010323c:	85 c0                	test   %eax,%eax
-8010323e:	0f 84 4c 01 00 00    	je     80103390 <mpinit+0x1a0>
-  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
-80103244:	8b 5e 04             	mov    0x4(%esi),%ebx
-80103247:	85 db                	test   %ebx,%ebx
-80103249:	0f 84 61 01 00 00    	je     801033b0 <mpinit+0x1c0>
-  if(memcmp(conf, "PCMP", 4) != 0)
-8010324f:	83 ec 04             	sub    $0x4,%esp
-  conf = (struct mpconf*) P2V((uint) mp->physaddr);
-80103252:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-  if(memcmp(conf, "PCMP", 4) != 0)
-80103258:	6a 04                	push   $0x4
-8010325a:	68 3d 7a 10 80       	push   $0x80107a3d
-8010325f:	50                   	push   %eax
-  conf = (struct mpconf*) P2V((uint) mp->physaddr);
-80103260:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  if(memcmp(conf, "PCMP", 4) != 0)
-80103263:	e8 b8 17 00 00       	call   80104a20 <memcmp>
-80103268:	83 c4 10             	add    $0x10,%esp
-8010326b:	85 c0                	test   %eax,%eax
-8010326d:	0f 85 3d 01 00 00    	jne    801033b0 <mpinit+0x1c0>
-  if(conf->version != 1 && conf->version != 4)
-80103273:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
-8010327a:	3c 01                	cmp    $0x1,%al
-8010327c:	74 08                	je     80103286 <mpinit+0x96>
-8010327e:	3c 04                	cmp    $0x4,%al
-80103280:	0f 85 2a 01 00 00    	jne    801033b0 <mpinit+0x1c0>
-  if(sum((uchar*)conf, conf->length) != 0)
-80103286:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
-  for(i=0; i<len; i++)
-8010328d:	66 85 d2             	test   %dx,%dx
-80103290:	74 26                	je     801032b8 <mpinit+0xc8>
-80103292:	8d 3c 1a             	lea    (%edx,%ebx,1),%edi
-80103295:	89 d8                	mov    %ebx,%eax
-  sum = 0;
-80103297:	31 d2                	xor    %edx,%edx
-80103299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    sum += addr[i];
-801032a0:	0f b6 88 00 00 00 80 	movzbl -0x80000000(%eax),%ecx
-801032a7:	83 c0 01             	add    $0x1,%eax
-801032aa:	01 ca                	add    %ecx,%edx
-  for(i=0; i<len; i++)
-801032ac:	39 f8                	cmp    %edi,%eax
-801032ae:	75 f0                	jne    801032a0 <mpinit+0xb0>
-  if(sum((uchar*)conf, conf->length) != 0)
-801032b0:	84 d2                	test   %dl,%dl
-801032b2:	0f 85 f8 00 00 00    	jne    801033b0 <mpinit+0x1c0>
-  struct mpioapic *ioapic;
-
-  if((conf = mpconfig(&mp)) == 0)
-    panic("Expect to run on an SMP");
-  ismp = 1;
-  lapic = (uint*)conf->lapicaddr;
-801032b8:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
-801032be:	a3 7c 26 11 80       	mov    %eax,0x8011267c
-  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-801032c3:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
-801032c9:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
-  ismp = 1;
-801032d0:	bb 01 00 00 00       	mov    $0x1,%ebx
-  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-801032d5:	03 55 e4             	add    -0x1c(%ebp),%edx
-801032d8:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
-801032db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801032df:	90                   	nop
-801032e0:	39 c2                	cmp    %eax,%edx
-801032e2:	76 15                	jbe    801032f9 <mpinit+0x109>
-    switch(*p){
-801032e4:	0f b6 08             	movzbl (%eax),%ecx
-801032e7:	80 f9 02             	cmp    $0x2,%cl
-801032ea:	74 5c                	je     80103348 <mpinit+0x158>
-801032ec:	77 42                	ja     80103330 <mpinit+0x140>
-801032ee:	84 c9                	test   %cl,%cl
-801032f0:	74 6e                	je     80103360 <mpinit+0x170>
-      p += sizeof(struct mpioapic);
-      continue;
-    case MPBUS:
-    case MPIOINTR:
-    case MPLINTR:
-      p += 8;
-801032f2:	83 c0 08             	add    $0x8,%eax
-  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-801032f5:	39 c2                	cmp    %eax,%edx
-801032f7:	77 eb                	ja     801032e4 <mpinit+0xf4>
-801032f9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-    default:
-      ismp = 0;
-      break;
-    }
-  }
-  if(!ismp)
-801032fc:	85 db                	test   %ebx,%ebx
-801032fe:	0f 84 b9 00 00 00    	je     801033bd <mpinit+0x1cd>
-    panic("Didn't find a suitable machine");
-
-  if(mp->imcrp){
-80103304:	80 7e 0c 00          	cmpb   $0x0,0xc(%esi)
-80103308:	74 15                	je     8010331f <mpinit+0x12f>
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010330a:	b8 70 00 00 00       	mov    $0x70,%eax
-8010330f:	ba 22 00 00 00       	mov    $0x22,%edx
-80103314:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80103315:	ba 23 00 00 00       	mov    $0x23,%edx
-8010331a:	ec                   	in     (%dx),%al
-    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
-    // But it would on real hardware.
-    outb(0x22, 0x70);   // Select IMCR
-    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
-8010331b:	83 c8 01             	or     $0x1,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010331e:	ee                   	out    %al,(%dx)
-  }
-}
-8010331f:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103322:	5b                   	pop    %ebx
-80103323:	5e                   	pop    %esi
-80103324:	5f                   	pop    %edi
-80103325:	5d                   	pop    %ebp
-80103326:	c3                   	ret    
-80103327:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010332e:	66 90                	xchg   %ax,%ax
-    switch(*p){
-80103330:	83 e9 03             	sub    $0x3,%ecx
-80103333:	80 f9 01             	cmp    $0x1,%cl
-80103336:	76 ba                	jbe    801032f2 <mpinit+0x102>
-80103338:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-8010333f:	eb 9f                	jmp    801032e0 <mpinit+0xf0>
-80103341:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      ioapicid = ioapic->apicno;
-80103348:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
-      p += sizeof(struct mpioapic);
-8010334c:	83 c0 08             	add    $0x8,%eax
-      ioapicid = ioapic->apicno;
-8010334f:	88 0d 60 27 11 80    	mov    %cl,0x80112760
-      continue;
-80103355:	eb 89                	jmp    801032e0 <mpinit+0xf0>
-80103357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010335e:	66 90                	xchg   %ax,%ax
-      if(ncpu < NCPU) {
-80103360:	8b 0d 00 2d 11 80    	mov    0x80112d00,%ecx
-80103366:	83 f9 07             	cmp    $0x7,%ecx
-80103369:	7f 19                	jg     80103384 <mpinit+0x194>
-        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-8010336b:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
-80103371:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
-        ncpu++;
-80103375:	83 c1 01             	add    $0x1,%ecx
-80103378:	89 0d 00 2d 11 80    	mov    %ecx,0x80112d00
-        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-8010337e:	88 9f 80 27 11 80    	mov    %bl,-0x7feed880(%edi)
-      p += sizeof(struct mpproc);
-80103384:	83 c0 14             	add    $0x14,%eax
-      continue;
-80103387:	e9 54 ff ff ff       	jmp    801032e0 <mpinit+0xf0>
-8010338c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  return mpsearch1(0xF0000, 0x10000);
-80103390:	ba 00 00 01 00       	mov    $0x10000,%edx
-80103395:	b8 00 00 0f 00       	mov    $0xf0000,%eax
-8010339a:	e8 d1 fd ff ff       	call   80103170 <mpsearch1>
-8010339f:	89 c6                	mov    %eax,%esi
-  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
-801033a1:	85 c0                	test   %eax,%eax
-801033a3:	0f 85 9b fe ff ff    	jne    80103244 <mpinit+0x54>
-801033a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    panic("Expect to run on an SMP");
-801033b0:	83 ec 0c             	sub    $0xc,%esp
-801033b3:	68 42 7a 10 80       	push   $0x80107a42
-801033b8:	e8 d3 cf ff ff       	call   80100390 <panic>
-    panic("Didn't find a suitable machine");
-801033bd:	83 ec 0c             	sub    $0xc,%esp
-801033c0:	68 5c 7a 10 80       	push   $0x80107a5c
-801033c5:	e8 c6 cf ff ff       	call   80100390 <panic>
-801033ca:	66 90                	xchg   %ax,%ax
-801033cc:	66 90                	xchg   %ax,%ax
-801033ce:	66 90                	xchg   %ax,%ax
-
-801033d0 <picinit>:
-#define IO_PIC2         0xA0    // Slave (IRQs 8-15)
-
-// Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
-void
-picinit(void)
-{
-801033d0:	f3 0f 1e fb          	endbr32 
-801033d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801033d9:	ba 21 00 00 00       	mov    $0x21,%edx
-801033de:	ee                   	out    %al,(%dx)
-801033df:	ba a1 00 00 00       	mov    $0xa1,%edx
-801033e4:	ee                   	out    %al,(%dx)
-  // mask all interrupts
-  outb(IO_PIC1+1, 0xFF);
-  outb(IO_PIC2+1, 0xFF);
-}
-801033e5:	c3                   	ret    
-801033e6:	66 90                	xchg   %ax,%ax
-801033e8:	66 90                	xchg   %ax,%ax
-801033ea:	66 90                	xchg   %ax,%ax
-801033ec:	66 90                	xchg   %ax,%ax
-801033ee:	66 90                	xchg   %ax,%ax
-
-801033f0 <pipealloc>:
-  int writeopen;  // write fd is still open
-};
-
-int
-pipealloc(struct file **f0, struct file **f1)
-{
-801033f0:	f3 0f 1e fb          	endbr32 
-801033f4:	55                   	push   %ebp
-801033f5:	89 e5                	mov    %esp,%ebp
-801033f7:	57                   	push   %edi
-801033f8:	56                   	push   %esi
-801033f9:	53                   	push   %ebx
-801033fa:	83 ec 0c             	sub    $0xc,%esp
-801033fd:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80103400:	8b 75 0c             	mov    0xc(%ebp),%esi
-  struct pipe *p;
-
-  p = 0;
-  *f0 = *f1 = 0;
-80103403:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
-80103409:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
-8010340f:	e8 ec d9 ff ff       	call   80100e00 <filealloc>
-80103414:	89 03                	mov    %eax,(%ebx)
-80103416:	85 c0                	test   %eax,%eax
-80103418:	0f 84 ac 00 00 00    	je     801034ca <pipealloc+0xda>
-8010341e:	e8 dd d9 ff ff       	call   80100e00 <filealloc>
-80103423:	89 06                	mov    %eax,(%esi)
-80103425:	85 c0                	test   %eax,%eax
-80103427:	0f 84 8b 00 00 00    	je     801034b8 <pipealloc+0xc8>
-    goto bad;
-  if((p = (struct pipe*)kalloc()) == 0)
-8010342d:	e8 fe f1 ff ff       	call   80102630 <kalloc>
-80103432:	89 c7                	mov    %eax,%edi
-80103434:	85 c0                	test   %eax,%eax
-80103436:	0f 84 b4 00 00 00    	je     801034f0 <pipealloc+0x100>
-    goto bad;
-  p->readopen = 1;
-8010343c:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
-80103443:	00 00 00 
-  p->writeopen = 1;
-  p->nwrite = 0;
-  p->nread = 0;
-  initlock(&p->lock, "pipe");
-80103446:	83 ec 08             	sub    $0x8,%esp
-  p->writeopen = 1;
-80103449:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
-80103450:	00 00 00 
-  p->nwrite = 0;
-80103453:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
-8010345a:	00 00 00 
-  p->nread = 0;
-8010345d:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
-80103464:	00 00 00 
-  initlock(&p->lock, "pipe");
-80103467:	68 7b 7a 10 80       	push   $0x80107a7b
-8010346c:	50                   	push   %eax
-8010346d:	e8 ce 12 00 00       	call   80104740 <initlock>
-  (*f0)->type = FD_PIPE;
-80103472:	8b 03                	mov    (%ebx),%eax
-  (*f0)->pipe = p;
-  (*f1)->type = FD_PIPE;
-  (*f1)->readable = 0;
-  (*f1)->writable = 1;
-  (*f1)->pipe = p;
-  return 0;
-80103474:	83 c4 10             	add    $0x10,%esp
-  (*f0)->type = FD_PIPE;
-80103477:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
-  (*f0)->readable = 1;
-8010347d:	8b 03                	mov    (%ebx),%eax
-8010347f:	c6 40 08 01          	movb   $0x1,0x8(%eax)
-  (*f0)->writable = 0;
-80103483:	8b 03                	mov    (%ebx),%eax
-80103485:	c6 40 09 00          	movb   $0x0,0x9(%eax)
-  (*f0)->pipe = p;
-80103489:	8b 03                	mov    (%ebx),%eax
-8010348b:	89 78 0c             	mov    %edi,0xc(%eax)
-  (*f1)->type = FD_PIPE;
-8010348e:	8b 06                	mov    (%esi),%eax
-80103490:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
-  (*f1)->readable = 0;
-80103496:	8b 06                	mov    (%esi),%eax
-80103498:	c6 40 08 00          	movb   $0x0,0x8(%eax)
-  (*f1)->writable = 1;
-8010349c:	8b 06                	mov    (%esi),%eax
-8010349e:	c6 40 09 01          	movb   $0x1,0x9(%eax)
-  (*f1)->pipe = p;
-801034a2:	8b 06                	mov    (%esi),%eax
-801034a4:	89 78 0c             	mov    %edi,0xc(%eax)
-  if(*f0)
-    fileclose(*f0);
-  if(*f1)
-    fileclose(*f1);
-  return -1;
-}
-801034a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
-801034aa:	31 c0                	xor    %eax,%eax
-}
-801034ac:	5b                   	pop    %ebx
-801034ad:	5e                   	pop    %esi
-801034ae:	5f                   	pop    %edi
-801034af:	5d                   	pop    %ebp
-801034b0:	c3                   	ret    
-801034b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  if(*f0)
-801034b8:	8b 03                	mov    (%ebx),%eax
-801034ba:	85 c0                	test   %eax,%eax
-801034bc:	74 1e                	je     801034dc <pipealloc+0xec>
-    fileclose(*f0);
-801034be:	83 ec 0c             	sub    $0xc,%esp
-801034c1:	50                   	push   %eax
-801034c2:	e8 f9 d9 ff ff       	call   80100ec0 <fileclose>
-801034c7:	83 c4 10             	add    $0x10,%esp
-  if(*f1)
-801034ca:	8b 06                	mov    (%esi),%eax
-801034cc:	85 c0                	test   %eax,%eax
-801034ce:	74 0c                	je     801034dc <pipealloc+0xec>
-    fileclose(*f1);
-801034d0:	83 ec 0c             	sub    $0xc,%esp
-801034d3:	50                   	push   %eax
-801034d4:	e8 e7 d9 ff ff       	call   80100ec0 <fileclose>
-801034d9:	83 c4 10             	add    $0x10,%esp
-}
-801034dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return -1;
-801034df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801034e4:	5b                   	pop    %ebx
-801034e5:	5e                   	pop    %esi
-801034e6:	5f                   	pop    %edi
-801034e7:	5d                   	pop    %ebp
-801034e8:	c3                   	ret    
-801034e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  if(*f0)
-801034f0:	8b 03                	mov    (%ebx),%eax
-801034f2:	85 c0                	test   %eax,%eax
-801034f4:	75 c8                	jne    801034be <pipealloc+0xce>
-801034f6:	eb d2                	jmp    801034ca <pipealloc+0xda>
-801034f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801034ff:	90                   	nop
-
-80103500 <pipeclose>:
-
-void
-pipeclose(struct pipe *p, int writable)
-{
-80103500:	f3 0f 1e fb          	endbr32 
-80103504:	55                   	push   %ebp
-80103505:	89 e5                	mov    %esp,%ebp
-80103507:	56                   	push   %esi
-80103508:	53                   	push   %ebx
-80103509:	8b 5d 08             	mov    0x8(%ebp),%ebx
-8010350c:	8b 75 0c             	mov    0xc(%ebp),%esi
-  acquire(&p->lock);
-8010350f:	83 ec 0c             	sub    $0xc,%esp
-80103512:	53                   	push   %ebx
-80103513:	e8 a8 13 00 00       	call   801048c0 <acquire>
-  if(writable){
-80103518:	83 c4 10             	add    $0x10,%esp
-8010351b:	85 f6                	test   %esi,%esi
-8010351d:	74 41                	je     80103560 <pipeclose+0x60>
-    p->writeopen = 0;
-    wakeup(&p->nread);
-8010351f:	83 ec 0c             	sub    $0xc,%esp
-80103522:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
-    p->writeopen = 0;
-80103528:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
-8010352f:	00 00 00 
-    wakeup(&p->nread);
-80103532:	50                   	push   %eax
-80103533:	e8 a8 0b 00 00       	call   801040e0 <wakeup>
-80103538:	83 c4 10             	add    $0x10,%esp
-  } else {
-    p->readopen = 0;
-    wakeup(&p->nwrite);
-  }
-  if(p->readopen == 0 && p->writeopen == 0){
-8010353b:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
-80103541:	85 d2                	test   %edx,%edx
-80103543:	75 0a                	jne    8010354f <pipeclose+0x4f>
-80103545:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
-8010354b:	85 c0                	test   %eax,%eax
-8010354d:	74 31                	je     80103580 <pipeclose+0x80>
-    release(&p->lock);
-    kfree((char*)p);
-  } else
-    release(&p->lock);
-8010354f:	89 5d 08             	mov    %ebx,0x8(%ebp)
-}
-80103552:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103555:	5b                   	pop    %ebx
-80103556:	5e                   	pop    %esi
-80103557:	5d                   	pop    %ebp
-    release(&p->lock);
-80103558:	e9 23 14 00 00       	jmp    80104980 <release>
-8010355d:	8d 76 00             	lea    0x0(%esi),%esi
-    wakeup(&p->nwrite);
-80103560:	83 ec 0c             	sub    $0xc,%esp
-80103563:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
-    p->readopen = 0;
-80103569:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
-80103570:	00 00 00 
-    wakeup(&p->nwrite);
-80103573:	50                   	push   %eax
-80103574:	e8 67 0b 00 00       	call   801040e0 <wakeup>
-80103579:	83 c4 10             	add    $0x10,%esp
-8010357c:	eb bd                	jmp    8010353b <pipeclose+0x3b>
-8010357e:	66 90                	xchg   %ax,%ax
-    release(&p->lock);
-80103580:	83 ec 0c             	sub    $0xc,%esp
-80103583:	53                   	push   %ebx
-80103584:	e8 f7 13 00 00       	call   80104980 <release>
-    kfree((char*)p);
-80103589:	89 5d 08             	mov    %ebx,0x8(%ebp)
-8010358c:	83 c4 10             	add    $0x10,%esp
-}
-8010358f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103592:	5b                   	pop    %ebx
-80103593:	5e                   	pop    %esi
-80103594:	5d                   	pop    %ebp
-    kfree((char*)p);
-80103595:	e9 d6 ee ff ff       	jmp    80102470 <kfree>
-8010359a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801035a0 <pipewrite>:
-
-//PAGEBREAK: 40
-int
-pipewrite(struct pipe *p, char *addr, int n)
-{
-801035a0:	f3 0f 1e fb          	endbr32 
-801035a4:	55                   	push   %ebp
-801035a5:	89 e5                	mov    %esp,%ebp
-801035a7:	57                   	push   %edi
-801035a8:	56                   	push   %esi
-801035a9:	53                   	push   %ebx
-801035aa:	83 ec 28             	sub    $0x28,%esp
-801035ad:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  int i;
-
-  acquire(&p->lock);
-801035b0:	53                   	push   %ebx
-801035b1:	e8 0a 13 00 00       	call   801048c0 <acquire>
-  for(i = 0; i < n; i++){
-801035b6:	8b 45 10             	mov    0x10(%ebp),%eax
-801035b9:	83 c4 10             	add    $0x10,%esp
-801035bc:	85 c0                	test   %eax,%eax
-801035be:	0f 8e bc 00 00 00    	jle    80103680 <pipewrite+0xe0>
-801035c4:	8b 45 0c             	mov    0xc(%ebp),%eax
-801035c7:	8b 8b 38 02 00 00    	mov    0x238(%ebx),%ecx
-    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-      if(p->readopen == 0 || myproc()->killed){
-        release(&p->lock);
-        return -1;
-      }
-      wakeup(&p->nread);
-801035cd:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
-801035d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-801035d6:	03 45 10             	add    0x10(%ebp),%eax
-801035d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
-    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-801035dc:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
-      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-801035e2:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
-    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-801035e8:	89 ca                	mov    %ecx,%edx
-801035ea:	05 00 02 00 00       	add    $0x200,%eax
-801035ef:	39 c1                	cmp    %eax,%ecx
-801035f1:	74 3b                	je     8010362e <pipewrite+0x8e>
-801035f3:	eb 63                	jmp    80103658 <pipewrite+0xb8>
-801035f5:	8d 76 00             	lea    0x0(%esi),%esi
-      if(p->readopen == 0 || myproc()->killed){
-801035f8:	e8 63 03 00 00       	call   80103960 <myproc>
-801035fd:	8b 48 24             	mov    0x24(%eax),%ecx
-80103600:	85 c9                	test   %ecx,%ecx
-80103602:	75 34                	jne    80103638 <pipewrite+0x98>
-      wakeup(&p->nread);
-80103604:	83 ec 0c             	sub    $0xc,%esp
-80103607:	57                   	push   %edi
-80103608:	e8 d3 0a 00 00       	call   801040e0 <wakeup>
-      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-8010360d:	58                   	pop    %eax
-8010360e:	5a                   	pop    %edx
-8010360f:	53                   	push   %ebx
-80103610:	56                   	push   %esi
-80103611:	e8 0a 09 00 00       	call   80103f20 <sleep>
-    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-80103616:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
-8010361c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
-80103622:	83 c4 10             	add    $0x10,%esp
-80103625:	05 00 02 00 00       	add    $0x200,%eax
-8010362a:	39 c2                	cmp    %eax,%edx
-8010362c:	75 2a                	jne    80103658 <pipewrite+0xb8>
-      if(p->readopen == 0 || myproc()->killed){
-8010362e:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
-80103634:	85 c0                	test   %eax,%eax
-80103636:	75 c0                	jne    801035f8 <pipewrite+0x58>
-        release(&p->lock);
-80103638:	83 ec 0c             	sub    $0xc,%esp
-8010363b:	53                   	push   %ebx
-8010363c:	e8 3f 13 00 00       	call   80104980 <release>
-        return -1;
-80103641:	83 c4 10             	add    $0x10,%esp
-80103644:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-    p->data[p->nwrite++ % PIPESIZE] = addr[i];
-  }
-  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
-  release(&p->lock);
-  return n;
-}
-80103649:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010364c:	5b                   	pop    %ebx
-8010364d:	5e                   	pop    %esi
-8010364e:	5f                   	pop    %edi
-8010364f:	5d                   	pop    %ebp
-80103650:	c3                   	ret    
-80103651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    p->data[p->nwrite++ % PIPESIZE] = addr[i];
-80103658:	8b 75 e4             	mov    -0x1c(%ebp),%esi
-8010365b:	8d 4a 01             	lea    0x1(%edx),%ecx
-8010365e:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
-80103664:	89 8b 38 02 00 00    	mov    %ecx,0x238(%ebx)
-8010366a:	0f b6 06             	movzbl (%esi),%eax
-8010366d:	83 c6 01             	add    $0x1,%esi
-80103670:	89 75 e4             	mov    %esi,-0x1c(%ebp)
-80103673:	88 44 13 34          	mov    %al,0x34(%ebx,%edx,1)
-  for(i = 0; i < n; i++){
-80103677:	3b 75 e0             	cmp    -0x20(%ebp),%esi
-8010367a:	0f 85 5c ff ff ff    	jne    801035dc <pipewrite+0x3c>
-  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
-80103680:	83 ec 0c             	sub    $0xc,%esp
-80103683:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
-80103689:	50                   	push   %eax
-8010368a:	e8 51 0a 00 00       	call   801040e0 <wakeup>
-  release(&p->lock);
-8010368f:	89 1c 24             	mov    %ebx,(%esp)
-80103692:	e8 e9 12 00 00       	call   80104980 <release>
-  return n;
-80103697:	8b 45 10             	mov    0x10(%ebp),%eax
-8010369a:	83 c4 10             	add    $0x10,%esp
-8010369d:	eb aa                	jmp    80103649 <pipewrite+0xa9>
-8010369f:	90                   	nop
-
-801036a0 <piperead>:
-
-int
-piperead(struct pipe *p, char *addr, int n)
-{
-801036a0:	f3 0f 1e fb          	endbr32 
-801036a4:	55                   	push   %ebp
-801036a5:	89 e5                	mov    %esp,%ebp
-801036a7:	57                   	push   %edi
-801036a8:	56                   	push   %esi
-801036a9:	53                   	push   %ebx
-801036aa:	83 ec 18             	sub    $0x18,%esp
-801036ad:	8b 75 08             	mov    0x8(%ebp),%esi
-801036b0:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  int i;
-
-  acquire(&p->lock);
-801036b3:	56                   	push   %esi
-801036b4:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
-801036ba:	e8 01 12 00 00       	call   801048c0 <acquire>
-  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-801036bf:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
-801036c5:	83 c4 10             	add    $0x10,%esp
-801036c8:	39 86 38 02 00 00    	cmp    %eax,0x238(%esi)
-801036ce:	74 33                	je     80103703 <piperead+0x63>
-801036d0:	eb 3b                	jmp    8010370d <piperead+0x6d>
-801036d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(myproc()->killed){
-801036d8:	e8 83 02 00 00       	call   80103960 <myproc>
-801036dd:	8b 48 24             	mov    0x24(%eax),%ecx
-801036e0:	85 c9                	test   %ecx,%ecx
-801036e2:	0f 85 88 00 00 00    	jne    80103770 <piperead+0xd0>
-      release(&p->lock);
-      return -1;
-    }
-    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
-801036e8:	83 ec 08             	sub    $0x8,%esp
-801036eb:	56                   	push   %esi
-801036ec:	53                   	push   %ebx
-801036ed:	e8 2e 08 00 00       	call   80103f20 <sleep>
-  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-801036f2:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
-801036f8:	83 c4 10             	add    $0x10,%esp
-801036fb:	39 86 34 02 00 00    	cmp    %eax,0x234(%esi)
-80103701:	75 0a                	jne    8010370d <piperead+0x6d>
-80103703:	8b 86 40 02 00 00    	mov    0x240(%esi),%eax
-80103709:	85 c0                	test   %eax,%eax
-8010370b:	75 cb                	jne    801036d8 <piperead+0x38>
-  }
-  for(i = 0; i < n; i++){  //DOC: piperead-copy
-8010370d:	8b 55 10             	mov    0x10(%ebp),%edx
-80103710:	31 db                	xor    %ebx,%ebx
-80103712:	85 d2                	test   %edx,%edx
-80103714:	7f 28                	jg     8010373e <piperead+0x9e>
-80103716:	eb 34                	jmp    8010374c <piperead+0xac>
-80103718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010371f:	90                   	nop
-    if(p->nread == p->nwrite)
-      break;
-    addr[i] = p->data[p->nread++ % PIPESIZE];
-80103720:	8d 48 01             	lea    0x1(%eax),%ecx
-80103723:	25 ff 01 00 00       	and    $0x1ff,%eax
-80103728:	89 8e 34 02 00 00    	mov    %ecx,0x234(%esi)
-8010372e:	0f b6 44 06 34       	movzbl 0x34(%esi,%eax,1),%eax
-80103733:	88 04 1f             	mov    %al,(%edi,%ebx,1)
-  for(i = 0; i < n; i++){  //DOC: piperead-copy
-80103736:	83 c3 01             	add    $0x1,%ebx
-80103739:	39 5d 10             	cmp    %ebx,0x10(%ebp)
-8010373c:	74 0e                	je     8010374c <piperead+0xac>
-    if(p->nread == p->nwrite)
-8010373e:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
-80103744:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
-8010374a:	75 d4                	jne    80103720 <piperead+0x80>
-  }
-  wakeup(&p->nwrite);  //DOC: piperead-wakeup
-8010374c:	83 ec 0c             	sub    $0xc,%esp
-8010374f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
-80103755:	50                   	push   %eax
-80103756:	e8 85 09 00 00       	call   801040e0 <wakeup>
-  release(&p->lock);
-8010375b:	89 34 24             	mov    %esi,(%esp)
-8010375e:	e8 1d 12 00 00       	call   80104980 <release>
-  return i;
-80103763:	83 c4 10             	add    $0x10,%esp
-}
-80103766:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103769:	89 d8                	mov    %ebx,%eax
-8010376b:	5b                   	pop    %ebx
-8010376c:	5e                   	pop    %esi
-8010376d:	5f                   	pop    %edi
-8010376e:	5d                   	pop    %ebp
-8010376f:	c3                   	ret    
-      release(&p->lock);
-80103770:	83 ec 0c             	sub    $0xc,%esp
-      return -1;
-80103773:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-      release(&p->lock);
-80103778:	56                   	push   %esi
-80103779:	e8 02 12 00 00       	call   80104980 <release>
-      return -1;
-8010377e:	83 c4 10             	add    $0x10,%esp
-}
-80103781:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103784:	89 d8                	mov    %ebx,%eax
-80103786:	5b                   	pop    %ebx
-80103787:	5e                   	pop    %esi
-80103788:	5f                   	pop    %edi
-80103789:	5d                   	pop    %ebp
-8010378a:	c3                   	ret    
-8010378b:	66 90                	xchg   %ax,%ax
-8010378d:	66 90                	xchg   %ax,%ax
-8010378f:	90                   	nop
-
-80103790 <allocproc>:
-// If found, change state to EMBRYO and initialize
-// state required to run in the kernel.
-// Otherwise return 0.
-static struct proc*
-allocproc(void)
-{
-80103790:	55                   	push   %ebp
-80103791:	89 e5                	mov    %esp,%ebp
-80103793:	53                   	push   %ebx
-  struct proc *p;
-  char *sp;
-
-  acquire(&ptable.lock);
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103794:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
-{
-80103799:	83 ec 10             	sub    $0x10,%esp
-  acquire(&ptable.lock);
-8010379c:	68 20 2d 11 80       	push   $0x80112d20
-801037a1:	e8 1a 11 00 00       	call   801048c0 <acquire>
-801037a6:	83 c4 10             	add    $0x10,%esp
-801037a9:	eb 10                	jmp    801037bb <allocproc+0x2b>
-801037ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801037af:	90                   	nop
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801037b0:	83 eb 80             	sub    $0xffffff80,%ebx
-801037b3:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
-801037b9:	74 75                	je     80103830 <allocproc+0xa0>
-    if(p->state == UNUSED)
-801037bb:	8b 43 0c             	mov    0xc(%ebx),%eax
-801037be:	85 c0                	test   %eax,%eax
-801037c0:	75 ee                	jne    801037b0 <allocproc+0x20>
-  release(&ptable.lock);
-  return 0;
-
-found:
-  p->state = EMBRYO;
-  p->pid = nextpid++;
-801037c2:	a1 04 a0 10 80       	mov    0x8010a004,%eax
-
-  release(&ptable.lock);
-801037c7:	83 ec 0c             	sub    $0xc,%esp
-  p->state = EMBRYO;
-801037ca:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
-  p->pid = nextpid++;
-801037d1:	89 43 10             	mov    %eax,0x10(%ebx)
-801037d4:	8d 50 01             	lea    0x1(%eax),%edx
-  release(&ptable.lock);
-801037d7:	68 20 2d 11 80       	push   $0x80112d20
-  p->pid = nextpid++;
-801037dc:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
-  release(&ptable.lock);
-801037e2:	e8 99 11 00 00       	call   80104980 <release>
-
-  // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
-801037e7:	e8 44 ee ff ff       	call   80102630 <kalloc>
-801037ec:	83 c4 10             	add    $0x10,%esp
-801037ef:	89 43 08             	mov    %eax,0x8(%ebx)
-801037f2:	85 c0                	test   %eax,%eax
-801037f4:	74 53                	je     80103849 <allocproc+0xb9>
-    return 0;
-  }
-  sp = p->kstack + KSTACKSIZE;
-
-  // Leave room for trap frame.
-  sp -= sizeof *p->tf;
-801037f6:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
-  sp -= 4;
-  *(uint*)sp = (uint)trapret;
-
-  sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
-  memset(p->context, 0, sizeof *p->context);
-801037fc:	83 ec 04             	sub    $0x4,%esp
-  sp -= sizeof *p->context;
-801037ff:	05 9c 0f 00 00       	add    $0xf9c,%eax
-  sp -= sizeof *p->tf;
-80103804:	89 53 18             	mov    %edx,0x18(%ebx)
-  *(uint*)sp = (uint)trapret;
-80103807:	c7 40 14 e1 5c 10 80 	movl   $0x80105ce1,0x14(%eax)
-  p->context = (struct context*)sp;
-8010380e:	89 43 1c             	mov    %eax,0x1c(%ebx)
-  memset(p->context, 0, sizeof *p->context);
-80103811:	6a 14                	push   $0x14
-80103813:	6a 00                	push   $0x0
-80103815:	50                   	push   %eax
-80103816:	e8 b5 11 00 00       	call   801049d0 <memset>
-  p->context->eip = (uint)forkret;
-8010381b:	8b 43 1c             	mov    0x1c(%ebx),%eax
-
-  return p;
-8010381e:	83 c4 10             	add    $0x10,%esp
-  p->context->eip = (uint)forkret;
-80103821:	c7 40 10 60 38 10 80 	movl   $0x80103860,0x10(%eax)
-}
-80103828:	89 d8                	mov    %ebx,%eax
-8010382a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010382d:	c9                   	leave  
-8010382e:	c3                   	ret    
-8010382f:	90                   	nop
-  release(&ptable.lock);
-80103830:	83 ec 0c             	sub    $0xc,%esp
-  return 0;
-80103833:	31 db                	xor    %ebx,%ebx
-  release(&ptable.lock);
-80103835:	68 20 2d 11 80       	push   $0x80112d20
-8010383a:	e8 41 11 00 00       	call   80104980 <release>
-}
-8010383f:	89 d8                	mov    %ebx,%eax
-  return 0;
-80103841:	83 c4 10             	add    $0x10,%esp
-}
-80103844:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103847:	c9                   	leave  
-80103848:	c3                   	ret    
-    p->state = UNUSED;
-80103849:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
-    return 0;
-80103850:	31 db                	xor    %ebx,%ebx
-}
-80103852:	89 d8                	mov    %ebx,%eax
-80103854:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103857:	c9                   	leave  
-80103858:	c3                   	ret    
-80103859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80103860 <forkret>:
-
-// A fork child's very first scheduling by scheduler()
-// will swtch here.  "Return" to user space.
-void
-forkret(void)
-{
-80103860:	f3 0f 1e fb          	endbr32 
-80103864:	55                   	push   %ebp
-80103865:	89 e5                	mov    %esp,%ebp
-80103867:	83 ec 14             	sub    $0x14,%esp
-  static int first = 1;
-  // Still holding ptable.lock from scheduler.
-  release(&ptable.lock);
-8010386a:	68 20 2d 11 80       	push   $0x80112d20
-8010386f:	e8 0c 11 00 00       	call   80104980 <release>
-
-  if (first) {
-80103874:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-80103879:	83 c4 10             	add    $0x10,%esp
-8010387c:	85 c0                	test   %eax,%eax
-8010387e:	75 08                	jne    80103888 <forkret+0x28>
-    iinit(ROOTDEV);
-    initlog(ROOTDEV);
-  }
-
-  // Return to "caller", actually trapret (see allocproc).
-}
-80103880:	c9                   	leave  
-80103881:	c3                   	ret    
-80103882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    first = 0;
-80103888:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
-8010388f:	00 00 00 
-    iinit(ROOTDEV);
-80103892:	83 ec 0c             	sub    $0xc,%esp
-80103895:	6a 01                	push   $0x1
-80103897:	e8 a4 dc ff ff       	call   80101540 <iinit>
-    initlog(ROOTDEV);
-8010389c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801038a3:	e8 e8 f3 ff ff       	call   80102c90 <initlog>
-}
-801038a8:	83 c4 10             	add    $0x10,%esp
-801038ab:	c9                   	leave  
-801038ac:	c3                   	ret    
-801038ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-801038b0 <pinit>:
-{
-801038b0:	f3 0f 1e fb          	endbr32 
-801038b4:	55                   	push   %ebp
-801038b5:	89 e5                	mov    %esp,%ebp
-801038b7:	83 ec 10             	sub    $0x10,%esp
-  initlock(&ptable.lock, "ptable");
-801038ba:	68 80 7a 10 80       	push   $0x80107a80
-801038bf:	68 20 2d 11 80       	push   $0x80112d20
-801038c4:	e8 77 0e 00 00       	call   80104740 <initlock>
-}
-801038c9:	83 c4 10             	add    $0x10,%esp
-801038cc:	c9                   	leave  
-801038cd:	c3                   	ret    
-801038ce:	66 90                	xchg   %ax,%ax
-
-801038d0 <mycpu>:
-{
-801038d0:	f3 0f 1e fb          	endbr32 
-801038d4:	55                   	push   %ebp
-801038d5:	89 e5                	mov    %esp,%ebp
-801038d7:	56                   	push   %esi
-801038d8:	53                   	push   %ebx
-  asm volatile("pushfl; popl %0" : "=r" (eflags));
-801038d9:	9c                   	pushf  
-801038da:	58                   	pop    %eax
-  if(readeflags()&FL_IF)
-801038db:	f6 c4 02             	test   $0x2,%ah
-801038de:	75 4a                	jne    8010392a <mycpu+0x5a>
-  apicid = lapicid();
-801038e0:	e8 bb ef ff ff       	call   801028a0 <lapicid>
-  for (i = 0; i < ncpu; ++i) {
-801038e5:	8b 35 00 2d 11 80    	mov    0x80112d00,%esi
-  apicid = lapicid();
-801038eb:	89 c3                	mov    %eax,%ebx
-  for (i = 0; i < ncpu; ++i) {
-801038ed:	85 f6                	test   %esi,%esi
-801038ef:	7e 2c                	jle    8010391d <mycpu+0x4d>
-801038f1:	31 d2                	xor    %edx,%edx
-801038f3:	eb 0a                	jmp    801038ff <mycpu+0x2f>
-801038f5:	8d 76 00             	lea    0x0(%esi),%esi
-801038f8:	83 c2 01             	add    $0x1,%edx
-801038fb:	39 f2                	cmp    %esi,%edx
-801038fd:	74 1e                	je     8010391d <mycpu+0x4d>
-    if (cpus[i].apicid == apicid)
-801038ff:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
-80103905:	0f b6 81 80 27 11 80 	movzbl -0x7feed880(%ecx),%eax
-8010390c:	39 d8                	cmp    %ebx,%eax
-8010390e:	75 e8                	jne    801038f8 <mycpu+0x28>
-}
-80103910:	8d 65 f8             	lea    -0x8(%ebp),%esp
-      return &cpus[i];
-80103913:	8d 81 80 27 11 80    	lea    -0x7feed880(%ecx),%eax
-}
-80103919:	5b                   	pop    %ebx
-8010391a:	5e                   	pop    %esi
-8010391b:	5d                   	pop    %ebp
-8010391c:	c3                   	ret    
-  panic("unknown apicid\n");
-8010391d:	83 ec 0c             	sub    $0xc,%esp
-80103920:	68 87 7a 10 80       	push   $0x80107a87
-80103925:	e8 66 ca ff ff       	call   80100390 <panic>
-    panic("mycpu called with interrupts enabled\n");
-8010392a:	83 ec 0c             	sub    $0xc,%esp
-8010392d:	68 64 7b 10 80       	push   $0x80107b64
-80103932:	e8 59 ca ff ff       	call   80100390 <panic>
-80103937:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010393e:	66 90                	xchg   %ax,%ax
-
-80103940 <cpuid>:
-cpuid() {
-80103940:	f3 0f 1e fb          	endbr32 
-80103944:	55                   	push   %ebp
-80103945:	89 e5                	mov    %esp,%ebp
-80103947:	83 ec 08             	sub    $0x8,%esp
-  return mycpu()-cpus;
-8010394a:	e8 81 ff ff ff       	call   801038d0 <mycpu>
-}
-8010394f:	c9                   	leave  
-  return mycpu()-cpus;
-80103950:	2d 80 27 11 80       	sub    $0x80112780,%eax
-80103955:	c1 f8 04             	sar    $0x4,%eax
-80103958:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
-}
-8010395e:	c3                   	ret    
-8010395f:	90                   	nop
-
-80103960 <myproc>:
-myproc(void) {
-80103960:	f3 0f 1e fb          	endbr32 
-80103964:	55                   	push   %ebp
-80103965:	89 e5                	mov    %esp,%ebp
-80103967:	53                   	push   %ebx
-80103968:	83 ec 04             	sub    $0x4,%esp
-  pushcli();
-8010396b:	e8 50 0e 00 00       	call   801047c0 <pushcli>
-  c = mycpu();
-80103970:	e8 5b ff ff ff       	call   801038d0 <mycpu>
-  p = c->proc;
-80103975:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-8010397b:	e8 90 0e 00 00       	call   80104810 <popcli>
-}
-80103980:	83 c4 04             	add    $0x4,%esp
-80103983:	89 d8                	mov    %ebx,%eax
-80103985:	5b                   	pop    %ebx
-80103986:	5d                   	pop    %ebp
-80103987:	c3                   	ret    
-80103988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010398f:	90                   	nop
-
-80103990 <userinit>:
-{
-80103990:	f3 0f 1e fb          	endbr32 
-80103994:	55                   	push   %ebp
-80103995:	89 e5                	mov    %esp,%ebp
-80103997:	53                   	push   %ebx
-80103998:	83 ec 04             	sub    $0x4,%esp
-  p = allocproc();
-8010399b:	e8 f0 fd ff ff       	call   80103790 <allocproc>
-801039a0:	89 c3                	mov    %eax,%ebx
-  initproc = p;
-801039a2:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
-  if((p->pgdir = setupkvm()) == 0)
-801039a7:	e8 f4 38 00 00       	call   801072a0 <setupkvm>
-801039ac:	89 43 04             	mov    %eax,0x4(%ebx)
-801039af:	85 c0                	test   %eax,%eax
-801039b1:	0f 84 bd 00 00 00    	je     80103a74 <userinit+0xe4>
-  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-801039b7:	83 ec 04             	sub    $0x4,%esp
-801039ba:	68 2c 00 00 00       	push   $0x2c
-801039bf:	68 60 a4 10 80       	push   $0x8010a460
-801039c4:	50                   	push   %eax
-801039c5:	e8 a6 35 00 00       	call   80106f70 <inituvm>
-  memset(p->tf, 0, sizeof(*p->tf));
-801039ca:	83 c4 0c             	add    $0xc,%esp
-  p->sz = PGSIZE;
-801039cd:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
-  memset(p->tf, 0, sizeof(*p->tf));
-801039d3:	6a 4c                	push   $0x4c
-801039d5:	6a 00                	push   $0x0
-801039d7:	ff 73 18             	pushl  0x18(%ebx)
-801039da:	e8 f1 0f 00 00       	call   801049d0 <memset>
-  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039df:	8b 43 18             	mov    0x18(%ebx),%eax
-801039e2:	ba 1b 00 00 00       	mov    $0x1b,%edx
-  safestrcpy(p->name, "initcode", sizeof(p->name));
-801039e7:	83 c4 0c             	add    $0xc,%esp
-  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039ea:	b9 23 00 00 00       	mov    $0x23,%ecx
-  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039ef:	66 89 50 3c          	mov    %dx,0x3c(%eax)
-  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039f3:	8b 43 18             	mov    0x18(%ebx),%eax
-801039f6:	66 89 48 2c          	mov    %cx,0x2c(%eax)
-  p->tf->es = p->tf->ds;
-801039fa:	8b 43 18             	mov    0x18(%ebx),%eax
-801039fd:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a01:	66 89 50 28          	mov    %dx,0x28(%eax)
-  p->tf->ss = p->tf->ds;
-80103a05:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a08:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a0c:	66 89 50 48          	mov    %dx,0x48(%eax)
-  p->tf->eflags = FL_IF;
-80103a10:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a13:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
-  p->tf->esp = PGSIZE;
-80103a1a:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a1d:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
-  p->tf->eip = 0;  // beginning of initcode.S
-80103a24:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a27:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
-  safestrcpy(p->name, "initcode", sizeof(p->name));
-80103a2e:	8d 43 6c             	lea    0x6c(%ebx),%eax
-80103a31:	6a 10                	push   $0x10
-80103a33:	68 b0 7a 10 80       	push   $0x80107ab0
-80103a38:	50                   	push   %eax
-80103a39:	e8 52 11 00 00       	call   80104b90 <safestrcpy>
-  p->cwd = namei("/");
-80103a3e:	c7 04 24 b9 7a 10 80 	movl   $0x80107ab9,(%esp)
-80103a45:	e8 e6 e5 ff ff       	call   80102030 <namei>
-80103a4a:	89 43 68             	mov    %eax,0x68(%ebx)
-  acquire(&ptable.lock);
-80103a4d:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a54:	e8 67 0e 00 00       	call   801048c0 <acquire>
-  p->state = RUNNABLE;
-80103a59:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
-  release(&ptable.lock);
-80103a60:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103a67:	e8 14 0f 00 00       	call   80104980 <release>
-}
-80103a6c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103a6f:	83 c4 10             	add    $0x10,%esp
-80103a72:	c9                   	leave  
-80103a73:	c3                   	ret    
-    panic("userinit: out of memory?");
-80103a74:	83 ec 0c             	sub    $0xc,%esp
-80103a77:	68 97 7a 10 80       	push   $0x80107a97
-80103a7c:	e8 0f c9 ff ff       	call   80100390 <panic>
-80103a81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103a88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103a8f:	90                   	nop
-
-80103a90 <growproc>:
-{
-80103a90:	f3 0f 1e fb          	endbr32 
-80103a94:	55                   	push   %ebp
-80103a95:	89 e5                	mov    %esp,%ebp
-80103a97:	56                   	push   %esi
-80103a98:	53                   	push   %ebx
-80103a99:	8b 75 08             	mov    0x8(%ebp),%esi
-  pushcli();
-80103a9c:	e8 1f 0d 00 00       	call   801047c0 <pushcli>
-  c = mycpu();
-80103aa1:	e8 2a fe ff ff       	call   801038d0 <mycpu>
-  p = c->proc;
-80103aa6:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-80103aac:	e8 5f 0d 00 00       	call   80104810 <popcli>
-  sz = curproc->sz;
-80103ab1:	8b 03                	mov    (%ebx),%eax
-  if(n > 0){
-80103ab3:	85 f6                	test   %esi,%esi
-80103ab5:	7f 19                	jg     80103ad0 <growproc+0x40>
-  } else if(n < 0){
-80103ab7:	75 37                	jne    80103af0 <growproc+0x60>
-  switchuvm(curproc);
-80103ab9:	83 ec 0c             	sub    $0xc,%esp
-  curproc->sz = sz;
-80103abc:	89 03                	mov    %eax,(%ebx)
-  switchuvm(curproc);
-80103abe:	53                   	push   %ebx
-80103abf:	e8 9c 33 00 00       	call   80106e60 <switchuvm>
-  return 0;
-80103ac4:	83 c4 10             	add    $0x10,%esp
-80103ac7:	31 c0                	xor    %eax,%eax
-}
-80103ac9:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103acc:	5b                   	pop    %ebx
-80103acd:	5e                   	pop    %esi
-80103ace:	5d                   	pop    %ebp
-80103acf:	c3                   	ret    
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103ad0:	83 ec 04             	sub    $0x4,%esp
-80103ad3:	01 c6                	add    %eax,%esi
-80103ad5:	56                   	push   %esi
-80103ad6:	50                   	push   %eax
-80103ad7:	ff 73 04             	pushl  0x4(%ebx)
-80103ada:	e8 e1 35 00 00       	call   801070c0 <allocuvm>
-80103adf:	83 c4 10             	add    $0x10,%esp
-80103ae2:	85 c0                	test   %eax,%eax
-80103ae4:	75 d3                	jne    80103ab9 <growproc+0x29>
-      return -1;
-80103ae6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103aeb:	eb dc                	jmp    80103ac9 <growproc+0x39>
-80103aed:	8d 76 00             	lea    0x0(%esi),%esi
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103af0:	83 ec 04             	sub    $0x4,%esp
-80103af3:	01 c6                	add    %eax,%esi
-80103af5:	56                   	push   %esi
-80103af6:	50                   	push   %eax
-80103af7:	ff 73 04             	pushl  0x4(%ebx)
-80103afa:	e8 f1 36 00 00       	call   801071f0 <deallocuvm>
-80103aff:	83 c4 10             	add    $0x10,%esp
-80103b02:	85 c0                	test   %eax,%eax
-80103b04:	75 b3                	jne    80103ab9 <growproc+0x29>
-80103b06:	eb de                	jmp    80103ae6 <growproc+0x56>
-80103b08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103b0f:	90                   	nop
-
-80103b10 <fork>:
-{
-80103b10:	f3 0f 1e fb          	endbr32 
-80103b14:	55                   	push   %ebp
-80103b15:	89 e5                	mov    %esp,%ebp
-80103b17:	57                   	push   %edi
-80103b18:	56                   	push   %esi
-80103b19:	53                   	push   %ebx
-80103b1a:	83 ec 1c             	sub    $0x1c,%esp
-  pushcli();
-80103b1d:	e8 9e 0c 00 00       	call   801047c0 <pushcli>
-  c = mycpu();
-80103b22:	e8 a9 fd ff ff       	call   801038d0 <mycpu>
-  p = c->proc;
-80103b27:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-80103b2d:	e8 de 0c 00 00       	call   80104810 <popcli>
-  if((np = allocproc()) == 0){
-80103b32:	e8 59 fc ff ff       	call   80103790 <allocproc>
-80103b37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80103b3a:	85 c0                	test   %eax,%eax
-80103b3c:	0f 84 bb 00 00 00    	je     80103bfd <fork+0xed>
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-80103b42:	83 ec 08             	sub    $0x8,%esp
-80103b45:	ff 33                	pushl  (%ebx)
-80103b47:	89 c7                	mov    %eax,%edi
-80103b49:	ff 73 04             	pushl  0x4(%ebx)
-80103b4c:	e8 1f 38 00 00       	call   80107370 <copyuvm>
-80103b51:	83 c4 10             	add    $0x10,%esp
-80103b54:	89 47 04             	mov    %eax,0x4(%edi)
-80103b57:	85 c0                	test   %eax,%eax
-80103b59:	0f 84 a5 00 00 00    	je     80103c04 <fork+0xf4>
-  np->sz = curproc->sz;
-80103b5f:	8b 03                	mov    (%ebx),%eax
-80103b61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80103b64:	89 01                	mov    %eax,(%ecx)
-  *np->tf = *curproc->tf;
-80103b66:	8b 79 18             	mov    0x18(%ecx),%edi
-  np->parent = curproc;
-80103b69:	89 c8                	mov    %ecx,%eax
-80103b6b:	89 59 14             	mov    %ebx,0x14(%ecx)
-  *np->tf = *curproc->tf;
-80103b6e:	b9 13 00 00 00       	mov    $0x13,%ecx
-80103b73:	8b 73 18             	mov    0x18(%ebx),%esi
-80103b76:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
-  for(i = 0; i < NOFILE; i++)
-80103b78:	31 f6                	xor    %esi,%esi
-  np->tf->eax = 0;
-80103b7a:	8b 40 18             	mov    0x18(%eax),%eax
-80103b7d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
-  for(i = 0; i < NOFILE; i++)
-80103b84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(curproc->ofile[i])
-80103b88:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
-80103b8c:	85 c0                	test   %eax,%eax
-80103b8e:	74 13                	je     80103ba3 <fork+0x93>
-      np->ofile[i] = filedup(curproc->ofile[i]);
-80103b90:	83 ec 0c             	sub    $0xc,%esp
-80103b93:	50                   	push   %eax
-80103b94:	e8 d7 d2 ff ff       	call   80100e70 <filedup>
-80103b99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80103b9c:	83 c4 10             	add    $0x10,%esp
-80103b9f:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
-  for(i = 0; i < NOFILE; i++)
-80103ba3:	83 c6 01             	add    $0x1,%esi
-80103ba6:	83 fe 10             	cmp    $0x10,%esi
-80103ba9:	75 dd                	jne    80103b88 <fork+0x78>
-  np->cwd = idup(curproc->cwd);
-80103bab:	83 ec 0c             	sub    $0xc,%esp
-80103bae:	ff 73 68             	pushl  0x68(%ebx)
-  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bb1:	83 c3 6c             	add    $0x6c,%ebx
-  np->cwd = idup(curproc->cwd);
-80103bb4:	e8 77 db ff ff       	call   80101730 <idup>
-80103bb9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bbc:	83 c4 0c             	add    $0xc,%esp
-  np->cwd = idup(curproc->cwd);
-80103bbf:	89 47 68             	mov    %eax,0x68(%edi)
-  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bc2:	8d 47 6c             	lea    0x6c(%edi),%eax
-80103bc5:	6a 10                	push   $0x10
-80103bc7:	53                   	push   %ebx
-80103bc8:	50                   	push   %eax
-80103bc9:	e8 c2 0f 00 00       	call   80104b90 <safestrcpy>
-  pid = np->pid;
-80103bce:	8b 5f 10             	mov    0x10(%edi),%ebx
-  acquire(&ptable.lock);
-80103bd1:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103bd8:	e8 e3 0c 00 00       	call   801048c0 <acquire>
-  np->state = RUNNABLE;
-80103bdd:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
-  release(&ptable.lock);
-80103be4:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103beb:	e8 90 0d 00 00       	call   80104980 <release>
-  return pid;
-80103bf0:	83 c4 10             	add    $0x10,%esp
-}
-80103bf3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103bf6:	89 d8                	mov    %ebx,%eax
-80103bf8:	5b                   	pop    %ebx
-80103bf9:	5e                   	pop    %esi
-80103bfa:	5f                   	pop    %edi
-80103bfb:	5d                   	pop    %ebp
-80103bfc:	c3                   	ret    
-    return -1;
-80103bfd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c02:	eb ef                	jmp    80103bf3 <fork+0xe3>
-    kfree(np->kstack);
-80103c04:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80103c07:	83 ec 0c             	sub    $0xc,%esp
-80103c0a:	ff 73 08             	pushl  0x8(%ebx)
-80103c0d:	e8 5e e8 ff ff       	call   80102470 <kfree>
-    np->kstack = 0;
-80103c12:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
-    return -1;
-80103c19:	83 c4 10             	add    $0x10,%esp
-    np->state = UNUSED;
-80103c1c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
-    return -1;
-80103c23:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c28:	eb c9                	jmp    80103bf3 <fork+0xe3>
-80103c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103c30 <scheduler>:
-{
-80103c30:	f3 0f 1e fb          	endbr32 
-80103c34:	55                   	push   %ebp
-80103c35:	89 e5                	mov    %esp,%ebp
-80103c37:	57                   	push   %edi
-80103c38:	56                   	push   %esi
-80103c39:	53                   	push   %ebx
-80103c3a:	83 ec 0c             	sub    $0xc,%esp
-  struct cpu *c = mycpu();
-80103c3d:	e8 8e fc ff ff       	call   801038d0 <mycpu>
-  c->proc = 0;
-80103c42:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
-80103c49:	00 00 00 
-  struct cpu *c = mycpu();
-80103c4c:	89 c6                	mov    %eax,%esi
-  c->proc = 0;
-80103c4e:	8d 78 04             	lea    0x4(%eax),%edi
-80103c51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  asm volatile("sti");
-80103c58:	fb                   	sti    
-    acquire(&ptable.lock);
-80103c59:	83 ec 0c             	sub    $0xc,%esp
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103c5c:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
-    acquire(&ptable.lock);
-80103c61:	68 20 2d 11 80       	push   $0x80112d20
-80103c66:	e8 55 0c 00 00       	call   801048c0 <acquire>
-80103c6b:	83 c4 10             	add    $0x10,%esp
-80103c6e:	66 90                	xchg   %ax,%ax
-      if(p->state != RUNNABLE)
-80103c70:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
-80103c74:	75 33                	jne    80103ca9 <scheduler+0x79>
-      switchuvm(p);
-80103c76:	83 ec 0c             	sub    $0xc,%esp
-      c->proc = p;
-80103c79:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
-      switchuvm(p);
-80103c7f:	53                   	push   %ebx
-80103c80:	e8 db 31 00 00       	call   80106e60 <switchuvm>
-      swtch(&(c->scheduler), p->context);
-80103c85:	58                   	pop    %eax
-80103c86:	5a                   	pop    %edx
-80103c87:	ff 73 1c             	pushl  0x1c(%ebx)
-80103c8a:	57                   	push   %edi
-      p->state = RUNNING;
-80103c8b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
-      swtch(&(c->scheduler), p->context);
-80103c92:	e8 5c 0f 00 00       	call   80104bf3 <swtch>
-      switchkvm();
-80103c97:	e8 a4 31 00 00       	call   80106e40 <switchkvm>
-      c->proc = 0;
-80103c9c:	83 c4 10             	add    $0x10,%esp
-80103c9f:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
-80103ca6:	00 00 00 
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103ca9:	83 eb 80             	sub    $0xffffff80,%ebx
-80103cac:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
-80103cb2:	75 bc                	jne    80103c70 <scheduler+0x40>
-    release(&ptable.lock);
-80103cb4:	83 ec 0c             	sub    $0xc,%esp
-80103cb7:	68 20 2d 11 80       	push   $0x80112d20
-80103cbc:	e8 bf 0c 00 00       	call   80104980 <release>
-    sti();
-80103cc1:	83 c4 10             	add    $0x10,%esp
-80103cc4:	eb 92                	jmp    80103c58 <scheduler+0x28>
-80103cc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ccd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103cd0 <sched>:
-{
-80103cd0:	f3 0f 1e fb          	endbr32 
-80103cd4:	55                   	push   %ebp
-80103cd5:	89 e5                	mov    %esp,%ebp
-80103cd7:	56                   	push   %esi
-80103cd8:	53                   	push   %ebx
-  pushcli();
-80103cd9:	e8 e2 0a 00 00       	call   801047c0 <pushcli>
-  c = mycpu();
-80103cde:	e8 ed fb ff ff       	call   801038d0 <mycpu>
-  p = c->proc;
-80103ce3:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-80103ce9:	e8 22 0b 00 00       	call   80104810 <popcli>
-  if(!holding(&ptable.lock))
-80103cee:	83 ec 0c             	sub    $0xc,%esp
-80103cf1:	68 20 2d 11 80       	push   $0x80112d20
-80103cf6:	e8 75 0b 00 00       	call   80104870 <holding>
-80103cfb:	83 c4 10             	add    $0x10,%esp
-80103cfe:	85 c0                	test   %eax,%eax
-80103d00:	74 4f                	je     80103d51 <sched+0x81>
-  if(mycpu()->ncli != 1)
-80103d02:	e8 c9 fb ff ff       	call   801038d0 <mycpu>
-80103d07:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
-80103d0e:	75 68                	jne    80103d78 <sched+0xa8>
-  if(p->state == RUNNING)
-80103d10:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
-80103d14:	74 55                	je     80103d6b <sched+0x9b>
-  asm volatile("pushfl; popl %0" : "=r" (eflags));
-80103d16:	9c                   	pushf  
-80103d17:	58                   	pop    %eax
-  if(readeflags()&FL_IF)
-80103d18:	f6 c4 02             	test   $0x2,%ah
-80103d1b:	75 41                	jne    80103d5e <sched+0x8e>
-  intena = mycpu()->intena;
-80103d1d:	e8 ae fb ff ff       	call   801038d0 <mycpu>
-  swtch(&p->context, mycpu()->scheduler);
-80103d22:	83 c3 1c             	add    $0x1c,%ebx
-  intena = mycpu()->intena;
-80103d25:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
-  swtch(&p->context, mycpu()->scheduler);
-80103d2b:	e8 a0 fb ff ff       	call   801038d0 <mycpu>
-80103d30:	83 ec 08             	sub    $0x8,%esp
-80103d33:	ff 70 04             	pushl  0x4(%eax)
-80103d36:	53                   	push   %ebx
-80103d37:	e8 b7 0e 00 00       	call   80104bf3 <swtch>
-  mycpu()->intena = intena;
-80103d3c:	e8 8f fb ff ff       	call   801038d0 <mycpu>
-}
-80103d41:	83 c4 10             	add    $0x10,%esp
-  mycpu()->intena = intena;
-80103d44:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
-}
-80103d4a:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103d4d:	5b                   	pop    %ebx
-80103d4e:	5e                   	pop    %esi
-80103d4f:	5d                   	pop    %ebp
-80103d50:	c3                   	ret    
-    panic("sched ptable.lock");
-80103d51:	83 ec 0c             	sub    $0xc,%esp
-80103d54:	68 bb 7a 10 80       	push   $0x80107abb
-80103d59:	e8 32 c6 ff ff       	call   80100390 <panic>
-    panic("sched interruptible");
-80103d5e:	83 ec 0c             	sub    $0xc,%esp
-80103d61:	68 e7 7a 10 80       	push   $0x80107ae7
-80103d66:	e8 25 c6 ff ff       	call   80100390 <panic>
-    panic("sched running");
-80103d6b:	83 ec 0c             	sub    $0xc,%esp
-80103d6e:	68 d9 7a 10 80       	push   $0x80107ad9
-80103d73:	e8 18 c6 ff ff       	call   80100390 <panic>
-    panic("sched locks");
-80103d78:	83 ec 0c             	sub    $0xc,%esp
-80103d7b:	68 cd 7a 10 80       	push   $0x80107acd
-80103d80:	e8 0b c6 ff ff       	call   80100390 <panic>
-80103d85:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103d8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80103d90 <exit>:
-{
-80103d90:	f3 0f 1e fb          	endbr32 
-80103d94:	55                   	push   %ebp
-80103d95:	89 e5                	mov    %esp,%ebp
-80103d97:	57                   	push   %edi
-80103d98:	56                   	push   %esi
-80103d99:	53                   	push   %ebx
-80103d9a:	83 ec 0c             	sub    $0xc,%esp
-  pushcli();
-80103d9d:	e8 1e 0a 00 00       	call   801047c0 <pushcli>
-  c = mycpu();
-80103da2:	e8 29 fb ff ff       	call   801038d0 <mycpu>
-  p = c->proc;
-80103da7:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
-  popcli();
-80103dad:	e8 5e 0a 00 00       	call   80104810 <popcli>
-  if(curproc == initproc)
-80103db2:	8d 5e 28             	lea    0x28(%esi),%ebx
-80103db5:	8d 7e 68             	lea    0x68(%esi),%edi
-80103db8:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
-80103dbe:	0f 84 f3 00 00 00    	je     80103eb7 <exit+0x127>
-80103dc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(curproc->ofile[fd]){
-80103dc8:	8b 03                	mov    (%ebx),%eax
-80103dca:	85 c0                	test   %eax,%eax
-80103dcc:	74 12                	je     80103de0 <exit+0x50>
-      fileclose(curproc->ofile[fd]);
-80103dce:	83 ec 0c             	sub    $0xc,%esp
-80103dd1:	50                   	push   %eax
-80103dd2:	e8 e9 d0 ff ff       	call   80100ec0 <fileclose>
-      curproc->ofile[fd] = 0;
-80103dd7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-80103ddd:	83 c4 10             	add    $0x10,%esp
-  for(fd = 0; fd < NOFILE; fd++){
-80103de0:	83 c3 04             	add    $0x4,%ebx
-80103de3:	39 df                	cmp    %ebx,%edi
-80103de5:	75 e1                	jne    80103dc8 <exit+0x38>
-  begin_op();
-80103de7:	e8 44 ef ff ff       	call   80102d30 <begin_op>
-  iput(curproc->cwd);
-80103dec:	83 ec 0c             	sub    $0xc,%esp
-80103def:	ff 76 68             	pushl  0x68(%esi)
-80103df2:	e8 99 da ff ff       	call   80101890 <iput>
-  end_op();
-80103df7:	e8 a4 ef ff ff       	call   80102da0 <end_op>
-  curproc->cwd = 0;
-80103dfc:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
-  acquire(&ptable.lock);
-80103e03:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103e0a:	e8 b1 0a 00 00       	call   801048c0 <acquire>
-  wakeup1(curproc->parent);
-80103e0f:	8b 56 14             	mov    0x14(%esi),%edx
-80103e12:	83 c4 10             	add    $0x10,%esp
-static void
-wakeup1(void *chan)
-{
-  struct proc *p;
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e15:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103e1a:	eb 0e                	jmp    80103e2a <exit+0x9a>
-80103e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e20:	83 e8 80             	sub    $0xffffff80,%eax
-80103e23:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80103e28:	74 1c                	je     80103e46 <exit+0xb6>
-    if(p->state == SLEEPING && p->chan == chan)
-80103e2a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e2e:	75 f0                	jne    80103e20 <exit+0x90>
-80103e30:	3b 50 20             	cmp    0x20(%eax),%edx
-80103e33:	75 eb                	jne    80103e20 <exit+0x90>
-      p->state = RUNNABLE;
-80103e35:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e3c:	83 e8 80             	sub    $0xffffff80,%eax
-80103e3f:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80103e44:	75 e4                	jne    80103e2a <exit+0x9a>
-      p->parent = initproc;
-80103e46:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103e4c:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
-80103e51:	eb 10                	jmp    80103e63 <exit+0xd3>
-80103e53:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e57:	90                   	nop
-80103e58:	83 ea 80             	sub    $0xffffff80,%edx
-80103e5b:	81 fa 54 4d 11 80    	cmp    $0x80114d54,%edx
-80103e61:	74 3b                	je     80103e9e <exit+0x10e>
-    if(p->parent == curproc){
-80103e63:	39 72 14             	cmp    %esi,0x14(%edx)
-80103e66:	75 f0                	jne    80103e58 <exit+0xc8>
-      if(p->state == ZOMBIE)
-80103e68:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
-      p->parent = initproc;
-80103e6c:	89 4a 14             	mov    %ecx,0x14(%edx)
-      if(p->state == ZOMBIE)
-80103e6f:	75 e7                	jne    80103e58 <exit+0xc8>
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e71:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80103e76:	eb 12                	jmp    80103e8a <exit+0xfa>
-80103e78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103e7f:	90                   	nop
-80103e80:	83 e8 80             	sub    $0xffffff80,%eax
-80103e83:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80103e88:	74 ce                	je     80103e58 <exit+0xc8>
-    if(p->state == SLEEPING && p->chan == chan)
-80103e8a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e8e:	75 f0                	jne    80103e80 <exit+0xf0>
-80103e90:	3b 48 20             	cmp    0x20(%eax),%ecx
-80103e93:	75 eb                	jne    80103e80 <exit+0xf0>
-      p->state = RUNNABLE;
-80103e95:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-80103e9c:	eb e2                	jmp    80103e80 <exit+0xf0>
-  curproc->state = ZOMBIE;
-80103e9e:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
-  sched();
-80103ea5:	e8 26 fe ff ff       	call   80103cd0 <sched>
-  panic("zombie exit");
-80103eaa:	83 ec 0c             	sub    $0xc,%esp
-80103ead:	68 08 7b 10 80       	push   $0x80107b08
-80103eb2:	e8 d9 c4 ff ff       	call   80100390 <panic>
-    panic("init exiting");
-80103eb7:	83 ec 0c             	sub    $0xc,%esp
-80103eba:	68 fb 7a 10 80       	push   $0x80107afb
-80103ebf:	e8 cc c4 ff ff       	call   80100390 <panic>
-80103ec4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103ecf:	90                   	nop
-
-80103ed0 <yield>:
-{
-80103ed0:	f3 0f 1e fb          	endbr32 
-80103ed4:	55                   	push   %ebp
-80103ed5:	89 e5                	mov    %esp,%ebp
-80103ed7:	53                   	push   %ebx
-80103ed8:	83 ec 10             	sub    $0x10,%esp
-  acquire(&ptable.lock);  //DOC: yieldlock
-80103edb:	68 20 2d 11 80       	push   $0x80112d20
-80103ee0:	e8 db 09 00 00       	call   801048c0 <acquire>
-  pushcli();
-80103ee5:	e8 d6 08 00 00       	call   801047c0 <pushcli>
-  c = mycpu();
-80103eea:	e8 e1 f9 ff ff       	call   801038d0 <mycpu>
-  p = c->proc;
-80103eef:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-80103ef5:	e8 16 09 00 00       	call   80104810 <popcli>
-  myproc()->state = RUNNABLE;
-80103efa:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
-  sched();
-80103f01:	e8 ca fd ff ff       	call   80103cd0 <sched>
-  release(&ptable.lock);
-80103f06:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f0d:	e8 6e 0a 00 00       	call   80104980 <release>
-}
-80103f12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103f15:	83 c4 10             	add    $0x10,%esp
-80103f18:	c9                   	leave  
-80103f19:	c3                   	ret    
-80103f1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103f20 <sleep>:
-{
-80103f20:	f3 0f 1e fb          	endbr32 
-80103f24:	55                   	push   %ebp
-80103f25:	89 e5                	mov    %esp,%ebp
-80103f27:	57                   	push   %edi
-80103f28:	56                   	push   %esi
-80103f29:	53                   	push   %ebx
-80103f2a:	83 ec 0c             	sub    $0xc,%esp
-80103f2d:	8b 7d 08             	mov    0x8(%ebp),%edi
-80103f30:	8b 75 0c             	mov    0xc(%ebp),%esi
-  pushcli();
-80103f33:	e8 88 08 00 00       	call   801047c0 <pushcli>
-  c = mycpu();
-80103f38:	e8 93 f9 ff ff       	call   801038d0 <mycpu>
-  p = c->proc;
-80103f3d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-80103f43:	e8 c8 08 00 00       	call   80104810 <popcli>
-  if(p == 0)
-80103f48:	85 db                	test   %ebx,%ebx
-80103f4a:	0f 84 83 00 00 00    	je     80103fd3 <sleep+0xb3>
-  if(lk == 0)
-80103f50:	85 f6                	test   %esi,%esi
-80103f52:	74 72                	je     80103fc6 <sleep+0xa6>
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-80103f54:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
-80103f5a:	74 4c                	je     80103fa8 <sleep+0x88>
-    acquire(&ptable.lock);  //DOC: sleeplock1
-80103f5c:	83 ec 0c             	sub    $0xc,%esp
-80103f5f:	68 20 2d 11 80       	push   $0x80112d20
-80103f64:	e8 57 09 00 00       	call   801048c0 <acquire>
-    release(lk);
-80103f69:	89 34 24             	mov    %esi,(%esp)
-80103f6c:	e8 0f 0a 00 00       	call   80104980 <release>
-  p->chan = chan;
-80103f71:	89 7b 20             	mov    %edi,0x20(%ebx)
-  p->state = SLEEPING;
-80103f74:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
-  sched();
-80103f7b:	e8 50 fd ff ff       	call   80103cd0 <sched>
-  p->chan = 0;
-80103f80:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
-    release(&ptable.lock);
-80103f87:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-80103f8e:	e8 ed 09 00 00       	call   80104980 <release>
-    acquire(lk);
-80103f93:	89 75 08             	mov    %esi,0x8(%ebp)
-80103f96:	83 c4 10             	add    $0x10,%esp
-}
-80103f99:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103f9c:	5b                   	pop    %ebx
-80103f9d:	5e                   	pop    %esi
-80103f9e:	5f                   	pop    %edi
-80103f9f:	5d                   	pop    %ebp
-    acquire(lk);
-80103fa0:	e9 1b 09 00 00       	jmp    801048c0 <acquire>
-80103fa5:	8d 76 00             	lea    0x0(%esi),%esi
-  p->chan = chan;
-80103fa8:	89 7b 20             	mov    %edi,0x20(%ebx)
-  p->state = SLEEPING;
-80103fab:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
-  sched();
-80103fb2:	e8 19 fd ff ff       	call   80103cd0 <sched>
-  p->chan = 0;
-80103fb7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
-}
-80103fbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103fc1:	5b                   	pop    %ebx
-80103fc2:	5e                   	pop    %esi
-80103fc3:	5f                   	pop    %edi
-80103fc4:	5d                   	pop    %ebp
-80103fc5:	c3                   	ret    
-    panic("sleep without lk");
-80103fc6:	83 ec 0c             	sub    $0xc,%esp
-80103fc9:	68 1a 7b 10 80       	push   $0x80107b1a
-80103fce:	e8 bd c3 ff ff       	call   80100390 <panic>
-    panic("sleep");
-80103fd3:	83 ec 0c             	sub    $0xc,%esp
-80103fd6:	68 14 7b 10 80       	push   $0x80107b14
-80103fdb:	e8 b0 c3 ff ff       	call   80100390 <panic>
-
-80103fe0 <wait>:
-{
-80103fe0:	f3 0f 1e fb          	endbr32 
-80103fe4:	55                   	push   %ebp
-80103fe5:	89 e5                	mov    %esp,%ebp
-80103fe7:	56                   	push   %esi
-80103fe8:	53                   	push   %ebx
-  pushcli();
-80103fe9:	e8 d2 07 00 00       	call   801047c0 <pushcli>
-  c = mycpu();
-80103fee:	e8 dd f8 ff ff       	call   801038d0 <mycpu>
-  p = c->proc;
-80103ff3:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
-  popcli();
-80103ff9:	e8 12 08 00 00       	call   80104810 <popcli>
-  acquire(&ptable.lock);
-80103ffe:	83 ec 0c             	sub    $0xc,%esp
-80104001:	68 20 2d 11 80       	push   $0x80112d20
-80104006:	e8 b5 08 00 00       	call   801048c0 <acquire>
-8010400b:	83 c4 10             	add    $0x10,%esp
-    havekids = 0;
-8010400e:	31 c0                	xor    %eax,%eax
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104010:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
-80104015:	eb 14                	jmp    8010402b <wait+0x4b>
-80104017:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010401e:	66 90                	xchg   %ax,%ax
-80104020:	83 eb 80             	sub    $0xffffff80,%ebx
-80104023:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
-80104029:	74 1b                	je     80104046 <wait+0x66>
-      if(p->parent != curproc)
-8010402b:	39 73 14             	cmp    %esi,0x14(%ebx)
-8010402e:	75 f0                	jne    80104020 <wait+0x40>
-      if(p->state == ZOMBIE){
-80104030:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80104034:	74 32                	je     80104068 <wait+0x88>
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104036:	83 eb 80             	sub    $0xffffff80,%ebx
-      havekids = 1;
-80104039:	b8 01 00 00 00       	mov    $0x1,%eax
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010403e:	81 fb 54 4d 11 80    	cmp    $0x80114d54,%ebx
-80104044:	75 e5                	jne    8010402b <wait+0x4b>
-    if(!havekids || curproc->killed){
-80104046:	85 c0                	test   %eax,%eax
-80104048:	74 74                	je     801040be <wait+0xde>
-8010404a:	8b 46 24             	mov    0x24(%esi),%eax
-8010404d:	85 c0                	test   %eax,%eax
-8010404f:	75 6d                	jne    801040be <wait+0xde>
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-80104051:	83 ec 08             	sub    $0x8,%esp
-80104054:	68 20 2d 11 80       	push   $0x80112d20
-80104059:	56                   	push   %esi
-8010405a:	e8 c1 fe ff ff       	call   80103f20 <sleep>
-    havekids = 0;
-8010405f:	83 c4 10             	add    $0x10,%esp
-80104062:	eb aa                	jmp    8010400e <wait+0x2e>
-80104064:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        kfree(p->kstack);
-80104068:	83 ec 0c             	sub    $0xc,%esp
-8010406b:	ff 73 08             	pushl  0x8(%ebx)
-        pid = p->pid;
-8010406e:	8b 73 10             	mov    0x10(%ebx),%esi
-        kfree(p->kstack);
-80104071:	e8 fa e3 ff ff       	call   80102470 <kfree>
-        freevm(p->pgdir);
-80104076:	5a                   	pop    %edx
-80104077:	ff 73 04             	pushl  0x4(%ebx)
-        p->kstack = 0;
-8010407a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
-        freevm(p->pgdir);
-80104081:	e8 9a 31 00 00       	call   80107220 <freevm>
-        release(&ptable.lock);
-80104086:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-        p->pid = 0;
-8010408d:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
-        p->parent = 0;
-80104094:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
-        p->name[0] = 0;
-8010409b:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
-        p->killed = 0;
-8010409f:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
-        p->state = UNUSED;
-801040a6:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
-        release(&ptable.lock);
-801040ad:	e8 ce 08 00 00       	call   80104980 <release>
-        return pid;
-801040b2:	83 c4 10             	add    $0x10,%esp
-}
-801040b5:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801040b8:	89 f0                	mov    %esi,%eax
-801040ba:	5b                   	pop    %ebx
-801040bb:	5e                   	pop    %esi
-801040bc:	5d                   	pop    %ebp
-801040bd:	c3                   	ret    
-      release(&ptable.lock);
-801040be:	83 ec 0c             	sub    $0xc,%esp
-      return -1;
-801040c1:	be ff ff ff ff       	mov    $0xffffffff,%esi
-      release(&ptable.lock);
-801040c6:	68 20 2d 11 80       	push   $0x80112d20
-801040cb:	e8 b0 08 00 00       	call   80104980 <release>
-      return -1;
-801040d0:	83 c4 10             	add    $0x10,%esp
-801040d3:	eb e0                	jmp    801040b5 <wait+0xd5>
-801040d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801040dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801040e0 <wakeup>:
-}
-
-// Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
-{
-801040e0:	f3 0f 1e fb          	endbr32 
-801040e4:	55                   	push   %ebp
-801040e5:	89 e5                	mov    %esp,%ebp
-801040e7:	53                   	push   %ebx
-801040e8:	83 ec 10             	sub    $0x10,%esp
-801040eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  acquire(&ptable.lock);
-801040ee:	68 20 2d 11 80       	push   $0x80112d20
-801040f3:	e8 c8 07 00 00       	call   801048c0 <acquire>
-801040f8:	83 c4 10             	add    $0x10,%esp
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801040fb:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80104100:	eb 10                	jmp    80104112 <wakeup+0x32>
-80104102:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104108:	83 e8 80             	sub    $0xffffff80,%eax
-8010410b:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80104110:	74 1c                	je     8010412e <wakeup+0x4e>
-    if(p->state == SLEEPING && p->chan == chan)
-80104112:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80104116:	75 f0                	jne    80104108 <wakeup+0x28>
-80104118:	3b 58 20             	cmp    0x20(%eax),%ebx
-8010411b:	75 eb                	jne    80104108 <wakeup+0x28>
-      p->state = RUNNABLE;
-8010411d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104124:	83 e8 80             	sub    $0xffffff80,%eax
-80104127:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-8010412c:	75 e4                	jne    80104112 <wakeup+0x32>
-  wakeup1(chan);
-  release(&ptable.lock);
-8010412e:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
-}
-80104135:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104138:	c9                   	leave  
-  release(&ptable.lock);
-80104139:	e9 42 08 00 00       	jmp    80104980 <release>
-8010413e:	66 90                	xchg   %ax,%ax
-
-80104140 <kill>:
-// Kill the process with the given pid.
-// Process won't exit until it returns
-// to user space (see trap in trap.c).
-int
-kill(int pid)
-{
-80104140:	f3 0f 1e fb          	endbr32 
-80104144:	55                   	push   %ebp
-80104145:	89 e5                	mov    %esp,%ebp
-80104147:	53                   	push   %ebx
-80104148:	83 ec 10             	sub    $0x10,%esp
-8010414b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  struct proc *p;
-
-  acquire(&ptable.lock);
-8010414e:	68 20 2d 11 80       	push   $0x80112d20
-80104153:	e8 68 07 00 00       	call   801048c0 <acquire>
-80104158:	83 c4 10             	add    $0x10,%esp
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010415b:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80104160:	eb 10                	jmp    80104172 <kill+0x32>
-80104162:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104168:	83 e8 80             	sub    $0xffffff80,%eax
-8010416b:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80104170:	74 36                	je     801041a8 <kill+0x68>
-    if(p->pid == pid){
-80104172:	39 58 10             	cmp    %ebx,0x10(%eax)
-80104175:	75 f1                	jne    80104168 <kill+0x28>
-      p->killed = 1;
-      // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
-80104177:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-      p->killed = 1;
-8010417b:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
-      if(p->state == SLEEPING)
-80104182:	75 07                	jne    8010418b <kill+0x4b>
-        p->state = RUNNABLE;
-80104184:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-      release(&ptable.lock);
-8010418b:	83 ec 0c             	sub    $0xc,%esp
-8010418e:	68 20 2d 11 80       	push   $0x80112d20
-80104193:	e8 e8 07 00 00       	call   80104980 <release>
-      return 0;
-    }
-  }
-  release(&ptable.lock);
-  return -1;
-}
-80104198:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-      return 0;
-8010419b:	83 c4 10             	add    $0x10,%esp
-8010419e:	31 c0                	xor    %eax,%eax
-}
-801041a0:	c9                   	leave  
-801041a1:	c3                   	ret    
-801041a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  release(&ptable.lock);
-801041a8:	83 ec 0c             	sub    $0xc,%esp
-801041ab:	68 20 2d 11 80       	push   $0x80112d20
-801041b0:	e8 cb 07 00 00       	call   80104980 <release>
-}
-801041b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  return -1;
-801041b8:	83 c4 10             	add    $0x10,%esp
-801041bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801041c0:	c9                   	leave  
-801041c1:	c3                   	ret    
-801041c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801041c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-801041d0 <procdump>:
-// Print a process listing to console.  For debugging.
-// Runs when user types ^P on console.
-// No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
-{
-801041d0:	f3 0f 1e fb          	endbr32 
-801041d4:	55                   	push   %ebp
-801041d5:	89 e5                	mov    %esp,%ebp
-801041d7:	57                   	push   %edi
-801041d8:	56                   	push   %esi
-801041d9:	8d 75 e8             	lea    -0x18(%ebp),%esi
-801041dc:	53                   	push   %ebx
-801041dd:	bb c0 2d 11 80       	mov    $0x80112dc0,%ebx
-801041e2:	83 ec 3c             	sub    $0x3c,%esp
-801041e5:	eb 28                	jmp    8010420f <procdump+0x3f>
-801041e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801041ee:	66 90                	xchg   %ax,%ax
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
-        cprintf(" %p", pc[i]);
-    }
-    cprintf("\n");
-801041f0:	83 ec 0c             	sub    $0xc,%esp
-801041f3:	68 4b 7f 10 80       	push   $0x80107f4b
-801041f8:	e8 b3 c4 ff ff       	call   801006b0 <cprintf>
-801041fd:	83 c4 10             	add    $0x10,%esp
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104200:	83 eb 80             	sub    $0xffffff80,%ebx
-80104203:	81 fb c0 4d 11 80    	cmp    $0x80114dc0,%ebx
-80104209:	0f 84 81 00 00 00    	je     80104290 <procdump+0xc0>
-    if(p->state == UNUSED)
-8010420f:	8b 43 a0             	mov    -0x60(%ebx),%eax
-80104212:	85 c0                	test   %eax,%eax
-80104214:	74 ea                	je     80104200 <procdump+0x30>
-      state = "???";
-80104216:	ba 2b 7b 10 80       	mov    $0x80107b2b,%edx
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-8010421b:	83 f8 05             	cmp    $0x5,%eax
-8010421e:	77 11                	ja     80104231 <procdump+0x61>
-80104220:	8b 14 85 8c 7b 10 80 	mov    -0x7fef8474(,%eax,4),%edx
-      state = "???";
-80104227:	b8 2b 7b 10 80       	mov    $0x80107b2b,%eax
-8010422c:	85 d2                	test   %edx,%edx
-8010422e:	0f 44 d0             	cmove  %eax,%edx
-    cprintf("%d %s %s", p->pid, state, p->name);
-80104231:	53                   	push   %ebx
-80104232:	52                   	push   %edx
-80104233:	ff 73 a4             	pushl  -0x5c(%ebx)
-80104236:	68 2f 7b 10 80       	push   $0x80107b2f
-8010423b:	e8 70 c4 ff ff       	call   801006b0 <cprintf>
-    if(p->state == SLEEPING){
-80104240:	83 c4 10             	add    $0x10,%esp
-80104243:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
-80104247:	75 a7                	jne    801041f0 <procdump+0x20>
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-80104249:	83 ec 08             	sub    $0x8,%esp
-8010424c:	8d 45 c0             	lea    -0x40(%ebp),%eax
-8010424f:	8d 7d c0             	lea    -0x40(%ebp),%edi
-80104252:	50                   	push   %eax
-80104253:	8b 43 b0             	mov    -0x50(%ebx),%eax
-80104256:	8b 40 0c             	mov    0xc(%eax),%eax
-80104259:	83 c0 08             	add    $0x8,%eax
-8010425c:	50                   	push   %eax
-8010425d:	e8 fe 04 00 00       	call   80104760 <getcallerpcs>
-      for(i=0; i<10 && pc[i] != 0; i++)
-80104262:	83 c4 10             	add    $0x10,%esp
-80104265:	8d 76 00             	lea    0x0(%esi),%esi
-80104268:	8b 17                	mov    (%edi),%edx
-8010426a:	85 d2                	test   %edx,%edx
-8010426c:	74 82                	je     801041f0 <procdump+0x20>
-        cprintf(" %p", pc[i]);
-8010426e:	83 ec 08             	sub    $0x8,%esp
-80104271:	83 c7 04             	add    $0x4,%edi
-80104274:	52                   	push   %edx
-80104275:	68 81 75 10 80       	push   $0x80107581
-8010427a:	e8 31 c4 ff ff       	call   801006b0 <cprintf>
-      for(i=0; i<10 && pc[i] != 0; i++)
-8010427f:	83 c4 10             	add    $0x10,%esp
-80104282:	39 fe                	cmp    %edi,%esi
-80104284:	75 e2                	jne    80104268 <procdump+0x98>
-80104286:	e9 65 ff ff ff       	jmp    801041f0 <procdump+0x20>
-8010428b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010428f:	90                   	nop
-  }
-}
-80104290:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104293:	5b                   	pop    %ebx
-80104294:	5e                   	pop    %esi
-80104295:	5f                   	pop    %edi
-80104296:	5d                   	pop    %ebp
-80104297:	c3                   	ret    
-80104298:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010429f:	90                   	nop
-
-801042a0 <thread_create>:
-
-// thread
-int thread_create(void (*fcn)(void *), void * arg, void * stack) {
-801042a0:	f3 0f 1e fb          	endbr32 
-801042a4:	55                   	push   %ebp
-801042a5:	89 e5                	mov    %esp,%ebp
-801042a7:	57                   	push   %edi
-801042a8:	56                   	push   %esi
-801042a9:	53                   	push   %ebx
-801042aa:	83 ec 1c             	sub    $0x1c,%esp
-	if ((uint) stack == 0) {
-801042ad:	8b 45 10             	mov    0x10(%ebp),%eax
-801042b0:	85 c0                	test   %eax,%eax
-801042b2:	0f 84 0d 01 00 00    	je     801043c5 <thread_create+0x125>
-  pushcli();
-801042b8:	e8 03 05 00 00       	call   801047c0 <pushcli>
-  c = mycpu();
-801042bd:	e8 0e f6 ff ff       	call   801038d0 <mycpu>
-  p = c->proc;
-801042c2:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
-801042c8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-  popcli();
-801042cb:	e8 40 05 00 00       	call   80104810 <popcli>
-	}
-	int i, pid;
-	struct proc *np;
-	struct proc *curproc = myproc();
-	// Allocate process.
-	if ((np = allocproc()) == 0)		return -1; 
-801042d0:	e8 bb f4 ff ff       	call   80103790 <allocproc>
-801042d5:	89 c3                	mov    %eax,%ebx
-801042d7:	85 c0                	test   %eax,%eax
-801042d9:	0f 84 e6 00 00 00    	je     801043c5 <thread_create+0x125>
-  // Threads share the same page table as the parent 
-	np->pgdir = curproc->pgdir;
-801042df:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-	np->parent = curproc;
-  np->sz = curproc->sz;
-	*np->tf = *curproc->tf;
-801042e2:	8b 7b 18             	mov    0x18(%ebx),%edi
-801042e5:	b9 13 00 00 00       	mov    $0x13,%ecx
-	np->pgdir = curproc->pgdir;
-801042ea:	8b 42 04             	mov    0x4(%edx),%eax
-	np->parent = curproc;
-801042ed:	89 53 14             	mov    %edx,0x14(%ebx)
-	np->pgdir = curproc->pgdir;
-801042f0:	89 43 04             	mov    %eax,0x4(%ebx)
-  np->sz = curproc->sz;
-801042f3:	8b 02                	mov    (%edx),%eax
-801042f5:	89 03                	mov    %eax,(%ebx)
-	*np->tf = *curproc->tf;
-801042f7:	8b 72 18             	mov    0x18(%edx),%esi
-801042fa:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
-
-	// Mark this proc as a thread
-	np->isThread = 1;
-801042fc:	c7 43 7c 01 00 00 00 	movl   $0x1,0x7c(%ebx)
-
-	// Clear %eax so that fork returns 0 in the child.
-	np->tf->eax = 0;
-
-	// set function
-	np->tf->eip = (int) fcn;
-80104303:	8b 4d 08             	mov    0x8(%ebp),%ecx
-	np->tf->esp -= 4;
-  // Fake PC Value
-	*((int*) (np->tf->esp)) = 0xffffffff;
-
-  // filedup gives the file descriptors and increments them by one inorder to keep track of the number of instances of a file used by proccesses; If no instance is being used then the OS may close the file
-	for (i = 0; i < NOFILE; i++)
-80104306:	31 f6                	xor    %esi,%esi
-80104308:	89 d7                	mov    %edx,%edi
-	np->tf->eax = 0;
-8010430a:	8b 43 18             	mov    0x18(%ebx),%eax
-8010430d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
-	np->tf->eip = (int) fcn;
-80104314:	8b 43 18             	mov    0x18(%ebx),%eax
-80104317:	89 48 38             	mov    %ecx,0x38(%eax)
-	np->tf->esp = (int) stack + 4096; 
-8010431a:	8b 45 10             	mov    0x10(%ebp),%eax
-8010431d:	8b 4b 18             	mov    0x18(%ebx),%ecx
-80104320:	05 00 10 00 00       	add    $0x1000,%eax
-80104325:	89 41 44             	mov    %eax,0x44(%ecx)
-	np->tf->esp -= 4;
-80104328:	8b 43 18             	mov    0x18(%ebx),%eax
-	*((int*) (np->tf->esp)) = (int) arg;
-8010432b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-	np->tf->esp -= 4;
-8010432e:	83 68 44 04          	subl   $0x4,0x44(%eax)
-	*((int*) (np->tf->esp)) = (int) arg;
-80104332:	8b 43 18             	mov    0x18(%ebx),%eax
-80104335:	8b 40 44             	mov    0x44(%eax),%eax
-80104338:	89 08                	mov    %ecx,(%eax)
-	np->tf->esp -= 4;
-8010433a:	8b 43 18             	mov    0x18(%ebx),%eax
-8010433d:	83 68 44 04          	subl   $0x4,0x44(%eax)
-	*((int*) (np->tf->esp)) = 0xffffffff;
-80104341:	8b 43 18             	mov    0x18(%ebx),%eax
-80104344:	8b 40 44             	mov    0x44(%eax),%eax
-80104347:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
-	for (i = 0; i < NOFILE; i++)
-8010434d:	8d 76 00             	lea    0x0(%esi),%esi
-		if (curproc->ofile[i])
-80104350:	8b 44 b7 28          	mov    0x28(%edi,%esi,4),%eax
-80104354:	85 c0                	test   %eax,%eax
-80104356:	74 10                	je     80104368 <thread_create+0xc8>
-			np->ofile[i] = filedup(curproc->ofile[i]);
-80104358:	83 ec 0c             	sub    $0xc,%esp
-8010435b:	50                   	push   %eax
-8010435c:	e8 0f cb ff ff       	call   80100e70 <filedup>
-80104361:	83 c4 10             	add    $0x10,%esp
-80104364:	89 44 b3 28          	mov    %eax,0x28(%ebx,%esi,4)
-	for (i = 0; i < NOFILE; i++)
-80104368:	83 c6 01             	add    $0x1,%esi
-8010436b:	83 fe 10             	cmp    $0x10,%esi
-8010436e:	75 e0                	jne    80104350 <thread_create+0xb0>
-	np->cwd = idup(curproc->cwd);
-80104370:	83 ec 0c             	sub    $0xc,%esp
-80104373:	ff 77 68             	pushl  0x68(%edi)
-80104376:	89 7d e4             	mov    %edi,-0x1c(%ebp)
-80104379:	e8 b2 d3 ff ff       	call   80101730 <idup>
-  // Process name and Process ID
-	safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-8010437e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80104381:	83 c4 0c             	add    $0xc,%esp
-	np->cwd = idup(curproc->cwd);
-80104384:	89 43 68             	mov    %eax,0x68(%ebx)
-	safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80104387:	8d 43 6c             	lea    0x6c(%ebx),%eax
-8010438a:	83 c2 6c             	add    $0x6c,%edx
-8010438d:	6a 10                	push   $0x10
-8010438f:	52                   	push   %edx
-80104390:	50                   	push   %eax
-80104391:	e8 fa 07 00 00       	call   80104b90 <safestrcpy>
-	pid = np->pid;
-80104396:	8b 73 10             	mov    0x10(%ebx),%esi
-  // Thread is ready to run
-	acquire(&ptable.lock);
-80104399:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-801043a0:	e8 1b 05 00 00       	call   801048c0 <acquire>
-	np->state = RUNNABLE;
-801043a5:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
-	release(&ptable.lock);
-801043ac:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-801043b3:	e8 c8 05 00 00       	call   80104980 <release>
-	return pid;
-801043b8:	83 c4 10             	add    $0x10,%esp
-}
-801043bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801043be:	89 f0                	mov    %esi,%eax
-801043c0:	5b                   	pop    %ebx
-801043c1:	5e                   	pop    %esi
-801043c2:	5f                   	pop    %edi
-801043c3:	5d                   	pop    %ebp
-801043c4:	c3                   	ret    
-		return -1;
-801043c5:	be ff ff ff ff       	mov    $0xffffffff,%esi
-801043ca:	eb ef                	jmp    801043bb <thread_create+0x11b>
-801043cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801043d0 <thread_join>:
-
-int thread_join(void) {
-801043d0:	f3 0f 1e fb          	endbr32 
-801043d4:	55                   	push   %ebp
-801043d5:	89 e5                	mov    %esp,%ebp
-801043d7:	53                   	push   %ebx
-801043d8:	83 ec 04             	sub    $0x4,%esp
-  pushcli();
-801043db:	e8 e0 03 00 00       	call   801047c0 <pushcli>
-  c = mycpu();
-801043e0:	e8 eb f4 ff ff       	call   801038d0 <mycpu>
-  p = c->proc;
-801043e5:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-801043eb:	e8 20 04 00 00       	call   80104810 <popcli>
-	struct proc *p;
-	int havekids, pid;
-	struct proc *curproc = myproc();
-
-	acquire(&ptable.lock);
-801043f0:	83 ec 0c             	sub    $0xc,%esp
-801043f3:	68 20 2d 11 80       	push   $0x80112d20
-801043f8:	e8 c3 04 00 00       	call   801048c0 <acquire>
-801043fd:	83 c4 10             	add    $0x10,%esp
-	for (;;) {
-		// Scan through table looking for exited children.
-		havekids = 0;
-80104400:	31 d2                	xor    %edx,%edx
-		for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
-80104402:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-80104407:	eb 11                	jmp    8010441a <thread_join+0x4a>
-80104409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104410:	83 e8 80             	sub    $0xffffff80,%eax
-80104413:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80104418:	74 21                	je     8010443b <thread_join+0x6b>
-			if (p->isThread == 0 || p->parent != curproc)
-8010441a:	8b 48 7c             	mov    0x7c(%eax),%ecx
-8010441d:	85 c9                	test   %ecx,%ecx
-8010441f:	74 ef                	je     80104410 <thread_join+0x40>
-80104421:	39 58 14             	cmp    %ebx,0x14(%eax)
-80104424:	75 ea                	jne    80104410 <thread_join+0x40>
-				continue;
-			havekids = 1;
-			if (p->state == ZOMBIE) {
-80104426:	83 78 0c 05          	cmpl   $0x5,0xc(%eax)
-8010442a:	74 34                	je     80104460 <thread_join+0x90>
-		for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
-8010442c:	83 e8 80             	sub    $0xffffff80,%eax
-			havekids = 1;
-8010442f:	ba 01 00 00 00       	mov    $0x1,%edx
-		for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
-80104434:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80104439:	75 df                	jne    8010441a <thread_join+0x4a>
-				return pid;
-			}
-		}
-
-		// No point waiting if we don't have any children.
-		if (!havekids || curproc->killed) {
-8010443b:	85 d2                	test   %edx,%edx
-8010443d:	74 62                	je     801044a1 <thread_join+0xd1>
-8010443f:	8b 43 24             	mov    0x24(%ebx),%eax
-80104442:	85 c0                	test   %eax,%eax
-80104444:	75 5b                	jne    801044a1 <thread_join+0xd1>
-			release(&ptable.lock);
-			return -1;
-		}
-
-		// Wait for children to exit.  (See wakeup1 call in proc_exit.)
-		sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-80104446:	83 ec 08             	sub    $0x8,%esp
-80104449:	68 20 2d 11 80       	push   $0x80112d20
-8010444e:	53                   	push   %ebx
-8010444f:	e8 cc fa ff ff       	call   80103f20 <sleep>
-		havekids = 0;
-80104454:	83 c4 10             	add    $0x10,%esp
-80104457:	eb a7                	jmp    80104400 <thread_join+0x30>
-80104459:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-				release(&ptable.lock);
-80104460:	83 ec 0c             	sub    $0xc,%esp
-				pid = p->pid;
-80104463:	8b 58 10             	mov    0x10(%eax),%ebx
-				p->name[0] = 0;
-80104466:	c6 40 6c 00          	movb   $0x0,0x6c(%eax)
-				p->kstack = 0;
-8010446a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
-				p->pid = 0;
-80104471:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
-				p->parent = 0;
-80104478:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
-				p->killed = 0;
-8010447f:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
-				p->state = UNUSED;
-80104486:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
-				release(&ptable.lock);
-8010448d:	68 20 2d 11 80       	push   $0x80112d20
-80104492:	e8 e9 04 00 00       	call   80104980 <release>
-				return pid;
-80104497:	83 c4 10             	add    $0x10,%esp
-	}
-}
-8010449a:	89 d8                	mov    %ebx,%eax
-8010449c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010449f:	c9                   	leave  
-801044a0:	c3                   	ret    
-			release(&ptable.lock);
-801044a1:	83 ec 0c             	sub    $0xc,%esp
-			return -1;
-801044a4:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-			release(&ptable.lock);
-801044a9:	68 20 2d 11 80       	push   $0x80112d20
-801044ae:	e8 cd 04 00 00       	call   80104980 <release>
-			return -1;
-801044b3:	83 c4 10             	add    $0x10,%esp
-801044b6:	eb e2                	jmp    8010449a <thread_join+0xca>
-801044b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801044bf:	90                   	nop
-
-801044c0 <thread_exit>:
-
-int thread_exit() {
-801044c0:	f3 0f 1e fb          	endbr32 
-801044c4:	55                   	push   %ebp
-801044c5:	89 e5                	mov    %esp,%ebp
-801044c7:	57                   	push   %edi
-801044c8:	56                   	push   %esi
-801044c9:	53                   	push   %ebx
-801044ca:	83 ec 0c             	sub    $0xc,%esp
-  pushcli();
-801044cd:	e8 ee 02 00 00       	call   801047c0 <pushcli>
-  c = mycpu();
-801044d2:	e8 f9 f3 ff ff       	call   801038d0 <mycpu>
-  p = c->proc;
-801044d7:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
-  popcli();
-801044dd:	e8 2e 03 00 00       	call   80104810 <popcli>
-	struct proc *curproc = myproc();
-	struct proc *p;
-	int fd;
-
-	if (curproc == initproc)
-801044e2:	8d 5e 28             	lea    0x28(%esi),%ebx
-801044e5:	8d 7e 68             	lea    0x68(%esi),%edi
-801044e8:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
-801044ee:	0f 84 f3 00 00 00    	je     801045e7 <thread_exit+0x127>
-801044f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-		panic("init exiting");
-
-	// Close all open files.
-	for (fd = 0; fd < NOFILE; fd++) {
-		if (curproc->ofile[fd]) {
-801044f8:	8b 03                	mov    (%ebx),%eax
-801044fa:	85 c0                	test   %eax,%eax
-801044fc:	74 12                	je     80104510 <thread_exit+0x50>
-			fileclose(curproc->ofile[fd]);
-801044fe:	83 ec 0c             	sub    $0xc,%esp
-80104501:	50                   	push   %eax
-80104502:	e8 b9 c9 ff ff       	call   80100ec0 <fileclose>
-			curproc->ofile[fd] = 0;
-80104507:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-8010450d:	83 c4 10             	add    $0x10,%esp
-	for (fd = 0; fd < NOFILE; fd++) {
-80104510:	83 c3 04             	add    $0x4,%ebx
-80104513:	39 df                	cmp    %ebx,%edi
-80104515:	75 e1                	jne    801044f8 <thread_exit+0x38>
-		}
-	}
-
-	begin_op();
-80104517:	e8 14 e8 ff ff       	call   80102d30 <begin_op>
-	iput(curproc->cwd);
-8010451c:	83 ec 0c             	sub    $0xc,%esp
-8010451f:	ff 76 68             	pushl  0x68(%esi)
-80104522:	e8 69 d3 ff ff       	call   80101890 <iput>
-	end_op();
-80104527:	e8 74 e8 ff ff       	call   80102da0 <end_op>
-	curproc->cwd = 0;
-8010452c:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
-
-	acquire(&ptable.lock);
-80104533:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
-8010453a:	e8 81 03 00 00       	call   801048c0 <acquire>
-
-	// Parent might be sleeping in wait().
-	wakeup1(curproc->parent);
-8010453f:	8b 56 14             	mov    0x14(%esi),%edx
-80104542:	83 c4 10             	add    $0x10,%esp
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104545:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-8010454a:	eb 0e                	jmp    8010455a <thread_exit+0x9a>
-8010454c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104550:	83 e8 80             	sub    $0xffffff80,%eax
-80104553:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80104558:	74 1c                	je     80104576 <thread_exit+0xb6>
-    if(p->state == SLEEPING && p->chan == chan)
-8010455a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-8010455e:	75 f0                	jne    80104550 <thread_exit+0x90>
-80104560:	3b 50 20             	cmp    0x20(%eax),%edx
-80104563:	75 eb                	jne    80104550 <thread_exit+0x90>
-      p->state = RUNNABLE;
-80104565:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-8010456c:	83 e8 80             	sub    $0xffffff80,%eax
-8010456f:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-80104574:	75 e4                	jne    8010455a <thread_exit+0x9a>
-
-	// Pass abandoned children to init.
-	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
-		if (p->parent == curproc) {
-			p->parent = initproc;
-80104576:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
-	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
-8010457c:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
-80104581:	eb 10                	jmp    80104593 <thread_exit+0xd3>
-80104583:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104587:	90                   	nop
-80104588:	83 ea 80             	sub    $0xffffff80,%edx
-8010458b:	81 fa 54 4d 11 80    	cmp    $0x80114d54,%edx
-80104591:	74 3b                	je     801045ce <thread_exit+0x10e>
-		if (p->parent == curproc) {
-80104593:	39 72 14             	cmp    %esi,0x14(%edx)
-80104596:	75 f0                	jne    80104588 <thread_exit+0xc8>
-			if (p->state == ZOMBIE)
-80104598:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
-			p->parent = initproc;
-8010459c:	89 4a 14             	mov    %ecx,0x14(%edx)
-			if (p->state == ZOMBIE)
-8010459f:	75 e7                	jne    80104588 <thread_exit+0xc8>
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801045a1:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
-801045a6:	eb 12                	jmp    801045ba <thread_exit+0xfa>
-801045a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801045af:	90                   	nop
-801045b0:	83 e8 80             	sub    $0xffffff80,%eax
-801045b3:	3d 54 4d 11 80       	cmp    $0x80114d54,%eax
-801045b8:	74 ce                	je     80104588 <thread_exit+0xc8>
-    if(p->state == SLEEPING && p->chan == chan)
-801045ba:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-801045be:	75 f0                	jne    801045b0 <thread_exit+0xf0>
-801045c0:	3b 48 20             	cmp    0x20(%eax),%ecx
-801045c3:	75 eb                	jne    801045b0 <thread_exit+0xf0>
-      p->state = RUNNABLE;
-801045c5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-801045cc:	eb e2                	jmp    801045b0 <thread_exit+0xf0>
-				wakeup1(initproc);
-		}
-	}
-
-	// Jump into the scheduler, never to return.
-	curproc->state = ZOMBIE;
-801045ce:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
-	sched();
-801045d5:	e8 f6 f6 ff ff       	call   80103cd0 <sched>
-	panic("zombie exit");
-801045da:	83 ec 0c             	sub    $0xc,%esp
-801045dd:	68 08 7b 10 80       	push   $0x80107b08
-801045e2:	e8 a9 bd ff ff       	call   80100390 <panic>
-		panic("init exiting");
-801045e7:	83 ec 0c             	sub    $0xc,%esp
-801045ea:	68 fb 7a 10 80       	push   $0x80107afb
-801045ef:	e8 9c bd ff ff       	call   80100390 <panic>
-801045f4:	66 90                	xchg   %ax,%ax
-801045f6:	66 90                	xchg   %ax,%ax
-801045f8:	66 90                	xchg   %ax,%ax
-801045fa:	66 90                	xchg   %ax,%ax
-801045fc:	66 90                	xchg   %ax,%ax
-801045fe:	66 90                	xchg   %ax,%ax
-
-80104600 <initsleeplock>:
-#include "spinlock.h"
-#include "sleeplock.h"
-
-void
-initsleeplock(struct sleeplock *lk, char *name)
-{
-80104600:	f3 0f 1e fb          	endbr32 
-80104604:	55                   	push   %ebp
-80104605:	89 e5                	mov    %esp,%ebp
-80104607:	53                   	push   %ebx
-80104608:	83 ec 0c             	sub    $0xc,%esp
-8010460b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  initlock(&lk->lk, "sleep lock");
-8010460e:	68 a4 7b 10 80       	push   $0x80107ba4
-80104613:	8d 43 04             	lea    0x4(%ebx),%eax
-80104616:	50                   	push   %eax
-80104617:	e8 24 01 00 00       	call   80104740 <initlock>
-  lk->name = name;
-8010461c:	8b 45 0c             	mov    0xc(%ebp),%eax
-  lk->locked = 0;
-8010461f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-  lk->pid = 0;
-}
-80104625:	83 c4 10             	add    $0x10,%esp
-  lk->pid = 0;
-80104628:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
-  lk->name = name;
-8010462f:	89 43 38             	mov    %eax,0x38(%ebx)
-}
-80104632:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104635:	c9                   	leave  
-80104636:	c3                   	ret    
-80104637:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010463e:	66 90                	xchg   %ax,%ax
-
-80104640 <acquiresleep>:
-
-void
-acquiresleep(struct sleeplock *lk)
-{
-80104640:	f3 0f 1e fb          	endbr32 
-80104644:	55                   	push   %ebp
-80104645:	89 e5                	mov    %esp,%ebp
-80104647:	56                   	push   %esi
-80104648:	53                   	push   %ebx
-80104649:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  acquire(&lk->lk);
-8010464c:	8d 73 04             	lea    0x4(%ebx),%esi
-8010464f:	83 ec 0c             	sub    $0xc,%esp
-80104652:	56                   	push   %esi
-80104653:	e8 68 02 00 00       	call   801048c0 <acquire>
-  while (lk->locked) {
-80104658:	8b 13                	mov    (%ebx),%edx
-8010465a:	83 c4 10             	add    $0x10,%esp
-8010465d:	85 d2                	test   %edx,%edx
-8010465f:	74 1a                	je     8010467b <acquiresleep+0x3b>
-80104661:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    sleep(lk, &lk->lk);
-80104668:	83 ec 08             	sub    $0x8,%esp
-8010466b:	56                   	push   %esi
-8010466c:	53                   	push   %ebx
-8010466d:	e8 ae f8 ff ff       	call   80103f20 <sleep>
-  while (lk->locked) {
-80104672:	8b 03                	mov    (%ebx),%eax
-80104674:	83 c4 10             	add    $0x10,%esp
-80104677:	85 c0                	test   %eax,%eax
-80104679:	75 ed                	jne    80104668 <acquiresleep+0x28>
-  }
-  lk->locked = 1;
-8010467b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
-  lk->pid = myproc()->pid;
-80104681:	e8 da f2 ff ff       	call   80103960 <myproc>
-80104686:	8b 40 10             	mov    0x10(%eax),%eax
-80104689:	89 43 3c             	mov    %eax,0x3c(%ebx)
-  release(&lk->lk);
-8010468c:	89 75 08             	mov    %esi,0x8(%ebp)
-}
-8010468f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104692:	5b                   	pop    %ebx
-80104693:	5e                   	pop    %esi
-80104694:	5d                   	pop    %ebp
-  release(&lk->lk);
-80104695:	e9 e6 02 00 00       	jmp    80104980 <release>
-8010469a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801046a0 <releasesleep>:
-
-void
-releasesleep(struct sleeplock *lk)
-{
-801046a0:	f3 0f 1e fb          	endbr32 
-801046a4:	55                   	push   %ebp
-801046a5:	89 e5                	mov    %esp,%ebp
-801046a7:	56                   	push   %esi
-801046a8:	53                   	push   %ebx
-801046a9:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  acquire(&lk->lk);
-801046ac:	8d 73 04             	lea    0x4(%ebx),%esi
-801046af:	83 ec 0c             	sub    $0xc,%esp
-801046b2:	56                   	push   %esi
-801046b3:	e8 08 02 00 00       	call   801048c0 <acquire>
-  lk->locked = 0;
-801046b8:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-  lk->pid = 0;
-801046be:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
-  wakeup(lk);
-801046c5:	89 1c 24             	mov    %ebx,(%esp)
-801046c8:	e8 13 fa ff ff       	call   801040e0 <wakeup>
-  release(&lk->lk);
-801046cd:	89 75 08             	mov    %esi,0x8(%ebp)
-801046d0:	83 c4 10             	add    $0x10,%esp
-}
-801046d3:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801046d6:	5b                   	pop    %ebx
-801046d7:	5e                   	pop    %esi
-801046d8:	5d                   	pop    %ebp
-  release(&lk->lk);
-801046d9:	e9 a2 02 00 00       	jmp    80104980 <release>
-801046de:	66 90                	xchg   %ax,%ax
-
-801046e0 <holdingsleep>:
-
-int
-holdingsleep(struct sleeplock *lk)
-{
-801046e0:	f3 0f 1e fb          	endbr32 
-801046e4:	55                   	push   %ebp
-801046e5:	89 e5                	mov    %esp,%ebp
-801046e7:	57                   	push   %edi
-801046e8:	31 ff                	xor    %edi,%edi
-801046ea:	56                   	push   %esi
-801046eb:	53                   	push   %ebx
-801046ec:	83 ec 18             	sub    $0x18,%esp
-801046ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  int r;
-  
-  acquire(&lk->lk);
-801046f2:	8d 73 04             	lea    0x4(%ebx),%esi
-801046f5:	56                   	push   %esi
-801046f6:	e8 c5 01 00 00       	call   801048c0 <acquire>
-  r = lk->locked && (lk->pid == myproc()->pid);
-801046fb:	8b 03                	mov    (%ebx),%eax
-801046fd:	83 c4 10             	add    $0x10,%esp
-80104700:	85 c0                	test   %eax,%eax
-80104702:	75 1c                	jne    80104720 <holdingsleep+0x40>
-  release(&lk->lk);
-80104704:	83 ec 0c             	sub    $0xc,%esp
-80104707:	56                   	push   %esi
-80104708:	e8 73 02 00 00       	call   80104980 <release>
-  return r;
-}
-8010470d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104710:	89 f8                	mov    %edi,%eax
-80104712:	5b                   	pop    %ebx
-80104713:	5e                   	pop    %esi
-80104714:	5f                   	pop    %edi
-80104715:	5d                   	pop    %ebp
-80104716:	c3                   	ret    
-80104717:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010471e:	66 90                	xchg   %ax,%ax
-  r = lk->locked && (lk->pid == myproc()->pid);
-80104720:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
-80104723:	e8 38 f2 ff ff       	call   80103960 <myproc>
-80104728:	39 58 10             	cmp    %ebx,0x10(%eax)
-8010472b:	0f 94 c0             	sete   %al
-8010472e:	0f b6 c0             	movzbl %al,%eax
-80104731:	89 c7                	mov    %eax,%edi
-80104733:	eb cf                	jmp    80104704 <holdingsleep+0x24>
-80104735:	66 90                	xchg   %ax,%ax
-80104737:	66 90                	xchg   %ax,%ax
-80104739:	66 90                	xchg   %ax,%ax
-8010473b:	66 90                	xchg   %ax,%ax
-8010473d:	66 90                	xchg   %ax,%ax
-8010473f:	90                   	nop
-
-80104740 <initlock>:
-#include "proc.h"
-#include "spinlock.h"
-
-void
-initlock(struct spinlock *lk, char *name)
-{
-80104740:	f3 0f 1e fb          	endbr32 
-80104744:	55                   	push   %ebp
-80104745:	89 e5                	mov    %esp,%ebp
-80104747:	8b 45 08             	mov    0x8(%ebp),%eax
-  lk->name = name;
-8010474a:	8b 55 0c             	mov    0xc(%ebp),%edx
-  lk->locked = 0;
-8010474d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-  lk->name = name;
-80104753:	89 50 04             	mov    %edx,0x4(%eax)
-  lk->cpu = 0;
-80104756:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
-}
-8010475d:	5d                   	pop    %ebp
-8010475e:	c3                   	ret    
-8010475f:	90                   	nop
-
-80104760 <getcallerpcs>:
-}
-
-// Record the current call stack in pcs[] by following the %ebp chain.
-void
-getcallerpcs(void *v, uint pcs[])
-{
-80104760:	f3 0f 1e fb          	endbr32 
-80104764:	55                   	push   %ebp
-  uint *ebp;
-  int i;
-
-  ebp = (uint*)v - 2;
-  for(i = 0; i < 10; i++){
-80104765:	31 d2                	xor    %edx,%edx
-{
-80104767:	89 e5                	mov    %esp,%ebp
-80104769:	53                   	push   %ebx
-  ebp = (uint*)v - 2;
-8010476a:	8b 45 08             	mov    0x8(%ebp),%eax
-{
-8010476d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  ebp = (uint*)v - 2;
-80104770:	83 e8 08             	sub    $0x8,%eax
-  for(i = 0; i < 10; i++){
-80104773:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104777:	90                   	nop
-    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104778:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
-8010477e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-80104784:	77 1a                	ja     801047a0 <getcallerpcs+0x40>
-      break;
-    pcs[i] = ebp[1];     // saved %eip
-80104786:	8b 58 04             	mov    0x4(%eax),%ebx
-80104789:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
-  for(i = 0; i < 10; i++){
-8010478c:	83 c2 01             	add    $0x1,%edx
-    ebp = (uint*)ebp[0]; // saved %ebp
-8010478f:	8b 00                	mov    (%eax),%eax
-  for(i = 0; i < 10; i++){
-80104791:	83 fa 0a             	cmp    $0xa,%edx
-80104794:	75 e2                	jne    80104778 <getcallerpcs+0x18>
-  }
-  for(; i < 10; i++)
-    pcs[i] = 0;
-}
-80104796:	5b                   	pop    %ebx
-80104797:	5d                   	pop    %ebp
-80104798:	c3                   	ret    
-80104799:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  for(; i < 10; i++)
-801047a0:	8d 04 91             	lea    (%ecx,%edx,4),%eax
-801047a3:	8d 51 28             	lea    0x28(%ecx),%edx
-801047a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801047ad:	8d 76 00             	lea    0x0(%esi),%esi
-    pcs[i] = 0;
-801047b0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-  for(; i < 10; i++)
-801047b6:	83 c0 04             	add    $0x4,%eax
-801047b9:	39 d0                	cmp    %edx,%eax
-801047bb:	75 f3                	jne    801047b0 <getcallerpcs+0x50>
-}
-801047bd:	5b                   	pop    %ebx
-801047be:	5d                   	pop    %ebp
-801047bf:	c3                   	ret    
-
-801047c0 <pushcli>:
-// it takes two popcli to undo two pushcli.  Also, if interrupts
-// are off, then pushcli, popcli leaves them off.
-
-void
-pushcli(void)
-{
-801047c0:	f3 0f 1e fb          	endbr32 
-801047c4:	55                   	push   %ebp
-801047c5:	89 e5                	mov    %esp,%ebp
-801047c7:	53                   	push   %ebx
-801047c8:	83 ec 04             	sub    $0x4,%esp
-801047cb:	9c                   	pushf  
-801047cc:	5b                   	pop    %ebx
-  asm volatile("cli");
-801047cd:	fa                   	cli    
-  int eflags;
-
-  eflags = readeflags();
-  cli();
-  if(mycpu()->ncli == 0)
-801047ce:	e8 fd f0 ff ff       	call   801038d0 <mycpu>
-801047d3:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
-801047d9:	85 c0                	test   %eax,%eax
-801047db:	74 13                	je     801047f0 <pushcli+0x30>
-    mycpu()->intena = eflags & FL_IF;
-  mycpu()->ncli += 1;
-801047dd:	e8 ee f0 ff ff       	call   801038d0 <mycpu>
-801047e2:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
-}
-801047e9:	83 c4 04             	add    $0x4,%esp
-801047ec:	5b                   	pop    %ebx
-801047ed:	5d                   	pop    %ebp
-801047ee:	c3                   	ret    
-801047ef:	90                   	nop
-    mycpu()->intena = eflags & FL_IF;
-801047f0:	e8 db f0 ff ff       	call   801038d0 <mycpu>
-801047f5:	81 e3 00 02 00 00    	and    $0x200,%ebx
-801047fb:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
-80104801:	eb da                	jmp    801047dd <pushcli+0x1d>
-80104803:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010480a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104810 <popcli>:
-
-void
-popcli(void)
-{
-80104810:	f3 0f 1e fb          	endbr32 
-80104814:	55                   	push   %ebp
-80104815:	89 e5                	mov    %esp,%ebp
-80104817:	83 ec 08             	sub    $0x8,%esp
-  asm volatile("pushfl; popl %0" : "=r" (eflags));
-8010481a:	9c                   	pushf  
-8010481b:	58                   	pop    %eax
-  if(readeflags()&FL_IF)
-8010481c:	f6 c4 02             	test   $0x2,%ah
-8010481f:	75 31                	jne    80104852 <popcli+0x42>
-    panic("popcli - interruptible");
-  if(--mycpu()->ncli < 0)
-80104821:	e8 aa f0 ff ff       	call   801038d0 <mycpu>
-80104826:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
-8010482d:	78 30                	js     8010485f <popcli+0x4f>
-    panic("popcli");
-  if(mycpu()->ncli == 0 && mycpu()->intena)
-8010482f:	e8 9c f0 ff ff       	call   801038d0 <mycpu>
-80104834:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
-8010483a:	85 d2                	test   %edx,%edx
-8010483c:	74 02                	je     80104840 <popcli+0x30>
-    sti();
-}
-8010483e:	c9                   	leave  
-8010483f:	c3                   	ret    
-  if(mycpu()->ncli == 0 && mycpu()->intena)
-80104840:	e8 8b f0 ff ff       	call   801038d0 <mycpu>
-80104845:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-8010484b:	85 c0                	test   %eax,%eax
-8010484d:	74 ef                	je     8010483e <popcli+0x2e>
-  asm volatile("sti");
-8010484f:	fb                   	sti    
-}
-80104850:	c9                   	leave  
-80104851:	c3                   	ret    
-    panic("popcli - interruptible");
-80104852:	83 ec 0c             	sub    $0xc,%esp
-80104855:	68 af 7b 10 80       	push   $0x80107baf
-8010485a:	e8 31 bb ff ff       	call   80100390 <panic>
-    panic("popcli");
-8010485f:	83 ec 0c             	sub    $0xc,%esp
-80104862:	68 c6 7b 10 80       	push   $0x80107bc6
-80104867:	e8 24 bb ff ff       	call   80100390 <panic>
-8010486c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80104870 <holding>:
-{
-80104870:	f3 0f 1e fb          	endbr32 
-80104874:	55                   	push   %ebp
-80104875:	89 e5                	mov    %esp,%ebp
-80104877:	56                   	push   %esi
-80104878:	53                   	push   %ebx
-80104879:	8b 75 08             	mov    0x8(%ebp),%esi
-8010487c:	31 db                	xor    %ebx,%ebx
-  pushcli();
-8010487e:	e8 3d ff ff ff       	call   801047c0 <pushcli>
-  r = lock->locked && lock->cpu == mycpu();
-80104883:	8b 06                	mov    (%esi),%eax
-80104885:	85 c0                	test   %eax,%eax
-80104887:	75 0f                	jne    80104898 <holding+0x28>
-  popcli();
-80104889:	e8 82 ff ff ff       	call   80104810 <popcli>
-}
-8010488e:	89 d8                	mov    %ebx,%eax
-80104890:	5b                   	pop    %ebx
-80104891:	5e                   	pop    %esi
-80104892:	5d                   	pop    %ebp
-80104893:	c3                   	ret    
-80104894:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  r = lock->locked && lock->cpu == mycpu();
-80104898:	8b 5e 08             	mov    0x8(%esi),%ebx
-8010489b:	e8 30 f0 ff ff       	call   801038d0 <mycpu>
-801048a0:	39 c3                	cmp    %eax,%ebx
-801048a2:	0f 94 c3             	sete   %bl
-  popcli();
-801048a5:	e8 66 ff ff ff       	call   80104810 <popcli>
-  r = lock->locked && lock->cpu == mycpu();
-801048aa:	0f b6 db             	movzbl %bl,%ebx
-}
-801048ad:	89 d8                	mov    %ebx,%eax
-801048af:	5b                   	pop    %ebx
-801048b0:	5e                   	pop    %esi
-801048b1:	5d                   	pop    %ebp
-801048b2:	c3                   	ret    
-801048b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801048ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801048c0 <acquire>:
-{
-801048c0:	f3 0f 1e fb          	endbr32 
-801048c4:	55                   	push   %ebp
-801048c5:	89 e5                	mov    %esp,%ebp
-801048c7:	56                   	push   %esi
-801048c8:	53                   	push   %ebx
-  pushcli(); // disable interrupts to avoid deadlock.
-801048c9:	e8 f2 fe ff ff       	call   801047c0 <pushcli>
-  if(holding(lk))
-801048ce:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801048d1:	83 ec 0c             	sub    $0xc,%esp
-801048d4:	53                   	push   %ebx
-801048d5:	e8 96 ff ff ff       	call   80104870 <holding>
-801048da:	83 c4 10             	add    $0x10,%esp
-801048dd:	85 c0                	test   %eax,%eax
-801048df:	0f 85 7f 00 00 00    	jne    80104964 <acquire+0xa4>
-801048e5:	89 c6                	mov    %eax,%esi
-  asm volatile("lock; xchgl %0, %1" :
-801048e7:	ba 01 00 00 00       	mov    $0x1,%edx
-801048ec:	eb 05                	jmp    801048f3 <acquire+0x33>
-801048ee:	66 90                	xchg   %ax,%ax
-801048f0:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801048f3:	89 d0                	mov    %edx,%eax
-801048f5:	f0 87 03             	lock xchg %eax,(%ebx)
-  while(xchg(&lk->locked, 1) != 0)
-801048f8:	85 c0                	test   %eax,%eax
-801048fa:	75 f4                	jne    801048f0 <acquire+0x30>
-  __sync_synchronize();
-801048fc:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-  lk->cpu = mycpu();
-80104901:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104904:	e8 c7 ef ff ff       	call   801038d0 <mycpu>
-80104909:	89 43 08             	mov    %eax,0x8(%ebx)
-  ebp = (uint*)v - 2;
-8010490c:	89 e8                	mov    %ebp,%eax
-8010490e:	66 90                	xchg   %ax,%ax
-    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104910:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
-80104916:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
-8010491c:	77 22                	ja     80104940 <acquire+0x80>
-    pcs[i] = ebp[1];     // saved %eip
-8010491e:	8b 50 04             	mov    0x4(%eax),%edx
-80104921:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
-  for(i = 0; i < 10; i++){
-80104925:	83 c6 01             	add    $0x1,%esi
-    ebp = (uint*)ebp[0]; // saved %ebp
-80104928:	8b 00                	mov    (%eax),%eax
-  for(i = 0; i < 10; i++){
-8010492a:	83 fe 0a             	cmp    $0xa,%esi
-8010492d:	75 e1                	jne    80104910 <acquire+0x50>
-}
-8010492f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104932:	5b                   	pop    %ebx
-80104933:	5e                   	pop    %esi
-80104934:	5d                   	pop    %ebp
-80104935:	c3                   	ret    
-80104936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010493d:	8d 76 00             	lea    0x0(%esi),%esi
-  for(; i < 10; i++)
-80104940:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
-80104944:	83 c3 34             	add    $0x34,%ebx
-80104947:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010494e:	66 90                	xchg   %ax,%ax
-    pcs[i] = 0;
-80104950:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-  for(; i < 10; i++)
-80104956:	83 c0 04             	add    $0x4,%eax
-80104959:	39 d8                	cmp    %ebx,%eax
-8010495b:	75 f3                	jne    80104950 <acquire+0x90>
-}
-8010495d:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104960:	5b                   	pop    %ebx
-80104961:	5e                   	pop    %esi
-80104962:	5d                   	pop    %ebp
-80104963:	c3                   	ret    
-    panic("acquire");
-80104964:	83 ec 0c             	sub    $0xc,%esp
-80104967:	68 cd 7b 10 80       	push   $0x80107bcd
-8010496c:	e8 1f ba ff ff       	call   80100390 <panic>
-80104971:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104978:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010497f:	90                   	nop
-
-80104980 <release>:
-{
-80104980:	f3 0f 1e fb          	endbr32 
-80104984:	55                   	push   %ebp
-80104985:	89 e5                	mov    %esp,%ebp
-80104987:	53                   	push   %ebx
-80104988:	83 ec 10             	sub    $0x10,%esp
-8010498b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(!holding(lk))
-8010498e:	53                   	push   %ebx
-8010498f:	e8 dc fe ff ff       	call   80104870 <holding>
-80104994:	83 c4 10             	add    $0x10,%esp
-80104997:	85 c0                	test   %eax,%eax
-80104999:	74 22                	je     801049bd <release+0x3d>
-  lk->pcs[0] = 0;
-8010499b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
-  lk->cpu = 0;
-801049a2:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
-  __sync_synchronize();
-801049a9:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-801049ae:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-}
-801049b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801049b7:	c9                   	leave  
-  popcli();
-801049b8:	e9 53 fe ff ff       	jmp    80104810 <popcli>
-    panic("release");
-801049bd:	83 ec 0c             	sub    $0xc,%esp
-801049c0:	68 d5 7b 10 80       	push   $0x80107bd5
-801049c5:	e8 c6 b9 ff ff       	call   80100390 <panic>
-801049ca:	66 90                	xchg   %ax,%ax
-801049cc:	66 90                	xchg   %ax,%ax
-801049ce:	66 90                	xchg   %ax,%ax
-
-801049d0 <memset>:
-#include "types.h"
-#include "x86.h"
-
-void*
-memset(void *dst, int c, uint n)
-{
-801049d0:	f3 0f 1e fb          	endbr32 
-801049d4:	55                   	push   %ebp
-801049d5:	89 e5                	mov    %esp,%ebp
-801049d7:	57                   	push   %edi
-801049d8:	8b 55 08             	mov    0x8(%ebp),%edx
-801049db:	8b 4d 10             	mov    0x10(%ebp),%ecx
-801049de:	53                   	push   %ebx
-801049df:	8b 45 0c             	mov    0xc(%ebp),%eax
-  if ((int)dst%4 == 0 && n%4 == 0){
-801049e2:	89 d7                	mov    %edx,%edi
-801049e4:	09 cf                	or     %ecx,%edi
-801049e6:	83 e7 03             	and    $0x3,%edi
-801049e9:	75 25                	jne    80104a10 <memset+0x40>
-    c &= 0xFF;
-801049eb:	0f b6 f8             	movzbl %al,%edi
-    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-801049ee:	c1 e0 18             	shl    $0x18,%eax
-801049f1:	89 fb                	mov    %edi,%ebx
-801049f3:	c1 e9 02             	shr    $0x2,%ecx
-801049f6:	c1 e3 10             	shl    $0x10,%ebx
-801049f9:	09 d8                	or     %ebx,%eax
-801049fb:	09 f8                	or     %edi,%eax
-801049fd:	c1 e7 08             	shl    $0x8,%edi
-80104a00:	09 f8                	or     %edi,%eax
-  asm volatile("cld; rep stosl" :
-80104a02:	89 d7                	mov    %edx,%edi
-80104a04:	fc                   	cld    
-80104a05:	f3 ab                	rep stos %eax,%es:(%edi)
-  } else
-    stosb(dst, c, n);
-  return dst;
-}
-80104a07:	5b                   	pop    %ebx
-80104a08:	89 d0                	mov    %edx,%eax
-80104a0a:	5f                   	pop    %edi
-80104a0b:	5d                   	pop    %ebp
-80104a0c:	c3                   	ret    
-80104a0d:	8d 76 00             	lea    0x0(%esi),%esi
-  asm volatile("cld; rep stosb" :
-80104a10:	89 d7                	mov    %edx,%edi
-80104a12:	fc                   	cld    
-80104a13:	f3 aa                	rep stos %al,%es:(%edi)
-80104a15:	5b                   	pop    %ebx
-80104a16:	89 d0                	mov    %edx,%eax
-80104a18:	5f                   	pop    %edi
-80104a19:	5d                   	pop    %ebp
-80104a1a:	c3                   	ret    
-80104a1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104a1f:	90                   	nop
-
-80104a20 <memcmp>:
-
-int
-memcmp(const void *v1, const void *v2, uint n)
-{
-80104a20:	f3 0f 1e fb          	endbr32 
-80104a24:	55                   	push   %ebp
-80104a25:	89 e5                	mov    %esp,%ebp
-80104a27:	56                   	push   %esi
-80104a28:	8b 75 10             	mov    0x10(%ebp),%esi
-80104a2b:	8b 55 08             	mov    0x8(%ebp),%edx
-80104a2e:	53                   	push   %ebx
-80104a2f:	8b 45 0c             	mov    0xc(%ebp),%eax
-  const uchar *s1, *s2;
-
-  s1 = v1;
-  s2 = v2;
-  while(n-- > 0){
-80104a32:	85 f6                	test   %esi,%esi
-80104a34:	74 2a                	je     80104a60 <memcmp+0x40>
-80104a36:	01 c6                	add    %eax,%esi
-80104a38:	eb 10                	jmp    80104a4a <memcmp+0x2a>
-80104a3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(*s1 != *s2)
-      return *s1 - *s2;
-    s1++, s2++;
-80104a40:	83 c0 01             	add    $0x1,%eax
-80104a43:	83 c2 01             	add    $0x1,%edx
-  while(n-- > 0){
-80104a46:	39 f0                	cmp    %esi,%eax
-80104a48:	74 16                	je     80104a60 <memcmp+0x40>
-    if(*s1 != *s2)
-80104a4a:	0f b6 0a             	movzbl (%edx),%ecx
-80104a4d:	0f b6 18             	movzbl (%eax),%ebx
-80104a50:	38 d9                	cmp    %bl,%cl
-80104a52:	74 ec                	je     80104a40 <memcmp+0x20>
-      return *s1 - *s2;
-80104a54:	0f b6 c1             	movzbl %cl,%eax
-80104a57:	29 d8                	sub    %ebx,%eax
-  }
-
-  return 0;
-}
-80104a59:	5b                   	pop    %ebx
-80104a5a:	5e                   	pop    %esi
-80104a5b:	5d                   	pop    %ebp
-80104a5c:	c3                   	ret    
-80104a5d:	8d 76 00             	lea    0x0(%esi),%esi
-80104a60:	5b                   	pop    %ebx
-  return 0;
-80104a61:	31 c0                	xor    %eax,%eax
-}
-80104a63:	5e                   	pop    %esi
-80104a64:	5d                   	pop    %ebp
-80104a65:	c3                   	ret    
-80104a66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a6d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104a70 <memmove>:
-
-void*
-memmove(void *dst, const void *src, uint n)
-{
-80104a70:	f3 0f 1e fb          	endbr32 
-80104a74:	55                   	push   %ebp
-80104a75:	89 e5                	mov    %esp,%ebp
-80104a77:	57                   	push   %edi
-80104a78:	8b 55 08             	mov    0x8(%ebp),%edx
-80104a7b:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80104a7e:	56                   	push   %esi
-80104a7f:	8b 75 0c             	mov    0xc(%ebp),%esi
-  const char *s;
-  char *d;
-
-  s = src;
-  d = dst;
-  if(s < d && s + n > d){
-80104a82:	39 d6                	cmp    %edx,%esi
-80104a84:	73 2a                	jae    80104ab0 <memmove+0x40>
-80104a86:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
-80104a89:	39 fa                	cmp    %edi,%edx
-80104a8b:	73 23                	jae    80104ab0 <memmove+0x40>
-80104a8d:	8d 41 ff             	lea    -0x1(%ecx),%eax
-    s += n;
-    d += n;
-    while(n-- > 0)
-80104a90:	85 c9                	test   %ecx,%ecx
-80104a92:	74 13                	je     80104aa7 <memmove+0x37>
-80104a94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-      *--d = *--s;
-80104a98:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
-80104a9c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
-    while(n-- > 0)
-80104a9f:	83 e8 01             	sub    $0x1,%eax
-80104aa2:	83 f8 ff             	cmp    $0xffffffff,%eax
-80104aa5:	75 f1                	jne    80104a98 <memmove+0x28>
-  } else
-    while(n-- > 0)
-      *d++ = *s++;
-
-  return dst;
-}
-80104aa7:	5e                   	pop    %esi
-80104aa8:	89 d0                	mov    %edx,%eax
-80104aaa:	5f                   	pop    %edi
-80104aab:	5d                   	pop    %ebp
-80104aac:	c3                   	ret    
-80104aad:	8d 76 00             	lea    0x0(%esi),%esi
-    while(n-- > 0)
-80104ab0:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
-80104ab3:	89 d7                	mov    %edx,%edi
-80104ab5:	85 c9                	test   %ecx,%ecx
-80104ab7:	74 ee                	je     80104aa7 <memmove+0x37>
-80104ab9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      *d++ = *s++;
-80104ac0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-    while(n-- > 0)
-80104ac1:	39 f0                	cmp    %esi,%eax
-80104ac3:	75 fb                	jne    80104ac0 <memmove+0x50>
-}
-80104ac5:	5e                   	pop    %esi
-80104ac6:	89 d0                	mov    %edx,%eax
-80104ac8:	5f                   	pop    %edi
-80104ac9:	5d                   	pop    %ebp
-80104aca:	c3                   	ret    
-80104acb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104acf:	90                   	nop
-
-80104ad0 <memcpy>:
-
-// memcpy exists to placate GCC.  Use memmove.
-void*
-memcpy(void *dst, const void *src, uint n)
-{
-80104ad0:	f3 0f 1e fb          	endbr32 
-  return memmove(dst, src, n);
-80104ad4:	eb 9a                	jmp    80104a70 <memmove>
-80104ad6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104add:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104ae0 <strncmp>:
-}
-
-int
-strncmp(const char *p, const char *q, uint n)
-{
-80104ae0:	f3 0f 1e fb          	endbr32 
-80104ae4:	55                   	push   %ebp
-80104ae5:	89 e5                	mov    %esp,%ebp
-80104ae7:	56                   	push   %esi
-80104ae8:	8b 75 10             	mov    0x10(%ebp),%esi
-80104aeb:	8b 4d 08             	mov    0x8(%ebp),%ecx
-80104aee:	53                   	push   %ebx
-80104aef:	8b 45 0c             	mov    0xc(%ebp),%eax
-  while(n > 0 && *p && *p == *q)
-80104af2:	85 f6                	test   %esi,%esi
-80104af4:	74 32                	je     80104b28 <strncmp+0x48>
-80104af6:	01 c6                	add    %eax,%esi
-80104af8:	eb 14                	jmp    80104b0e <strncmp+0x2e>
-80104afa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104b00:	38 da                	cmp    %bl,%dl
-80104b02:	75 14                	jne    80104b18 <strncmp+0x38>
-    n--, p++, q++;
-80104b04:	83 c0 01             	add    $0x1,%eax
-80104b07:	83 c1 01             	add    $0x1,%ecx
-  while(n > 0 && *p && *p == *q)
-80104b0a:	39 f0                	cmp    %esi,%eax
-80104b0c:	74 1a                	je     80104b28 <strncmp+0x48>
-80104b0e:	0f b6 11             	movzbl (%ecx),%edx
-80104b11:	0f b6 18             	movzbl (%eax),%ebx
-80104b14:	84 d2                	test   %dl,%dl
-80104b16:	75 e8                	jne    80104b00 <strncmp+0x20>
-  if(n == 0)
-    return 0;
-  return (uchar)*p - (uchar)*q;
-80104b18:	0f b6 c2             	movzbl %dl,%eax
-80104b1b:	29 d8                	sub    %ebx,%eax
-}
-80104b1d:	5b                   	pop    %ebx
-80104b1e:	5e                   	pop    %esi
-80104b1f:	5d                   	pop    %ebp
-80104b20:	c3                   	ret    
-80104b21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b28:	5b                   	pop    %ebx
-    return 0;
-80104b29:	31 c0                	xor    %eax,%eax
-}
-80104b2b:	5e                   	pop    %esi
-80104b2c:	5d                   	pop    %ebp
-80104b2d:	c3                   	ret    
-80104b2e:	66 90                	xchg   %ax,%ax
-
-80104b30 <strncpy>:
-
-char*
-strncpy(char *s, const char *t, int n)
-{
-80104b30:	f3 0f 1e fb          	endbr32 
-80104b34:	55                   	push   %ebp
-80104b35:	89 e5                	mov    %esp,%ebp
-80104b37:	57                   	push   %edi
-80104b38:	56                   	push   %esi
-80104b39:	8b 75 08             	mov    0x8(%ebp),%esi
-80104b3c:	53                   	push   %ebx
-80104b3d:	8b 45 10             	mov    0x10(%ebp),%eax
-  char *os;
-
-  os = s;
-  while(n-- > 0 && (*s++ = *t++) != 0)
-80104b40:	89 f2                	mov    %esi,%edx
-80104b42:	eb 1b                	jmp    80104b5f <strncpy+0x2f>
-80104b44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104b48:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-80104b4c:	8b 7d 0c             	mov    0xc(%ebp),%edi
-80104b4f:	83 c2 01             	add    $0x1,%edx
-80104b52:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
-80104b56:	89 f9                	mov    %edi,%ecx
-80104b58:	88 4a ff             	mov    %cl,-0x1(%edx)
-80104b5b:	84 c9                	test   %cl,%cl
-80104b5d:	74 09                	je     80104b68 <strncpy+0x38>
-80104b5f:	89 c3                	mov    %eax,%ebx
-80104b61:	83 e8 01             	sub    $0x1,%eax
-80104b64:	85 db                	test   %ebx,%ebx
-80104b66:	7f e0                	jg     80104b48 <strncpy+0x18>
-    ;
-  while(n-- > 0)
-80104b68:	89 d1                	mov    %edx,%ecx
-80104b6a:	85 c0                	test   %eax,%eax
-80104b6c:	7e 15                	jle    80104b83 <strncpy+0x53>
-80104b6e:	66 90                	xchg   %ax,%ax
-    *s++ = 0;
-80104b70:	83 c1 01             	add    $0x1,%ecx
-80104b73:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
-  while(n-- > 0)
-80104b77:	89 c8                	mov    %ecx,%eax
-80104b79:	f7 d0                	not    %eax
-80104b7b:	01 d0                	add    %edx,%eax
-80104b7d:	01 d8                	add    %ebx,%eax
-80104b7f:	85 c0                	test   %eax,%eax
-80104b81:	7f ed                	jg     80104b70 <strncpy+0x40>
-  return os;
-}
-80104b83:	5b                   	pop    %ebx
-80104b84:	89 f0                	mov    %esi,%eax
-80104b86:	5e                   	pop    %esi
-80104b87:	5f                   	pop    %edi
-80104b88:	5d                   	pop    %ebp
-80104b89:	c3                   	ret    
-80104b8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104b90 <safestrcpy>:
-
-// Like strncpy but guaranteed to NUL-terminate.
-char*
-safestrcpy(char *s, const char *t, int n)
-{
-80104b90:	f3 0f 1e fb          	endbr32 
-80104b94:	55                   	push   %ebp
-80104b95:	89 e5                	mov    %esp,%ebp
-80104b97:	56                   	push   %esi
-80104b98:	8b 55 10             	mov    0x10(%ebp),%edx
-80104b9b:	8b 75 08             	mov    0x8(%ebp),%esi
-80104b9e:	53                   	push   %ebx
-80104b9f:	8b 45 0c             	mov    0xc(%ebp),%eax
-  char *os;
-
-  os = s;
-  if(n <= 0)
-80104ba2:	85 d2                	test   %edx,%edx
-80104ba4:	7e 21                	jle    80104bc7 <safestrcpy+0x37>
-80104ba6:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
-80104baa:	89 f2                	mov    %esi,%edx
-80104bac:	eb 12                	jmp    80104bc0 <safestrcpy+0x30>
-80104bae:	66 90                	xchg   %ax,%ax
-    return os;
-  while(--n > 0 && (*s++ = *t++) != 0)
-80104bb0:	0f b6 08             	movzbl (%eax),%ecx
-80104bb3:	83 c0 01             	add    $0x1,%eax
-80104bb6:	83 c2 01             	add    $0x1,%edx
-80104bb9:	88 4a ff             	mov    %cl,-0x1(%edx)
-80104bbc:	84 c9                	test   %cl,%cl
-80104bbe:	74 04                	je     80104bc4 <safestrcpy+0x34>
-80104bc0:	39 d8                	cmp    %ebx,%eax
-80104bc2:	75 ec                	jne    80104bb0 <safestrcpy+0x20>
-    ;
-  *s = 0;
-80104bc4:	c6 02 00             	movb   $0x0,(%edx)
-  return os;
-}
-80104bc7:	89 f0                	mov    %esi,%eax
-80104bc9:	5b                   	pop    %ebx
-80104bca:	5e                   	pop    %esi
-80104bcb:	5d                   	pop    %ebp
-80104bcc:	c3                   	ret    
-80104bcd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104bd0 <strlen>:
-
-int
-strlen(const char *s)
-{
-80104bd0:	f3 0f 1e fb          	endbr32 
-80104bd4:	55                   	push   %ebp
-  int n;
-
-  for(n = 0; s[n]; n++)
-80104bd5:	31 c0                	xor    %eax,%eax
-{
-80104bd7:	89 e5                	mov    %esp,%ebp
-80104bd9:	8b 55 08             	mov    0x8(%ebp),%edx
-  for(n = 0; s[n]; n++)
-80104bdc:	80 3a 00             	cmpb   $0x0,(%edx)
-80104bdf:	74 10                	je     80104bf1 <strlen+0x21>
-80104be1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104be8:	83 c0 01             	add    $0x1,%eax
-80104beb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-80104bef:	75 f7                	jne    80104be8 <strlen+0x18>
-    ;
-  return n;
-}
-80104bf1:	5d                   	pop    %ebp
-80104bf2:	c3                   	ret    
-
-80104bf3 <swtch>:
-# a struct context, and save its address in *old.
-# Switch stacks to new and pop previously-saved registers.
-
-.globl swtch
-swtch:
-  movl 4(%esp), %eax
-80104bf3:	8b 44 24 04          	mov    0x4(%esp),%eax
-  movl 8(%esp), %edx
-80104bf7:	8b 54 24 08          	mov    0x8(%esp),%edx
-
-  # Save old callee-saved registers
-  pushl %ebp
-80104bfb:	55                   	push   %ebp
-  pushl %ebx
-80104bfc:	53                   	push   %ebx
-  pushl %esi
-80104bfd:	56                   	push   %esi
-  pushl %edi
-80104bfe:	57                   	push   %edi
-
-  # Switch stacks
-  movl %esp, (%eax)
-80104bff:	89 20                	mov    %esp,(%eax)
-  movl %edx, %esp
-80104c01:	89 d4                	mov    %edx,%esp
-
-  # Load new callee-saved registers
-  popl %edi
-80104c03:	5f                   	pop    %edi
-  popl %esi
-80104c04:	5e                   	pop    %esi
-  popl %ebx
-80104c05:	5b                   	pop    %ebx
-  popl %ebp
-80104c06:	5d                   	pop    %ebp
-  ret
-80104c07:	c3                   	ret    
-80104c08:	66 90                	xchg   %ax,%ax
-80104c0a:	66 90                	xchg   %ax,%ax
-80104c0c:	66 90                	xchg   %ax,%ax
-80104c0e:	66 90                	xchg   %ax,%ax
-
-80104c10 <fetchint>:
-// to a saved program counter, and then the first argument.
-
-// Fetch the int at addr from the current process.
-int
-fetchint(uint addr, int *ip)
-{
-80104c10:	f3 0f 1e fb          	endbr32 
-80104c14:	55                   	push   %ebp
-80104c15:	89 e5                	mov    %esp,%ebp
-80104c17:	53                   	push   %ebx
-80104c18:	83 ec 04             	sub    $0x4,%esp
-80104c1b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  struct proc *curproc = myproc();
-80104c1e:	e8 3d ed ff ff       	call   80103960 <myproc>
-
-  if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104c23:	8b 00                	mov    (%eax),%eax
-80104c25:	39 d8                	cmp    %ebx,%eax
-80104c27:	76 17                	jbe    80104c40 <fetchint+0x30>
-80104c29:	8d 53 04             	lea    0x4(%ebx),%edx
-80104c2c:	39 d0                	cmp    %edx,%eax
-80104c2e:	72 10                	jb     80104c40 <fetchint+0x30>
-    return -1;
-  *ip = *(int*)(addr);
-80104c30:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104c33:	8b 13                	mov    (%ebx),%edx
-80104c35:	89 10                	mov    %edx,(%eax)
-  return 0;
-80104c37:	31 c0                	xor    %eax,%eax
-}
-80104c39:	83 c4 04             	add    $0x4,%esp
-80104c3c:	5b                   	pop    %ebx
-80104c3d:	5d                   	pop    %ebp
-80104c3e:	c3                   	ret    
-80104c3f:	90                   	nop
-    return -1;
-80104c40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104c45:	eb f2                	jmp    80104c39 <fetchint+0x29>
-80104c47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104c4e:	66 90                	xchg   %ax,%ax
-
-80104c50 <fetchstr>:
-// Fetch the nul-terminated string at addr from the current process.
-// Doesn't actually copy the string - just sets *pp to point at it.
-// Returns length of string, not including nul.
-int
-fetchstr(uint addr, char **pp)
-{
-80104c50:	f3 0f 1e fb          	endbr32 
-80104c54:	55                   	push   %ebp
-80104c55:	89 e5                	mov    %esp,%ebp
-80104c57:	53                   	push   %ebx
-80104c58:	83 ec 04             	sub    $0x4,%esp
-80104c5b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  char *s, *ep;
-  struct proc *curproc = myproc();
-80104c5e:	e8 fd ec ff ff       	call   80103960 <myproc>
-
-  if(addr >= curproc->sz)
-80104c63:	39 18                	cmp    %ebx,(%eax)
-80104c65:	76 31                	jbe    80104c98 <fetchstr+0x48>
-    return -1;
-  *pp = (char*)addr;
-80104c67:	8b 55 0c             	mov    0xc(%ebp),%edx
-80104c6a:	89 1a                	mov    %ebx,(%edx)
-  ep = (char*)curproc->sz;
-80104c6c:	8b 10                	mov    (%eax),%edx
-  for(s = *pp; s < ep; s++){
-80104c6e:	39 d3                	cmp    %edx,%ebx
-80104c70:	73 26                	jae    80104c98 <fetchstr+0x48>
-80104c72:	89 d8                	mov    %ebx,%eax
-80104c74:	eb 11                	jmp    80104c87 <fetchstr+0x37>
-80104c76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104c7d:	8d 76 00             	lea    0x0(%esi),%esi
-80104c80:	83 c0 01             	add    $0x1,%eax
-80104c83:	39 c2                	cmp    %eax,%edx
-80104c85:	76 11                	jbe    80104c98 <fetchstr+0x48>
-    if(*s == 0)
-80104c87:	80 38 00             	cmpb   $0x0,(%eax)
-80104c8a:	75 f4                	jne    80104c80 <fetchstr+0x30>
-      return s - *pp;
-  }
-  return -1;
-}
-80104c8c:	83 c4 04             	add    $0x4,%esp
-      return s - *pp;
-80104c8f:	29 d8                	sub    %ebx,%eax
-}
-80104c91:	5b                   	pop    %ebx
-80104c92:	5d                   	pop    %ebp
-80104c93:	c3                   	ret    
-80104c94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104c98:	83 c4 04             	add    $0x4,%esp
-    return -1;
-80104c9b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104ca0:	5b                   	pop    %ebx
-80104ca1:	5d                   	pop    %ebp
-80104ca2:	c3                   	ret    
-80104ca3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104caa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104cb0 <argint>:
-
-// Fetch the nth 32-bit system call argument.
-int
-argint(int n, int *ip)
-{
-80104cb0:	f3 0f 1e fb          	endbr32 
-80104cb4:	55                   	push   %ebp
-80104cb5:	89 e5                	mov    %esp,%ebp
-80104cb7:	56                   	push   %esi
-80104cb8:	53                   	push   %ebx
-  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104cb9:	e8 a2 ec ff ff       	call   80103960 <myproc>
-80104cbe:	8b 55 08             	mov    0x8(%ebp),%edx
-80104cc1:	8b 40 18             	mov    0x18(%eax),%eax
-80104cc4:	8b 40 44             	mov    0x44(%eax),%eax
-80104cc7:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
-  struct proc *curproc = myproc();
-80104cca:	e8 91 ec ff ff       	call   80103960 <myproc>
-  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104ccf:	8d 73 04             	lea    0x4(%ebx),%esi
-  if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104cd2:	8b 00                	mov    (%eax),%eax
-80104cd4:	39 c6                	cmp    %eax,%esi
-80104cd6:	73 18                	jae    80104cf0 <argint+0x40>
-80104cd8:	8d 53 08             	lea    0x8(%ebx),%edx
-80104cdb:	39 d0                	cmp    %edx,%eax
-80104cdd:	72 11                	jb     80104cf0 <argint+0x40>
-  *ip = *(int*)(addr);
-80104cdf:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104ce2:	8b 53 04             	mov    0x4(%ebx),%edx
-80104ce5:	89 10                	mov    %edx,(%eax)
-  return 0;
-80104ce7:	31 c0                	xor    %eax,%eax
-}
-80104ce9:	5b                   	pop    %ebx
-80104cea:	5e                   	pop    %esi
-80104ceb:	5d                   	pop    %ebp
-80104cec:	c3                   	ret    
-80104ced:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80104cf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104cf5:	eb f2                	jmp    80104ce9 <argint+0x39>
-80104cf7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104cfe:	66 90                	xchg   %ax,%ax
-
-80104d00 <argptr>:
-// Fetch the nth word-sized system call argument as a pointer
-// to a block of memory of size bytes.  Check that the pointer
-// lies within the process address space.
-int
-argptr(int n, char **pp, int size)
-{
-80104d00:	f3 0f 1e fb          	endbr32 
-80104d04:	55                   	push   %ebp
-80104d05:	89 e5                	mov    %esp,%ebp
-80104d07:	56                   	push   %esi
-80104d08:	53                   	push   %ebx
-80104d09:	83 ec 10             	sub    $0x10,%esp
-80104d0c:	8b 5d 10             	mov    0x10(%ebp),%ebx
-  int i;
-  struct proc *curproc = myproc();
-80104d0f:	e8 4c ec ff ff       	call   80103960 <myproc>
- 
-  if(argint(n, &i) < 0)
-80104d14:	83 ec 08             	sub    $0x8,%esp
-  struct proc *curproc = myproc();
-80104d17:	89 c6                	mov    %eax,%esi
-  if(argint(n, &i) < 0)
-80104d19:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104d1c:	50                   	push   %eax
-80104d1d:	ff 75 08             	pushl  0x8(%ebp)
-80104d20:	e8 8b ff ff ff       	call   80104cb0 <argint>
-    return -1;
-  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-80104d25:	83 c4 10             	add    $0x10,%esp
-80104d28:	85 c0                	test   %eax,%eax
-80104d2a:	78 24                	js     80104d50 <argptr+0x50>
-80104d2c:	85 db                	test   %ebx,%ebx
-80104d2e:	78 20                	js     80104d50 <argptr+0x50>
-80104d30:	8b 16                	mov    (%esi),%edx
-80104d32:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80104d35:	39 c2                	cmp    %eax,%edx
-80104d37:	76 17                	jbe    80104d50 <argptr+0x50>
-80104d39:	01 c3                	add    %eax,%ebx
-80104d3b:	39 da                	cmp    %ebx,%edx
-80104d3d:	72 11                	jb     80104d50 <argptr+0x50>
-    return -1;
-  *pp = (char*)i;
-80104d3f:	8b 55 0c             	mov    0xc(%ebp),%edx
-80104d42:	89 02                	mov    %eax,(%edx)
-  return 0;
-80104d44:	31 c0                	xor    %eax,%eax
-}
-80104d46:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104d49:	5b                   	pop    %ebx
-80104d4a:	5e                   	pop    %esi
-80104d4b:	5d                   	pop    %ebp
-80104d4c:	c3                   	ret    
-80104d4d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80104d50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104d55:	eb ef                	jmp    80104d46 <argptr+0x46>
-80104d57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104d5e:	66 90                	xchg   %ax,%ax
-
-80104d60 <argstr>:
-// Check that the pointer is valid and the string is nul-terminated.
-// (There is no shared writable memory, so the string can't change
-// between this check and being used by the kernel.)
-int
-argstr(int n, char **pp)
-{
-80104d60:	f3 0f 1e fb          	endbr32 
-80104d64:	55                   	push   %ebp
-80104d65:	89 e5                	mov    %esp,%ebp
-80104d67:	83 ec 20             	sub    $0x20,%esp
-  int addr;
-  if(argint(n, &addr) < 0)
-80104d6a:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80104d6d:	50                   	push   %eax
-80104d6e:	ff 75 08             	pushl  0x8(%ebp)
-80104d71:	e8 3a ff ff ff       	call   80104cb0 <argint>
-80104d76:	83 c4 10             	add    $0x10,%esp
-80104d79:	85 c0                	test   %eax,%eax
-80104d7b:	78 13                	js     80104d90 <argstr+0x30>
-    return -1;
-  return fetchstr(addr, pp);
-80104d7d:	83 ec 08             	sub    $0x8,%esp
-80104d80:	ff 75 0c             	pushl  0xc(%ebp)
-80104d83:	ff 75 f4             	pushl  -0xc(%ebp)
-80104d86:	e8 c5 fe ff ff       	call   80104c50 <fetchstr>
-80104d8b:	83 c4 10             	add    $0x10,%esp
-}
-80104d8e:	c9                   	leave  
-80104d8f:	c3                   	ret    
-80104d90:	c9                   	leave  
-    return -1;
-80104d91:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104d96:	c3                   	ret    
-80104d97:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104d9e:	66 90                	xchg   %ax,%ax
-
-80104da0 <syscall>:
-[SYS_thread_exit] sys_thread_exit,
-};
-
-void
-syscall(void)
-{
-80104da0:	f3 0f 1e fb          	endbr32 
-80104da4:	55                   	push   %ebp
-80104da5:	89 e5                	mov    %esp,%ebp
-80104da7:	53                   	push   %ebx
-80104da8:	83 ec 04             	sub    $0x4,%esp
-  int num;
-  struct proc *curproc = myproc();
-80104dab:	e8 b0 eb ff ff       	call   80103960 <myproc>
-80104db0:	89 c3                	mov    %eax,%ebx
-
-  num = curproc->tf->eax;
-80104db2:	8b 40 18             	mov    0x18(%eax),%eax
-80104db5:	8b 40 1c             	mov    0x1c(%eax),%eax
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-80104db8:	8d 50 ff             	lea    -0x1(%eax),%edx
-80104dbb:	83 fa 19             	cmp    $0x19,%edx
-80104dbe:	77 20                	ja     80104de0 <syscall+0x40>
-80104dc0:	8b 14 85 00 7c 10 80 	mov    -0x7fef8400(,%eax,4),%edx
-80104dc7:	85 d2                	test   %edx,%edx
-80104dc9:	74 15                	je     80104de0 <syscall+0x40>
-    curproc->tf->eax = syscalls[num]();
-80104dcb:	ff d2                	call   *%edx
-80104dcd:	89 c2                	mov    %eax,%edx
-80104dcf:	8b 43 18             	mov    0x18(%ebx),%eax
-80104dd2:	89 50 1c             	mov    %edx,0x1c(%eax)
-  } else {
-    cprintf("%d %s: unknown sys call %d\n",
-            curproc->pid, curproc->name, num);
-    curproc->tf->eax = -1;
-  }
-}
-80104dd5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104dd8:	c9                   	leave  
-80104dd9:	c3                   	ret    
-80104dda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    cprintf("%d %s: unknown sys call %d\n",
-80104de0:	50                   	push   %eax
-            curproc->pid, curproc->name, num);
-80104de1:	8d 43 6c             	lea    0x6c(%ebx),%eax
-    cprintf("%d %s: unknown sys call %d\n",
-80104de4:	50                   	push   %eax
-80104de5:	ff 73 10             	pushl  0x10(%ebx)
-80104de8:	68 dd 7b 10 80       	push   $0x80107bdd
-80104ded:	e8 be b8 ff ff       	call   801006b0 <cprintf>
-    curproc->tf->eax = -1;
-80104df2:	8b 43 18             	mov    0x18(%ebx),%eax
-80104df5:	83 c4 10             	add    $0x10,%esp
-80104df8:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-}
-80104dff:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104e02:	c9                   	leave  
-80104e03:	c3                   	ret    
-80104e04:	66 90                	xchg   %ax,%ax
-80104e06:	66 90                	xchg   %ax,%ax
-80104e08:	66 90                	xchg   %ax,%ax
-80104e0a:	66 90                	xchg   %ax,%ax
-80104e0c:	66 90                	xchg   %ax,%ax
-80104e0e:	66 90                	xchg   %ax,%ax
-
-80104e10 <create>:
-  return -1;
-}
-
-static struct inode*
-create(char *path, short type, short major, short minor)
-{
-80104e10:	55                   	push   %ebp
-80104e11:	89 e5                	mov    %esp,%ebp
-80104e13:	57                   	push   %edi
-80104e14:	56                   	push   %esi
-  struct inode *ip, *dp;
-  char name[DIRSIZ];
-
-  if((dp = nameiparent(path, name)) == 0)
-80104e15:	8d 7d da             	lea    -0x26(%ebp),%edi
-{
-80104e18:	53                   	push   %ebx
-80104e19:	83 ec 34             	sub    $0x34,%esp
-80104e1c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-80104e1f:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  if((dp = nameiparent(path, name)) == 0)
-80104e22:	57                   	push   %edi
-80104e23:	50                   	push   %eax
-{
-80104e24:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-80104e27:	89 4d cc             	mov    %ecx,-0x34(%ebp)
-  if((dp = nameiparent(path, name)) == 0)
-80104e2a:	e8 21 d2 ff ff       	call   80102050 <nameiparent>
-80104e2f:	83 c4 10             	add    $0x10,%esp
-80104e32:	85 c0                	test   %eax,%eax
-80104e34:	0f 84 46 01 00 00    	je     80104f80 <create+0x170>
-    return 0;
-  ilock(dp);
-80104e3a:	83 ec 0c             	sub    $0xc,%esp
-80104e3d:	89 c3                	mov    %eax,%ebx
-80104e3f:	50                   	push   %eax
-80104e40:	e8 1b c9 ff ff       	call   80101760 <ilock>
-
-  if((ip = dirlookup(dp, name, 0)) != 0){
-80104e45:	83 c4 0c             	add    $0xc,%esp
-80104e48:	6a 00                	push   $0x0
-80104e4a:	57                   	push   %edi
-80104e4b:	53                   	push   %ebx
-80104e4c:	e8 5f ce ff ff       	call   80101cb0 <dirlookup>
-80104e51:	83 c4 10             	add    $0x10,%esp
-80104e54:	89 c6                	mov    %eax,%esi
-80104e56:	85 c0                	test   %eax,%eax
-80104e58:	74 56                	je     80104eb0 <create+0xa0>
-    iunlockput(dp);
-80104e5a:	83 ec 0c             	sub    $0xc,%esp
-80104e5d:	53                   	push   %ebx
-80104e5e:	e8 9d cb ff ff       	call   80101a00 <iunlockput>
-    ilock(ip);
-80104e63:	89 34 24             	mov    %esi,(%esp)
-80104e66:	e8 f5 c8 ff ff       	call   80101760 <ilock>
-    if(type == T_FILE && ip->type == T_FILE)
-80104e6b:	83 c4 10             	add    $0x10,%esp
-80104e6e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-80104e73:	75 1b                	jne    80104e90 <create+0x80>
-80104e75:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
-80104e7a:	75 14                	jne    80104e90 <create+0x80>
-    panic("create: dirlink");
-
-  iunlockput(dp);
-
-  return ip;
-}
-80104e7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104e7f:	89 f0                	mov    %esi,%eax
-80104e81:	5b                   	pop    %ebx
-80104e82:	5e                   	pop    %esi
-80104e83:	5f                   	pop    %edi
-80104e84:	5d                   	pop    %ebp
-80104e85:	c3                   	ret    
-80104e86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104e8d:	8d 76 00             	lea    0x0(%esi),%esi
-    iunlockput(ip);
-80104e90:	83 ec 0c             	sub    $0xc,%esp
-80104e93:	56                   	push   %esi
-    return 0;
-80104e94:	31 f6                	xor    %esi,%esi
-    iunlockput(ip);
-80104e96:	e8 65 cb ff ff       	call   80101a00 <iunlockput>
-    return 0;
-80104e9b:	83 c4 10             	add    $0x10,%esp
-}
-80104e9e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104ea1:	89 f0                	mov    %esi,%eax
-80104ea3:	5b                   	pop    %ebx
-80104ea4:	5e                   	pop    %esi
-80104ea5:	5f                   	pop    %edi
-80104ea6:	5d                   	pop    %ebp
-80104ea7:	c3                   	ret    
-80104ea8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104eaf:	90                   	nop
-  if((ip = ialloc(dp->dev, type)) == 0)
-80104eb0:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
-80104eb4:	83 ec 08             	sub    $0x8,%esp
-80104eb7:	50                   	push   %eax
-80104eb8:	ff 33                	pushl  (%ebx)
-80104eba:	e8 21 c7 ff ff       	call   801015e0 <ialloc>
-80104ebf:	83 c4 10             	add    $0x10,%esp
-80104ec2:	89 c6                	mov    %eax,%esi
-80104ec4:	85 c0                	test   %eax,%eax
-80104ec6:	0f 84 cd 00 00 00    	je     80104f99 <create+0x189>
-  ilock(ip);
-80104ecc:	83 ec 0c             	sub    $0xc,%esp
-80104ecf:	50                   	push   %eax
-80104ed0:	e8 8b c8 ff ff       	call   80101760 <ilock>
-  ip->major = major;
-80104ed5:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
-80104ed9:	66 89 46 52          	mov    %ax,0x52(%esi)
-  ip->minor = minor;
-80104edd:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
-80104ee1:	66 89 46 54          	mov    %ax,0x54(%esi)
-  ip->nlink = 1;
-80104ee5:	b8 01 00 00 00       	mov    $0x1,%eax
-80104eea:	66 89 46 56          	mov    %ax,0x56(%esi)
-  iupdate(ip);
-80104eee:	89 34 24             	mov    %esi,(%esp)
-80104ef1:	e8 aa c7 ff ff       	call   801016a0 <iupdate>
-  if(type == T_DIR){  // Create . and .. entries.
-80104ef6:	83 c4 10             	add    $0x10,%esp
-80104ef9:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-80104efe:	74 30                	je     80104f30 <create+0x120>
-  if(dirlink(dp, name, ip->inum) < 0)
-80104f00:	83 ec 04             	sub    $0x4,%esp
-80104f03:	ff 76 04             	pushl  0x4(%esi)
-80104f06:	57                   	push   %edi
-80104f07:	53                   	push   %ebx
-80104f08:	e8 63 d0 ff ff       	call   80101f70 <dirlink>
-80104f0d:	83 c4 10             	add    $0x10,%esp
-80104f10:	85 c0                	test   %eax,%eax
-80104f12:	78 78                	js     80104f8c <create+0x17c>
-  iunlockput(dp);
-80104f14:	83 ec 0c             	sub    $0xc,%esp
-80104f17:	53                   	push   %ebx
-80104f18:	e8 e3 ca ff ff       	call   80101a00 <iunlockput>
-  return ip;
-80104f1d:	83 c4 10             	add    $0x10,%esp
-}
-80104f20:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104f23:	89 f0                	mov    %esi,%eax
-80104f25:	5b                   	pop    %ebx
-80104f26:	5e                   	pop    %esi
-80104f27:	5f                   	pop    %edi
-80104f28:	5d                   	pop    %ebp
-80104f29:	c3                   	ret    
-80104f2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    iupdate(dp);
-80104f30:	83 ec 0c             	sub    $0xc,%esp
-    dp->nlink++;  // for ".."
-80104f33:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
-    iupdate(dp);
-80104f38:	53                   	push   %ebx
-80104f39:	e8 62 c7 ff ff       	call   801016a0 <iupdate>
-    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-80104f3e:	83 c4 0c             	add    $0xc,%esp
-80104f41:	ff 76 04             	pushl  0x4(%esi)
-80104f44:	68 88 7c 10 80       	push   $0x80107c88
-80104f49:	56                   	push   %esi
-80104f4a:	e8 21 d0 ff ff       	call   80101f70 <dirlink>
-80104f4f:	83 c4 10             	add    $0x10,%esp
-80104f52:	85 c0                	test   %eax,%eax
-80104f54:	78 18                	js     80104f6e <create+0x15e>
-80104f56:	83 ec 04             	sub    $0x4,%esp
-80104f59:	ff 73 04             	pushl  0x4(%ebx)
-80104f5c:	68 87 7c 10 80       	push   $0x80107c87
-80104f61:	56                   	push   %esi
-80104f62:	e8 09 d0 ff ff       	call   80101f70 <dirlink>
-80104f67:	83 c4 10             	add    $0x10,%esp
-80104f6a:	85 c0                	test   %eax,%eax
-80104f6c:	79 92                	jns    80104f00 <create+0xf0>
-      panic("create dots");
-80104f6e:	83 ec 0c             	sub    $0xc,%esp
-80104f71:	68 7b 7c 10 80       	push   $0x80107c7b
-80104f76:	e8 15 b4 ff ff       	call   80100390 <panic>
-80104f7b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104f7f:	90                   	nop
-}
-80104f80:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    return 0;
-80104f83:	31 f6                	xor    %esi,%esi
-}
-80104f85:	5b                   	pop    %ebx
-80104f86:	89 f0                	mov    %esi,%eax
-80104f88:	5e                   	pop    %esi
-80104f89:	5f                   	pop    %edi
-80104f8a:	5d                   	pop    %ebp
-80104f8b:	c3                   	ret    
-    panic("create: dirlink");
-80104f8c:	83 ec 0c             	sub    $0xc,%esp
-80104f8f:	68 8a 7c 10 80       	push   $0x80107c8a
-80104f94:	e8 f7 b3 ff ff       	call   80100390 <panic>
-    panic("create: ialloc");
-80104f99:	83 ec 0c             	sub    $0xc,%esp
-80104f9c:	68 6c 7c 10 80       	push   $0x80107c6c
-80104fa1:	e8 ea b3 ff ff       	call   80100390 <panic>
-80104fa6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104fad:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104fb0 <argfd.constprop.0>:
-argfd(int n, int *pfd, struct file **pf)
-80104fb0:	55                   	push   %ebp
-80104fb1:	89 e5                	mov    %esp,%ebp
-80104fb3:	56                   	push   %esi
-80104fb4:	89 d6                	mov    %edx,%esi
-80104fb6:	53                   	push   %ebx
-80104fb7:	89 c3                	mov    %eax,%ebx
-  if(argint(n, &fd) < 0)
-80104fb9:	8d 45 f4             	lea    -0xc(%ebp),%eax
-argfd(int n, int *pfd, struct file **pf)
-80104fbc:	83 ec 18             	sub    $0x18,%esp
-  if(argint(n, &fd) < 0)
-80104fbf:	50                   	push   %eax
-80104fc0:	6a 00                	push   $0x0
-80104fc2:	e8 e9 fc ff ff       	call   80104cb0 <argint>
-80104fc7:	83 c4 10             	add    $0x10,%esp
-80104fca:	85 c0                	test   %eax,%eax
-80104fcc:	78 2a                	js     80104ff8 <argfd.constprop.0+0x48>
-  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104fce:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104fd2:	77 24                	ja     80104ff8 <argfd.constprop.0+0x48>
-80104fd4:	e8 87 e9 ff ff       	call   80103960 <myproc>
-80104fd9:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104fdc:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
-80104fe0:	85 c0                	test   %eax,%eax
-80104fe2:	74 14                	je     80104ff8 <argfd.constprop.0+0x48>
-  if(pfd)
-80104fe4:	85 db                	test   %ebx,%ebx
-80104fe6:	74 02                	je     80104fea <argfd.constprop.0+0x3a>
-    *pfd = fd;
-80104fe8:	89 13                	mov    %edx,(%ebx)
-    *pf = f;
-80104fea:	89 06                	mov    %eax,(%esi)
-  return 0;
-80104fec:	31 c0                	xor    %eax,%eax
-}
-80104fee:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104ff1:	5b                   	pop    %ebx
-80104ff2:	5e                   	pop    %esi
-80104ff3:	5d                   	pop    %ebp
-80104ff4:	c3                   	ret    
-80104ff5:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80104ff8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104ffd:	eb ef                	jmp    80104fee <argfd.constprop.0+0x3e>
-80104fff:	90                   	nop
-
-80105000 <sys_dup>:
-{
-80105000:	f3 0f 1e fb          	endbr32 
-80105004:	55                   	push   %ebp
-  if(argfd(0, 0, &f) < 0)
-80105005:	31 c0                	xor    %eax,%eax
-{
-80105007:	89 e5                	mov    %esp,%ebp
-80105009:	56                   	push   %esi
-8010500a:	53                   	push   %ebx
-  if(argfd(0, 0, &f) < 0)
-8010500b:	8d 55 f4             	lea    -0xc(%ebp),%edx
-{
-8010500e:	83 ec 10             	sub    $0x10,%esp
-  if(argfd(0, 0, &f) < 0)
-80105011:	e8 9a ff ff ff       	call   80104fb0 <argfd.constprop.0>
-80105016:	85 c0                	test   %eax,%eax
-80105018:	78 1e                	js     80105038 <sys_dup+0x38>
-  if((fd=fdalloc(f)) < 0)
-8010501a:	8b 75 f4             	mov    -0xc(%ebp),%esi
-  for(fd = 0; fd < NOFILE; fd++){
-8010501d:	31 db                	xor    %ebx,%ebx
-  struct proc *curproc = myproc();
-8010501f:	e8 3c e9 ff ff       	call   80103960 <myproc>
-  for(fd = 0; fd < NOFILE; fd++){
-80105024:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(curproc->ofile[fd] == 0){
-80105028:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-8010502c:	85 d2                	test   %edx,%edx
-8010502e:	74 20                	je     80105050 <sys_dup+0x50>
-  for(fd = 0; fd < NOFILE; fd++){
-80105030:	83 c3 01             	add    $0x1,%ebx
-80105033:	83 fb 10             	cmp    $0x10,%ebx
-80105036:	75 f0                	jne    80105028 <sys_dup+0x28>
-}
-80105038:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    return -1;
-8010503b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-}
-80105040:	89 d8                	mov    %ebx,%eax
-80105042:	5b                   	pop    %ebx
-80105043:	5e                   	pop    %esi
-80105044:	5d                   	pop    %ebp
-80105045:	c3                   	ret    
-80105046:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010504d:	8d 76 00             	lea    0x0(%esi),%esi
-      curproc->ofile[fd] = f;
-80105050:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
-  filedup(f);
-80105054:	83 ec 0c             	sub    $0xc,%esp
-80105057:	ff 75 f4             	pushl  -0xc(%ebp)
-8010505a:	e8 11 be ff ff       	call   80100e70 <filedup>
-  return fd;
-8010505f:	83 c4 10             	add    $0x10,%esp
-}
-80105062:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105065:	89 d8                	mov    %ebx,%eax
-80105067:	5b                   	pop    %ebx
-80105068:	5e                   	pop    %esi
-80105069:	5d                   	pop    %ebp
-8010506a:	c3                   	ret    
-8010506b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010506f:	90                   	nop
-
-80105070 <sys_read>:
-{
-80105070:	f3 0f 1e fb          	endbr32 
-80105074:	55                   	push   %ebp
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80105075:	31 c0                	xor    %eax,%eax
-{
-80105077:	89 e5                	mov    %esp,%ebp
-80105079:	83 ec 18             	sub    $0x18,%esp
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-8010507c:	8d 55 ec             	lea    -0x14(%ebp),%edx
-8010507f:	e8 2c ff ff ff       	call   80104fb0 <argfd.constprop.0>
-80105084:	85 c0                	test   %eax,%eax
-80105086:	78 48                	js     801050d0 <sys_read+0x60>
-80105088:	83 ec 08             	sub    $0x8,%esp
-8010508b:	8d 45 f0             	lea    -0x10(%ebp),%eax
-8010508e:	50                   	push   %eax
-8010508f:	6a 02                	push   $0x2
-80105091:	e8 1a fc ff ff       	call   80104cb0 <argint>
-80105096:	83 c4 10             	add    $0x10,%esp
-80105099:	85 c0                	test   %eax,%eax
-8010509b:	78 33                	js     801050d0 <sys_read+0x60>
-8010509d:	83 ec 04             	sub    $0x4,%esp
-801050a0:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801050a3:	ff 75 f0             	pushl  -0x10(%ebp)
-801050a6:	50                   	push   %eax
-801050a7:	6a 01                	push   $0x1
-801050a9:	e8 52 fc ff ff       	call   80104d00 <argptr>
-801050ae:	83 c4 10             	add    $0x10,%esp
-801050b1:	85 c0                	test   %eax,%eax
-801050b3:	78 1b                	js     801050d0 <sys_read+0x60>
-  return fileread(f, p, n);
-801050b5:	83 ec 04             	sub    $0x4,%esp
-801050b8:	ff 75 f0             	pushl  -0x10(%ebp)
-801050bb:	ff 75 f4             	pushl  -0xc(%ebp)
-801050be:	ff 75 ec             	pushl  -0x14(%ebp)
-801050c1:	e8 2a bf ff ff       	call   80100ff0 <fileread>
-801050c6:	83 c4 10             	add    $0x10,%esp
-}
-801050c9:	c9                   	leave  
-801050ca:	c3                   	ret    
-801050cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801050cf:	90                   	nop
-801050d0:	c9                   	leave  
-    return -1;
-801050d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801050d6:	c3                   	ret    
-801050d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801050de:	66 90                	xchg   %ax,%ax
-
-801050e0 <sys_write>:
-{
-801050e0:	f3 0f 1e fb          	endbr32 
-801050e4:	55                   	push   %ebp
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-801050e5:	31 c0                	xor    %eax,%eax
-{
-801050e7:	89 e5                	mov    %esp,%ebp
-801050e9:	83 ec 18             	sub    $0x18,%esp
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-801050ec:	8d 55 ec             	lea    -0x14(%ebp),%edx
-801050ef:	e8 bc fe ff ff       	call   80104fb0 <argfd.constprop.0>
-801050f4:	85 c0                	test   %eax,%eax
-801050f6:	78 48                	js     80105140 <sys_write+0x60>
-801050f8:	83 ec 08             	sub    $0x8,%esp
-801050fb:	8d 45 f0             	lea    -0x10(%ebp),%eax
-801050fe:	50                   	push   %eax
-801050ff:	6a 02                	push   $0x2
-80105101:	e8 aa fb ff ff       	call   80104cb0 <argint>
-80105106:	83 c4 10             	add    $0x10,%esp
-80105109:	85 c0                	test   %eax,%eax
-8010510b:	78 33                	js     80105140 <sys_write+0x60>
-8010510d:	83 ec 04             	sub    $0x4,%esp
-80105110:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105113:	ff 75 f0             	pushl  -0x10(%ebp)
-80105116:	50                   	push   %eax
-80105117:	6a 01                	push   $0x1
-80105119:	e8 e2 fb ff ff       	call   80104d00 <argptr>
-8010511e:	83 c4 10             	add    $0x10,%esp
-80105121:	85 c0                	test   %eax,%eax
-80105123:	78 1b                	js     80105140 <sys_write+0x60>
-  return filewrite(f, p, n);
-80105125:	83 ec 04             	sub    $0x4,%esp
-80105128:	ff 75 f0             	pushl  -0x10(%ebp)
-8010512b:	ff 75 f4             	pushl  -0xc(%ebp)
-8010512e:	ff 75 ec             	pushl  -0x14(%ebp)
-80105131:	e8 5a bf ff ff       	call   80101090 <filewrite>
-80105136:	83 c4 10             	add    $0x10,%esp
-}
-80105139:	c9                   	leave  
-8010513a:	c3                   	ret    
-8010513b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010513f:	90                   	nop
-80105140:	c9                   	leave  
-    return -1;
-80105141:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105146:	c3                   	ret    
-80105147:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010514e:	66 90                	xchg   %ax,%ax
-
-80105150 <sys_close>:
-{
-80105150:	f3 0f 1e fb          	endbr32 
-80105154:	55                   	push   %ebp
-80105155:	89 e5                	mov    %esp,%ebp
-80105157:	83 ec 18             	sub    $0x18,%esp
-  if(argfd(0, &fd, &f) < 0)
-8010515a:	8d 55 f4             	lea    -0xc(%ebp),%edx
-8010515d:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105160:	e8 4b fe ff ff       	call   80104fb0 <argfd.constprop.0>
-80105165:	85 c0                	test   %eax,%eax
-80105167:	78 27                	js     80105190 <sys_close+0x40>
-  myproc()->ofile[fd] = 0;
-80105169:	e8 f2 e7 ff ff       	call   80103960 <myproc>
-8010516e:	8b 55 f0             	mov    -0x10(%ebp),%edx
-  fileclose(f);
-80105171:	83 ec 0c             	sub    $0xc,%esp
-  myproc()->ofile[fd] = 0;
-80105174:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
-8010517b:	00 
-  fileclose(f);
-8010517c:	ff 75 f4             	pushl  -0xc(%ebp)
-8010517f:	e8 3c bd ff ff       	call   80100ec0 <fileclose>
-  return 0;
-80105184:	83 c4 10             	add    $0x10,%esp
-80105187:	31 c0                	xor    %eax,%eax
-}
-80105189:	c9                   	leave  
-8010518a:	c3                   	ret    
-8010518b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010518f:	90                   	nop
-80105190:	c9                   	leave  
-    return -1;
-80105191:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105196:	c3                   	ret    
-80105197:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010519e:	66 90                	xchg   %ax,%ax
-
-801051a0 <sys_fstat>:
-{
-801051a0:	f3 0f 1e fb          	endbr32 
-801051a4:	55                   	push   %ebp
-  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-801051a5:	31 c0                	xor    %eax,%eax
-{
-801051a7:	89 e5                	mov    %esp,%ebp
-801051a9:	83 ec 18             	sub    $0x18,%esp
-  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-801051ac:	8d 55 f0             	lea    -0x10(%ebp),%edx
-801051af:	e8 fc fd ff ff       	call   80104fb0 <argfd.constprop.0>
-801051b4:	85 c0                	test   %eax,%eax
-801051b6:	78 30                	js     801051e8 <sys_fstat+0x48>
-801051b8:	83 ec 04             	sub    $0x4,%esp
-801051bb:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801051be:	6a 14                	push   $0x14
-801051c0:	50                   	push   %eax
-801051c1:	6a 01                	push   $0x1
-801051c3:	e8 38 fb ff ff       	call   80104d00 <argptr>
-801051c8:	83 c4 10             	add    $0x10,%esp
-801051cb:	85 c0                	test   %eax,%eax
-801051cd:	78 19                	js     801051e8 <sys_fstat+0x48>
-  return filestat(f, st);
-801051cf:	83 ec 08             	sub    $0x8,%esp
-801051d2:	ff 75 f4             	pushl  -0xc(%ebp)
-801051d5:	ff 75 f0             	pushl  -0x10(%ebp)
-801051d8:	e8 c3 bd ff ff       	call   80100fa0 <filestat>
-801051dd:	83 c4 10             	add    $0x10,%esp
-}
-801051e0:	c9                   	leave  
-801051e1:	c3                   	ret    
-801051e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801051e8:	c9                   	leave  
-    return -1;
-801051e9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801051ee:	c3                   	ret    
-801051ef:	90                   	nop
-
-801051f0 <sys_link>:
-{
-801051f0:	f3 0f 1e fb          	endbr32 
-801051f4:	55                   	push   %ebp
-801051f5:	89 e5                	mov    %esp,%ebp
-801051f7:	57                   	push   %edi
-801051f8:	56                   	push   %esi
-  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-801051f9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
-{
-801051fc:	53                   	push   %ebx
-801051fd:	83 ec 34             	sub    $0x34,%esp
-  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80105200:	50                   	push   %eax
-80105201:	6a 00                	push   $0x0
-80105203:	e8 58 fb ff ff       	call   80104d60 <argstr>
-80105208:	83 c4 10             	add    $0x10,%esp
-8010520b:	85 c0                	test   %eax,%eax
-8010520d:	0f 88 ff 00 00 00    	js     80105312 <sys_link+0x122>
-80105213:	83 ec 08             	sub    $0x8,%esp
-80105216:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80105219:	50                   	push   %eax
-8010521a:	6a 01                	push   $0x1
-8010521c:	e8 3f fb ff ff       	call   80104d60 <argstr>
-80105221:	83 c4 10             	add    $0x10,%esp
-80105224:	85 c0                	test   %eax,%eax
-80105226:	0f 88 e6 00 00 00    	js     80105312 <sys_link+0x122>
-  begin_op();
-8010522c:	e8 ff da ff ff       	call   80102d30 <begin_op>
-  if((ip = namei(old)) == 0){
-80105231:	83 ec 0c             	sub    $0xc,%esp
-80105234:	ff 75 d4             	pushl  -0x2c(%ebp)
-80105237:	e8 f4 cd ff ff       	call   80102030 <namei>
-8010523c:	83 c4 10             	add    $0x10,%esp
-8010523f:	89 c3                	mov    %eax,%ebx
-80105241:	85 c0                	test   %eax,%eax
-80105243:	0f 84 e8 00 00 00    	je     80105331 <sys_link+0x141>
-  ilock(ip);
-80105249:	83 ec 0c             	sub    $0xc,%esp
-8010524c:	50                   	push   %eax
-8010524d:	e8 0e c5 ff ff       	call   80101760 <ilock>
-  if(ip->type == T_DIR){
-80105252:	83 c4 10             	add    $0x10,%esp
-80105255:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-8010525a:	0f 84 b9 00 00 00    	je     80105319 <sys_link+0x129>
-  iupdate(ip);
-80105260:	83 ec 0c             	sub    $0xc,%esp
-  ip->nlink++;
-80105263:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
-  if((dp = nameiparent(new, name)) == 0)
-80105268:	8d 7d da             	lea    -0x26(%ebp),%edi
-  iupdate(ip);
-8010526b:	53                   	push   %ebx
-8010526c:	e8 2f c4 ff ff       	call   801016a0 <iupdate>
-  iunlock(ip);
-80105271:	89 1c 24             	mov    %ebx,(%esp)
-80105274:	e8 c7 c5 ff ff       	call   80101840 <iunlock>
-  if((dp = nameiparent(new, name)) == 0)
-80105279:	58                   	pop    %eax
-8010527a:	5a                   	pop    %edx
-8010527b:	57                   	push   %edi
-8010527c:	ff 75 d0             	pushl  -0x30(%ebp)
-8010527f:	e8 cc cd ff ff       	call   80102050 <nameiparent>
-80105284:	83 c4 10             	add    $0x10,%esp
-80105287:	89 c6                	mov    %eax,%esi
-80105289:	85 c0                	test   %eax,%eax
-8010528b:	74 5f                	je     801052ec <sys_link+0xfc>
-  ilock(dp);
-8010528d:	83 ec 0c             	sub    $0xc,%esp
-80105290:	50                   	push   %eax
-80105291:	e8 ca c4 ff ff       	call   80101760 <ilock>
-  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-80105296:	8b 03                	mov    (%ebx),%eax
-80105298:	83 c4 10             	add    $0x10,%esp
-8010529b:	39 06                	cmp    %eax,(%esi)
-8010529d:	75 41                	jne    801052e0 <sys_link+0xf0>
-8010529f:	83 ec 04             	sub    $0x4,%esp
-801052a2:	ff 73 04             	pushl  0x4(%ebx)
-801052a5:	57                   	push   %edi
-801052a6:	56                   	push   %esi
-801052a7:	e8 c4 cc ff ff       	call   80101f70 <dirlink>
-801052ac:	83 c4 10             	add    $0x10,%esp
-801052af:	85 c0                	test   %eax,%eax
-801052b1:	78 2d                	js     801052e0 <sys_link+0xf0>
-  iunlockput(dp);
-801052b3:	83 ec 0c             	sub    $0xc,%esp
-801052b6:	56                   	push   %esi
-801052b7:	e8 44 c7 ff ff       	call   80101a00 <iunlockput>
-  iput(ip);
-801052bc:	89 1c 24             	mov    %ebx,(%esp)
-801052bf:	e8 cc c5 ff ff       	call   80101890 <iput>
-  end_op();
-801052c4:	e8 d7 da ff ff       	call   80102da0 <end_op>
-  return 0;
-801052c9:	83 c4 10             	add    $0x10,%esp
-801052cc:	31 c0                	xor    %eax,%eax
-}
-801052ce:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801052d1:	5b                   	pop    %ebx
-801052d2:	5e                   	pop    %esi
-801052d3:	5f                   	pop    %edi
-801052d4:	5d                   	pop    %ebp
-801052d5:	c3                   	ret    
-801052d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801052dd:	8d 76 00             	lea    0x0(%esi),%esi
-    iunlockput(dp);
-801052e0:	83 ec 0c             	sub    $0xc,%esp
-801052e3:	56                   	push   %esi
-801052e4:	e8 17 c7 ff ff       	call   80101a00 <iunlockput>
-    goto bad;
-801052e9:	83 c4 10             	add    $0x10,%esp
-  ilock(ip);
-801052ec:	83 ec 0c             	sub    $0xc,%esp
-801052ef:	53                   	push   %ebx
-801052f0:	e8 6b c4 ff ff       	call   80101760 <ilock>
-  ip->nlink--;
-801052f5:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
-  iupdate(ip);
-801052fa:	89 1c 24             	mov    %ebx,(%esp)
-801052fd:	e8 9e c3 ff ff       	call   801016a0 <iupdate>
-  iunlockput(ip);
-80105302:	89 1c 24             	mov    %ebx,(%esp)
-80105305:	e8 f6 c6 ff ff       	call   80101a00 <iunlockput>
-  end_op();
-8010530a:	e8 91 da ff ff       	call   80102da0 <end_op>
-  return -1;
-8010530f:	83 c4 10             	add    $0x10,%esp
-80105312:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105317:	eb b5                	jmp    801052ce <sys_link+0xde>
-    iunlockput(ip);
-80105319:	83 ec 0c             	sub    $0xc,%esp
-8010531c:	53                   	push   %ebx
-8010531d:	e8 de c6 ff ff       	call   80101a00 <iunlockput>
-    end_op();
-80105322:	e8 79 da ff ff       	call   80102da0 <end_op>
-    return -1;
-80105327:	83 c4 10             	add    $0x10,%esp
-8010532a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010532f:	eb 9d                	jmp    801052ce <sys_link+0xde>
-    end_op();
-80105331:	e8 6a da ff ff       	call   80102da0 <end_op>
-    return -1;
-80105336:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010533b:	eb 91                	jmp    801052ce <sys_link+0xde>
-8010533d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80105340 <sys_unlink>:
-{
-80105340:	f3 0f 1e fb          	endbr32 
-80105344:	55                   	push   %ebp
-80105345:	89 e5                	mov    %esp,%ebp
-80105347:	57                   	push   %edi
-80105348:	56                   	push   %esi
-  if(argstr(0, &path) < 0)
-80105349:	8d 45 c0             	lea    -0x40(%ebp),%eax
-{
-8010534c:	53                   	push   %ebx
-8010534d:	83 ec 54             	sub    $0x54,%esp
-  if(argstr(0, &path) < 0)
-80105350:	50                   	push   %eax
-80105351:	6a 00                	push   $0x0
-80105353:	e8 08 fa ff ff       	call   80104d60 <argstr>
-80105358:	83 c4 10             	add    $0x10,%esp
-8010535b:	85 c0                	test   %eax,%eax
-8010535d:	0f 88 7d 01 00 00    	js     801054e0 <sys_unlink+0x1a0>
-  begin_op();
-80105363:	e8 c8 d9 ff ff       	call   80102d30 <begin_op>
-  if((dp = nameiparent(path, name)) == 0){
-80105368:	8d 5d ca             	lea    -0x36(%ebp),%ebx
-8010536b:	83 ec 08             	sub    $0x8,%esp
-8010536e:	53                   	push   %ebx
-8010536f:	ff 75 c0             	pushl  -0x40(%ebp)
-80105372:	e8 d9 cc ff ff       	call   80102050 <nameiparent>
-80105377:	83 c4 10             	add    $0x10,%esp
-8010537a:	89 c6                	mov    %eax,%esi
-8010537c:	85 c0                	test   %eax,%eax
-8010537e:	0f 84 66 01 00 00    	je     801054ea <sys_unlink+0x1aa>
-  ilock(dp);
-80105384:	83 ec 0c             	sub    $0xc,%esp
-80105387:	50                   	push   %eax
-80105388:	e8 d3 c3 ff ff       	call   80101760 <ilock>
-  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-8010538d:	58                   	pop    %eax
-8010538e:	5a                   	pop    %edx
-8010538f:	68 88 7c 10 80       	push   $0x80107c88
-80105394:	53                   	push   %ebx
-80105395:	e8 f6 c8 ff ff       	call   80101c90 <namecmp>
-8010539a:	83 c4 10             	add    $0x10,%esp
-8010539d:	85 c0                	test   %eax,%eax
-8010539f:	0f 84 03 01 00 00    	je     801054a8 <sys_unlink+0x168>
-801053a5:	83 ec 08             	sub    $0x8,%esp
-801053a8:	68 87 7c 10 80       	push   $0x80107c87
-801053ad:	53                   	push   %ebx
-801053ae:	e8 dd c8 ff ff       	call   80101c90 <namecmp>
-801053b3:	83 c4 10             	add    $0x10,%esp
-801053b6:	85 c0                	test   %eax,%eax
-801053b8:	0f 84 ea 00 00 00    	je     801054a8 <sys_unlink+0x168>
-  if((ip = dirlookup(dp, name, &off)) == 0)
-801053be:	83 ec 04             	sub    $0x4,%esp
-801053c1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-801053c4:	50                   	push   %eax
-801053c5:	53                   	push   %ebx
-801053c6:	56                   	push   %esi
-801053c7:	e8 e4 c8 ff ff       	call   80101cb0 <dirlookup>
-801053cc:	83 c4 10             	add    $0x10,%esp
-801053cf:	89 c3                	mov    %eax,%ebx
-801053d1:	85 c0                	test   %eax,%eax
-801053d3:	0f 84 cf 00 00 00    	je     801054a8 <sys_unlink+0x168>
-  ilock(ip);
-801053d9:	83 ec 0c             	sub    $0xc,%esp
-801053dc:	50                   	push   %eax
-801053dd:	e8 7e c3 ff ff       	call   80101760 <ilock>
-  if(ip->nlink < 1)
-801053e2:	83 c4 10             	add    $0x10,%esp
-801053e5:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-801053ea:	0f 8e 23 01 00 00    	jle    80105513 <sys_unlink+0x1d3>
-  if(ip->type == T_DIR && !isdirempty(ip)){
-801053f0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801053f5:	8d 7d d8             	lea    -0x28(%ebp),%edi
-801053f8:	74 66                	je     80105460 <sys_unlink+0x120>
-  memset(&de, 0, sizeof(de));
-801053fa:	83 ec 04             	sub    $0x4,%esp
-801053fd:	6a 10                	push   $0x10
-801053ff:	6a 00                	push   $0x0
-80105401:	57                   	push   %edi
-80105402:	e8 c9 f5 ff ff       	call   801049d0 <memset>
-  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105407:	6a 10                	push   $0x10
-80105409:	ff 75 c4             	pushl  -0x3c(%ebp)
-8010540c:	57                   	push   %edi
-8010540d:	56                   	push   %esi
-8010540e:	e8 4d c7 ff ff       	call   80101b60 <writei>
-80105413:	83 c4 20             	add    $0x20,%esp
-80105416:	83 f8 10             	cmp    $0x10,%eax
-80105419:	0f 85 e7 00 00 00    	jne    80105506 <sys_unlink+0x1c6>
-  if(ip->type == T_DIR){
-8010541f:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105424:	0f 84 96 00 00 00    	je     801054c0 <sys_unlink+0x180>
-  iunlockput(dp);
-8010542a:	83 ec 0c             	sub    $0xc,%esp
-8010542d:	56                   	push   %esi
-8010542e:	e8 cd c5 ff ff       	call   80101a00 <iunlockput>
-  ip->nlink--;
-80105433:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
-  iupdate(ip);
-80105438:	89 1c 24             	mov    %ebx,(%esp)
-8010543b:	e8 60 c2 ff ff       	call   801016a0 <iupdate>
-  iunlockput(ip);
-80105440:	89 1c 24             	mov    %ebx,(%esp)
-80105443:	e8 b8 c5 ff ff       	call   80101a00 <iunlockput>
-  end_op();
-80105448:	e8 53 d9 ff ff       	call   80102da0 <end_op>
-  return 0;
-8010544d:	83 c4 10             	add    $0x10,%esp
-80105450:	31 c0                	xor    %eax,%eax
-}
-80105452:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105455:	5b                   	pop    %ebx
-80105456:	5e                   	pop    %esi
-80105457:	5f                   	pop    %edi
-80105458:	5d                   	pop    %ebp
-80105459:	c3                   	ret    
-8010545a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105460:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
-80105464:	76 94                	jbe    801053fa <sys_unlink+0xba>
-80105466:	ba 20 00 00 00       	mov    $0x20,%edx
-8010546b:	eb 0b                	jmp    80105478 <sys_unlink+0x138>
-8010546d:	8d 76 00             	lea    0x0(%esi),%esi
-80105470:	83 c2 10             	add    $0x10,%edx
-80105473:	39 53 58             	cmp    %edx,0x58(%ebx)
-80105476:	76 82                	jbe    801053fa <sys_unlink+0xba>
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105478:	6a 10                	push   $0x10
-8010547a:	52                   	push   %edx
-8010547b:	57                   	push   %edi
-8010547c:	53                   	push   %ebx
-8010547d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
-80105480:	e8 db c5 ff ff       	call   80101a60 <readi>
-80105485:	83 c4 10             	add    $0x10,%esp
-80105488:	8b 55 b4             	mov    -0x4c(%ebp),%edx
-8010548b:	83 f8 10             	cmp    $0x10,%eax
-8010548e:	75 69                	jne    801054f9 <sys_unlink+0x1b9>
-    if(de.inum != 0)
-80105490:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80105495:	74 d9                	je     80105470 <sys_unlink+0x130>
-    iunlockput(ip);
-80105497:	83 ec 0c             	sub    $0xc,%esp
-8010549a:	53                   	push   %ebx
-8010549b:	e8 60 c5 ff ff       	call   80101a00 <iunlockput>
-    goto bad;
-801054a0:	83 c4 10             	add    $0x10,%esp
-801054a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801054a7:	90                   	nop
-  iunlockput(dp);
-801054a8:	83 ec 0c             	sub    $0xc,%esp
-801054ab:	56                   	push   %esi
-801054ac:	e8 4f c5 ff ff       	call   80101a00 <iunlockput>
-  end_op();
-801054b1:	e8 ea d8 ff ff       	call   80102da0 <end_op>
-  return -1;
-801054b6:	83 c4 10             	add    $0x10,%esp
-801054b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054be:	eb 92                	jmp    80105452 <sys_unlink+0x112>
-    iupdate(dp);
-801054c0:	83 ec 0c             	sub    $0xc,%esp
-    dp->nlink--;
-801054c3:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
-    iupdate(dp);
-801054c8:	56                   	push   %esi
-801054c9:	e8 d2 c1 ff ff       	call   801016a0 <iupdate>
-801054ce:	83 c4 10             	add    $0x10,%esp
-801054d1:	e9 54 ff ff ff       	jmp    8010542a <sys_unlink+0xea>
-801054d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801054dd:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-801054e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054e5:	e9 68 ff ff ff       	jmp    80105452 <sys_unlink+0x112>
-    end_op();
-801054ea:	e8 b1 d8 ff ff       	call   80102da0 <end_op>
-    return -1;
-801054ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054f4:	e9 59 ff ff ff       	jmp    80105452 <sys_unlink+0x112>
-      panic("isdirempty: readi");
-801054f9:	83 ec 0c             	sub    $0xc,%esp
-801054fc:	68 ac 7c 10 80       	push   $0x80107cac
-80105501:	e8 8a ae ff ff       	call   80100390 <panic>
-    panic("unlink: writei");
-80105506:	83 ec 0c             	sub    $0xc,%esp
-80105509:	68 be 7c 10 80       	push   $0x80107cbe
-8010550e:	e8 7d ae ff ff       	call   80100390 <panic>
-    panic("unlink: nlink < 1");
-80105513:	83 ec 0c             	sub    $0xc,%esp
-80105516:	68 9a 7c 10 80       	push   $0x80107c9a
-8010551b:	e8 70 ae ff ff       	call   80100390 <panic>
-
-80105520 <sys_open>:
-
-int
-sys_open(void)
-{
-80105520:	f3 0f 1e fb          	endbr32 
-80105524:	55                   	push   %ebp
-80105525:	89 e5                	mov    %esp,%ebp
-80105527:	57                   	push   %edi
-80105528:	56                   	push   %esi
-  char *path;
-  int fd, omode;
-  struct file *f;
-  struct inode *ip;
-
-  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-80105529:	8d 45 e0             	lea    -0x20(%ebp),%eax
-{
-8010552c:	53                   	push   %ebx
-8010552d:	83 ec 24             	sub    $0x24,%esp
-  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-80105530:	50                   	push   %eax
-80105531:	6a 00                	push   $0x0
-80105533:	e8 28 f8 ff ff       	call   80104d60 <argstr>
-80105538:	83 c4 10             	add    $0x10,%esp
-8010553b:	85 c0                	test   %eax,%eax
-8010553d:	0f 88 8a 00 00 00    	js     801055cd <sys_open+0xad>
-80105543:	83 ec 08             	sub    $0x8,%esp
-80105546:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-80105549:	50                   	push   %eax
-8010554a:	6a 01                	push   $0x1
-8010554c:	e8 5f f7 ff ff       	call   80104cb0 <argint>
-80105551:	83 c4 10             	add    $0x10,%esp
-80105554:	85 c0                	test   %eax,%eax
-80105556:	78 75                	js     801055cd <sys_open+0xad>
-    return -1;
-
-  begin_op();
-80105558:	e8 d3 d7 ff ff       	call   80102d30 <begin_op>
-
-  if(omode & O_CREATE){
-8010555d:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
-80105561:	75 75                	jne    801055d8 <sys_open+0xb8>
-    if(ip == 0){
-      end_op();
-      return -1;
-    }
-  } else {
-    if((ip = namei(path)) == 0){
-80105563:	83 ec 0c             	sub    $0xc,%esp
-80105566:	ff 75 e0             	pushl  -0x20(%ebp)
-80105569:	e8 c2 ca ff ff       	call   80102030 <namei>
-8010556e:	83 c4 10             	add    $0x10,%esp
-80105571:	89 c6                	mov    %eax,%esi
-80105573:	85 c0                	test   %eax,%eax
-80105575:	74 7e                	je     801055f5 <sys_open+0xd5>
-      end_op();
-      return -1;
-    }
-    ilock(ip);
-80105577:	83 ec 0c             	sub    $0xc,%esp
-8010557a:	50                   	push   %eax
-8010557b:	e8 e0 c1 ff ff       	call   80101760 <ilock>
-    if(ip->type == T_DIR && omode != O_RDONLY){
-80105580:	83 c4 10             	add    $0x10,%esp
-80105583:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80105588:	0f 84 c2 00 00 00    	je     80105650 <sys_open+0x130>
-      end_op();
-      return -1;
-    }
-  }
-
-  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-8010558e:	e8 6d b8 ff ff       	call   80100e00 <filealloc>
-80105593:	89 c7                	mov    %eax,%edi
-80105595:	85 c0                	test   %eax,%eax
-80105597:	74 23                	je     801055bc <sys_open+0x9c>
-  struct proc *curproc = myproc();
-80105599:	e8 c2 e3 ff ff       	call   80103960 <myproc>
-  for(fd = 0; fd < NOFILE; fd++){
-8010559e:	31 db                	xor    %ebx,%ebx
-    if(curproc->ofile[fd] == 0){
-801055a0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-801055a4:	85 d2                	test   %edx,%edx
-801055a6:	74 60                	je     80105608 <sys_open+0xe8>
-  for(fd = 0; fd < NOFILE; fd++){
-801055a8:	83 c3 01             	add    $0x1,%ebx
-801055ab:	83 fb 10             	cmp    $0x10,%ebx
-801055ae:	75 f0                	jne    801055a0 <sys_open+0x80>
-    if(f)
-      fileclose(f);
-801055b0:	83 ec 0c             	sub    $0xc,%esp
-801055b3:	57                   	push   %edi
-801055b4:	e8 07 b9 ff ff       	call   80100ec0 <fileclose>
-801055b9:	83 c4 10             	add    $0x10,%esp
-    iunlockput(ip);
-801055bc:	83 ec 0c             	sub    $0xc,%esp
-801055bf:	56                   	push   %esi
-801055c0:	e8 3b c4 ff ff       	call   80101a00 <iunlockput>
-    end_op();
-801055c5:	e8 d6 d7 ff ff       	call   80102da0 <end_op>
-    return -1;
-801055ca:	83 c4 10             	add    $0x10,%esp
-801055cd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-801055d2:	eb 6d                	jmp    80105641 <sys_open+0x121>
-801055d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    ip = create(path, T_FILE, 0, 0);
-801055d8:	83 ec 0c             	sub    $0xc,%esp
-801055db:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801055de:	31 c9                	xor    %ecx,%ecx
-801055e0:	ba 02 00 00 00       	mov    $0x2,%edx
-801055e5:	6a 00                	push   $0x0
-801055e7:	e8 24 f8 ff ff       	call   80104e10 <create>
-    if(ip == 0){
-801055ec:	83 c4 10             	add    $0x10,%esp
-    ip = create(path, T_FILE, 0, 0);
-801055ef:	89 c6                	mov    %eax,%esi
-    if(ip == 0){
-801055f1:	85 c0                	test   %eax,%eax
-801055f3:	75 99                	jne    8010558e <sys_open+0x6e>
-      end_op();
-801055f5:	e8 a6 d7 ff ff       	call   80102da0 <end_op>
-      return -1;
-801055fa:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-801055ff:	eb 40                	jmp    80105641 <sys_open+0x121>
-80105601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  }
-  iunlock(ip);
-80105608:	83 ec 0c             	sub    $0xc,%esp
-      curproc->ofile[fd] = f;
-8010560b:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
-  iunlock(ip);
-8010560f:	56                   	push   %esi
-80105610:	e8 2b c2 ff ff       	call   80101840 <iunlock>
-  end_op();
-80105615:	e8 86 d7 ff ff       	call   80102da0 <end_op>
-
-  f->type = FD_INODE;
-8010561a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
-  f->ip = ip;
-  f->off = 0;
-  f->readable = !(omode & O_WRONLY);
-80105620:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-80105623:	83 c4 10             	add    $0x10,%esp
-  f->ip = ip;
-80105626:	89 77 10             	mov    %esi,0x10(%edi)
-  f->readable = !(omode & O_WRONLY);
-80105629:	89 d0                	mov    %edx,%eax
-  f->off = 0;
-8010562b:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
-  f->readable = !(omode & O_WRONLY);
-80105632:	f7 d0                	not    %eax
-80105634:	83 e0 01             	and    $0x1,%eax
-  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-80105637:	83 e2 03             	and    $0x3,%edx
-  f->readable = !(omode & O_WRONLY);
-8010563a:	88 47 08             	mov    %al,0x8(%edi)
-  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-8010563d:	0f 95 47 09          	setne  0x9(%edi)
-  return fd;
-}
-80105641:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105644:	89 d8                	mov    %ebx,%eax
-80105646:	5b                   	pop    %ebx
-80105647:	5e                   	pop    %esi
-80105648:	5f                   	pop    %edi
-80105649:	5d                   	pop    %ebp
-8010564a:	c3                   	ret    
-8010564b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010564f:	90                   	nop
-    if(ip->type == T_DIR && omode != O_RDONLY){
-80105650:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80105653:	85 c9                	test   %ecx,%ecx
-80105655:	0f 84 33 ff ff ff    	je     8010558e <sys_open+0x6e>
-8010565b:	e9 5c ff ff ff       	jmp    801055bc <sys_open+0x9c>
-
-80105660 <sys_mkdir>:
-
-int
-sys_mkdir(void)
-{
-80105660:	f3 0f 1e fb          	endbr32 
-80105664:	55                   	push   %ebp
-80105665:	89 e5                	mov    %esp,%ebp
-80105667:	83 ec 18             	sub    $0x18,%esp
-  char *path;
-  struct inode *ip;
-
-  begin_op();
-8010566a:	e8 c1 d6 ff ff       	call   80102d30 <begin_op>
-  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-8010566f:	83 ec 08             	sub    $0x8,%esp
-80105672:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105675:	50                   	push   %eax
-80105676:	6a 00                	push   $0x0
-80105678:	e8 e3 f6 ff ff       	call   80104d60 <argstr>
-8010567d:	83 c4 10             	add    $0x10,%esp
-80105680:	85 c0                	test   %eax,%eax
-80105682:	78 34                	js     801056b8 <sys_mkdir+0x58>
-80105684:	83 ec 0c             	sub    $0xc,%esp
-80105687:	8b 45 f4             	mov    -0xc(%ebp),%eax
-8010568a:	31 c9                	xor    %ecx,%ecx
-8010568c:	ba 01 00 00 00       	mov    $0x1,%edx
-80105691:	6a 00                	push   $0x0
-80105693:	e8 78 f7 ff ff       	call   80104e10 <create>
-80105698:	83 c4 10             	add    $0x10,%esp
-8010569b:	85 c0                	test   %eax,%eax
-8010569d:	74 19                	je     801056b8 <sys_mkdir+0x58>
-    end_op();
-    return -1;
-  }
-  iunlockput(ip);
-8010569f:	83 ec 0c             	sub    $0xc,%esp
-801056a2:	50                   	push   %eax
-801056a3:	e8 58 c3 ff ff       	call   80101a00 <iunlockput>
-  end_op();
-801056a8:	e8 f3 d6 ff ff       	call   80102da0 <end_op>
-  return 0;
-801056ad:	83 c4 10             	add    $0x10,%esp
-801056b0:	31 c0                	xor    %eax,%eax
-}
-801056b2:	c9                   	leave  
-801056b3:	c3                   	ret    
-801056b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    end_op();
-801056b8:	e8 e3 d6 ff ff       	call   80102da0 <end_op>
-    return -1;
-801056bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801056c2:	c9                   	leave  
-801056c3:	c3                   	ret    
-801056c4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801056cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801056cf:	90                   	nop
-
-801056d0 <sys_mknod>:
-
-int
-sys_mknod(void)
-{
-801056d0:	f3 0f 1e fb          	endbr32 
-801056d4:	55                   	push   %ebp
-801056d5:	89 e5                	mov    %esp,%ebp
-801056d7:	83 ec 18             	sub    $0x18,%esp
-  struct inode *ip;
-  char *path;
-  int major, minor;
-
-  begin_op();
-801056da:	e8 51 d6 ff ff       	call   80102d30 <begin_op>
-  if((argstr(0, &path)) < 0 ||
-801056df:	83 ec 08             	sub    $0x8,%esp
-801056e2:	8d 45 ec             	lea    -0x14(%ebp),%eax
-801056e5:	50                   	push   %eax
-801056e6:	6a 00                	push   $0x0
-801056e8:	e8 73 f6 ff ff       	call   80104d60 <argstr>
-801056ed:	83 c4 10             	add    $0x10,%esp
-801056f0:	85 c0                	test   %eax,%eax
-801056f2:	78 64                	js     80105758 <sys_mknod+0x88>
-     argint(1, &major) < 0 ||
-801056f4:	83 ec 08             	sub    $0x8,%esp
-801056f7:	8d 45 f0             	lea    -0x10(%ebp),%eax
-801056fa:	50                   	push   %eax
-801056fb:	6a 01                	push   $0x1
-801056fd:	e8 ae f5 ff ff       	call   80104cb0 <argint>
-  if((argstr(0, &path)) < 0 ||
-80105702:	83 c4 10             	add    $0x10,%esp
-80105705:	85 c0                	test   %eax,%eax
-80105707:	78 4f                	js     80105758 <sys_mknod+0x88>
-     argint(2, &minor) < 0 ||
-80105709:	83 ec 08             	sub    $0x8,%esp
-8010570c:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010570f:	50                   	push   %eax
-80105710:	6a 02                	push   $0x2
-80105712:	e8 99 f5 ff ff       	call   80104cb0 <argint>
-     argint(1, &major) < 0 ||
-80105717:	83 c4 10             	add    $0x10,%esp
-8010571a:	85 c0                	test   %eax,%eax
-8010571c:	78 3a                	js     80105758 <sys_mknod+0x88>
-     (ip = create(path, T_DEV, major, minor)) == 0){
-8010571e:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
-80105722:	83 ec 0c             	sub    $0xc,%esp
-80105725:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
-80105729:	ba 03 00 00 00       	mov    $0x3,%edx
-8010572e:	50                   	push   %eax
-8010572f:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80105732:	e8 d9 f6 ff ff       	call   80104e10 <create>
-     argint(2, &minor) < 0 ||
-80105737:	83 c4 10             	add    $0x10,%esp
-8010573a:	85 c0                	test   %eax,%eax
-8010573c:	74 1a                	je     80105758 <sys_mknod+0x88>
-    end_op();
-    return -1;
-  }
-  iunlockput(ip);
-8010573e:	83 ec 0c             	sub    $0xc,%esp
-80105741:	50                   	push   %eax
-80105742:	e8 b9 c2 ff ff       	call   80101a00 <iunlockput>
-  end_op();
-80105747:	e8 54 d6 ff ff       	call   80102da0 <end_op>
-  return 0;
-8010574c:	83 c4 10             	add    $0x10,%esp
-8010574f:	31 c0                	xor    %eax,%eax
-}
-80105751:	c9                   	leave  
-80105752:	c3                   	ret    
-80105753:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105757:	90                   	nop
-    end_op();
-80105758:	e8 43 d6 ff ff       	call   80102da0 <end_op>
-    return -1;
-8010575d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105762:	c9                   	leave  
-80105763:	c3                   	ret    
-80105764:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010576b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010576f:	90                   	nop
-
-80105770 <sys_chdir>:
-
-int
-sys_chdir(void)
-{
-80105770:	f3 0f 1e fb          	endbr32 
-80105774:	55                   	push   %ebp
-80105775:	89 e5                	mov    %esp,%ebp
-80105777:	56                   	push   %esi
-80105778:	53                   	push   %ebx
-80105779:	83 ec 10             	sub    $0x10,%esp
-  char *path;
-  struct inode *ip;
-  struct proc *curproc = myproc();
-8010577c:	e8 df e1 ff ff       	call   80103960 <myproc>
-80105781:	89 c6                	mov    %eax,%esi
-  
-  begin_op();
-80105783:	e8 a8 d5 ff ff       	call   80102d30 <begin_op>
-  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-80105788:	83 ec 08             	sub    $0x8,%esp
-8010578b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010578e:	50                   	push   %eax
-8010578f:	6a 00                	push   $0x0
-80105791:	e8 ca f5 ff ff       	call   80104d60 <argstr>
-80105796:	83 c4 10             	add    $0x10,%esp
-80105799:	85 c0                	test   %eax,%eax
-8010579b:	78 73                	js     80105810 <sys_chdir+0xa0>
-8010579d:	83 ec 0c             	sub    $0xc,%esp
-801057a0:	ff 75 f4             	pushl  -0xc(%ebp)
-801057a3:	e8 88 c8 ff ff       	call   80102030 <namei>
-801057a8:	83 c4 10             	add    $0x10,%esp
-801057ab:	89 c3                	mov    %eax,%ebx
-801057ad:	85 c0                	test   %eax,%eax
-801057af:	74 5f                	je     80105810 <sys_chdir+0xa0>
-    end_op();
-    return -1;
-  }
-  ilock(ip);
-801057b1:	83 ec 0c             	sub    $0xc,%esp
-801057b4:	50                   	push   %eax
-801057b5:	e8 a6 bf ff ff       	call   80101760 <ilock>
-  if(ip->type != T_DIR){
-801057ba:	83 c4 10             	add    $0x10,%esp
-801057bd:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801057c2:	75 2c                	jne    801057f0 <sys_chdir+0x80>
-    iunlockput(ip);
-    end_op();
-    return -1;
-  }
-  iunlock(ip);
-801057c4:	83 ec 0c             	sub    $0xc,%esp
-801057c7:	53                   	push   %ebx
-801057c8:	e8 73 c0 ff ff       	call   80101840 <iunlock>
-  iput(curproc->cwd);
-801057cd:	58                   	pop    %eax
-801057ce:	ff 76 68             	pushl  0x68(%esi)
-801057d1:	e8 ba c0 ff ff       	call   80101890 <iput>
-  end_op();
-801057d6:	e8 c5 d5 ff ff       	call   80102da0 <end_op>
-  curproc->cwd = ip;
-801057db:	89 5e 68             	mov    %ebx,0x68(%esi)
-  return 0;
-801057de:	83 c4 10             	add    $0x10,%esp
-801057e1:	31 c0                	xor    %eax,%eax
-}
-801057e3:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801057e6:	5b                   	pop    %ebx
-801057e7:	5e                   	pop    %esi
-801057e8:	5d                   	pop    %ebp
-801057e9:	c3                   	ret    
-801057ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    iunlockput(ip);
-801057f0:	83 ec 0c             	sub    $0xc,%esp
-801057f3:	53                   	push   %ebx
-801057f4:	e8 07 c2 ff ff       	call   80101a00 <iunlockput>
-    end_op();
-801057f9:	e8 a2 d5 ff ff       	call   80102da0 <end_op>
-    return -1;
-801057fe:	83 c4 10             	add    $0x10,%esp
-80105801:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105806:	eb db                	jmp    801057e3 <sys_chdir+0x73>
-80105808:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010580f:	90                   	nop
-    end_op();
-80105810:	e8 8b d5 ff ff       	call   80102da0 <end_op>
-    return -1;
-80105815:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010581a:	eb c7                	jmp    801057e3 <sys_chdir+0x73>
-8010581c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80105820 <sys_exec>:
-
-int
-sys_exec(void)
-{
-80105820:	f3 0f 1e fb          	endbr32 
-80105824:	55                   	push   %ebp
-80105825:	89 e5                	mov    %esp,%ebp
-80105827:	57                   	push   %edi
-80105828:	56                   	push   %esi
-  char *path, *argv[MAXARG];
-  int i;
-  uint uargv, uarg;
-
-  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-80105829:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
-{
-8010582f:	53                   	push   %ebx
-80105830:	81 ec a4 00 00 00    	sub    $0xa4,%esp
-  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-80105836:	50                   	push   %eax
-80105837:	6a 00                	push   $0x0
-80105839:	e8 22 f5 ff ff       	call   80104d60 <argstr>
-8010583e:	83 c4 10             	add    $0x10,%esp
-80105841:	85 c0                	test   %eax,%eax
-80105843:	0f 88 8b 00 00 00    	js     801058d4 <sys_exec+0xb4>
-80105849:	83 ec 08             	sub    $0x8,%esp
-8010584c:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
-80105852:	50                   	push   %eax
-80105853:	6a 01                	push   $0x1
-80105855:	e8 56 f4 ff ff       	call   80104cb0 <argint>
-8010585a:	83 c4 10             	add    $0x10,%esp
-8010585d:	85 c0                	test   %eax,%eax
-8010585f:	78 73                	js     801058d4 <sys_exec+0xb4>
-    return -1;
-  }
-  memset(argv, 0, sizeof(argv));
-80105861:	83 ec 04             	sub    $0x4,%esp
-80105864:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
-  for(i=0;; i++){
-8010586a:	31 db                	xor    %ebx,%ebx
-  memset(argv, 0, sizeof(argv));
-8010586c:	68 80 00 00 00       	push   $0x80
-80105871:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
-80105877:	6a 00                	push   $0x0
-80105879:	50                   	push   %eax
-8010587a:	e8 51 f1 ff ff       	call   801049d0 <memset>
-8010587f:	83 c4 10             	add    $0x10,%esp
-80105882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(i >= NELEM(argv))
-      return -1;
-    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-80105888:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
-8010588e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
-80105895:	83 ec 08             	sub    $0x8,%esp
-80105898:	57                   	push   %edi
-80105899:	01 f0                	add    %esi,%eax
-8010589b:	50                   	push   %eax
-8010589c:	e8 6f f3 ff ff       	call   80104c10 <fetchint>
-801058a1:	83 c4 10             	add    $0x10,%esp
-801058a4:	85 c0                	test   %eax,%eax
-801058a6:	78 2c                	js     801058d4 <sys_exec+0xb4>
-      return -1;
-    if(uarg == 0){
-801058a8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
-801058ae:	85 c0                	test   %eax,%eax
-801058b0:	74 36                	je     801058e8 <sys_exec+0xc8>
-      argv[i] = 0;
-      break;
-    }
-    if(fetchstr(uarg, &argv[i]) < 0)
-801058b2:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
-801058b8:	83 ec 08             	sub    $0x8,%esp
-801058bb:	8d 14 31             	lea    (%ecx,%esi,1),%edx
-801058be:	52                   	push   %edx
-801058bf:	50                   	push   %eax
-801058c0:	e8 8b f3 ff ff       	call   80104c50 <fetchstr>
-801058c5:	83 c4 10             	add    $0x10,%esp
-801058c8:	85 c0                	test   %eax,%eax
-801058ca:	78 08                	js     801058d4 <sys_exec+0xb4>
-  for(i=0;; i++){
-801058cc:	83 c3 01             	add    $0x1,%ebx
-    if(i >= NELEM(argv))
-801058cf:	83 fb 20             	cmp    $0x20,%ebx
-801058d2:	75 b4                	jne    80105888 <sys_exec+0x68>
-      return -1;
-  }
-  return exec(path, argv);
-}
-801058d4:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    return -1;
-801058d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801058dc:	5b                   	pop    %ebx
-801058dd:	5e                   	pop    %esi
-801058de:	5f                   	pop    %edi
-801058df:	5d                   	pop    %ebp
-801058e0:	c3                   	ret    
-801058e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return exec(path, argv);
-801058e8:	83 ec 08             	sub    $0x8,%esp
-801058eb:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
-      argv[i] = 0;
-801058f1:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
-801058f8:	00 00 00 00 
-  return exec(path, argv);
-801058fc:	50                   	push   %eax
-801058fd:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
-80105903:	e8 78 b1 ff ff       	call   80100a80 <exec>
-80105908:	83 c4 10             	add    $0x10,%esp
-}
-8010590b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010590e:	5b                   	pop    %ebx
-8010590f:	5e                   	pop    %esi
-80105910:	5f                   	pop    %edi
-80105911:	5d                   	pop    %ebp
-80105912:	c3                   	ret    
-80105913:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010591a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80105920 <sys_pipe>:
-
-int
-sys_pipe(void)
-{
-80105920:	f3 0f 1e fb          	endbr32 
-80105924:	55                   	push   %ebp
-80105925:	89 e5                	mov    %esp,%ebp
-80105927:	57                   	push   %edi
-80105928:	56                   	push   %esi
-  int *fd;
-  struct file *rf, *wf;
-  int fd0, fd1;
-
-  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-80105929:	8d 45 dc             	lea    -0x24(%ebp),%eax
-{
-8010592c:	53                   	push   %ebx
-8010592d:	83 ec 20             	sub    $0x20,%esp
-  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-80105930:	6a 08                	push   $0x8
-80105932:	50                   	push   %eax
-80105933:	6a 00                	push   $0x0
-80105935:	e8 c6 f3 ff ff       	call   80104d00 <argptr>
-8010593a:	83 c4 10             	add    $0x10,%esp
-8010593d:	85 c0                	test   %eax,%eax
-8010593f:	78 4e                	js     8010598f <sys_pipe+0x6f>
-    return -1;
-  if(pipealloc(&rf, &wf) < 0)
-80105941:	83 ec 08             	sub    $0x8,%esp
-80105944:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-80105947:	50                   	push   %eax
-80105948:	8d 45 e0             	lea    -0x20(%ebp),%eax
-8010594b:	50                   	push   %eax
-8010594c:	e8 9f da ff ff       	call   801033f0 <pipealloc>
-80105951:	83 c4 10             	add    $0x10,%esp
-80105954:	85 c0                	test   %eax,%eax
-80105956:	78 37                	js     8010598f <sys_pipe+0x6f>
-    return -1;
-  fd0 = -1;
-  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-80105958:	8b 7d e0             	mov    -0x20(%ebp),%edi
-  for(fd = 0; fd < NOFILE; fd++){
-8010595b:	31 db                	xor    %ebx,%ebx
-  struct proc *curproc = myproc();
-8010595d:	e8 fe df ff ff       	call   80103960 <myproc>
-  for(fd = 0; fd < NOFILE; fd++){
-80105962:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(curproc->ofile[fd] == 0){
-80105968:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
-8010596c:	85 f6                	test   %esi,%esi
-8010596e:	74 30                	je     801059a0 <sys_pipe+0x80>
-  for(fd = 0; fd < NOFILE; fd++){
-80105970:	83 c3 01             	add    $0x1,%ebx
-80105973:	83 fb 10             	cmp    $0x10,%ebx
-80105976:	75 f0                	jne    80105968 <sys_pipe+0x48>
-    if(fd0 >= 0)
-      myproc()->ofile[fd0] = 0;
-    fileclose(rf);
-80105978:	83 ec 0c             	sub    $0xc,%esp
-8010597b:	ff 75 e0             	pushl  -0x20(%ebp)
-8010597e:	e8 3d b5 ff ff       	call   80100ec0 <fileclose>
-    fileclose(wf);
-80105983:	58                   	pop    %eax
-80105984:	ff 75 e4             	pushl  -0x1c(%ebp)
-80105987:	e8 34 b5 ff ff       	call   80100ec0 <fileclose>
-    return -1;
-8010598c:	83 c4 10             	add    $0x10,%esp
-8010598f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105994:	eb 5b                	jmp    801059f1 <sys_pipe+0xd1>
-80105996:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010599d:	8d 76 00             	lea    0x0(%esi),%esi
-      curproc->ofile[fd] = f;
-801059a0:	8d 73 08             	lea    0x8(%ebx),%esi
-801059a3:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
-  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-801059a7:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-  struct proc *curproc = myproc();
-801059aa:	e8 b1 df ff ff       	call   80103960 <myproc>
-  for(fd = 0; fd < NOFILE; fd++){
-801059af:	31 d2                	xor    %edx,%edx
-801059b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(curproc->ofile[fd] == 0){
-801059b8:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
-801059bc:	85 c9                	test   %ecx,%ecx
-801059be:	74 20                	je     801059e0 <sys_pipe+0xc0>
-  for(fd = 0; fd < NOFILE; fd++){
-801059c0:	83 c2 01             	add    $0x1,%edx
-801059c3:	83 fa 10             	cmp    $0x10,%edx
-801059c6:	75 f0                	jne    801059b8 <sys_pipe+0x98>
-      myproc()->ofile[fd0] = 0;
-801059c8:	e8 93 df ff ff       	call   80103960 <myproc>
-801059cd:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
-801059d4:	00 
-801059d5:	eb a1                	jmp    80105978 <sys_pipe+0x58>
-801059d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801059de:	66 90                	xchg   %ax,%ax
-      curproc->ofile[fd] = f;
-801059e0:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
-  }
-  fd[0] = fd0;
-801059e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801059e7:	89 18                	mov    %ebx,(%eax)
-  fd[1] = fd1;
-801059e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801059ec:	89 50 04             	mov    %edx,0x4(%eax)
-  return 0;
-801059ef:	31 c0                	xor    %eax,%eax
-}
-801059f1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801059f4:	5b                   	pop    %ebx
-801059f5:	5e                   	pop    %esi
-801059f6:	5f                   	pop    %edi
-801059f7:	5d                   	pop    %ebp
-801059f8:	c3                   	ret    
-801059f9:	66 90                	xchg   %ax,%ax
-801059fb:	66 90                	xchg   %ax,%ax
-801059fd:	66 90                	xchg   %ax,%ax
-801059ff:	90                   	nop
-
-80105a00 <sys_fork>:
-#include "mmu.h"
-#include "proc.h"
-
-int
-sys_fork(void)
-{
-80105a00:	f3 0f 1e fb          	endbr32 
-  return fork();
-80105a04:	e9 07 e1 ff ff       	jmp    80103b10 <fork>
-80105a09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80105a10 <sys_exit>:
-}
-
-int
-sys_exit(void)
-{
-80105a10:	f3 0f 1e fb          	endbr32 
-80105a14:	55                   	push   %ebp
-80105a15:	89 e5                	mov    %esp,%ebp
-80105a17:	83 ec 08             	sub    $0x8,%esp
-  exit();
-80105a1a:	e8 71 e3 ff ff       	call   80103d90 <exit>
-  return 0;  // not reached
-}
-80105a1f:	31 c0                	xor    %eax,%eax
-80105a21:	c9                   	leave  
-80105a22:	c3                   	ret    
-80105a23:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80105a30 <sys_wait>:
-
-int
-sys_wait(void)
-{
-80105a30:	f3 0f 1e fb          	endbr32 
-  return wait();
-80105a34:	e9 a7 e5 ff ff       	jmp    80103fe0 <wait>
-80105a39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80105a40 <sys_kill>:
-}
-
-int
-sys_kill(void)
-{
-80105a40:	f3 0f 1e fb          	endbr32 
-80105a44:	55                   	push   %ebp
-80105a45:	89 e5                	mov    %esp,%ebp
-80105a47:	83 ec 20             	sub    $0x20,%esp
-  int pid;
-
-  if(argint(0, &pid) < 0)
-80105a4a:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105a4d:	50                   	push   %eax
-80105a4e:	6a 00                	push   $0x0
-80105a50:	e8 5b f2 ff ff       	call   80104cb0 <argint>
-80105a55:	83 c4 10             	add    $0x10,%esp
-80105a58:	85 c0                	test   %eax,%eax
-80105a5a:	78 14                	js     80105a70 <sys_kill+0x30>
-    return -1;
-  return kill(pid);
-80105a5c:	83 ec 0c             	sub    $0xc,%esp
-80105a5f:	ff 75 f4             	pushl  -0xc(%ebp)
-80105a62:	e8 d9 e6 ff ff       	call   80104140 <kill>
-80105a67:	83 c4 10             	add    $0x10,%esp
-}
-80105a6a:	c9                   	leave  
-80105a6b:	c3                   	ret    
-80105a6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105a70:	c9                   	leave  
-    return -1;
-80105a71:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105a76:	c3                   	ret    
-80105a77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105a7e:	66 90                	xchg   %ax,%ax
-
-80105a80 <sys_getpid>:
-
-int
-sys_getpid(void)
-{
-80105a80:	f3 0f 1e fb          	endbr32 
-80105a84:	55                   	push   %ebp
-80105a85:	89 e5                	mov    %esp,%ebp
-80105a87:	83 ec 08             	sub    $0x8,%esp
-  return myproc()->pid;
-80105a8a:	e8 d1 de ff ff       	call   80103960 <myproc>
-80105a8f:	8b 40 10             	mov    0x10(%eax),%eax
-}
-80105a92:	c9                   	leave  
-80105a93:	c3                   	ret    
-80105a94:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105a9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105a9f:	90                   	nop
-
-80105aa0 <sys_sbrk>:
-
-int
-sys_sbrk(void)
-{
-80105aa0:	f3 0f 1e fb          	endbr32 
-80105aa4:	55                   	push   %ebp
-80105aa5:	89 e5                	mov    %esp,%ebp
-80105aa7:	53                   	push   %ebx
-  int addr;
-  int n;
-
-  if(argint(0, &n) < 0)
-80105aa8:	8d 45 f4             	lea    -0xc(%ebp),%eax
-{
-80105aab:	83 ec 1c             	sub    $0x1c,%esp
-  if(argint(0, &n) < 0)
-80105aae:	50                   	push   %eax
-80105aaf:	6a 00                	push   $0x0
-80105ab1:	e8 fa f1 ff ff       	call   80104cb0 <argint>
-80105ab6:	83 c4 10             	add    $0x10,%esp
-80105ab9:	85 c0                	test   %eax,%eax
-80105abb:	78 23                	js     80105ae0 <sys_sbrk+0x40>
-    return -1;
-  addr = myproc()->sz;
-80105abd:	e8 9e de ff ff       	call   80103960 <myproc>
-  if(growproc(n) < 0)
-80105ac2:	83 ec 0c             	sub    $0xc,%esp
-  addr = myproc()->sz;
-80105ac5:	8b 18                	mov    (%eax),%ebx
-  if(growproc(n) < 0)
-80105ac7:	ff 75 f4             	pushl  -0xc(%ebp)
-80105aca:	e8 c1 df ff ff       	call   80103a90 <growproc>
-80105acf:	83 c4 10             	add    $0x10,%esp
-80105ad2:	85 c0                	test   %eax,%eax
-80105ad4:	78 0a                	js     80105ae0 <sys_sbrk+0x40>
-    return -1;
-  return addr;
-}
-80105ad6:	89 d8                	mov    %ebx,%eax
-80105ad8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105adb:	c9                   	leave  
-80105adc:	c3                   	ret    
-80105add:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80105ae0:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105ae5:	eb ef                	jmp    80105ad6 <sys_sbrk+0x36>
-80105ae7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105aee:	66 90                	xchg   %ax,%ax
-
-80105af0 <sys_sleep>:
-
-int
-sys_sleep(void)
-{
-80105af0:	f3 0f 1e fb          	endbr32 
-80105af4:	55                   	push   %ebp
-80105af5:	89 e5                	mov    %esp,%ebp
-80105af7:	53                   	push   %ebx
-  int n;
-  uint ticks0;
-
-  if(argint(0, &n) < 0)
-80105af8:	8d 45 f4             	lea    -0xc(%ebp),%eax
-{
-80105afb:	83 ec 1c             	sub    $0x1c,%esp
-  if(argint(0, &n) < 0)
-80105afe:	50                   	push   %eax
-80105aff:	6a 00                	push   $0x0
-80105b01:	e8 aa f1 ff ff       	call   80104cb0 <argint>
-80105b06:	83 c4 10             	add    $0x10,%esp
-80105b09:	85 c0                	test   %eax,%eax
-80105b0b:	0f 88 86 00 00 00    	js     80105b97 <sys_sleep+0xa7>
-    return -1;
-  acquire(&tickslock);
-80105b11:	83 ec 0c             	sub    $0xc,%esp
-80105b14:	68 60 4d 11 80       	push   $0x80114d60
-80105b19:	e8 a2 ed ff ff       	call   801048c0 <acquire>
-  ticks0 = ticks;
-  while(ticks - ticks0 < n){
-80105b1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
-  ticks0 = ticks;
-80105b21:	8b 1d a0 55 11 80    	mov    0x801155a0,%ebx
-  while(ticks - ticks0 < n){
-80105b27:	83 c4 10             	add    $0x10,%esp
-80105b2a:	85 d2                	test   %edx,%edx
-80105b2c:	75 23                	jne    80105b51 <sys_sleep+0x61>
-80105b2e:	eb 50                	jmp    80105b80 <sys_sleep+0x90>
-    if(myproc()->killed){
-      release(&tickslock);
-      return -1;
-    }
-    sleep(&ticks, &tickslock);
-80105b30:	83 ec 08             	sub    $0x8,%esp
-80105b33:	68 60 4d 11 80       	push   $0x80114d60
-80105b38:	68 a0 55 11 80       	push   $0x801155a0
-80105b3d:	e8 de e3 ff ff       	call   80103f20 <sleep>
-  while(ticks - ticks0 < n){
-80105b42:	a1 a0 55 11 80       	mov    0x801155a0,%eax
-80105b47:	83 c4 10             	add    $0x10,%esp
-80105b4a:	29 d8                	sub    %ebx,%eax
-80105b4c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-80105b4f:	73 2f                	jae    80105b80 <sys_sleep+0x90>
-    if(myproc()->killed){
-80105b51:	e8 0a de ff ff       	call   80103960 <myproc>
-80105b56:	8b 40 24             	mov    0x24(%eax),%eax
-80105b59:	85 c0                	test   %eax,%eax
-80105b5b:	74 d3                	je     80105b30 <sys_sleep+0x40>
-      release(&tickslock);
-80105b5d:	83 ec 0c             	sub    $0xc,%esp
-80105b60:	68 60 4d 11 80       	push   $0x80114d60
-80105b65:	e8 16 ee ff ff       	call   80104980 <release>
-  }
-  release(&tickslock);
-  return 0;
-}
-80105b6a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-      return -1;
-80105b6d:	83 c4 10             	add    $0x10,%esp
-80105b70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105b75:	c9                   	leave  
-80105b76:	c3                   	ret    
-80105b77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105b7e:	66 90                	xchg   %ax,%ax
-  release(&tickslock);
-80105b80:	83 ec 0c             	sub    $0xc,%esp
-80105b83:	68 60 4d 11 80       	push   $0x80114d60
-80105b88:	e8 f3 ed ff ff       	call   80104980 <release>
-  return 0;
-80105b8d:	83 c4 10             	add    $0x10,%esp
-80105b90:	31 c0                	xor    %eax,%eax
-}
-80105b92:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105b95:	c9                   	leave  
-80105b96:	c3                   	ret    
-    return -1;
-80105b97:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105b9c:	eb f4                	jmp    80105b92 <sys_sleep+0xa2>
-80105b9e:	66 90                	xchg   %ax,%ax
-
-80105ba0 <sys_uptime>:
-
-// return how many clock tick interrupts have occurred
-// since start.
-int
-sys_uptime(void)
-{
-80105ba0:	f3 0f 1e fb          	endbr32 
-80105ba4:	55                   	push   %ebp
-80105ba5:	89 e5                	mov    %esp,%ebp
-80105ba7:	53                   	push   %ebx
-80105ba8:	83 ec 10             	sub    $0x10,%esp
-  uint xticks;
-
-  acquire(&tickslock);
-80105bab:	68 60 4d 11 80       	push   $0x80114d60
-80105bb0:	e8 0b ed ff ff       	call   801048c0 <acquire>
-  xticks = ticks;
-80105bb5:	8b 1d a0 55 11 80    	mov    0x801155a0,%ebx
-  release(&tickslock);
-80105bbb:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
-80105bc2:	e8 b9 ed ff ff       	call   80104980 <release>
-  return xticks;
-}
-80105bc7:	89 d8                	mov    %ebx,%eax
-80105bc9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105bcc:	c9                   	leave  
-80105bcd:	c3                   	ret    
-80105bce:	66 90                	xchg   %ax,%ax
-
-80105bd0 <sys_draw>:
-
-int sys_draw(void)
-{
-80105bd0:	f3 0f 1e fb          	endbr32 
-80105bd4:	55                   	push   %ebp
-80105bd5:	89 e5                	mov    %esp,%ebp
-80105bd7:	56                   	push   %esi
-80105bd8:	53                   	push   %ebx
-                          | _ _ |\n\
-    	                  |_____/\n\n";
-
-  // Fetch the 1st 32 bit call argument and assign it to the variable size i.e.the max-size of the buffer
-  // Return -1 if an invalid address is accessed
-  if (argint(1, &size) == -1)
-80105bd9:	8d 45 f4             	lea    -0xc(%ebp),%eax
-{
-80105bdc:	83 ec 18             	sub    $0x18,%esp
-  if (argint(1, &size) == -1)
-80105bdf:	50                   	push   %eax
-80105be0:	6a 01                	push   $0x1
-80105be2:	e8 c9 f0 ff ff       	call   80104cb0 <argint>
-80105be7:	83 c4 10             	add    $0x10,%esp
-80105bea:	83 f8 ff             	cmp    $0xffffffff,%eax
-80105bed:	74 5e                	je     80105c4d <sys_draw+0x7d>
-  }
-
-  // Fetch the 0th word-sized system call argument as a pointer
-  // to a block of memory of size bytes.Check that the pointer
-  // lies within the process address space if it does not then return -1.
-  if (argptr(0, (char **)&buffer, size) == -1)
-80105bef:	83 ec 04             	sub    $0x4,%esp
-80105bf2:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105bf5:	ff 75 f4             	pushl  -0xc(%ebp)
-80105bf8:	50                   	push   %eax
-80105bf9:	6a 00                	push   $0x0
-80105bfb:	e8 00 f1 ff ff       	call   80104d00 <argptr>
-80105c00:	83 c4 10             	add    $0x10,%esp
-80105c03:	83 f8 ff             	cmp    $0xffffffff,%eax
-80105c06:	74 45                	je     80105c4d <sys_draw+0x7d>
-  {
-    return -1;
-  }
-
-  //Find the size of the  picture;
-  int drawsize = 0;
-80105c08:	31 d2                	xor    %edx,%edx
-80105c0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  while (draw[drawsize] != '\0')
-  {
-    drawsize++;
-80105c10:	83 c2 01             	add    $0x1,%edx
-  while (draw[drawsize] != '\0')
-80105c13:	80 ba d0 7c 10 80 00 	cmpb   $0x0,-0x7fef8330(%edx)
-80105c1a:	75 f4                	jne    80105c10 <sys_draw+0x40>
-  }
-
-  if (drawsize > size)
-80105c1c:	39 55 f4             	cmp    %edx,-0xc(%ebp)
-80105c1f:	7c 2c                	jl     80105c4d <sys_draw+0x7d>
-80105c21:	89 d1                	mov    %edx,%ecx
-80105c23:	bb 20 00 00 00       	mov    $0x20,%ebx
-    //If the size of picture is greater than max size of the buffer return -1
-    return -1;
-  }
-
-  //copy the picture to the buffer
-  for (int i = 0; i < drawsize; i++)
-80105c28:	31 c0                	xor    %eax,%eax
-80105c2a:	eb 0b                	jmp    80105c37 <sys_draw+0x67>
-80105c2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105c30:	0f b6 98 d0 7c 10 80 	movzbl -0x7fef8330(%eax),%ebx
-  {
-    buffer[i] = draw[i];
-80105c37:	8b 75 f0             	mov    -0x10(%ebp),%esi
-80105c3a:	88 1c 06             	mov    %bl,(%esi,%eax,1)
-  for (int i = 0; i < drawsize; i++)
-80105c3d:	83 c0 01             	add    $0x1,%eax
-80105c40:	39 c8                	cmp    %ecx,%eax
-80105c42:	75 ec                	jne    80105c30 <sys_draw+0x60>
-  }
-  //return the size of  pictue
-  return drawsize;
-}
-80105c44:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105c47:	89 d0                	mov    %edx,%eax
-80105c49:	5b                   	pop    %ebx
-80105c4a:	5e                   	pop    %esi
-80105c4b:	5d                   	pop    %ebp
-80105c4c:	c3                   	ret    
-    return -1;
-80105c4d:	ba ff ff ff ff       	mov    $0xffffffff,%edx
-80105c52:	eb f0                	jmp    80105c44 <sys_draw+0x74>
-80105c54:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105c5f:	90                   	nop
-
-80105c60 <sys_thread_create>:
-
-int sys_thread_create(void) {
-80105c60:	f3 0f 1e fb          	endbr32 
-80105c64:	55                   	push   %ebp
-80105c65:	89 e5                	mov    %esp,%ebp
-80105c67:	83 ec 1c             	sub    $0x1c,%esp
-	void (*fcn)(void*), *arg, *stack;
-	argptr(0, (void*) &fcn, sizeof(void (*)(void *)));
-80105c6a:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80105c6d:	6a 04                	push   $0x4
-80105c6f:	50                   	push   %eax
-80105c70:	6a 00                	push   $0x0
-80105c72:	e8 89 f0 ff ff       	call   80104d00 <argptr>
-	argptr(1, (void*) &arg, sizeof(void *));
-80105c77:	83 c4 0c             	add    $0xc,%esp
-80105c7a:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105c7d:	6a 04                	push   $0x4
-80105c7f:	50                   	push   %eax
-80105c80:	6a 01                	push   $0x1
-80105c82:	e8 79 f0 ff ff       	call   80104d00 <argptr>
-	argptr(2, (void*) &stack, sizeof(void *));
-80105c87:	83 c4 0c             	add    $0xc,%esp
-80105c8a:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105c8d:	6a 04                	push   $0x4
-80105c8f:	50                   	push   %eax
-80105c90:	6a 02                	push   $0x2
-80105c92:	e8 69 f0 ff ff       	call   80104d00 <argptr>
-	return thread_create(fcn, arg, stack);
-80105c97:	83 c4 0c             	add    $0xc,%esp
-80105c9a:	ff 75 f4             	pushl  -0xc(%ebp)
-80105c9d:	ff 75 f0             	pushl  -0x10(%ebp)
-80105ca0:	ff 75 ec             	pushl  -0x14(%ebp)
-80105ca3:	e8 f8 e5 ff ff       	call   801042a0 <thread_create>
-}
-80105ca8:	c9                   	leave  
-80105ca9:	c3                   	ret    
-80105caa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80105cb0 <sys_thread_join>:
-
-// sys_join
-int sys_thread_join(void) {
-80105cb0:	f3 0f 1e fb          	endbr32 
-	return thread_join();
-80105cb4:	e9 17 e7 ff ff       	jmp    801043d0 <thread_join>
-80105cb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80105cc0 <sys_thread_exit>:
-}
-
-int sys_thread_exit(void) {
-80105cc0:	f3 0f 1e fb          	endbr32 
-	return thread_exit();
-80105cc4:	e9 f7 e7 ff ff       	jmp    801044c0 <thread_exit>
-
-80105cc9 <alltraps>:
-
-  # vectors.S sends all traps here.
-.globl alltraps
-alltraps:
-  # Build trap frame.
-  pushl %ds
-80105cc9:	1e                   	push   %ds
-  pushl %es
-80105cca:	06                   	push   %es
-  pushl %fs
-80105ccb:	0f a0                	push   %fs
-  pushl %gs
-80105ccd:	0f a8                	push   %gs
-  pushal
-80105ccf:	60                   	pusha  
-  
-  # Set up data segments.
-  movw $(SEG_KDATA<<3), %ax
-80105cd0:	66 b8 10 00          	mov    $0x10,%ax
-  movw %ax, %ds
-80105cd4:	8e d8                	mov    %eax,%ds
-  movw %ax, %es
-80105cd6:	8e c0                	mov    %eax,%es
-
-  # Call trap(tf), where tf=%esp
-  pushl %esp
-80105cd8:	54                   	push   %esp
-  call trap
-80105cd9:	e8 c2 00 00 00       	call   80105da0 <trap>
-  addl $4, %esp
-80105cde:	83 c4 04             	add    $0x4,%esp
-
-80105ce1 <trapret>:
-
-  # Return falls through to trapret...
-.globl trapret
-trapret:
-  popal
-80105ce1:	61                   	popa   
-  popl %gs
-80105ce2:	0f a9                	pop    %gs
-  popl %fs
-80105ce4:	0f a1                	pop    %fs
-  popl %es
-80105ce6:	07                   	pop    %es
-  popl %ds
-80105ce7:	1f                   	pop    %ds
-  addl $0x8, %esp  # trapno and errcode
-80105ce8:	83 c4 08             	add    $0x8,%esp
-  iret
-80105ceb:	cf                   	iret   
-80105cec:	66 90                	xchg   %ax,%ax
-80105cee:	66 90                	xchg   %ax,%ax
-
-80105cf0 <tvinit>:
-struct spinlock tickslock;
-uint ticks;
-
-void
-tvinit(void)
-{
-80105cf0:	f3 0f 1e fb          	endbr32 
-80105cf4:	55                   	push   %ebp
-  int i;
-
-  for(i = 0; i < 256; i++)
-80105cf5:	31 c0                	xor    %eax,%eax
-{
-80105cf7:	89 e5                	mov    %esp,%ebp
-80105cf9:	83 ec 08             	sub    $0x8,%esp
-80105cfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-80105d00:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
-80105d07:	c7 04 c5 a2 4d 11 80 	movl   $0x8e000008,-0x7feeb25e(,%eax,8)
-80105d0e:	08 00 00 8e 
-80105d12:	66 89 14 c5 a0 4d 11 	mov    %dx,-0x7feeb260(,%eax,8)
-80105d19:	80 
-80105d1a:	c1 ea 10             	shr    $0x10,%edx
-80105d1d:	66 89 14 c5 a6 4d 11 	mov    %dx,-0x7feeb25a(,%eax,8)
-80105d24:	80 
-  for(i = 0; i < 256; i++)
-80105d25:	83 c0 01             	add    $0x1,%eax
-80105d28:	3d 00 01 00 00       	cmp    $0x100,%eax
-80105d2d:	75 d1                	jne    80105d00 <tvinit+0x10>
-  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-
-  initlock(&tickslock, "time");
-80105d2f:	83 ec 08             	sub    $0x8,%esp
-  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80105d32:	a1 08 a1 10 80       	mov    0x8010a108,%eax
-80105d37:	c7 05 a2 4f 11 80 08 	movl   $0xef000008,0x80114fa2
-80105d3e:	00 00 ef 
-  initlock(&tickslock, "time");
-80105d41:	68 6b 7d 10 80       	push   $0x80107d6b
-80105d46:	68 60 4d 11 80       	push   $0x80114d60
-  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80105d4b:	66 a3 a0 4f 11 80    	mov    %ax,0x80114fa0
-80105d51:	c1 e8 10             	shr    $0x10,%eax
-80105d54:	66 a3 a6 4f 11 80    	mov    %ax,0x80114fa6
-  initlock(&tickslock, "time");
-80105d5a:	e8 e1 e9 ff ff       	call   80104740 <initlock>
-}
-80105d5f:	83 c4 10             	add    $0x10,%esp
-80105d62:	c9                   	leave  
-80105d63:	c3                   	ret    
-80105d64:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105d6f:	90                   	nop
-
-80105d70 <idtinit>:
-
-void
-idtinit(void)
-{
-80105d70:	f3 0f 1e fb          	endbr32 
-80105d74:	55                   	push   %ebp
-  pd[0] = size-1;
-80105d75:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-80105d7a:	89 e5                	mov    %esp,%ebp
-80105d7c:	83 ec 10             	sub    $0x10,%esp
-80105d7f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
-  pd[1] = (uint)p;
-80105d83:	b8 a0 4d 11 80       	mov    $0x80114da0,%eax
-80105d88:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
-  pd[2] = (uint)p >> 16;
-80105d8c:	c1 e8 10             	shr    $0x10,%eax
-80105d8f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
-  asm volatile("lidt (%0)" : : "r" (pd));
-80105d93:	8d 45 fa             	lea    -0x6(%ebp),%eax
-80105d96:	0f 01 18             	lidtl  (%eax)
-  lidt(idt, sizeof(idt));
-}
-80105d99:	c9                   	leave  
-80105d9a:	c3                   	ret    
-80105d9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105d9f:	90                   	nop
-
-80105da0 <trap>:
-
-//PAGEBREAK: 41
-void
-trap(struct trapframe *tf)
-{
-80105da0:	f3 0f 1e fb          	endbr32 
-80105da4:	55                   	push   %ebp
-80105da5:	89 e5                	mov    %esp,%ebp
-80105da7:	57                   	push   %edi
-80105da8:	56                   	push   %esi
-80105da9:	53                   	push   %ebx
-80105daa:	83 ec 1c             	sub    $0x1c,%esp
-80105dad:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(tf->trapno == T_SYSCALL){
-80105db0:	8b 43 30             	mov    0x30(%ebx),%eax
-80105db3:	83 f8 40             	cmp    $0x40,%eax
-80105db6:	0f 84 bc 01 00 00    	je     80105f78 <trap+0x1d8>
-    if(myproc()->killed)
-      exit();
-    return;
-  }
-
-  switch(tf->trapno){
-80105dbc:	83 e8 20             	sub    $0x20,%eax
-80105dbf:	83 f8 1f             	cmp    $0x1f,%eax
-80105dc2:	77 08                	ja     80105dcc <trap+0x2c>
-80105dc4:	3e ff 24 85 14 7e 10 	notrack jmp *-0x7fef81ec(,%eax,4)
-80105dcb:	80 
-    lapiceoi();
-    break;
-
-  //PAGEBREAK: 13
-  default:
-    if(myproc() == 0 || (tf->cs&3) == 0){
-80105dcc:	e8 8f db ff ff       	call   80103960 <myproc>
-80105dd1:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105dd4:	85 c0                	test   %eax,%eax
-80105dd6:	0f 84 eb 01 00 00    	je     80105fc7 <trap+0x227>
-80105ddc:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-80105de0:	0f 84 e1 01 00 00    	je     80105fc7 <trap+0x227>
-
-static inline uint
-rcr2(void)
-{
-  uint val;
-  asm volatile("movl %%cr2,%0" : "=r" (val));
-80105de6:	0f 20 d1             	mov    %cr2,%ecx
-80105de9:	89 4d d8             	mov    %ecx,-0x28(%ebp)
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-              tf->trapno, cpuid(), tf->eip, rcr2());
-      panic("trap");
-    }
-    // In user space, assume process misbehaved.
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105dec:	e8 4f db ff ff       	call   80103940 <cpuid>
-80105df1:	8b 73 30             	mov    0x30(%ebx),%esi
-80105df4:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80105df7:	8b 43 34             	mov    0x34(%ebx),%eax
-80105dfa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-            "eip 0x%x addr 0x%x--kill proc\n",
-            myproc()->pid, myproc()->name, tf->trapno,
-80105dfd:	e8 5e db ff ff       	call   80103960 <myproc>
-80105e02:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80105e05:	e8 56 db ff ff       	call   80103960 <myproc>
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105e0a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-80105e0d:	8b 55 dc             	mov    -0x24(%ebp),%edx
-80105e10:	51                   	push   %ecx
-80105e11:	57                   	push   %edi
-80105e12:	52                   	push   %edx
-80105e13:	ff 75 e4             	pushl  -0x1c(%ebp)
-80105e16:	56                   	push   %esi
-            myproc()->pid, myproc()->name, tf->trapno,
-80105e17:	8b 75 e0             	mov    -0x20(%ebp),%esi
-80105e1a:	83 c6 6c             	add    $0x6c,%esi
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105e1d:	56                   	push   %esi
-80105e1e:	ff 70 10             	pushl  0x10(%eax)
-80105e21:	68 d0 7d 10 80       	push   $0x80107dd0
-80105e26:	e8 85 a8 ff ff       	call   801006b0 <cprintf>
-            tf->err, cpuid(), tf->eip, rcr2());
-    myproc()->killed = 1;
-80105e2b:	83 c4 20             	add    $0x20,%esp
-80105e2e:	e8 2d db ff ff       	call   80103960 <myproc>
-80105e33:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
-  }
-
-  // Force process exit if it has been killed and is in user space.
-  // (If it is still executing in the kernel, let it keep running
-  // until it gets to the regular system call return.)
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105e3a:	e8 21 db ff ff       	call   80103960 <myproc>
-80105e3f:	85 c0                	test   %eax,%eax
-80105e41:	74 1d                	je     80105e60 <trap+0xc0>
-80105e43:	e8 18 db ff ff       	call   80103960 <myproc>
-80105e48:	8b 50 24             	mov    0x24(%eax),%edx
-80105e4b:	85 d2                	test   %edx,%edx
-80105e4d:	74 11                	je     80105e60 <trap+0xc0>
-80105e4f:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105e53:	83 e0 03             	and    $0x3,%eax
-80105e56:	66 83 f8 03          	cmp    $0x3,%ax
-80105e5a:	0f 84 50 01 00 00    	je     80105fb0 <trap+0x210>
-    exit();
-
-  // Force process to give up CPU on clock tick.
-  // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-80105e60:	e8 fb da ff ff       	call   80103960 <myproc>
-80105e65:	85 c0                	test   %eax,%eax
-80105e67:	74 0f                	je     80105e78 <trap+0xd8>
-80105e69:	e8 f2 da ff ff       	call   80103960 <myproc>
-80105e6e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-80105e72:	0f 84 e8 00 00 00    	je     80105f60 <trap+0x1c0>
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
-
-  // Check if the process has been killed since we yielded
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105e78:	e8 e3 da ff ff       	call   80103960 <myproc>
-80105e7d:	85 c0                	test   %eax,%eax
-80105e7f:	74 1d                	je     80105e9e <trap+0xfe>
-80105e81:	e8 da da ff ff       	call   80103960 <myproc>
-80105e86:	8b 40 24             	mov    0x24(%eax),%eax
-80105e89:	85 c0                	test   %eax,%eax
-80105e8b:	74 11                	je     80105e9e <trap+0xfe>
-80105e8d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105e91:	83 e0 03             	and    $0x3,%eax
-80105e94:	66 83 f8 03          	cmp    $0x3,%ax
-80105e98:	0f 84 03 01 00 00    	je     80105fa1 <trap+0x201>
-    exit();
-}
-80105e9e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105ea1:	5b                   	pop    %ebx
-80105ea2:	5e                   	pop    %esi
-80105ea3:	5f                   	pop    %edi
-80105ea4:	5d                   	pop    %ebp
-80105ea5:	c3                   	ret    
-    ideintr();
-80105ea6:	e8 35 c3 ff ff       	call   801021e0 <ideintr>
-    lapiceoi();
-80105eab:	e8 10 ca ff ff       	call   801028c0 <lapiceoi>
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105eb0:	e8 ab da ff ff       	call   80103960 <myproc>
-80105eb5:	85 c0                	test   %eax,%eax
-80105eb7:	75 8a                	jne    80105e43 <trap+0xa3>
-80105eb9:	eb a5                	jmp    80105e60 <trap+0xc0>
-    if(cpuid() == 0){
-80105ebb:	e8 80 da ff ff       	call   80103940 <cpuid>
-80105ec0:	85 c0                	test   %eax,%eax
-80105ec2:	75 e7                	jne    80105eab <trap+0x10b>
-      acquire(&tickslock);
-80105ec4:	83 ec 0c             	sub    $0xc,%esp
-80105ec7:	68 60 4d 11 80       	push   $0x80114d60
-80105ecc:	e8 ef e9 ff ff       	call   801048c0 <acquire>
-      wakeup(&ticks);
-80105ed1:	c7 04 24 a0 55 11 80 	movl   $0x801155a0,(%esp)
-      ticks++;
-80105ed8:	83 05 a0 55 11 80 01 	addl   $0x1,0x801155a0
-      wakeup(&ticks);
-80105edf:	e8 fc e1 ff ff       	call   801040e0 <wakeup>
-      release(&tickslock);
-80105ee4:	c7 04 24 60 4d 11 80 	movl   $0x80114d60,(%esp)
-80105eeb:	e8 90 ea ff ff       	call   80104980 <release>
-80105ef0:	83 c4 10             	add    $0x10,%esp
-    lapiceoi();
-80105ef3:	eb b6                	jmp    80105eab <trap+0x10b>
-    kbdintr();
-80105ef5:	e8 86 c8 ff ff       	call   80102780 <kbdintr>
-    lapiceoi();
-80105efa:	e8 c1 c9 ff ff       	call   801028c0 <lapiceoi>
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105eff:	e8 5c da ff ff       	call   80103960 <myproc>
-80105f04:	85 c0                	test   %eax,%eax
-80105f06:	0f 85 37 ff ff ff    	jne    80105e43 <trap+0xa3>
-80105f0c:	e9 4f ff ff ff       	jmp    80105e60 <trap+0xc0>
-    uartintr();
-80105f11:	e8 4a 02 00 00       	call   80106160 <uartintr>
-    lapiceoi();
-80105f16:	e8 a5 c9 ff ff       	call   801028c0 <lapiceoi>
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105f1b:	e8 40 da ff ff       	call   80103960 <myproc>
-80105f20:	85 c0                	test   %eax,%eax
-80105f22:	0f 85 1b ff ff ff    	jne    80105e43 <trap+0xa3>
-80105f28:	e9 33 ff ff ff       	jmp    80105e60 <trap+0xc0>
-    cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105f2d:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105f30:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80105f34:	e8 07 da ff ff       	call   80103940 <cpuid>
-80105f39:	57                   	push   %edi
-80105f3a:	56                   	push   %esi
-80105f3b:	50                   	push   %eax
-80105f3c:	68 78 7d 10 80       	push   $0x80107d78
-80105f41:	e8 6a a7 ff ff       	call   801006b0 <cprintf>
-    lapiceoi();
-80105f46:	e8 75 c9 ff ff       	call   801028c0 <lapiceoi>
-    break;
-80105f4b:	83 c4 10             	add    $0x10,%esp
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105f4e:	e8 0d da ff ff       	call   80103960 <myproc>
-80105f53:	85 c0                	test   %eax,%eax
-80105f55:	0f 85 e8 fe ff ff    	jne    80105e43 <trap+0xa3>
-80105f5b:	e9 00 ff ff ff       	jmp    80105e60 <trap+0xc0>
-  if(myproc() && myproc()->state == RUNNING &&
-80105f60:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-80105f64:	0f 85 0e ff ff ff    	jne    80105e78 <trap+0xd8>
-    yield();
-80105f6a:	e8 61 df ff ff       	call   80103ed0 <yield>
-80105f6f:	e9 04 ff ff ff       	jmp    80105e78 <trap+0xd8>
-80105f74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(myproc()->killed)
-80105f78:	e8 e3 d9 ff ff       	call   80103960 <myproc>
-80105f7d:	8b 70 24             	mov    0x24(%eax),%esi
-80105f80:	85 f6                	test   %esi,%esi
-80105f82:	75 3c                	jne    80105fc0 <trap+0x220>
-    myproc()->tf = tf;
-80105f84:	e8 d7 d9 ff ff       	call   80103960 <myproc>
-80105f89:	89 58 18             	mov    %ebx,0x18(%eax)
-    syscall();
-80105f8c:	e8 0f ee ff ff       	call   80104da0 <syscall>
-    if(myproc()->killed)
-80105f91:	e8 ca d9 ff ff       	call   80103960 <myproc>
-80105f96:	8b 48 24             	mov    0x24(%eax),%ecx
-80105f99:	85 c9                	test   %ecx,%ecx
-80105f9b:	0f 84 fd fe ff ff    	je     80105e9e <trap+0xfe>
-}
-80105fa1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105fa4:	5b                   	pop    %ebx
-80105fa5:	5e                   	pop    %esi
-80105fa6:	5f                   	pop    %edi
-80105fa7:	5d                   	pop    %ebp
-      exit();
-80105fa8:	e9 e3 dd ff ff       	jmp    80103d90 <exit>
-80105fad:	8d 76 00             	lea    0x0(%esi),%esi
-    exit();
-80105fb0:	e8 db dd ff ff       	call   80103d90 <exit>
-80105fb5:	e9 a6 fe ff ff       	jmp    80105e60 <trap+0xc0>
-80105fba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      exit();
-80105fc0:	e8 cb dd ff ff       	call   80103d90 <exit>
-80105fc5:	eb bd                	jmp    80105f84 <trap+0x1e4>
-80105fc7:	0f 20 d6             	mov    %cr2,%esi
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105fca:	e8 71 d9 ff ff       	call   80103940 <cpuid>
-80105fcf:	83 ec 0c             	sub    $0xc,%esp
-80105fd2:	56                   	push   %esi
-80105fd3:	57                   	push   %edi
-80105fd4:	50                   	push   %eax
-80105fd5:	ff 73 30             	pushl  0x30(%ebx)
-80105fd8:	68 9c 7d 10 80       	push   $0x80107d9c
-80105fdd:	e8 ce a6 ff ff       	call   801006b0 <cprintf>
-      panic("trap");
-80105fe2:	83 c4 14             	add    $0x14,%esp
-80105fe5:	68 70 7d 10 80       	push   $0x80107d70
-80105fea:	e8 a1 a3 ff ff       	call   80100390 <panic>
-80105fef:	90                   	nop
-
-80105ff0 <uartgetc>:
-  outb(COM1+0, c);
-}
-
-static int
-uartgetc(void)
-{
-80105ff0:	f3 0f 1e fb          	endbr32 
-  if(!uart)
-80105ff4:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
-80105ff9:	85 c0                	test   %eax,%eax
-80105ffb:	74 1b                	je     80106018 <uartgetc+0x28>
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105ffd:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80106002:	ec                   	in     (%dx),%al
-    return -1;
-  if(!(inb(COM1+5) & 0x01))
-80106003:	a8 01                	test   $0x1,%al
-80106005:	74 11                	je     80106018 <uartgetc+0x28>
-80106007:	ba f8 03 00 00       	mov    $0x3f8,%edx
-8010600c:	ec                   	in     (%dx),%al
-    return -1;
-  return inb(COM1+0);
-8010600d:	0f b6 c0             	movzbl %al,%eax
-80106010:	c3                   	ret    
-80106011:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-80106018:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-8010601d:	c3                   	ret    
-8010601e:	66 90                	xchg   %ax,%ax
-
-80106020 <uartputc.part.0>:
-uartputc(int c)
-80106020:	55                   	push   %ebp
-80106021:	89 e5                	mov    %esp,%ebp
-80106023:	57                   	push   %edi
-80106024:	89 c7                	mov    %eax,%edi
-80106026:	56                   	push   %esi
-80106027:	be fd 03 00 00       	mov    $0x3fd,%esi
-8010602c:	53                   	push   %ebx
-8010602d:	bb 80 00 00 00       	mov    $0x80,%ebx
-80106032:	83 ec 0c             	sub    $0xc,%esp
-80106035:	eb 1b                	jmp    80106052 <uartputc.part.0+0x32>
-80106037:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010603e:	66 90                	xchg   %ax,%ax
-    microdelay(10);
-80106040:	83 ec 0c             	sub    $0xc,%esp
-80106043:	6a 0a                	push   $0xa
-80106045:	e8 96 c8 ff ff       	call   801028e0 <microdelay>
-  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-8010604a:	83 c4 10             	add    $0x10,%esp
-8010604d:	83 eb 01             	sub    $0x1,%ebx
-80106050:	74 07                	je     80106059 <uartputc.part.0+0x39>
-80106052:	89 f2                	mov    %esi,%edx
-80106054:	ec                   	in     (%dx),%al
-80106055:	a8 20                	test   $0x20,%al
-80106057:	74 e7                	je     80106040 <uartputc.part.0+0x20>
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80106059:	ba f8 03 00 00       	mov    $0x3f8,%edx
-8010605e:	89 f8                	mov    %edi,%eax
-80106060:	ee                   	out    %al,(%dx)
-}
-80106061:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106064:	5b                   	pop    %ebx
-80106065:	5e                   	pop    %esi
-80106066:	5f                   	pop    %edi
-80106067:	5d                   	pop    %ebp
-80106068:	c3                   	ret    
-80106069:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106070 <uartinit>:
-{
-80106070:	f3 0f 1e fb          	endbr32 
-80106074:	55                   	push   %ebp
-80106075:	31 c9                	xor    %ecx,%ecx
-80106077:	89 c8                	mov    %ecx,%eax
-80106079:	89 e5                	mov    %esp,%ebp
-8010607b:	57                   	push   %edi
-8010607c:	56                   	push   %esi
-8010607d:	53                   	push   %ebx
-8010607e:	bb fa 03 00 00       	mov    $0x3fa,%ebx
-80106083:	89 da                	mov    %ebx,%edx
-80106085:	83 ec 0c             	sub    $0xc,%esp
-80106088:	ee                   	out    %al,(%dx)
-80106089:	bf fb 03 00 00       	mov    $0x3fb,%edi
-8010608e:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-80106093:	89 fa                	mov    %edi,%edx
-80106095:	ee                   	out    %al,(%dx)
-80106096:	b8 0c 00 00 00       	mov    $0xc,%eax
-8010609b:	ba f8 03 00 00       	mov    $0x3f8,%edx
-801060a0:	ee                   	out    %al,(%dx)
-801060a1:	be f9 03 00 00       	mov    $0x3f9,%esi
-801060a6:	89 c8                	mov    %ecx,%eax
-801060a8:	89 f2                	mov    %esi,%edx
-801060aa:	ee                   	out    %al,(%dx)
-801060ab:	b8 03 00 00 00       	mov    $0x3,%eax
-801060b0:	89 fa                	mov    %edi,%edx
-801060b2:	ee                   	out    %al,(%dx)
-801060b3:	ba fc 03 00 00       	mov    $0x3fc,%edx
-801060b8:	89 c8                	mov    %ecx,%eax
-801060ba:	ee                   	out    %al,(%dx)
-801060bb:	b8 01 00 00 00       	mov    $0x1,%eax
-801060c0:	89 f2                	mov    %esi,%edx
-801060c2:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801060c3:	ba fd 03 00 00       	mov    $0x3fd,%edx
-801060c8:	ec                   	in     (%dx),%al
-  if(inb(COM1+5) == 0xFF)
-801060c9:	3c ff                	cmp    $0xff,%al
-801060cb:	74 52                	je     8010611f <uartinit+0xaf>
-  uart = 1;
-801060cd:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
-801060d4:	00 00 00 
-801060d7:	89 da                	mov    %ebx,%edx
-801060d9:	ec                   	in     (%dx),%al
-801060da:	ba f8 03 00 00       	mov    $0x3f8,%edx
-801060df:	ec                   	in     (%dx),%al
-  ioapicenable(IRQ_COM1, 0);
-801060e0:	83 ec 08             	sub    $0x8,%esp
-801060e3:	be 76 00 00 00       	mov    $0x76,%esi
-  for(p="xv6...\n"; *p; p++)
-801060e8:	bb 94 7e 10 80       	mov    $0x80107e94,%ebx
-  ioapicenable(IRQ_COM1, 0);
-801060ed:	6a 00                	push   $0x0
-801060ef:	6a 04                	push   $0x4
-801060f1:	e8 3a c3 ff ff       	call   80102430 <ioapicenable>
-801060f6:	83 c4 10             	add    $0x10,%esp
-  for(p="xv6...\n"; *p; p++)
-801060f9:	b8 78 00 00 00       	mov    $0x78,%eax
-801060fe:	eb 04                	jmp    80106104 <uartinit+0x94>
-80106100:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
-  if(!uart)
-80106104:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
-8010610a:	85 d2                	test   %edx,%edx
-8010610c:	74 08                	je     80106116 <uartinit+0xa6>
-    uartputc(*p);
-8010610e:	0f be c0             	movsbl %al,%eax
-80106111:	e8 0a ff ff ff       	call   80106020 <uartputc.part.0>
-  for(p="xv6...\n"; *p; p++)
-80106116:	89 f0                	mov    %esi,%eax
-80106118:	83 c3 01             	add    $0x1,%ebx
-8010611b:	84 c0                	test   %al,%al
-8010611d:	75 e1                	jne    80106100 <uartinit+0x90>
-}
-8010611f:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106122:	5b                   	pop    %ebx
-80106123:	5e                   	pop    %esi
-80106124:	5f                   	pop    %edi
-80106125:	5d                   	pop    %ebp
-80106126:	c3                   	ret    
-80106127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010612e:	66 90                	xchg   %ax,%ax
-
-80106130 <uartputc>:
-{
-80106130:	f3 0f 1e fb          	endbr32 
-80106134:	55                   	push   %ebp
-  if(!uart)
-80106135:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
-{
-8010613b:	89 e5                	mov    %esp,%ebp
-8010613d:	8b 45 08             	mov    0x8(%ebp),%eax
-  if(!uart)
-80106140:	85 d2                	test   %edx,%edx
-80106142:	74 0c                	je     80106150 <uartputc+0x20>
-}
-80106144:	5d                   	pop    %ebp
-80106145:	e9 d6 fe ff ff       	jmp    80106020 <uartputc.part.0>
-8010614a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106150:	5d                   	pop    %ebp
-80106151:	c3                   	ret    
-80106152:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106160 <uartintr>:
-
-void
-uartintr(void)
-{
-80106160:	f3 0f 1e fb          	endbr32 
-80106164:	55                   	push   %ebp
-80106165:	89 e5                	mov    %esp,%ebp
-80106167:	83 ec 14             	sub    $0x14,%esp
-  consoleintr(uartgetc);
-8010616a:	68 f0 5f 10 80       	push   $0x80105ff0
-8010616f:	e8 ec a6 ff ff       	call   80100860 <consoleintr>
-}
-80106174:	83 c4 10             	add    $0x10,%esp
-80106177:	c9                   	leave  
-80106178:	c3                   	ret    
-
-80106179 <vector0>:
-# generated by vectors.pl - do not edit
-# handlers
-.globl alltraps
-.globl vector0
-vector0:
-  pushl $0
-80106179:	6a 00                	push   $0x0
-  pushl $0
-8010617b:	6a 00                	push   $0x0
-  jmp alltraps
-8010617d:	e9 47 fb ff ff       	jmp    80105cc9 <alltraps>
-
-80106182 <vector1>:
-.globl vector1
-vector1:
-  pushl $0
-80106182:	6a 00                	push   $0x0
-  pushl $1
-80106184:	6a 01                	push   $0x1
-  jmp alltraps
-80106186:	e9 3e fb ff ff       	jmp    80105cc9 <alltraps>
-
-8010618b <vector2>:
-.globl vector2
-vector2:
-  pushl $0
-8010618b:	6a 00                	push   $0x0
-  pushl $2
-8010618d:	6a 02                	push   $0x2
-  jmp alltraps
-8010618f:	e9 35 fb ff ff       	jmp    80105cc9 <alltraps>
-
-80106194 <vector3>:
-.globl vector3
-vector3:
-  pushl $0
-80106194:	6a 00                	push   $0x0
-  pushl $3
-80106196:	6a 03                	push   $0x3
-  jmp alltraps
-80106198:	e9 2c fb ff ff       	jmp    80105cc9 <alltraps>
-
-8010619d <vector4>:
-.globl vector4
-vector4:
-  pushl $0
-8010619d:	6a 00                	push   $0x0
-  pushl $4
-8010619f:	6a 04                	push   $0x4
-  jmp alltraps
-801061a1:	e9 23 fb ff ff       	jmp    80105cc9 <alltraps>
-
-801061a6 <vector5>:
-.globl vector5
-vector5:
-  pushl $0
-801061a6:	6a 00                	push   $0x0
-  pushl $5
-801061a8:	6a 05                	push   $0x5
-  jmp alltraps
-801061aa:	e9 1a fb ff ff       	jmp    80105cc9 <alltraps>
-
-801061af <vector6>:
-.globl vector6
-vector6:
-  pushl $0
-801061af:	6a 00                	push   $0x0
-  pushl $6
-801061b1:	6a 06                	push   $0x6
-  jmp alltraps
-801061b3:	e9 11 fb ff ff       	jmp    80105cc9 <alltraps>
-
-801061b8 <vector7>:
-.globl vector7
-vector7:
-  pushl $0
-801061b8:	6a 00                	push   $0x0
-  pushl $7
-801061ba:	6a 07                	push   $0x7
-  jmp alltraps
-801061bc:	e9 08 fb ff ff       	jmp    80105cc9 <alltraps>
-
-801061c1 <vector8>:
-.globl vector8
-vector8:
-  pushl $8
-801061c1:	6a 08                	push   $0x8
-  jmp alltraps
-801061c3:	e9 01 fb ff ff       	jmp    80105cc9 <alltraps>
-
-801061c8 <vector9>:
-.globl vector9
-vector9:
-  pushl $0
-801061c8:	6a 00                	push   $0x0
-  pushl $9
-801061ca:	6a 09                	push   $0x9
-  jmp alltraps
-801061cc:	e9 f8 fa ff ff       	jmp    80105cc9 <alltraps>
-
-801061d1 <vector10>:
-.globl vector10
-vector10:
-  pushl $10
-801061d1:	6a 0a                	push   $0xa
-  jmp alltraps
-801061d3:	e9 f1 fa ff ff       	jmp    80105cc9 <alltraps>
-
-801061d8 <vector11>:
-.globl vector11
-vector11:
-  pushl $11
-801061d8:	6a 0b                	push   $0xb
-  jmp alltraps
-801061da:	e9 ea fa ff ff       	jmp    80105cc9 <alltraps>
-
-801061df <vector12>:
-.globl vector12
-vector12:
-  pushl $12
-801061df:	6a 0c                	push   $0xc
-  jmp alltraps
-801061e1:	e9 e3 fa ff ff       	jmp    80105cc9 <alltraps>
-
-801061e6 <vector13>:
-.globl vector13
-vector13:
-  pushl $13
-801061e6:	6a 0d                	push   $0xd
-  jmp alltraps
-801061e8:	e9 dc fa ff ff       	jmp    80105cc9 <alltraps>
-
-801061ed <vector14>:
-.globl vector14
-vector14:
-  pushl $14
-801061ed:	6a 0e                	push   $0xe
-  jmp alltraps
-801061ef:	e9 d5 fa ff ff       	jmp    80105cc9 <alltraps>
-
-801061f4 <vector15>:
-.globl vector15
-vector15:
-  pushl $0
-801061f4:	6a 00                	push   $0x0
-  pushl $15
-801061f6:	6a 0f                	push   $0xf
-  jmp alltraps
-801061f8:	e9 cc fa ff ff       	jmp    80105cc9 <alltraps>
-
-801061fd <vector16>:
-.globl vector16
-vector16:
-  pushl $0
-801061fd:	6a 00                	push   $0x0
-  pushl $16
-801061ff:	6a 10                	push   $0x10
-  jmp alltraps
-80106201:	e9 c3 fa ff ff       	jmp    80105cc9 <alltraps>
-
-80106206 <vector17>:
-.globl vector17
-vector17:
-  pushl $17
-80106206:	6a 11                	push   $0x11
-  jmp alltraps
-80106208:	e9 bc fa ff ff       	jmp    80105cc9 <alltraps>
-
-8010620d <vector18>:
-.globl vector18
-vector18:
-  pushl $0
-8010620d:	6a 00                	push   $0x0
-  pushl $18
-8010620f:	6a 12                	push   $0x12
-  jmp alltraps
-80106211:	e9 b3 fa ff ff       	jmp    80105cc9 <alltraps>
-
-80106216 <vector19>:
-.globl vector19
-vector19:
-  pushl $0
-80106216:	6a 00                	push   $0x0
-  pushl $19
-80106218:	6a 13                	push   $0x13
-  jmp alltraps
-8010621a:	e9 aa fa ff ff       	jmp    80105cc9 <alltraps>
-
-8010621f <vector20>:
-.globl vector20
-vector20:
-  pushl $0
-8010621f:	6a 00                	push   $0x0
-  pushl $20
-80106221:	6a 14                	push   $0x14
-  jmp alltraps
-80106223:	e9 a1 fa ff ff       	jmp    80105cc9 <alltraps>
-
-80106228 <vector21>:
-.globl vector21
-vector21:
-  pushl $0
-80106228:	6a 00                	push   $0x0
-  pushl $21
-8010622a:	6a 15                	push   $0x15
-  jmp alltraps
-8010622c:	e9 98 fa ff ff       	jmp    80105cc9 <alltraps>
-
-80106231 <vector22>:
-.globl vector22
-vector22:
-  pushl $0
-80106231:	6a 00                	push   $0x0
-  pushl $22
-80106233:	6a 16                	push   $0x16
-  jmp alltraps
-80106235:	e9 8f fa ff ff       	jmp    80105cc9 <alltraps>
-
-8010623a <vector23>:
-.globl vector23
-vector23:
-  pushl $0
-8010623a:	6a 00                	push   $0x0
-  pushl $23
-8010623c:	6a 17                	push   $0x17
-  jmp alltraps
-8010623e:	e9 86 fa ff ff       	jmp    80105cc9 <alltraps>
-
-80106243 <vector24>:
-.globl vector24
-vector24:
-  pushl $0
-80106243:	6a 00                	push   $0x0
-  pushl $24
-80106245:	6a 18                	push   $0x18
-  jmp alltraps
-80106247:	e9 7d fa ff ff       	jmp    80105cc9 <alltraps>
-
-8010624c <vector25>:
-.globl vector25
-vector25:
-  pushl $0
-8010624c:	6a 00                	push   $0x0
-  pushl $25
-8010624e:	6a 19                	push   $0x19
-  jmp alltraps
-80106250:	e9 74 fa ff ff       	jmp    80105cc9 <alltraps>
-
-80106255 <vector26>:
-.globl vector26
-vector26:
-  pushl $0
-80106255:	6a 00                	push   $0x0
-  pushl $26
-80106257:	6a 1a                	push   $0x1a
-  jmp alltraps
-80106259:	e9 6b fa ff ff       	jmp    80105cc9 <alltraps>
-
-8010625e <vector27>:
-.globl vector27
-vector27:
-  pushl $0
-8010625e:	6a 00                	push   $0x0
-  pushl $27
-80106260:	6a 1b                	push   $0x1b
-  jmp alltraps
-80106262:	e9 62 fa ff ff       	jmp    80105cc9 <alltraps>
-
-80106267 <vector28>:
-.globl vector28
-vector28:
-  pushl $0
-80106267:	6a 00                	push   $0x0
-  pushl $28
-80106269:	6a 1c                	push   $0x1c
-  jmp alltraps
-8010626b:	e9 59 fa ff ff       	jmp    80105cc9 <alltraps>
-
-80106270 <vector29>:
-.globl vector29
-vector29:
-  pushl $0
-80106270:	6a 00                	push   $0x0
-  pushl $29
-80106272:	6a 1d                	push   $0x1d
-  jmp alltraps
-80106274:	e9 50 fa ff ff       	jmp    80105cc9 <alltraps>
-
-80106279 <vector30>:
-.globl vector30
-vector30:
-  pushl $0
-80106279:	6a 00                	push   $0x0
-  pushl $30
-8010627b:	6a 1e                	push   $0x1e
-  jmp alltraps
-8010627d:	e9 47 fa ff ff       	jmp    80105cc9 <alltraps>
-
-80106282 <vector31>:
-.globl vector31
-vector31:
-  pushl $0
-80106282:	6a 00                	push   $0x0
-  pushl $31
-80106284:	6a 1f                	push   $0x1f
-  jmp alltraps
-80106286:	e9 3e fa ff ff       	jmp    80105cc9 <alltraps>
-
-8010628b <vector32>:
-.globl vector32
-vector32:
-  pushl $0
-8010628b:	6a 00                	push   $0x0
-  pushl $32
-8010628d:	6a 20                	push   $0x20
-  jmp alltraps
-8010628f:	e9 35 fa ff ff       	jmp    80105cc9 <alltraps>
-
-80106294 <vector33>:
-.globl vector33
-vector33:
-  pushl $0
-80106294:	6a 00                	push   $0x0
-  pushl $33
-80106296:	6a 21                	push   $0x21
-  jmp alltraps
-80106298:	e9 2c fa ff ff       	jmp    80105cc9 <alltraps>
-
-8010629d <vector34>:
-.globl vector34
-vector34:
-  pushl $0
-8010629d:	6a 00                	push   $0x0
-  pushl $34
-8010629f:	6a 22                	push   $0x22
-  jmp alltraps
-801062a1:	e9 23 fa ff ff       	jmp    80105cc9 <alltraps>
-
-801062a6 <vector35>:
-.globl vector35
-vector35:
-  pushl $0
-801062a6:	6a 00                	push   $0x0
-  pushl $35
-801062a8:	6a 23                	push   $0x23
-  jmp alltraps
-801062aa:	e9 1a fa ff ff       	jmp    80105cc9 <alltraps>
-
-801062af <vector36>:
-.globl vector36
-vector36:
-  pushl $0
-801062af:	6a 00                	push   $0x0
-  pushl $36
-801062b1:	6a 24                	push   $0x24
-  jmp alltraps
-801062b3:	e9 11 fa ff ff       	jmp    80105cc9 <alltraps>
-
-801062b8 <vector37>:
-.globl vector37
-vector37:
-  pushl $0
-801062b8:	6a 00                	push   $0x0
-  pushl $37
-801062ba:	6a 25                	push   $0x25
-  jmp alltraps
-801062bc:	e9 08 fa ff ff       	jmp    80105cc9 <alltraps>
-
-801062c1 <vector38>:
-.globl vector38
-vector38:
-  pushl $0
-801062c1:	6a 00                	push   $0x0
-  pushl $38
-801062c3:	6a 26                	push   $0x26
-  jmp alltraps
-801062c5:	e9 ff f9 ff ff       	jmp    80105cc9 <alltraps>
-
-801062ca <vector39>:
-.globl vector39
-vector39:
-  pushl $0
-801062ca:	6a 00                	push   $0x0
-  pushl $39
-801062cc:	6a 27                	push   $0x27
-  jmp alltraps
-801062ce:	e9 f6 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-801062d3 <vector40>:
-.globl vector40
-vector40:
-  pushl $0
-801062d3:	6a 00                	push   $0x0
-  pushl $40
-801062d5:	6a 28                	push   $0x28
-  jmp alltraps
-801062d7:	e9 ed f9 ff ff       	jmp    80105cc9 <alltraps>
-
-801062dc <vector41>:
-.globl vector41
-vector41:
-  pushl $0
-801062dc:	6a 00                	push   $0x0
-  pushl $41
-801062de:	6a 29                	push   $0x29
-  jmp alltraps
-801062e0:	e9 e4 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-801062e5 <vector42>:
-.globl vector42
-vector42:
-  pushl $0
-801062e5:	6a 00                	push   $0x0
-  pushl $42
-801062e7:	6a 2a                	push   $0x2a
-  jmp alltraps
-801062e9:	e9 db f9 ff ff       	jmp    80105cc9 <alltraps>
-
-801062ee <vector43>:
-.globl vector43
-vector43:
-  pushl $0
-801062ee:	6a 00                	push   $0x0
-  pushl $43
-801062f0:	6a 2b                	push   $0x2b
-  jmp alltraps
-801062f2:	e9 d2 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-801062f7 <vector44>:
-.globl vector44
-vector44:
-  pushl $0
-801062f7:	6a 00                	push   $0x0
-  pushl $44
-801062f9:	6a 2c                	push   $0x2c
-  jmp alltraps
-801062fb:	e9 c9 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-80106300 <vector45>:
-.globl vector45
-vector45:
-  pushl $0
-80106300:	6a 00                	push   $0x0
-  pushl $45
-80106302:	6a 2d                	push   $0x2d
-  jmp alltraps
-80106304:	e9 c0 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-80106309 <vector46>:
-.globl vector46
-vector46:
-  pushl $0
-80106309:	6a 00                	push   $0x0
-  pushl $46
-8010630b:	6a 2e                	push   $0x2e
-  jmp alltraps
-8010630d:	e9 b7 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-80106312 <vector47>:
-.globl vector47
-vector47:
-  pushl $0
-80106312:	6a 00                	push   $0x0
-  pushl $47
-80106314:	6a 2f                	push   $0x2f
-  jmp alltraps
-80106316:	e9 ae f9 ff ff       	jmp    80105cc9 <alltraps>
-
-8010631b <vector48>:
-.globl vector48
-vector48:
-  pushl $0
-8010631b:	6a 00                	push   $0x0
-  pushl $48
-8010631d:	6a 30                	push   $0x30
-  jmp alltraps
-8010631f:	e9 a5 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-80106324 <vector49>:
-.globl vector49
-vector49:
-  pushl $0
-80106324:	6a 00                	push   $0x0
-  pushl $49
-80106326:	6a 31                	push   $0x31
-  jmp alltraps
-80106328:	e9 9c f9 ff ff       	jmp    80105cc9 <alltraps>
-
-8010632d <vector50>:
-.globl vector50
-vector50:
-  pushl $0
-8010632d:	6a 00                	push   $0x0
-  pushl $50
-8010632f:	6a 32                	push   $0x32
-  jmp alltraps
-80106331:	e9 93 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-80106336 <vector51>:
-.globl vector51
-vector51:
-  pushl $0
-80106336:	6a 00                	push   $0x0
-  pushl $51
-80106338:	6a 33                	push   $0x33
-  jmp alltraps
-8010633a:	e9 8a f9 ff ff       	jmp    80105cc9 <alltraps>
-
-8010633f <vector52>:
-.globl vector52
-vector52:
-  pushl $0
-8010633f:	6a 00                	push   $0x0
-  pushl $52
-80106341:	6a 34                	push   $0x34
-  jmp alltraps
-80106343:	e9 81 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-80106348 <vector53>:
-.globl vector53
-vector53:
-  pushl $0
-80106348:	6a 00                	push   $0x0
-  pushl $53
-8010634a:	6a 35                	push   $0x35
-  jmp alltraps
-8010634c:	e9 78 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-80106351 <vector54>:
-.globl vector54
-vector54:
-  pushl $0
-80106351:	6a 00                	push   $0x0
-  pushl $54
-80106353:	6a 36                	push   $0x36
-  jmp alltraps
-80106355:	e9 6f f9 ff ff       	jmp    80105cc9 <alltraps>
-
-8010635a <vector55>:
-.globl vector55
-vector55:
-  pushl $0
-8010635a:	6a 00                	push   $0x0
-  pushl $55
-8010635c:	6a 37                	push   $0x37
-  jmp alltraps
-8010635e:	e9 66 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-80106363 <vector56>:
-.globl vector56
-vector56:
-  pushl $0
-80106363:	6a 00                	push   $0x0
-  pushl $56
-80106365:	6a 38                	push   $0x38
-  jmp alltraps
-80106367:	e9 5d f9 ff ff       	jmp    80105cc9 <alltraps>
-
-8010636c <vector57>:
-.globl vector57
-vector57:
-  pushl $0
-8010636c:	6a 00                	push   $0x0
-  pushl $57
-8010636e:	6a 39                	push   $0x39
-  jmp alltraps
-80106370:	e9 54 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-80106375 <vector58>:
-.globl vector58
-vector58:
-  pushl $0
-80106375:	6a 00                	push   $0x0
-  pushl $58
-80106377:	6a 3a                	push   $0x3a
-  jmp alltraps
-80106379:	e9 4b f9 ff ff       	jmp    80105cc9 <alltraps>
-
-8010637e <vector59>:
-.globl vector59
-vector59:
-  pushl $0
-8010637e:	6a 00                	push   $0x0
-  pushl $59
-80106380:	6a 3b                	push   $0x3b
-  jmp alltraps
-80106382:	e9 42 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-80106387 <vector60>:
-.globl vector60
-vector60:
-  pushl $0
-80106387:	6a 00                	push   $0x0
-  pushl $60
-80106389:	6a 3c                	push   $0x3c
-  jmp alltraps
-8010638b:	e9 39 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-80106390 <vector61>:
-.globl vector61
-vector61:
-  pushl $0
-80106390:	6a 00                	push   $0x0
-  pushl $61
-80106392:	6a 3d                	push   $0x3d
-  jmp alltraps
-80106394:	e9 30 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-80106399 <vector62>:
-.globl vector62
-vector62:
-  pushl $0
-80106399:	6a 00                	push   $0x0
-  pushl $62
-8010639b:	6a 3e                	push   $0x3e
-  jmp alltraps
-8010639d:	e9 27 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-801063a2 <vector63>:
-.globl vector63
-vector63:
-  pushl $0
-801063a2:	6a 00                	push   $0x0
-  pushl $63
-801063a4:	6a 3f                	push   $0x3f
-  jmp alltraps
-801063a6:	e9 1e f9 ff ff       	jmp    80105cc9 <alltraps>
-
-801063ab <vector64>:
-.globl vector64
-vector64:
-  pushl $0
-801063ab:	6a 00                	push   $0x0
-  pushl $64
-801063ad:	6a 40                	push   $0x40
-  jmp alltraps
-801063af:	e9 15 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-801063b4 <vector65>:
-.globl vector65
-vector65:
-  pushl $0
-801063b4:	6a 00                	push   $0x0
-  pushl $65
-801063b6:	6a 41                	push   $0x41
-  jmp alltraps
-801063b8:	e9 0c f9 ff ff       	jmp    80105cc9 <alltraps>
-
-801063bd <vector66>:
-.globl vector66
-vector66:
-  pushl $0
-801063bd:	6a 00                	push   $0x0
-  pushl $66
-801063bf:	6a 42                	push   $0x42
-  jmp alltraps
-801063c1:	e9 03 f9 ff ff       	jmp    80105cc9 <alltraps>
-
-801063c6 <vector67>:
-.globl vector67
-vector67:
-  pushl $0
-801063c6:	6a 00                	push   $0x0
-  pushl $67
-801063c8:	6a 43                	push   $0x43
-  jmp alltraps
-801063ca:	e9 fa f8 ff ff       	jmp    80105cc9 <alltraps>
-
-801063cf <vector68>:
-.globl vector68
-vector68:
-  pushl $0
-801063cf:	6a 00                	push   $0x0
-  pushl $68
-801063d1:	6a 44                	push   $0x44
-  jmp alltraps
-801063d3:	e9 f1 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-801063d8 <vector69>:
-.globl vector69
-vector69:
-  pushl $0
-801063d8:	6a 00                	push   $0x0
-  pushl $69
-801063da:	6a 45                	push   $0x45
-  jmp alltraps
-801063dc:	e9 e8 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-801063e1 <vector70>:
-.globl vector70
-vector70:
-  pushl $0
-801063e1:	6a 00                	push   $0x0
-  pushl $70
-801063e3:	6a 46                	push   $0x46
-  jmp alltraps
-801063e5:	e9 df f8 ff ff       	jmp    80105cc9 <alltraps>
-
-801063ea <vector71>:
-.globl vector71
-vector71:
-  pushl $0
-801063ea:	6a 00                	push   $0x0
-  pushl $71
-801063ec:	6a 47                	push   $0x47
-  jmp alltraps
-801063ee:	e9 d6 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-801063f3 <vector72>:
-.globl vector72
-vector72:
-  pushl $0
-801063f3:	6a 00                	push   $0x0
-  pushl $72
-801063f5:	6a 48                	push   $0x48
-  jmp alltraps
-801063f7:	e9 cd f8 ff ff       	jmp    80105cc9 <alltraps>
-
-801063fc <vector73>:
-.globl vector73
-vector73:
-  pushl $0
-801063fc:	6a 00                	push   $0x0
-  pushl $73
-801063fe:	6a 49                	push   $0x49
-  jmp alltraps
-80106400:	e9 c4 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-80106405 <vector74>:
-.globl vector74
-vector74:
-  pushl $0
-80106405:	6a 00                	push   $0x0
-  pushl $74
-80106407:	6a 4a                	push   $0x4a
-  jmp alltraps
-80106409:	e9 bb f8 ff ff       	jmp    80105cc9 <alltraps>
-
-8010640e <vector75>:
-.globl vector75
-vector75:
-  pushl $0
-8010640e:	6a 00                	push   $0x0
-  pushl $75
-80106410:	6a 4b                	push   $0x4b
-  jmp alltraps
-80106412:	e9 b2 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-80106417 <vector76>:
-.globl vector76
-vector76:
-  pushl $0
-80106417:	6a 00                	push   $0x0
-  pushl $76
-80106419:	6a 4c                	push   $0x4c
-  jmp alltraps
-8010641b:	e9 a9 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-80106420 <vector77>:
-.globl vector77
-vector77:
-  pushl $0
-80106420:	6a 00                	push   $0x0
-  pushl $77
-80106422:	6a 4d                	push   $0x4d
-  jmp alltraps
-80106424:	e9 a0 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-80106429 <vector78>:
-.globl vector78
-vector78:
-  pushl $0
-80106429:	6a 00                	push   $0x0
-  pushl $78
-8010642b:	6a 4e                	push   $0x4e
-  jmp alltraps
-8010642d:	e9 97 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-80106432 <vector79>:
-.globl vector79
-vector79:
-  pushl $0
-80106432:	6a 00                	push   $0x0
-  pushl $79
-80106434:	6a 4f                	push   $0x4f
-  jmp alltraps
-80106436:	e9 8e f8 ff ff       	jmp    80105cc9 <alltraps>
-
-8010643b <vector80>:
-.globl vector80
-vector80:
-  pushl $0
-8010643b:	6a 00                	push   $0x0
-  pushl $80
-8010643d:	6a 50                	push   $0x50
-  jmp alltraps
-8010643f:	e9 85 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-80106444 <vector81>:
-.globl vector81
-vector81:
-  pushl $0
-80106444:	6a 00                	push   $0x0
-  pushl $81
-80106446:	6a 51                	push   $0x51
-  jmp alltraps
-80106448:	e9 7c f8 ff ff       	jmp    80105cc9 <alltraps>
-
-8010644d <vector82>:
-.globl vector82
-vector82:
-  pushl $0
-8010644d:	6a 00                	push   $0x0
-  pushl $82
-8010644f:	6a 52                	push   $0x52
-  jmp alltraps
-80106451:	e9 73 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-80106456 <vector83>:
-.globl vector83
-vector83:
-  pushl $0
-80106456:	6a 00                	push   $0x0
-  pushl $83
-80106458:	6a 53                	push   $0x53
-  jmp alltraps
-8010645a:	e9 6a f8 ff ff       	jmp    80105cc9 <alltraps>
-
-8010645f <vector84>:
-.globl vector84
-vector84:
-  pushl $0
-8010645f:	6a 00                	push   $0x0
-  pushl $84
-80106461:	6a 54                	push   $0x54
-  jmp alltraps
-80106463:	e9 61 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-80106468 <vector85>:
-.globl vector85
-vector85:
-  pushl $0
-80106468:	6a 00                	push   $0x0
-  pushl $85
-8010646a:	6a 55                	push   $0x55
-  jmp alltraps
-8010646c:	e9 58 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-80106471 <vector86>:
-.globl vector86
-vector86:
-  pushl $0
-80106471:	6a 00                	push   $0x0
-  pushl $86
-80106473:	6a 56                	push   $0x56
-  jmp alltraps
-80106475:	e9 4f f8 ff ff       	jmp    80105cc9 <alltraps>
-
-8010647a <vector87>:
-.globl vector87
-vector87:
-  pushl $0
-8010647a:	6a 00                	push   $0x0
-  pushl $87
-8010647c:	6a 57                	push   $0x57
-  jmp alltraps
-8010647e:	e9 46 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-80106483 <vector88>:
-.globl vector88
-vector88:
-  pushl $0
-80106483:	6a 00                	push   $0x0
-  pushl $88
-80106485:	6a 58                	push   $0x58
-  jmp alltraps
-80106487:	e9 3d f8 ff ff       	jmp    80105cc9 <alltraps>
-
-8010648c <vector89>:
-.globl vector89
-vector89:
-  pushl $0
-8010648c:	6a 00                	push   $0x0
-  pushl $89
-8010648e:	6a 59                	push   $0x59
-  jmp alltraps
-80106490:	e9 34 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-80106495 <vector90>:
-.globl vector90
-vector90:
-  pushl $0
-80106495:	6a 00                	push   $0x0
-  pushl $90
-80106497:	6a 5a                	push   $0x5a
-  jmp alltraps
-80106499:	e9 2b f8 ff ff       	jmp    80105cc9 <alltraps>
-
-8010649e <vector91>:
-.globl vector91
-vector91:
-  pushl $0
-8010649e:	6a 00                	push   $0x0
-  pushl $91
-801064a0:	6a 5b                	push   $0x5b
-  jmp alltraps
-801064a2:	e9 22 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-801064a7 <vector92>:
-.globl vector92
-vector92:
-  pushl $0
-801064a7:	6a 00                	push   $0x0
-  pushl $92
-801064a9:	6a 5c                	push   $0x5c
-  jmp alltraps
-801064ab:	e9 19 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-801064b0 <vector93>:
-.globl vector93
-vector93:
-  pushl $0
-801064b0:	6a 00                	push   $0x0
-  pushl $93
-801064b2:	6a 5d                	push   $0x5d
-  jmp alltraps
-801064b4:	e9 10 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-801064b9 <vector94>:
-.globl vector94
-vector94:
-  pushl $0
-801064b9:	6a 00                	push   $0x0
-  pushl $94
-801064bb:	6a 5e                	push   $0x5e
-  jmp alltraps
-801064bd:	e9 07 f8 ff ff       	jmp    80105cc9 <alltraps>
-
-801064c2 <vector95>:
-.globl vector95
-vector95:
-  pushl $0
-801064c2:	6a 00                	push   $0x0
-  pushl $95
-801064c4:	6a 5f                	push   $0x5f
-  jmp alltraps
-801064c6:	e9 fe f7 ff ff       	jmp    80105cc9 <alltraps>
-
-801064cb <vector96>:
-.globl vector96
-vector96:
-  pushl $0
-801064cb:	6a 00                	push   $0x0
-  pushl $96
-801064cd:	6a 60                	push   $0x60
-  jmp alltraps
-801064cf:	e9 f5 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-801064d4 <vector97>:
-.globl vector97
-vector97:
-  pushl $0
-801064d4:	6a 00                	push   $0x0
-  pushl $97
-801064d6:	6a 61                	push   $0x61
-  jmp alltraps
-801064d8:	e9 ec f7 ff ff       	jmp    80105cc9 <alltraps>
-
-801064dd <vector98>:
-.globl vector98
-vector98:
-  pushl $0
-801064dd:	6a 00                	push   $0x0
-  pushl $98
-801064df:	6a 62                	push   $0x62
-  jmp alltraps
-801064e1:	e9 e3 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-801064e6 <vector99>:
-.globl vector99
-vector99:
-  pushl $0
-801064e6:	6a 00                	push   $0x0
-  pushl $99
-801064e8:	6a 63                	push   $0x63
-  jmp alltraps
-801064ea:	e9 da f7 ff ff       	jmp    80105cc9 <alltraps>
-
-801064ef <vector100>:
-.globl vector100
-vector100:
-  pushl $0
-801064ef:	6a 00                	push   $0x0
-  pushl $100
-801064f1:	6a 64                	push   $0x64
-  jmp alltraps
-801064f3:	e9 d1 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-801064f8 <vector101>:
-.globl vector101
-vector101:
-  pushl $0
-801064f8:	6a 00                	push   $0x0
-  pushl $101
-801064fa:	6a 65                	push   $0x65
-  jmp alltraps
-801064fc:	e9 c8 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-80106501 <vector102>:
-.globl vector102
-vector102:
-  pushl $0
-80106501:	6a 00                	push   $0x0
-  pushl $102
-80106503:	6a 66                	push   $0x66
-  jmp alltraps
-80106505:	e9 bf f7 ff ff       	jmp    80105cc9 <alltraps>
-
-8010650a <vector103>:
-.globl vector103
-vector103:
-  pushl $0
-8010650a:	6a 00                	push   $0x0
-  pushl $103
-8010650c:	6a 67                	push   $0x67
-  jmp alltraps
-8010650e:	e9 b6 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-80106513 <vector104>:
-.globl vector104
-vector104:
-  pushl $0
-80106513:	6a 00                	push   $0x0
-  pushl $104
-80106515:	6a 68                	push   $0x68
-  jmp alltraps
-80106517:	e9 ad f7 ff ff       	jmp    80105cc9 <alltraps>
-
-8010651c <vector105>:
-.globl vector105
-vector105:
-  pushl $0
-8010651c:	6a 00                	push   $0x0
-  pushl $105
-8010651e:	6a 69                	push   $0x69
-  jmp alltraps
-80106520:	e9 a4 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-80106525 <vector106>:
-.globl vector106
-vector106:
-  pushl $0
-80106525:	6a 00                	push   $0x0
-  pushl $106
-80106527:	6a 6a                	push   $0x6a
-  jmp alltraps
-80106529:	e9 9b f7 ff ff       	jmp    80105cc9 <alltraps>
-
-8010652e <vector107>:
-.globl vector107
-vector107:
-  pushl $0
-8010652e:	6a 00                	push   $0x0
-  pushl $107
-80106530:	6a 6b                	push   $0x6b
-  jmp alltraps
-80106532:	e9 92 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-80106537 <vector108>:
-.globl vector108
-vector108:
-  pushl $0
-80106537:	6a 00                	push   $0x0
-  pushl $108
-80106539:	6a 6c                	push   $0x6c
-  jmp alltraps
-8010653b:	e9 89 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-80106540 <vector109>:
-.globl vector109
-vector109:
-  pushl $0
-80106540:	6a 00                	push   $0x0
-  pushl $109
-80106542:	6a 6d                	push   $0x6d
-  jmp alltraps
-80106544:	e9 80 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-80106549 <vector110>:
-.globl vector110
-vector110:
-  pushl $0
-80106549:	6a 00                	push   $0x0
-  pushl $110
-8010654b:	6a 6e                	push   $0x6e
-  jmp alltraps
-8010654d:	e9 77 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-80106552 <vector111>:
-.globl vector111
-vector111:
-  pushl $0
-80106552:	6a 00                	push   $0x0
-  pushl $111
-80106554:	6a 6f                	push   $0x6f
-  jmp alltraps
-80106556:	e9 6e f7 ff ff       	jmp    80105cc9 <alltraps>
-
-8010655b <vector112>:
-.globl vector112
-vector112:
-  pushl $0
-8010655b:	6a 00                	push   $0x0
-  pushl $112
-8010655d:	6a 70                	push   $0x70
-  jmp alltraps
-8010655f:	e9 65 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-80106564 <vector113>:
-.globl vector113
-vector113:
-  pushl $0
-80106564:	6a 00                	push   $0x0
-  pushl $113
-80106566:	6a 71                	push   $0x71
-  jmp alltraps
-80106568:	e9 5c f7 ff ff       	jmp    80105cc9 <alltraps>
-
-8010656d <vector114>:
-.globl vector114
-vector114:
-  pushl $0
-8010656d:	6a 00                	push   $0x0
-  pushl $114
-8010656f:	6a 72                	push   $0x72
-  jmp alltraps
-80106571:	e9 53 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-80106576 <vector115>:
-.globl vector115
-vector115:
-  pushl $0
-80106576:	6a 00                	push   $0x0
-  pushl $115
-80106578:	6a 73                	push   $0x73
-  jmp alltraps
-8010657a:	e9 4a f7 ff ff       	jmp    80105cc9 <alltraps>
-
-8010657f <vector116>:
-.globl vector116
-vector116:
-  pushl $0
-8010657f:	6a 00                	push   $0x0
-  pushl $116
-80106581:	6a 74                	push   $0x74
-  jmp alltraps
-80106583:	e9 41 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-80106588 <vector117>:
-.globl vector117
-vector117:
-  pushl $0
-80106588:	6a 00                	push   $0x0
-  pushl $117
-8010658a:	6a 75                	push   $0x75
-  jmp alltraps
-8010658c:	e9 38 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-80106591 <vector118>:
-.globl vector118
-vector118:
-  pushl $0
-80106591:	6a 00                	push   $0x0
-  pushl $118
-80106593:	6a 76                	push   $0x76
-  jmp alltraps
-80106595:	e9 2f f7 ff ff       	jmp    80105cc9 <alltraps>
-
-8010659a <vector119>:
-.globl vector119
-vector119:
-  pushl $0
-8010659a:	6a 00                	push   $0x0
-  pushl $119
-8010659c:	6a 77                	push   $0x77
-  jmp alltraps
-8010659e:	e9 26 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-801065a3 <vector120>:
-.globl vector120
-vector120:
-  pushl $0
-801065a3:	6a 00                	push   $0x0
-  pushl $120
-801065a5:	6a 78                	push   $0x78
-  jmp alltraps
-801065a7:	e9 1d f7 ff ff       	jmp    80105cc9 <alltraps>
-
-801065ac <vector121>:
-.globl vector121
-vector121:
-  pushl $0
-801065ac:	6a 00                	push   $0x0
-  pushl $121
-801065ae:	6a 79                	push   $0x79
-  jmp alltraps
-801065b0:	e9 14 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-801065b5 <vector122>:
-.globl vector122
-vector122:
-  pushl $0
-801065b5:	6a 00                	push   $0x0
-  pushl $122
-801065b7:	6a 7a                	push   $0x7a
-  jmp alltraps
-801065b9:	e9 0b f7 ff ff       	jmp    80105cc9 <alltraps>
-
-801065be <vector123>:
-.globl vector123
-vector123:
-  pushl $0
-801065be:	6a 00                	push   $0x0
-  pushl $123
-801065c0:	6a 7b                	push   $0x7b
-  jmp alltraps
-801065c2:	e9 02 f7 ff ff       	jmp    80105cc9 <alltraps>
-
-801065c7 <vector124>:
-.globl vector124
-vector124:
-  pushl $0
-801065c7:	6a 00                	push   $0x0
-  pushl $124
-801065c9:	6a 7c                	push   $0x7c
-  jmp alltraps
-801065cb:	e9 f9 f6 ff ff       	jmp    80105cc9 <alltraps>
-
-801065d0 <vector125>:
-.globl vector125
-vector125:
-  pushl $0
-801065d0:	6a 00                	push   $0x0
-  pushl $125
-801065d2:	6a 7d                	push   $0x7d
-  jmp alltraps
-801065d4:	e9 f0 f6 ff ff       	jmp    80105cc9 <alltraps>
-
-801065d9 <vector126>:
-.globl vector126
-vector126:
-  pushl $0
-801065d9:	6a 00                	push   $0x0
-  pushl $126
-801065db:	6a 7e                	push   $0x7e
-  jmp alltraps
-801065dd:	e9 e7 f6 ff ff       	jmp    80105cc9 <alltraps>
-
-801065e2 <vector127>:
-.globl vector127
-vector127:
-  pushl $0
-801065e2:	6a 00                	push   $0x0
-  pushl $127
-801065e4:	6a 7f                	push   $0x7f
-  jmp alltraps
-801065e6:	e9 de f6 ff ff       	jmp    80105cc9 <alltraps>
-
-801065eb <vector128>:
-.globl vector128
-vector128:
-  pushl $0
-801065eb:	6a 00                	push   $0x0
-  pushl $128
-801065ed:	68 80 00 00 00       	push   $0x80
-  jmp alltraps
-801065f2:	e9 d2 f6 ff ff       	jmp    80105cc9 <alltraps>
-
-801065f7 <vector129>:
-.globl vector129
-vector129:
-  pushl $0
-801065f7:	6a 00                	push   $0x0
-  pushl $129
-801065f9:	68 81 00 00 00       	push   $0x81
-  jmp alltraps
-801065fe:	e9 c6 f6 ff ff       	jmp    80105cc9 <alltraps>
-
-80106603 <vector130>:
-.globl vector130
-vector130:
-  pushl $0
-80106603:	6a 00                	push   $0x0
-  pushl $130
-80106605:	68 82 00 00 00       	push   $0x82
-  jmp alltraps
-8010660a:	e9 ba f6 ff ff       	jmp    80105cc9 <alltraps>
-
-8010660f <vector131>:
-.globl vector131
-vector131:
-  pushl $0
-8010660f:	6a 00                	push   $0x0
-  pushl $131
-80106611:	68 83 00 00 00       	push   $0x83
-  jmp alltraps
-80106616:	e9 ae f6 ff ff       	jmp    80105cc9 <alltraps>
-
-8010661b <vector132>:
-.globl vector132
-vector132:
-  pushl $0
-8010661b:	6a 00                	push   $0x0
-  pushl $132
-8010661d:	68 84 00 00 00       	push   $0x84
-  jmp alltraps
-80106622:	e9 a2 f6 ff ff       	jmp    80105cc9 <alltraps>
-
-80106627 <vector133>:
-.globl vector133
-vector133:
-  pushl $0
-80106627:	6a 00                	push   $0x0
-  pushl $133
-80106629:	68 85 00 00 00       	push   $0x85
-  jmp alltraps
-8010662e:	e9 96 f6 ff ff       	jmp    80105cc9 <alltraps>
-
-80106633 <vector134>:
-.globl vector134
-vector134:
-  pushl $0
-80106633:	6a 00                	push   $0x0
-  pushl $134
-80106635:	68 86 00 00 00       	push   $0x86
-  jmp alltraps
-8010663a:	e9 8a f6 ff ff       	jmp    80105cc9 <alltraps>
-
-8010663f <vector135>:
-.globl vector135
-vector135:
-  pushl $0
-8010663f:	6a 00                	push   $0x0
-  pushl $135
-80106641:	68 87 00 00 00       	push   $0x87
-  jmp alltraps
-80106646:	e9 7e f6 ff ff       	jmp    80105cc9 <alltraps>
-
-8010664b <vector136>:
-.globl vector136
-vector136:
-  pushl $0
-8010664b:	6a 00                	push   $0x0
-  pushl $136
-8010664d:	68 88 00 00 00       	push   $0x88
-  jmp alltraps
-80106652:	e9 72 f6 ff ff       	jmp    80105cc9 <alltraps>
-
-80106657 <vector137>:
-.globl vector137
-vector137:
-  pushl $0
-80106657:	6a 00                	push   $0x0
-  pushl $137
-80106659:	68 89 00 00 00       	push   $0x89
-  jmp alltraps
-8010665e:	e9 66 f6 ff ff       	jmp    80105cc9 <alltraps>
-
-80106663 <vector138>:
-.globl vector138
-vector138:
-  pushl $0
-80106663:	6a 00                	push   $0x0
-  pushl $138
-80106665:	68 8a 00 00 00       	push   $0x8a
-  jmp alltraps
-8010666a:	e9 5a f6 ff ff       	jmp    80105cc9 <alltraps>
-
-8010666f <vector139>:
-.globl vector139
-vector139:
-  pushl $0
-8010666f:	6a 00                	push   $0x0
-  pushl $139
-80106671:	68 8b 00 00 00       	push   $0x8b
-  jmp alltraps
-80106676:	e9 4e f6 ff ff       	jmp    80105cc9 <alltraps>
-
-8010667b <vector140>:
-.globl vector140
-vector140:
-  pushl $0
-8010667b:	6a 00                	push   $0x0
-  pushl $140
-8010667d:	68 8c 00 00 00       	push   $0x8c
-  jmp alltraps
-80106682:	e9 42 f6 ff ff       	jmp    80105cc9 <alltraps>
-
-80106687 <vector141>:
-.globl vector141
-vector141:
-  pushl $0
-80106687:	6a 00                	push   $0x0
-  pushl $141
-80106689:	68 8d 00 00 00       	push   $0x8d
-  jmp alltraps
-8010668e:	e9 36 f6 ff ff       	jmp    80105cc9 <alltraps>
-
-80106693 <vector142>:
-.globl vector142
-vector142:
-  pushl $0
-80106693:	6a 00                	push   $0x0
-  pushl $142
-80106695:	68 8e 00 00 00       	push   $0x8e
-  jmp alltraps
-8010669a:	e9 2a f6 ff ff       	jmp    80105cc9 <alltraps>
-
-8010669f <vector143>:
-.globl vector143
-vector143:
-  pushl $0
-8010669f:	6a 00                	push   $0x0
-  pushl $143
-801066a1:	68 8f 00 00 00       	push   $0x8f
-  jmp alltraps
-801066a6:	e9 1e f6 ff ff       	jmp    80105cc9 <alltraps>
-
-801066ab <vector144>:
-.globl vector144
-vector144:
-  pushl $0
-801066ab:	6a 00                	push   $0x0
-  pushl $144
-801066ad:	68 90 00 00 00       	push   $0x90
-  jmp alltraps
-801066b2:	e9 12 f6 ff ff       	jmp    80105cc9 <alltraps>
-
-801066b7 <vector145>:
-.globl vector145
-vector145:
-  pushl $0
-801066b7:	6a 00                	push   $0x0
-  pushl $145
-801066b9:	68 91 00 00 00       	push   $0x91
-  jmp alltraps
-801066be:	e9 06 f6 ff ff       	jmp    80105cc9 <alltraps>
-
-801066c3 <vector146>:
-.globl vector146
-vector146:
-  pushl $0
-801066c3:	6a 00                	push   $0x0
-  pushl $146
-801066c5:	68 92 00 00 00       	push   $0x92
-  jmp alltraps
-801066ca:	e9 fa f5 ff ff       	jmp    80105cc9 <alltraps>
-
-801066cf <vector147>:
-.globl vector147
-vector147:
-  pushl $0
-801066cf:	6a 00                	push   $0x0
-  pushl $147
-801066d1:	68 93 00 00 00       	push   $0x93
-  jmp alltraps
-801066d6:	e9 ee f5 ff ff       	jmp    80105cc9 <alltraps>
-
-801066db <vector148>:
-.globl vector148
-vector148:
-  pushl $0
-801066db:	6a 00                	push   $0x0
-  pushl $148
-801066dd:	68 94 00 00 00       	push   $0x94
-  jmp alltraps
-801066e2:	e9 e2 f5 ff ff       	jmp    80105cc9 <alltraps>
-
-801066e7 <vector149>:
-.globl vector149
-vector149:
-  pushl $0
-801066e7:	6a 00                	push   $0x0
-  pushl $149
-801066e9:	68 95 00 00 00       	push   $0x95
-  jmp alltraps
-801066ee:	e9 d6 f5 ff ff       	jmp    80105cc9 <alltraps>
-
-801066f3 <vector150>:
-.globl vector150
-vector150:
-  pushl $0
-801066f3:	6a 00                	push   $0x0
-  pushl $150
-801066f5:	68 96 00 00 00       	push   $0x96
-  jmp alltraps
-801066fa:	e9 ca f5 ff ff       	jmp    80105cc9 <alltraps>
-
-801066ff <vector151>:
-.globl vector151
-vector151:
-  pushl $0
-801066ff:	6a 00                	push   $0x0
-  pushl $151
-80106701:	68 97 00 00 00       	push   $0x97
-  jmp alltraps
-80106706:	e9 be f5 ff ff       	jmp    80105cc9 <alltraps>
-
-8010670b <vector152>:
-.globl vector152
-vector152:
-  pushl $0
-8010670b:	6a 00                	push   $0x0
-  pushl $152
-8010670d:	68 98 00 00 00       	push   $0x98
-  jmp alltraps
-80106712:	e9 b2 f5 ff ff       	jmp    80105cc9 <alltraps>
-
-80106717 <vector153>:
-.globl vector153
-vector153:
-  pushl $0
-80106717:	6a 00                	push   $0x0
-  pushl $153
-80106719:	68 99 00 00 00       	push   $0x99
-  jmp alltraps
-8010671e:	e9 a6 f5 ff ff       	jmp    80105cc9 <alltraps>
-
-80106723 <vector154>:
-.globl vector154
-vector154:
-  pushl $0
-80106723:	6a 00                	push   $0x0
-  pushl $154
-80106725:	68 9a 00 00 00       	push   $0x9a
-  jmp alltraps
-8010672a:	e9 9a f5 ff ff       	jmp    80105cc9 <alltraps>
-
-8010672f <vector155>:
-.globl vector155
-vector155:
-  pushl $0
-8010672f:	6a 00                	push   $0x0
-  pushl $155
-80106731:	68 9b 00 00 00       	push   $0x9b
-  jmp alltraps
-80106736:	e9 8e f5 ff ff       	jmp    80105cc9 <alltraps>
-
-8010673b <vector156>:
-.globl vector156
-vector156:
-  pushl $0
-8010673b:	6a 00                	push   $0x0
-  pushl $156
-8010673d:	68 9c 00 00 00       	push   $0x9c
-  jmp alltraps
-80106742:	e9 82 f5 ff ff       	jmp    80105cc9 <alltraps>
-
-80106747 <vector157>:
-.globl vector157
-vector157:
-  pushl $0
-80106747:	6a 00                	push   $0x0
-  pushl $157
-80106749:	68 9d 00 00 00       	push   $0x9d
-  jmp alltraps
-8010674e:	e9 76 f5 ff ff       	jmp    80105cc9 <alltraps>
-
-80106753 <vector158>:
-.globl vector158
-vector158:
-  pushl $0
-80106753:	6a 00                	push   $0x0
-  pushl $158
-80106755:	68 9e 00 00 00       	push   $0x9e
-  jmp alltraps
-8010675a:	e9 6a f5 ff ff       	jmp    80105cc9 <alltraps>
-
-8010675f <vector159>:
-.globl vector159
-vector159:
-  pushl $0
-8010675f:	6a 00                	push   $0x0
-  pushl $159
-80106761:	68 9f 00 00 00       	push   $0x9f
-  jmp alltraps
-80106766:	e9 5e f5 ff ff       	jmp    80105cc9 <alltraps>
-
-8010676b <vector160>:
-.globl vector160
-vector160:
-  pushl $0
-8010676b:	6a 00                	push   $0x0
-  pushl $160
-8010676d:	68 a0 00 00 00       	push   $0xa0
-  jmp alltraps
-80106772:	e9 52 f5 ff ff       	jmp    80105cc9 <alltraps>
-
-80106777 <vector161>:
-.globl vector161
-vector161:
-  pushl $0
-80106777:	6a 00                	push   $0x0
-  pushl $161
-80106779:	68 a1 00 00 00       	push   $0xa1
-  jmp alltraps
-8010677e:	e9 46 f5 ff ff       	jmp    80105cc9 <alltraps>
-
-80106783 <vector162>:
-.globl vector162
-vector162:
-  pushl $0
-80106783:	6a 00                	push   $0x0
-  pushl $162
-80106785:	68 a2 00 00 00       	push   $0xa2
-  jmp alltraps
-8010678a:	e9 3a f5 ff ff       	jmp    80105cc9 <alltraps>
-
-8010678f <vector163>:
-.globl vector163
-vector163:
-  pushl $0
-8010678f:	6a 00                	push   $0x0
-  pushl $163
-80106791:	68 a3 00 00 00       	push   $0xa3
-  jmp alltraps
-80106796:	e9 2e f5 ff ff       	jmp    80105cc9 <alltraps>
-
-8010679b <vector164>:
-.globl vector164
-vector164:
-  pushl $0
-8010679b:	6a 00                	push   $0x0
-  pushl $164
-8010679d:	68 a4 00 00 00       	push   $0xa4
-  jmp alltraps
-801067a2:	e9 22 f5 ff ff       	jmp    80105cc9 <alltraps>
-
-801067a7 <vector165>:
-.globl vector165
-vector165:
-  pushl $0
-801067a7:	6a 00                	push   $0x0
-  pushl $165
-801067a9:	68 a5 00 00 00       	push   $0xa5
-  jmp alltraps
-801067ae:	e9 16 f5 ff ff       	jmp    80105cc9 <alltraps>
-
-801067b3 <vector166>:
-.globl vector166
-vector166:
-  pushl $0
-801067b3:	6a 00                	push   $0x0
-  pushl $166
-801067b5:	68 a6 00 00 00       	push   $0xa6
-  jmp alltraps
-801067ba:	e9 0a f5 ff ff       	jmp    80105cc9 <alltraps>
-
-801067bf <vector167>:
-.globl vector167
-vector167:
-  pushl $0
-801067bf:	6a 00                	push   $0x0
-  pushl $167
-801067c1:	68 a7 00 00 00       	push   $0xa7
-  jmp alltraps
-801067c6:	e9 fe f4 ff ff       	jmp    80105cc9 <alltraps>
-
-801067cb <vector168>:
-.globl vector168
-vector168:
-  pushl $0
-801067cb:	6a 00                	push   $0x0
-  pushl $168
-801067cd:	68 a8 00 00 00       	push   $0xa8
-  jmp alltraps
-801067d2:	e9 f2 f4 ff ff       	jmp    80105cc9 <alltraps>
-
-801067d7 <vector169>:
-.globl vector169
-vector169:
-  pushl $0
-801067d7:	6a 00                	push   $0x0
-  pushl $169
-801067d9:	68 a9 00 00 00       	push   $0xa9
-  jmp alltraps
-801067de:	e9 e6 f4 ff ff       	jmp    80105cc9 <alltraps>
-
-801067e3 <vector170>:
-.globl vector170
-vector170:
-  pushl $0
-801067e3:	6a 00                	push   $0x0
-  pushl $170
-801067e5:	68 aa 00 00 00       	push   $0xaa
-  jmp alltraps
-801067ea:	e9 da f4 ff ff       	jmp    80105cc9 <alltraps>
-
-801067ef <vector171>:
-.globl vector171
-vector171:
-  pushl $0
-801067ef:	6a 00                	push   $0x0
-  pushl $171
-801067f1:	68 ab 00 00 00       	push   $0xab
-  jmp alltraps
-801067f6:	e9 ce f4 ff ff       	jmp    80105cc9 <alltraps>
-
-801067fb <vector172>:
-.globl vector172
-vector172:
-  pushl $0
-801067fb:	6a 00                	push   $0x0
-  pushl $172
-801067fd:	68 ac 00 00 00       	push   $0xac
-  jmp alltraps
-80106802:	e9 c2 f4 ff ff       	jmp    80105cc9 <alltraps>
-
-80106807 <vector173>:
-.globl vector173
-vector173:
-  pushl $0
-80106807:	6a 00                	push   $0x0
-  pushl $173
-80106809:	68 ad 00 00 00       	push   $0xad
-  jmp alltraps
-8010680e:	e9 b6 f4 ff ff       	jmp    80105cc9 <alltraps>
-
-80106813 <vector174>:
-.globl vector174
-vector174:
-  pushl $0
-80106813:	6a 00                	push   $0x0
-  pushl $174
-80106815:	68 ae 00 00 00       	push   $0xae
-  jmp alltraps
-8010681a:	e9 aa f4 ff ff       	jmp    80105cc9 <alltraps>
-
-8010681f <vector175>:
-.globl vector175
-vector175:
-  pushl $0
-8010681f:	6a 00                	push   $0x0
-  pushl $175
-80106821:	68 af 00 00 00       	push   $0xaf
-  jmp alltraps
-80106826:	e9 9e f4 ff ff       	jmp    80105cc9 <alltraps>
-
-8010682b <vector176>:
-.globl vector176
-vector176:
-  pushl $0
-8010682b:	6a 00                	push   $0x0
-  pushl $176
-8010682d:	68 b0 00 00 00       	push   $0xb0
-  jmp alltraps
-80106832:	e9 92 f4 ff ff       	jmp    80105cc9 <alltraps>
-
-80106837 <vector177>:
-.globl vector177
-vector177:
-  pushl $0
-80106837:	6a 00                	push   $0x0
-  pushl $177
-80106839:	68 b1 00 00 00       	push   $0xb1
-  jmp alltraps
-8010683e:	e9 86 f4 ff ff       	jmp    80105cc9 <alltraps>
-
-80106843 <vector178>:
-.globl vector178
-vector178:
-  pushl $0
-80106843:	6a 00                	push   $0x0
-  pushl $178
-80106845:	68 b2 00 00 00       	push   $0xb2
-  jmp alltraps
-8010684a:	e9 7a f4 ff ff       	jmp    80105cc9 <alltraps>
-
-8010684f <vector179>:
-.globl vector179
-vector179:
-  pushl $0
-8010684f:	6a 00                	push   $0x0
-  pushl $179
-80106851:	68 b3 00 00 00       	push   $0xb3
-  jmp alltraps
-80106856:	e9 6e f4 ff ff       	jmp    80105cc9 <alltraps>
-
-8010685b <vector180>:
-.globl vector180
-vector180:
-  pushl $0
-8010685b:	6a 00                	push   $0x0
-  pushl $180
-8010685d:	68 b4 00 00 00       	push   $0xb4
-  jmp alltraps
-80106862:	e9 62 f4 ff ff       	jmp    80105cc9 <alltraps>
-
-80106867 <vector181>:
-.globl vector181
-vector181:
-  pushl $0
-80106867:	6a 00                	push   $0x0
-  pushl $181
-80106869:	68 b5 00 00 00       	push   $0xb5
-  jmp alltraps
-8010686e:	e9 56 f4 ff ff       	jmp    80105cc9 <alltraps>
-
-80106873 <vector182>:
-.globl vector182
-vector182:
-  pushl $0
-80106873:	6a 00                	push   $0x0
-  pushl $182
-80106875:	68 b6 00 00 00       	push   $0xb6
-  jmp alltraps
-8010687a:	e9 4a f4 ff ff       	jmp    80105cc9 <alltraps>
-
-8010687f <vector183>:
-.globl vector183
-vector183:
-  pushl $0
-8010687f:	6a 00                	push   $0x0
-  pushl $183
-80106881:	68 b7 00 00 00       	push   $0xb7
-  jmp alltraps
-80106886:	e9 3e f4 ff ff       	jmp    80105cc9 <alltraps>
-
-8010688b <vector184>:
-.globl vector184
-vector184:
-  pushl $0
-8010688b:	6a 00                	push   $0x0
-  pushl $184
-8010688d:	68 b8 00 00 00       	push   $0xb8
-  jmp alltraps
-80106892:	e9 32 f4 ff ff       	jmp    80105cc9 <alltraps>
-
-80106897 <vector185>:
-.globl vector185
-vector185:
-  pushl $0
-80106897:	6a 00                	push   $0x0
-  pushl $185
-80106899:	68 b9 00 00 00       	push   $0xb9
-  jmp alltraps
-8010689e:	e9 26 f4 ff ff       	jmp    80105cc9 <alltraps>
-
-801068a3 <vector186>:
-.globl vector186
-vector186:
-  pushl $0
-801068a3:	6a 00                	push   $0x0
-  pushl $186
-801068a5:	68 ba 00 00 00       	push   $0xba
-  jmp alltraps
-801068aa:	e9 1a f4 ff ff       	jmp    80105cc9 <alltraps>
-
-801068af <vector187>:
-.globl vector187
-vector187:
-  pushl $0
-801068af:	6a 00                	push   $0x0
-  pushl $187
-801068b1:	68 bb 00 00 00       	push   $0xbb
-  jmp alltraps
-801068b6:	e9 0e f4 ff ff       	jmp    80105cc9 <alltraps>
-
-801068bb <vector188>:
-.globl vector188
-vector188:
-  pushl $0
-801068bb:	6a 00                	push   $0x0
-  pushl $188
-801068bd:	68 bc 00 00 00       	push   $0xbc
-  jmp alltraps
-801068c2:	e9 02 f4 ff ff       	jmp    80105cc9 <alltraps>
-
-801068c7 <vector189>:
-.globl vector189
-vector189:
-  pushl $0
-801068c7:	6a 00                	push   $0x0
-  pushl $189
-801068c9:	68 bd 00 00 00       	push   $0xbd
-  jmp alltraps
-801068ce:	e9 f6 f3 ff ff       	jmp    80105cc9 <alltraps>
-
-801068d3 <vector190>:
-.globl vector190
-vector190:
-  pushl $0
-801068d3:	6a 00                	push   $0x0
-  pushl $190
-801068d5:	68 be 00 00 00       	push   $0xbe
-  jmp alltraps
-801068da:	e9 ea f3 ff ff       	jmp    80105cc9 <alltraps>
-
-801068df <vector191>:
-.globl vector191
-vector191:
-  pushl $0
-801068df:	6a 00                	push   $0x0
-  pushl $191
-801068e1:	68 bf 00 00 00       	push   $0xbf
-  jmp alltraps
-801068e6:	e9 de f3 ff ff       	jmp    80105cc9 <alltraps>
-
-801068eb <vector192>:
-.globl vector192
-vector192:
-  pushl $0
-801068eb:	6a 00                	push   $0x0
-  pushl $192
-801068ed:	68 c0 00 00 00       	push   $0xc0
-  jmp alltraps
-801068f2:	e9 d2 f3 ff ff       	jmp    80105cc9 <alltraps>
-
-801068f7 <vector193>:
-.globl vector193
-vector193:
-  pushl $0
-801068f7:	6a 00                	push   $0x0
-  pushl $193
-801068f9:	68 c1 00 00 00       	push   $0xc1
-  jmp alltraps
-801068fe:	e9 c6 f3 ff ff       	jmp    80105cc9 <alltraps>
-
-80106903 <vector194>:
-.globl vector194
-vector194:
-  pushl $0
-80106903:	6a 00                	push   $0x0
-  pushl $194
-80106905:	68 c2 00 00 00       	push   $0xc2
-  jmp alltraps
-8010690a:	e9 ba f3 ff ff       	jmp    80105cc9 <alltraps>
-
-8010690f <vector195>:
-.globl vector195
-vector195:
-  pushl $0
-8010690f:	6a 00                	push   $0x0
-  pushl $195
-80106911:	68 c3 00 00 00       	push   $0xc3
-  jmp alltraps
-80106916:	e9 ae f3 ff ff       	jmp    80105cc9 <alltraps>
-
-8010691b <vector196>:
-.globl vector196
-vector196:
-  pushl $0
-8010691b:	6a 00                	push   $0x0
-  pushl $196
-8010691d:	68 c4 00 00 00       	push   $0xc4
-  jmp alltraps
-80106922:	e9 a2 f3 ff ff       	jmp    80105cc9 <alltraps>
-
-80106927 <vector197>:
-.globl vector197
-vector197:
-  pushl $0
-80106927:	6a 00                	push   $0x0
-  pushl $197
-80106929:	68 c5 00 00 00       	push   $0xc5
-  jmp alltraps
-8010692e:	e9 96 f3 ff ff       	jmp    80105cc9 <alltraps>
-
-80106933 <vector198>:
-.globl vector198
-vector198:
-  pushl $0
-80106933:	6a 00                	push   $0x0
-  pushl $198
-80106935:	68 c6 00 00 00       	push   $0xc6
-  jmp alltraps
-8010693a:	e9 8a f3 ff ff       	jmp    80105cc9 <alltraps>
-
-8010693f <vector199>:
-.globl vector199
-vector199:
-  pushl $0
-8010693f:	6a 00                	push   $0x0
-  pushl $199
-80106941:	68 c7 00 00 00       	push   $0xc7
-  jmp alltraps
-80106946:	e9 7e f3 ff ff       	jmp    80105cc9 <alltraps>
-
-8010694b <vector200>:
-.globl vector200
-vector200:
-  pushl $0
-8010694b:	6a 00                	push   $0x0
-  pushl $200
-8010694d:	68 c8 00 00 00       	push   $0xc8
-  jmp alltraps
-80106952:	e9 72 f3 ff ff       	jmp    80105cc9 <alltraps>
-
-80106957 <vector201>:
-.globl vector201
-vector201:
-  pushl $0
-80106957:	6a 00                	push   $0x0
-  pushl $201
-80106959:	68 c9 00 00 00       	push   $0xc9
-  jmp alltraps
-8010695e:	e9 66 f3 ff ff       	jmp    80105cc9 <alltraps>
-
-80106963 <vector202>:
-.globl vector202
-vector202:
-  pushl $0
-80106963:	6a 00                	push   $0x0
-  pushl $202
-80106965:	68 ca 00 00 00       	push   $0xca
-  jmp alltraps
-8010696a:	e9 5a f3 ff ff       	jmp    80105cc9 <alltraps>
-
-8010696f <vector203>:
-.globl vector203
-vector203:
-  pushl $0
-8010696f:	6a 00                	push   $0x0
-  pushl $203
-80106971:	68 cb 00 00 00       	push   $0xcb
-  jmp alltraps
-80106976:	e9 4e f3 ff ff       	jmp    80105cc9 <alltraps>
-
-8010697b <vector204>:
-.globl vector204
-vector204:
-  pushl $0
-8010697b:	6a 00                	push   $0x0
-  pushl $204
-8010697d:	68 cc 00 00 00       	push   $0xcc
-  jmp alltraps
-80106982:	e9 42 f3 ff ff       	jmp    80105cc9 <alltraps>
-
-80106987 <vector205>:
-.globl vector205
-vector205:
-  pushl $0
-80106987:	6a 00                	push   $0x0
-  pushl $205
-80106989:	68 cd 00 00 00       	push   $0xcd
-  jmp alltraps
-8010698e:	e9 36 f3 ff ff       	jmp    80105cc9 <alltraps>
-
-80106993 <vector206>:
-.globl vector206
-vector206:
-  pushl $0
-80106993:	6a 00                	push   $0x0
-  pushl $206
-80106995:	68 ce 00 00 00       	push   $0xce
-  jmp alltraps
-8010699a:	e9 2a f3 ff ff       	jmp    80105cc9 <alltraps>
-
-8010699f <vector207>:
-.globl vector207
-vector207:
-  pushl $0
-8010699f:	6a 00                	push   $0x0
-  pushl $207
-801069a1:	68 cf 00 00 00       	push   $0xcf
-  jmp alltraps
-801069a6:	e9 1e f3 ff ff       	jmp    80105cc9 <alltraps>
-
-801069ab <vector208>:
-.globl vector208
-vector208:
-  pushl $0
-801069ab:	6a 00                	push   $0x0
-  pushl $208
-801069ad:	68 d0 00 00 00       	push   $0xd0
-  jmp alltraps
-801069b2:	e9 12 f3 ff ff       	jmp    80105cc9 <alltraps>
-
-801069b7 <vector209>:
-.globl vector209
-vector209:
-  pushl $0
-801069b7:	6a 00                	push   $0x0
-  pushl $209
-801069b9:	68 d1 00 00 00       	push   $0xd1
-  jmp alltraps
-801069be:	e9 06 f3 ff ff       	jmp    80105cc9 <alltraps>
-
-801069c3 <vector210>:
-.globl vector210
-vector210:
-  pushl $0
-801069c3:	6a 00                	push   $0x0
-  pushl $210
-801069c5:	68 d2 00 00 00       	push   $0xd2
-  jmp alltraps
-801069ca:	e9 fa f2 ff ff       	jmp    80105cc9 <alltraps>
-
-801069cf <vector211>:
-.globl vector211
-vector211:
-  pushl $0
-801069cf:	6a 00                	push   $0x0
-  pushl $211
-801069d1:	68 d3 00 00 00       	push   $0xd3
-  jmp alltraps
-801069d6:	e9 ee f2 ff ff       	jmp    80105cc9 <alltraps>
-
-801069db <vector212>:
-.globl vector212
-vector212:
-  pushl $0
-801069db:	6a 00                	push   $0x0
-  pushl $212
-801069dd:	68 d4 00 00 00       	push   $0xd4
-  jmp alltraps
-801069e2:	e9 e2 f2 ff ff       	jmp    80105cc9 <alltraps>
-
-801069e7 <vector213>:
-.globl vector213
-vector213:
-  pushl $0
-801069e7:	6a 00                	push   $0x0
-  pushl $213
-801069e9:	68 d5 00 00 00       	push   $0xd5
-  jmp alltraps
-801069ee:	e9 d6 f2 ff ff       	jmp    80105cc9 <alltraps>
-
-801069f3 <vector214>:
-.globl vector214
-vector214:
-  pushl $0
-801069f3:	6a 00                	push   $0x0
-  pushl $214
-801069f5:	68 d6 00 00 00       	push   $0xd6
-  jmp alltraps
-801069fa:	e9 ca f2 ff ff       	jmp    80105cc9 <alltraps>
-
-801069ff <vector215>:
-.globl vector215
-vector215:
-  pushl $0
-801069ff:	6a 00                	push   $0x0
-  pushl $215
-80106a01:	68 d7 00 00 00       	push   $0xd7
-  jmp alltraps
-80106a06:	e9 be f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106a0b <vector216>:
-.globl vector216
-vector216:
-  pushl $0
-80106a0b:	6a 00                	push   $0x0
-  pushl $216
-80106a0d:	68 d8 00 00 00       	push   $0xd8
-  jmp alltraps
-80106a12:	e9 b2 f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106a17 <vector217>:
-.globl vector217
-vector217:
-  pushl $0
-80106a17:	6a 00                	push   $0x0
-  pushl $217
-80106a19:	68 d9 00 00 00       	push   $0xd9
-  jmp alltraps
-80106a1e:	e9 a6 f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106a23 <vector218>:
-.globl vector218
-vector218:
-  pushl $0
-80106a23:	6a 00                	push   $0x0
-  pushl $218
-80106a25:	68 da 00 00 00       	push   $0xda
-  jmp alltraps
-80106a2a:	e9 9a f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106a2f <vector219>:
-.globl vector219
-vector219:
-  pushl $0
-80106a2f:	6a 00                	push   $0x0
-  pushl $219
-80106a31:	68 db 00 00 00       	push   $0xdb
-  jmp alltraps
-80106a36:	e9 8e f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106a3b <vector220>:
-.globl vector220
-vector220:
-  pushl $0
-80106a3b:	6a 00                	push   $0x0
-  pushl $220
-80106a3d:	68 dc 00 00 00       	push   $0xdc
-  jmp alltraps
-80106a42:	e9 82 f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106a47 <vector221>:
-.globl vector221
-vector221:
-  pushl $0
-80106a47:	6a 00                	push   $0x0
-  pushl $221
-80106a49:	68 dd 00 00 00       	push   $0xdd
-  jmp alltraps
-80106a4e:	e9 76 f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106a53 <vector222>:
-.globl vector222
-vector222:
-  pushl $0
-80106a53:	6a 00                	push   $0x0
-  pushl $222
-80106a55:	68 de 00 00 00       	push   $0xde
-  jmp alltraps
-80106a5a:	e9 6a f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106a5f <vector223>:
-.globl vector223
-vector223:
-  pushl $0
-80106a5f:	6a 00                	push   $0x0
-  pushl $223
-80106a61:	68 df 00 00 00       	push   $0xdf
-  jmp alltraps
-80106a66:	e9 5e f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106a6b <vector224>:
-.globl vector224
-vector224:
-  pushl $0
-80106a6b:	6a 00                	push   $0x0
-  pushl $224
-80106a6d:	68 e0 00 00 00       	push   $0xe0
-  jmp alltraps
-80106a72:	e9 52 f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106a77 <vector225>:
-.globl vector225
-vector225:
-  pushl $0
-80106a77:	6a 00                	push   $0x0
-  pushl $225
-80106a79:	68 e1 00 00 00       	push   $0xe1
-  jmp alltraps
-80106a7e:	e9 46 f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106a83 <vector226>:
-.globl vector226
-vector226:
-  pushl $0
-80106a83:	6a 00                	push   $0x0
-  pushl $226
-80106a85:	68 e2 00 00 00       	push   $0xe2
-  jmp alltraps
-80106a8a:	e9 3a f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106a8f <vector227>:
-.globl vector227
-vector227:
-  pushl $0
-80106a8f:	6a 00                	push   $0x0
-  pushl $227
-80106a91:	68 e3 00 00 00       	push   $0xe3
-  jmp alltraps
-80106a96:	e9 2e f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106a9b <vector228>:
-.globl vector228
-vector228:
-  pushl $0
-80106a9b:	6a 00                	push   $0x0
-  pushl $228
-80106a9d:	68 e4 00 00 00       	push   $0xe4
-  jmp alltraps
-80106aa2:	e9 22 f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106aa7 <vector229>:
-.globl vector229
-vector229:
-  pushl $0
-80106aa7:	6a 00                	push   $0x0
-  pushl $229
-80106aa9:	68 e5 00 00 00       	push   $0xe5
-  jmp alltraps
-80106aae:	e9 16 f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106ab3 <vector230>:
-.globl vector230
-vector230:
-  pushl $0
-80106ab3:	6a 00                	push   $0x0
-  pushl $230
-80106ab5:	68 e6 00 00 00       	push   $0xe6
-  jmp alltraps
-80106aba:	e9 0a f2 ff ff       	jmp    80105cc9 <alltraps>
-
-80106abf <vector231>:
-.globl vector231
-vector231:
-  pushl $0
-80106abf:	6a 00                	push   $0x0
-  pushl $231
-80106ac1:	68 e7 00 00 00       	push   $0xe7
-  jmp alltraps
-80106ac6:	e9 fe f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106acb <vector232>:
-.globl vector232
-vector232:
-  pushl $0
-80106acb:	6a 00                	push   $0x0
-  pushl $232
-80106acd:	68 e8 00 00 00       	push   $0xe8
-  jmp alltraps
-80106ad2:	e9 f2 f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106ad7 <vector233>:
-.globl vector233
-vector233:
-  pushl $0
-80106ad7:	6a 00                	push   $0x0
-  pushl $233
-80106ad9:	68 e9 00 00 00       	push   $0xe9
-  jmp alltraps
-80106ade:	e9 e6 f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106ae3 <vector234>:
-.globl vector234
-vector234:
-  pushl $0
-80106ae3:	6a 00                	push   $0x0
-  pushl $234
-80106ae5:	68 ea 00 00 00       	push   $0xea
-  jmp alltraps
-80106aea:	e9 da f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106aef <vector235>:
-.globl vector235
-vector235:
-  pushl $0
-80106aef:	6a 00                	push   $0x0
-  pushl $235
-80106af1:	68 eb 00 00 00       	push   $0xeb
-  jmp alltraps
-80106af6:	e9 ce f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106afb <vector236>:
-.globl vector236
-vector236:
-  pushl $0
-80106afb:	6a 00                	push   $0x0
-  pushl $236
-80106afd:	68 ec 00 00 00       	push   $0xec
-  jmp alltraps
-80106b02:	e9 c2 f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106b07 <vector237>:
-.globl vector237
-vector237:
-  pushl $0
-80106b07:	6a 00                	push   $0x0
-  pushl $237
-80106b09:	68 ed 00 00 00       	push   $0xed
-  jmp alltraps
-80106b0e:	e9 b6 f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106b13 <vector238>:
-.globl vector238
-vector238:
-  pushl $0
-80106b13:	6a 00                	push   $0x0
-  pushl $238
-80106b15:	68 ee 00 00 00       	push   $0xee
-  jmp alltraps
-80106b1a:	e9 aa f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106b1f <vector239>:
-.globl vector239
-vector239:
-  pushl $0
-80106b1f:	6a 00                	push   $0x0
-  pushl $239
-80106b21:	68 ef 00 00 00       	push   $0xef
-  jmp alltraps
-80106b26:	e9 9e f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106b2b <vector240>:
-.globl vector240
-vector240:
-  pushl $0
-80106b2b:	6a 00                	push   $0x0
-  pushl $240
-80106b2d:	68 f0 00 00 00       	push   $0xf0
-  jmp alltraps
-80106b32:	e9 92 f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106b37 <vector241>:
-.globl vector241
-vector241:
-  pushl $0
-80106b37:	6a 00                	push   $0x0
-  pushl $241
-80106b39:	68 f1 00 00 00       	push   $0xf1
-  jmp alltraps
-80106b3e:	e9 86 f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106b43 <vector242>:
-.globl vector242
-vector242:
-  pushl $0
-80106b43:	6a 00                	push   $0x0
-  pushl $242
-80106b45:	68 f2 00 00 00       	push   $0xf2
-  jmp alltraps
-80106b4a:	e9 7a f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106b4f <vector243>:
-.globl vector243
-vector243:
-  pushl $0
-80106b4f:	6a 00                	push   $0x0
-  pushl $243
-80106b51:	68 f3 00 00 00       	push   $0xf3
-  jmp alltraps
-80106b56:	e9 6e f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106b5b <vector244>:
-.globl vector244
-vector244:
-  pushl $0
-80106b5b:	6a 00                	push   $0x0
-  pushl $244
-80106b5d:	68 f4 00 00 00       	push   $0xf4
-  jmp alltraps
-80106b62:	e9 62 f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106b67 <vector245>:
-.globl vector245
-vector245:
-  pushl $0
-80106b67:	6a 00                	push   $0x0
-  pushl $245
-80106b69:	68 f5 00 00 00       	push   $0xf5
-  jmp alltraps
-80106b6e:	e9 56 f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106b73 <vector246>:
-.globl vector246
-vector246:
-  pushl $0
-80106b73:	6a 00                	push   $0x0
-  pushl $246
-80106b75:	68 f6 00 00 00       	push   $0xf6
-  jmp alltraps
-80106b7a:	e9 4a f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106b7f <vector247>:
-.globl vector247
-vector247:
-  pushl $0
-80106b7f:	6a 00                	push   $0x0
-  pushl $247
-80106b81:	68 f7 00 00 00       	push   $0xf7
-  jmp alltraps
-80106b86:	e9 3e f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106b8b <vector248>:
-.globl vector248
-vector248:
-  pushl $0
-80106b8b:	6a 00                	push   $0x0
-  pushl $248
-80106b8d:	68 f8 00 00 00       	push   $0xf8
-  jmp alltraps
-80106b92:	e9 32 f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106b97 <vector249>:
-.globl vector249
-vector249:
-  pushl $0
-80106b97:	6a 00                	push   $0x0
-  pushl $249
-80106b99:	68 f9 00 00 00       	push   $0xf9
-  jmp alltraps
-80106b9e:	e9 26 f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106ba3 <vector250>:
-.globl vector250
-vector250:
-  pushl $0
-80106ba3:	6a 00                	push   $0x0
-  pushl $250
-80106ba5:	68 fa 00 00 00       	push   $0xfa
-  jmp alltraps
-80106baa:	e9 1a f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106baf <vector251>:
-.globl vector251
-vector251:
-  pushl $0
-80106baf:	6a 00                	push   $0x0
-  pushl $251
-80106bb1:	68 fb 00 00 00       	push   $0xfb
-  jmp alltraps
-80106bb6:	e9 0e f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106bbb <vector252>:
-.globl vector252
-vector252:
-  pushl $0
-80106bbb:	6a 00                	push   $0x0
-  pushl $252
-80106bbd:	68 fc 00 00 00       	push   $0xfc
-  jmp alltraps
-80106bc2:	e9 02 f1 ff ff       	jmp    80105cc9 <alltraps>
-
-80106bc7 <vector253>:
-.globl vector253
-vector253:
-  pushl $0
-80106bc7:	6a 00                	push   $0x0
-  pushl $253
-80106bc9:	68 fd 00 00 00       	push   $0xfd
-  jmp alltraps
-80106bce:	e9 f6 f0 ff ff       	jmp    80105cc9 <alltraps>
-
-80106bd3 <vector254>:
-.globl vector254
-vector254:
-  pushl $0
-80106bd3:	6a 00                	push   $0x0
-  pushl $254
-80106bd5:	68 fe 00 00 00       	push   $0xfe
-  jmp alltraps
-80106bda:	e9 ea f0 ff ff       	jmp    80105cc9 <alltraps>
-
-80106bdf <vector255>:
-.globl vector255
-vector255:
-  pushl $0
-80106bdf:	6a 00                	push   $0x0
-  pushl $255
-80106be1:	68 ff 00 00 00       	push   $0xff
-  jmp alltraps
-80106be6:	e9 de f0 ff ff       	jmp    80105cc9 <alltraps>
-80106beb:	66 90                	xchg   %ax,%ax
-80106bed:	66 90                	xchg   %ax,%ax
-80106bef:	90                   	nop
-
-80106bf0 <walkpgdir>:
-// Return the address of the PTE in page table pgdir
-// that corresponds to virtual address va.  If alloc!=0,
-// create any required page table pages.
-static pte_t *
-walkpgdir(pde_t *pgdir, const void *va, int alloc)
-{
-80106bf0:	55                   	push   %ebp
-80106bf1:	89 e5                	mov    %esp,%ebp
-80106bf3:	57                   	push   %edi
-80106bf4:	56                   	push   %esi
-80106bf5:	89 d6                	mov    %edx,%esi
-  pde_t *pde;
-  pte_t *pgtab;
-
-  pde = &pgdir[PDX(va)];
-80106bf7:	c1 ea 16             	shr    $0x16,%edx
-{
-80106bfa:	53                   	push   %ebx
-  pde = &pgdir[PDX(va)];
-80106bfb:	8d 3c 90             	lea    (%eax,%edx,4),%edi
-{
-80106bfe:	83 ec 0c             	sub    $0xc,%esp
-  if(*pde & PTE_P){
-80106c01:	8b 1f                	mov    (%edi),%ebx
-80106c03:	f6 c3 01             	test   $0x1,%bl
-80106c06:	74 28                	je     80106c30 <walkpgdir+0x40>
-    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106c08:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-80106c0e:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
-    // The permissions here are overly generous, but they can
-    // be further restricted by the permissions in the page table
-    // entries, if necessary.
-    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-  }
-  return &pgtab[PTX(va)];
-80106c14:	89 f0                	mov    %esi,%eax
-}
-80106c16:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return &pgtab[PTX(va)];
-80106c19:	c1 e8 0a             	shr    $0xa,%eax
-80106c1c:	25 fc 0f 00 00       	and    $0xffc,%eax
-80106c21:	01 d8                	add    %ebx,%eax
-}
-80106c23:	5b                   	pop    %ebx
-80106c24:	5e                   	pop    %esi
-80106c25:	5f                   	pop    %edi
-80106c26:	5d                   	pop    %ebp
-80106c27:	c3                   	ret    
-80106c28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c2f:	90                   	nop
-    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-80106c30:	85 c9                	test   %ecx,%ecx
-80106c32:	74 2c                	je     80106c60 <walkpgdir+0x70>
-80106c34:	e8 f7 b9 ff ff       	call   80102630 <kalloc>
-80106c39:	89 c3                	mov    %eax,%ebx
-80106c3b:	85 c0                	test   %eax,%eax
-80106c3d:	74 21                	je     80106c60 <walkpgdir+0x70>
-    memset(pgtab, 0, PGSIZE);
-80106c3f:	83 ec 04             	sub    $0x4,%esp
-80106c42:	68 00 10 00 00       	push   $0x1000
-80106c47:	6a 00                	push   $0x0
-80106c49:	50                   	push   %eax
-80106c4a:	e8 81 dd ff ff       	call   801049d0 <memset>
-    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-80106c4f:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106c55:	83 c4 10             	add    $0x10,%esp
-80106c58:	83 c8 07             	or     $0x7,%eax
-80106c5b:	89 07                	mov    %eax,(%edi)
-80106c5d:	eb b5                	jmp    80106c14 <walkpgdir+0x24>
-80106c5f:	90                   	nop
-}
-80106c60:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return 0;
-80106c63:	31 c0                	xor    %eax,%eax
-}
-80106c65:	5b                   	pop    %ebx
-80106c66:	5e                   	pop    %esi
-80106c67:	5f                   	pop    %edi
-80106c68:	5d                   	pop    %ebp
-80106c69:	c3                   	ret    
-80106c6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106c70 <mappages>:
-// Create PTEs for virtual addresses starting at va that refer to
-// physical addresses starting at pa. va and size might not
-// be page-aligned.
-static int
-mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
-{
-80106c70:	55                   	push   %ebp
-80106c71:	89 e5                	mov    %esp,%ebp
-80106c73:	57                   	push   %edi
-80106c74:	89 c7                	mov    %eax,%edi
-  char *a, *last;
-  pte_t *pte;
-
-  a = (char*)PGROUNDDOWN((uint)va);
-  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-80106c76:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
-{
-80106c7a:	56                   	push   %esi
-  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-80106c7b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-  a = (char*)PGROUNDDOWN((uint)va);
-80106c80:	89 d6                	mov    %edx,%esi
-{
-80106c82:	53                   	push   %ebx
-  a = (char*)PGROUNDDOWN((uint)va);
-80106c83:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
-{
-80106c89:	83 ec 1c             	sub    $0x1c,%esp
-  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-80106c8c:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106c8f:	8b 45 08             	mov    0x8(%ebp),%eax
-80106c92:	29 f0                	sub    %esi,%eax
-80106c94:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106c97:	eb 1f                	jmp    80106cb8 <mappages+0x48>
-80106c99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  for(;;){
-    if((pte = walkpgdir(pgdir, a, 1)) == 0)
-      return -1;
-    if(*pte & PTE_P)
-80106ca0:	f6 00 01             	testb  $0x1,(%eax)
-80106ca3:	75 45                	jne    80106cea <mappages+0x7a>
-      panic("remap");
-    *pte = pa | perm | PTE_P;
-80106ca5:	0b 5d 0c             	or     0xc(%ebp),%ebx
-80106ca8:	83 cb 01             	or     $0x1,%ebx
-80106cab:	89 18                	mov    %ebx,(%eax)
-    if(a == last)
-80106cad:	3b 75 e0             	cmp    -0x20(%ebp),%esi
-80106cb0:	74 2e                	je     80106ce0 <mappages+0x70>
-      break;
-    a += PGSIZE;
-80106cb2:	81 c6 00 10 00 00    	add    $0x1000,%esi
-  for(;;){
-80106cb8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    if((pte = walkpgdir(pgdir, a, 1)) == 0)
-80106cbb:	b9 01 00 00 00       	mov    $0x1,%ecx
-80106cc0:	89 f2                	mov    %esi,%edx
-80106cc2:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
-80106cc5:	89 f8                	mov    %edi,%eax
-80106cc7:	e8 24 ff ff ff       	call   80106bf0 <walkpgdir>
-80106ccc:	85 c0                	test   %eax,%eax
-80106cce:	75 d0                	jne    80106ca0 <mappages+0x30>
-    pa += PGSIZE;
-  }
-  return 0;
-}
-80106cd0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return -1;
-80106cd3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80106cd8:	5b                   	pop    %ebx
-80106cd9:	5e                   	pop    %esi
-80106cda:	5f                   	pop    %edi
-80106cdb:	5d                   	pop    %ebp
-80106cdc:	c3                   	ret    
-80106cdd:	8d 76 00             	lea    0x0(%esi),%esi
-80106ce0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
-80106ce3:	31 c0                	xor    %eax,%eax
-}
-80106ce5:	5b                   	pop    %ebx
-80106ce6:	5e                   	pop    %esi
-80106ce7:	5f                   	pop    %edi
-80106ce8:	5d                   	pop    %ebp
-80106ce9:	c3                   	ret    
-      panic("remap");
-80106cea:	83 ec 0c             	sub    $0xc,%esp
-80106ced:	68 9c 7e 10 80       	push   $0x80107e9c
-80106cf2:	e8 99 96 ff ff       	call   80100390 <panic>
-80106cf7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106cfe:	66 90                	xchg   %ax,%ax
-
-80106d00 <deallocuvm.part.0>:
-// Deallocate user pages to bring the process size from oldsz to
-// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
-// need to be less than oldsz.  oldsz can be larger than the actual
-// process size.  Returns the new process size.
-int
-deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106d00:	55                   	push   %ebp
-80106d01:	89 e5                	mov    %esp,%ebp
-80106d03:	57                   	push   %edi
-80106d04:	56                   	push   %esi
-80106d05:	89 c6                	mov    %eax,%esi
-80106d07:	53                   	push   %ebx
-80106d08:	89 d3                	mov    %edx,%ebx
-  uint a, pa;
-
-  if(newsz >= oldsz)
-    return oldsz;
-
-  a = PGROUNDUP(newsz);
-80106d0a:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
-80106d10:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
-deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106d16:	83 ec 1c             	sub    $0x1c,%esp
-80106d19:	89 4d e0             	mov    %ecx,-0x20(%ebp)
-  for(; a  < oldsz; a += PGSIZE){
-80106d1c:	39 da                	cmp    %ebx,%edx
-80106d1e:	73 5b                	jae    80106d7b <deallocuvm.part.0+0x7b>
-80106d20:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
-80106d23:	89 d7                	mov    %edx,%edi
-80106d25:	eb 14                	jmp    80106d3b <deallocuvm.part.0+0x3b>
-80106d27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106d2e:	66 90                	xchg   %ax,%ax
-80106d30:	81 c7 00 10 00 00    	add    $0x1000,%edi
-80106d36:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-80106d39:	76 40                	jbe    80106d7b <deallocuvm.part.0+0x7b>
-    pte = walkpgdir(pgdir, (char*)a, 0);
-80106d3b:	31 c9                	xor    %ecx,%ecx
-80106d3d:	89 fa                	mov    %edi,%edx
-80106d3f:	89 f0                	mov    %esi,%eax
-80106d41:	e8 aa fe ff ff       	call   80106bf0 <walkpgdir>
-80106d46:	89 c3                	mov    %eax,%ebx
-    if(!pte)
-80106d48:	85 c0                	test   %eax,%eax
-80106d4a:	74 44                	je     80106d90 <deallocuvm.part.0+0x90>
-      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-    else if((*pte & PTE_P) != 0){
-80106d4c:	8b 00                	mov    (%eax),%eax
-80106d4e:	a8 01                	test   $0x1,%al
-80106d50:	74 de                	je     80106d30 <deallocuvm.part.0+0x30>
-      pa = PTE_ADDR(*pte);
-      if(pa == 0)
-80106d52:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106d57:	74 47                	je     80106da0 <deallocuvm.part.0+0xa0>
-        panic("kfree");
-      char *v = P2V(pa);
-      kfree(v);
-80106d59:	83 ec 0c             	sub    $0xc,%esp
-      char *v = P2V(pa);
-80106d5c:	05 00 00 00 80       	add    $0x80000000,%eax
-80106d61:	81 c7 00 10 00 00    	add    $0x1000,%edi
-      kfree(v);
-80106d67:	50                   	push   %eax
-80106d68:	e8 03 b7 ff ff       	call   80102470 <kfree>
-      *pte = 0;
-80106d6d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-80106d73:	83 c4 10             	add    $0x10,%esp
-  for(; a  < oldsz; a += PGSIZE){
-80106d76:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-80106d79:	77 c0                	ja     80106d3b <deallocuvm.part.0+0x3b>
-    }
-  }
-  return newsz;
-}
-80106d7b:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106d7e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d81:	5b                   	pop    %ebx
-80106d82:	5e                   	pop    %esi
-80106d83:	5f                   	pop    %edi
-80106d84:	5d                   	pop    %ebp
-80106d85:	c3                   	ret    
-80106d86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106d8d:	8d 76 00             	lea    0x0(%esi),%esi
-      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-80106d90:	89 fa                	mov    %edi,%edx
-80106d92:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
-80106d98:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
-80106d9e:	eb 96                	jmp    80106d36 <deallocuvm.part.0+0x36>
-        panic("kfree");
-80106da0:	83 ec 0c             	sub    $0xc,%esp
-80106da3:	68 a6 77 10 80       	push   $0x801077a6
-80106da8:	e8 e3 95 ff ff       	call   80100390 <panic>
-80106dad:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106db0 <seginit>:
-{
-80106db0:	f3 0f 1e fb          	endbr32 
-80106db4:	55                   	push   %ebp
-80106db5:	89 e5                	mov    %esp,%ebp
-80106db7:	83 ec 18             	sub    $0x18,%esp
-  c = &cpus[cpuid()];
-80106dba:	e8 81 cb ff ff       	call   80103940 <cpuid>
-  pd[0] = size-1;
-80106dbf:	ba 2f 00 00 00       	mov    $0x2f,%edx
-80106dc4:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-80106dca:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
-  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-80106dce:	c7 80 f8 27 11 80 ff 	movl   $0xffff,-0x7feed808(%eax)
-80106dd5:	ff 00 00 
-80106dd8:	c7 80 fc 27 11 80 00 	movl   $0xcf9a00,-0x7feed804(%eax)
-80106ddf:	9a cf 00 
-  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-80106de2:	c7 80 00 28 11 80 ff 	movl   $0xffff,-0x7feed800(%eax)
-80106de9:	ff 00 00 
-80106dec:	c7 80 04 28 11 80 00 	movl   $0xcf9200,-0x7feed7fc(%eax)
-80106df3:	92 cf 00 
-  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-80106df6:	c7 80 08 28 11 80 ff 	movl   $0xffff,-0x7feed7f8(%eax)
-80106dfd:	ff 00 00 
-80106e00:	c7 80 0c 28 11 80 00 	movl   $0xcffa00,-0x7feed7f4(%eax)
-80106e07:	fa cf 00 
-  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-80106e0a:	c7 80 10 28 11 80 ff 	movl   $0xffff,-0x7feed7f0(%eax)
-80106e11:	ff 00 00 
-80106e14:	c7 80 14 28 11 80 00 	movl   $0xcff200,-0x7feed7ec(%eax)
-80106e1b:	f2 cf 00 
-  lgdt(c->gdt, sizeof(c->gdt));
-80106e1e:	05 f0 27 11 80       	add    $0x801127f0,%eax
-  pd[1] = (uint)p;
-80106e23:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
-  pd[2] = (uint)p >> 16;
-80106e27:	c1 e8 10             	shr    $0x10,%eax
-80106e2a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
-  asm volatile("lgdt (%0)" : : "r" (pd));
-80106e2e:	8d 45 f2             	lea    -0xe(%ebp),%eax
-80106e31:	0f 01 10             	lgdtl  (%eax)
-}
-80106e34:	c9                   	leave  
-80106e35:	c3                   	ret    
-80106e36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106e3d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106e40 <switchkvm>:
-{
-80106e40:	f3 0f 1e fb          	endbr32 
-  lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106e44:	a1 a4 55 11 80       	mov    0x801155a4,%eax
-80106e49:	05 00 00 00 80       	add    $0x80000000,%eax
-}
-
-static inline void
-lcr3(uint val)
-{
-  asm volatile("movl %0,%%cr3" : : "r" (val));
-80106e4e:	0f 22 d8             	mov    %eax,%cr3
-}
-80106e51:	c3                   	ret    
-80106e52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106e59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106e60 <switchuvm>:
-{
-80106e60:	f3 0f 1e fb          	endbr32 
-80106e64:	55                   	push   %ebp
-80106e65:	89 e5                	mov    %esp,%ebp
-80106e67:	57                   	push   %edi
-80106e68:	56                   	push   %esi
-80106e69:	53                   	push   %ebx
-80106e6a:	83 ec 1c             	sub    $0x1c,%esp
-80106e6d:	8b 75 08             	mov    0x8(%ebp),%esi
-  if(p == 0)
-80106e70:	85 f6                	test   %esi,%esi
-80106e72:	0f 84 cb 00 00 00    	je     80106f43 <switchuvm+0xe3>
-  if(p->kstack == 0)
-80106e78:	8b 46 08             	mov    0x8(%esi),%eax
-80106e7b:	85 c0                	test   %eax,%eax
-80106e7d:	0f 84 da 00 00 00    	je     80106f5d <switchuvm+0xfd>
-  if(p->pgdir == 0)
-80106e83:	8b 46 04             	mov    0x4(%esi),%eax
-80106e86:	85 c0                	test   %eax,%eax
-80106e88:	0f 84 c2 00 00 00    	je     80106f50 <switchuvm+0xf0>
-  pushcli();
-80106e8e:	e8 2d d9 ff ff       	call   801047c0 <pushcli>
-  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106e93:	e8 38 ca ff ff       	call   801038d0 <mycpu>
-80106e98:	89 c3                	mov    %eax,%ebx
-80106e9a:	e8 31 ca ff ff       	call   801038d0 <mycpu>
-80106e9f:	89 c7                	mov    %eax,%edi
-80106ea1:	e8 2a ca ff ff       	call   801038d0 <mycpu>
-80106ea6:	83 c7 08             	add    $0x8,%edi
-80106ea9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106eac:	e8 1f ca ff ff       	call   801038d0 <mycpu>
-80106eb1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106eb4:	ba 67 00 00 00       	mov    $0x67,%edx
-80106eb9:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-80106ec0:	83 c0 08             	add    $0x8,%eax
-80106ec3:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
-  mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106eca:	bf ff ff ff ff       	mov    $0xffffffff,%edi
-  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106ecf:	83 c1 08             	add    $0x8,%ecx
-80106ed2:	c1 e8 18             	shr    $0x18,%eax
-80106ed5:	c1 e9 10             	shr    $0x10,%ecx
-80106ed8:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
-80106ede:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-80106ee4:	b9 99 40 00 00       	mov    $0x4099,%ecx
-80106ee9:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
-  mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106ef0:	bb 10 00 00 00       	mov    $0x10,%ebx
-  mycpu()->gdt[SEG_TSS].s = 0;
-80106ef5:	e8 d6 c9 ff ff       	call   801038d0 <mycpu>
-80106efa:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
-  mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106f01:	e8 ca c9 ff ff       	call   801038d0 <mycpu>
-80106f06:	66 89 58 10          	mov    %bx,0x10(%eax)
-  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106f0a:	8b 5e 08             	mov    0x8(%esi),%ebx
-80106f0d:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106f13:	e8 b8 c9 ff ff       	call   801038d0 <mycpu>
-80106f18:	89 58 0c             	mov    %ebx,0xc(%eax)
-  mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106f1b:	e8 b0 c9 ff ff       	call   801038d0 <mycpu>
-80106f20:	66 89 78 6e          	mov    %di,0x6e(%eax)
-  asm volatile("ltr %0" : : "r" (sel));
-80106f24:	b8 28 00 00 00       	mov    $0x28,%eax
-80106f29:	0f 00 d8             	ltr    %ax
-  lcr3(V2P(p->pgdir));  // switch to process's address space
-80106f2c:	8b 46 04             	mov    0x4(%esi),%eax
-80106f2f:	05 00 00 00 80       	add    $0x80000000,%eax
-  asm volatile("movl %0,%%cr3" : : "r" (val));
-80106f34:	0f 22 d8             	mov    %eax,%cr3
-}
-80106f37:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106f3a:	5b                   	pop    %ebx
-80106f3b:	5e                   	pop    %esi
-80106f3c:	5f                   	pop    %edi
-80106f3d:	5d                   	pop    %ebp
-  popcli();
-80106f3e:	e9 cd d8 ff ff       	jmp    80104810 <popcli>
-    panic("switchuvm: no process");
-80106f43:	83 ec 0c             	sub    $0xc,%esp
-80106f46:	68 a2 7e 10 80       	push   $0x80107ea2
-80106f4b:	e8 40 94 ff ff       	call   80100390 <panic>
-    panic("switchuvm: no pgdir");
-80106f50:	83 ec 0c             	sub    $0xc,%esp
-80106f53:	68 cd 7e 10 80       	push   $0x80107ecd
-80106f58:	e8 33 94 ff ff       	call   80100390 <panic>
-    panic("switchuvm: no kstack");
-80106f5d:	83 ec 0c             	sub    $0xc,%esp
-80106f60:	68 b8 7e 10 80       	push   $0x80107eb8
-80106f65:	e8 26 94 ff ff       	call   80100390 <panic>
-80106f6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106f70 <inituvm>:
-{
-80106f70:	f3 0f 1e fb          	endbr32 
-80106f74:	55                   	push   %ebp
-80106f75:	89 e5                	mov    %esp,%ebp
-80106f77:	57                   	push   %edi
-80106f78:	56                   	push   %esi
-80106f79:	53                   	push   %ebx
-80106f7a:	83 ec 1c             	sub    $0x1c,%esp
-80106f7d:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106f80:	8b 75 10             	mov    0x10(%ebp),%esi
-80106f83:	8b 7d 08             	mov    0x8(%ebp),%edi
-80106f86:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  if(sz >= PGSIZE)
-80106f89:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-80106f8f:	77 4b                	ja     80106fdc <inituvm+0x6c>
-  mem = kalloc();
-80106f91:	e8 9a b6 ff ff       	call   80102630 <kalloc>
-  memset(mem, 0, PGSIZE);
-80106f96:	83 ec 04             	sub    $0x4,%esp
-80106f99:	68 00 10 00 00       	push   $0x1000
-  mem = kalloc();
-80106f9e:	89 c3                	mov    %eax,%ebx
-  memset(mem, 0, PGSIZE);
-80106fa0:	6a 00                	push   $0x0
-80106fa2:	50                   	push   %eax
-80106fa3:	e8 28 da ff ff       	call   801049d0 <memset>
-  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-80106fa8:	58                   	pop    %eax
-80106fa9:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106faf:	5a                   	pop    %edx
-80106fb0:	6a 06                	push   $0x6
-80106fb2:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106fb7:	31 d2                	xor    %edx,%edx
-80106fb9:	50                   	push   %eax
-80106fba:	89 f8                	mov    %edi,%eax
-80106fbc:	e8 af fc ff ff       	call   80106c70 <mappages>
-  memmove(mem, init, sz);
-80106fc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106fc4:	89 75 10             	mov    %esi,0x10(%ebp)
-80106fc7:	83 c4 10             	add    $0x10,%esp
-80106fca:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80106fcd:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-80106fd0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106fd3:	5b                   	pop    %ebx
-80106fd4:	5e                   	pop    %esi
-80106fd5:	5f                   	pop    %edi
-80106fd6:	5d                   	pop    %ebp
-  memmove(mem, init, sz);
-80106fd7:	e9 94 da ff ff       	jmp    80104a70 <memmove>
-    panic("inituvm: more than a page");
-80106fdc:	83 ec 0c             	sub    $0xc,%esp
-80106fdf:	68 e1 7e 10 80       	push   $0x80107ee1
-80106fe4:	e8 a7 93 ff ff       	call   80100390 <panic>
-80106fe9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106ff0 <loaduvm>:
-{
-80106ff0:	f3 0f 1e fb          	endbr32 
-80106ff4:	55                   	push   %ebp
-80106ff5:	89 e5                	mov    %esp,%ebp
-80106ff7:	57                   	push   %edi
-80106ff8:	56                   	push   %esi
-80106ff9:	53                   	push   %ebx
-80106ffa:	83 ec 1c             	sub    $0x1c,%esp
-80106ffd:	8b 45 0c             	mov    0xc(%ebp),%eax
-80107000:	8b 75 18             	mov    0x18(%ebp),%esi
-  if((uint) addr % PGSIZE != 0)
-80107003:	a9 ff 0f 00 00       	test   $0xfff,%eax
-80107008:	0f 85 99 00 00 00    	jne    801070a7 <loaduvm+0xb7>
-  for(i = 0; i < sz; i += PGSIZE){
-8010700e:	01 f0                	add    %esi,%eax
-80107010:	89 f3                	mov    %esi,%ebx
-80107012:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(readi(ip, P2V(pa), offset+i, n) != n)
-80107015:	8b 45 14             	mov    0x14(%ebp),%eax
-80107018:	01 f0                	add    %esi,%eax
-8010701a:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  for(i = 0; i < sz; i += PGSIZE){
-8010701d:	85 f6                	test   %esi,%esi
-8010701f:	75 15                	jne    80107036 <loaduvm+0x46>
-80107021:	eb 6d                	jmp    80107090 <loaduvm+0xa0>
-80107023:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80107027:	90                   	nop
-80107028:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
-8010702e:	89 f0                	mov    %esi,%eax
-80107030:	29 d8                	sub    %ebx,%eax
-80107032:	39 c6                	cmp    %eax,%esi
-80107034:	76 5a                	jbe    80107090 <loaduvm+0xa0>
-    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-80107036:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80107039:	8b 45 08             	mov    0x8(%ebp),%eax
-8010703c:	31 c9                	xor    %ecx,%ecx
-8010703e:	29 da                	sub    %ebx,%edx
-80107040:	e8 ab fb ff ff       	call   80106bf0 <walkpgdir>
-80107045:	85 c0                	test   %eax,%eax
-80107047:	74 51                	je     8010709a <loaduvm+0xaa>
-    pa = PTE_ADDR(*pte);
-80107049:	8b 00                	mov    (%eax),%eax
-    if(readi(ip, P2V(pa), offset+i, n) != n)
-8010704b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-    if(sz - i < PGSIZE)
-8010704e:	bf 00 10 00 00       	mov    $0x1000,%edi
-    pa = PTE_ADDR(*pte);
-80107053:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-    if(sz - i < PGSIZE)
-80107058:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
-8010705e:	0f 46 fb             	cmovbe %ebx,%edi
-    if(readi(ip, P2V(pa), offset+i, n) != n)
-80107061:	29 d9                	sub    %ebx,%ecx
-80107063:	05 00 00 00 80       	add    $0x80000000,%eax
-80107068:	57                   	push   %edi
-80107069:	51                   	push   %ecx
-8010706a:	50                   	push   %eax
-8010706b:	ff 75 10             	pushl  0x10(%ebp)
-8010706e:	e8 ed a9 ff ff       	call   80101a60 <readi>
-80107073:	83 c4 10             	add    $0x10,%esp
-80107076:	39 f8                	cmp    %edi,%eax
-80107078:	74 ae                	je     80107028 <loaduvm+0x38>
-}
-8010707a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return -1;
-8010707d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80107082:	5b                   	pop    %ebx
-80107083:	5e                   	pop    %esi
-80107084:	5f                   	pop    %edi
-80107085:	5d                   	pop    %ebp
-80107086:	c3                   	ret    
-80107087:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010708e:	66 90                	xchg   %ax,%ax
-80107090:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
-80107093:	31 c0                	xor    %eax,%eax
-}
-80107095:	5b                   	pop    %ebx
-80107096:	5e                   	pop    %esi
-80107097:	5f                   	pop    %edi
-80107098:	5d                   	pop    %ebp
-80107099:	c3                   	ret    
-      panic("loaduvm: address should exist");
-8010709a:	83 ec 0c             	sub    $0xc,%esp
-8010709d:	68 fb 7e 10 80       	push   $0x80107efb
-801070a2:	e8 e9 92 ff ff       	call   80100390 <panic>
-    panic("loaduvm: addr must be page aligned");
-801070a7:	83 ec 0c             	sub    $0xc,%esp
-801070aa:	68 9c 7f 10 80       	push   $0x80107f9c
-801070af:	e8 dc 92 ff ff       	call   80100390 <panic>
-801070b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801070bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801070bf:	90                   	nop
-
-801070c0 <allocuvm>:
-{
-801070c0:	f3 0f 1e fb          	endbr32 
-801070c4:	55                   	push   %ebp
-801070c5:	89 e5                	mov    %esp,%ebp
-801070c7:	57                   	push   %edi
-801070c8:	56                   	push   %esi
-801070c9:	53                   	push   %ebx
-801070ca:	83 ec 1c             	sub    $0x1c,%esp
-  if(newsz >= KERNBASE)
-801070cd:	8b 45 10             	mov    0x10(%ebp),%eax
-{
-801070d0:	8b 7d 08             	mov    0x8(%ebp),%edi
-  if(newsz >= KERNBASE)
-801070d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-801070d6:	85 c0                	test   %eax,%eax
-801070d8:	0f 88 b2 00 00 00    	js     80107190 <allocuvm+0xd0>
-  if(newsz < oldsz)
-801070de:	3b 45 0c             	cmp    0xc(%ebp),%eax
-    return oldsz;
-801070e1:	8b 45 0c             	mov    0xc(%ebp),%eax
-  if(newsz < oldsz)
-801070e4:	0f 82 96 00 00 00    	jb     80107180 <allocuvm+0xc0>
-  a = PGROUNDUP(oldsz);
-801070ea:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
-801070f0:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
-  for(; a < newsz; a += PGSIZE){
-801070f6:	39 75 10             	cmp    %esi,0x10(%ebp)
-801070f9:	77 40                	ja     8010713b <allocuvm+0x7b>
-801070fb:	e9 83 00 00 00       	jmp    80107183 <allocuvm+0xc3>
-    memset(mem, 0, PGSIZE);
-80107100:	83 ec 04             	sub    $0x4,%esp
-80107103:	68 00 10 00 00       	push   $0x1000
-80107108:	6a 00                	push   $0x0
-8010710a:	50                   	push   %eax
-8010710b:	e8 c0 d8 ff ff       	call   801049d0 <memset>
-    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80107110:	58                   	pop    %eax
-80107111:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80107117:	5a                   	pop    %edx
-80107118:	6a 06                	push   $0x6
-8010711a:	b9 00 10 00 00       	mov    $0x1000,%ecx
-8010711f:	89 f2                	mov    %esi,%edx
-80107121:	50                   	push   %eax
-80107122:	89 f8                	mov    %edi,%eax
-80107124:	e8 47 fb ff ff       	call   80106c70 <mappages>
-80107129:	83 c4 10             	add    $0x10,%esp
-8010712c:	85 c0                	test   %eax,%eax
-8010712e:	78 78                	js     801071a8 <allocuvm+0xe8>
-  for(; a < newsz; a += PGSIZE){
-80107130:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80107136:	39 75 10             	cmp    %esi,0x10(%ebp)
-80107139:	76 48                	jbe    80107183 <allocuvm+0xc3>
-    mem = kalloc();
-8010713b:	e8 f0 b4 ff ff       	call   80102630 <kalloc>
-80107140:	89 c3                	mov    %eax,%ebx
-    if(mem == 0){
-80107142:	85 c0                	test   %eax,%eax
-80107144:	75 ba                	jne    80107100 <allocuvm+0x40>
-      cprintf("allocuvm out of memory\n");
-80107146:	83 ec 0c             	sub    $0xc,%esp
-80107149:	68 19 7f 10 80       	push   $0x80107f19
-8010714e:	e8 5d 95 ff ff       	call   801006b0 <cprintf>
-  if(newsz >= oldsz)
-80107153:	8b 45 0c             	mov    0xc(%ebp),%eax
-80107156:	83 c4 10             	add    $0x10,%esp
-80107159:	39 45 10             	cmp    %eax,0x10(%ebp)
-8010715c:	74 32                	je     80107190 <allocuvm+0xd0>
-8010715e:	8b 55 10             	mov    0x10(%ebp),%edx
-80107161:	89 c1                	mov    %eax,%ecx
-80107163:	89 f8                	mov    %edi,%eax
-80107165:	e8 96 fb ff ff       	call   80106d00 <deallocuvm.part.0>
-      return 0;
-8010716a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-}
-80107171:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80107174:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80107177:	5b                   	pop    %ebx
-80107178:	5e                   	pop    %esi
-80107179:	5f                   	pop    %edi
-8010717a:	5d                   	pop    %ebp
-8010717b:	c3                   	ret    
-8010717c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    return oldsz;
-80107180:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-}
-80107183:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80107186:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80107189:	5b                   	pop    %ebx
-8010718a:	5e                   	pop    %esi
-8010718b:	5f                   	pop    %edi
-8010718c:	5d                   	pop    %ebp
-8010718d:	c3                   	ret    
-8010718e:	66 90                	xchg   %ax,%ax
-    return 0;
-80107190:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-}
-80107197:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-8010719a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010719d:	5b                   	pop    %ebx
-8010719e:	5e                   	pop    %esi
-8010719f:	5f                   	pop    %edi
-801071a0:	5d                   	pop    %ebp
-801071a1:	c3                   	ret    
-801071a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      cprintf("allocuvm out of memory (2)\n");
-801071a8:	83 ec 0c             	sub    $0xc,%esp
-801071ab:	68 31 7f 10 80       	push   $0x80107f31
-801071b0:	e8 fb 94 ff ff       	call   801006b0 <cprintf>
-  if(newsz >= oldsz)
-801071b5:	8b 45 0c             	mov    0xc(%ebp),%eax
-801071b8:	83 c4 10             	add    $0x10,%esp
-801071bb:	39 45 10             	cmp    %eax,0x10(%ebp)
-801071be:	74 0c                	je     801071cc <allocuvm+0x10c>
-801071c0:	8b 55 10             	mov    0x10(%ebp),%edx
-801071c3:	89 c1                	mov    %eax,%ecx
-801071c5:	89 f8                	mov    %edi,%eax
-801071c7:	e8 34 fb ff ff       	call   80106d00 <deallocuvm.part.0>
-      kfree(mem);
-801071cc:	83 ec 0c             	sub    $0xc,%esp
-801071cf:	53                   	push   %ebx
-801071d0:	e8 9b b2 ff ff       	call   80102470 <kfree>
-      return 0;
-801071d5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-801071dc:	83 c4 10             	add    $0x10,%esp
-}
-801071df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801071e2:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801071e5:	5b                   	pop    %ebx
-801071e6:	5e                   	pop    %esi
-801071e7:	5f                   	pop    %edi
-801071e8:	5d                   	pop    %ebp
-801071e9:	c3                   	ret    
-801071ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801071f0 <deallocuvm>:
-{
-801071f0:	f3 0f 1e fb          	endbr32 
-801071f4:	55                   	push   %ebp
-801071f5:	89 e5                	mov    %esp,%ebp
-801071f7:	8b 55 0c             	mov    0xc(%ebp),%edx
-801071fa:	8b 4d 10             	mov    0x10(%ebp),%ecx
-801071fd:	8b 45 08             	mov    0x8(%ebp),%eax
-  if(newsz >= oldsz)
-80107200:	39 d1                	cmp    %edx,%ecx
-80107202:	73 0c                	jae    80107210 <deallocuvm+0x20>
-}
-80107204:	5d                   	pop    %ebp
-80107205:	e9 f6 fa ff ff       	jmp    80106d00 <deallocuvm.part.0>
-8010720a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80107210:	89 d0                	mov    %edx,%eax
-80107212:	5d                   	pop    %ebp
-80107213:	c3                   	ret    
-80107214:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010721b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010721f:	90                   	nop
-
-80107220 <freevm>:
-
-// Free a page table and all the physical memory pages
-// in the user part.
-void
-freevm(pde_t *pgdir)
-{
-80107220:	f3 0f 1e fb          	endbr32 
-80107224:	55                   	push   %ebp
-80107225:	89 e5                	mov    %esp,%ebp
-80107227:	57                   	push   %edi
-80107228:	56                   	push   %esi
-80107229:	53                   	push   %ebx
-8010722a:	83 ec 0c             	sub    $0xc,%esp
-8010722d:	8b 75 08             	mov    0x8(%ebp),%esi
-  uint i;
-
-  if(pgdir == 0)
-80107230:	85 f6                	test   %esi,%esi
-80107232:	74 55                	je     80107289 <freevm+0x69>
-  if(newsz >= oldsz)
-80107234:	31 c9                	xor    %ecx,%ecx
-80107236:	ba 00 00 00 80       	mov    $0x80000000,%edx
-8010723b:	89 f0                	mov    %esi,%eax
-8010723d:	89 f3                	mov    %esi,%ebx
-8010723f:	e8 bc fa ff ff       	call   80106d00 <deallocuvm.part.0>
-    panic("freevm: no pgdir");
-  deallocuvm(pgdir, KERNBASE, 0);
-  for(i = 0; i < NPDENTRIES; i++){
-80107244:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
-8010724a:	eb 0b                	jmp    80107257 <freevm+0x37>
-8010724c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80107250:	83 c3 04             	add    $0x4,%ebx
-80107253:	39 df                	cmp    %ebx,%edi
-80107255:	74 23                	je     8010727a <freevm+0x5a>
-    if(pgdir[i] & PTE_P){
-80107257:	8b 03                	mov    (%ebx),%eax
-80107259:	a8 01                	test   $0x1,%al
-8010725b:	74 f3                	je     80107250 <freevm+0x30>
-      char * v = P2V(PTE_ADDR(pgdir[i]));
-8010725d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-      kfree(v);
-80107262:	83 ec 0c             	sub    $0xc,%esp
-80107265:	83 c3 04             	add    $0x4,%ebx
-      char * v = P2V(PTE_ADDR(pgdir[i]));
-80107268:	05 00 00 00 80       	add    $0x80000000,%eax
-      kfree(v);
-8010726d:	50                   	push   %eax
-8010726e:	e8 fd b1 ff ff       	call   80102470 <kfree>
-80107273:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; i < NPDENTRIES; i++){
-80107276:	39 df                	cmp    %ebx,%edi
-80107278:	75 dd                	jne    80107257 <freevm+0x37>
-    }
-  }
-  kfree((char*)pgdir);
-8010727a:	89 75 08             	mov    %esi,0x8(%ebp)
-}
-8010727d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80107280:	5b                   	pop    %ebx
-80107281:	5e                   	pop    %esi
-80107282:	5f                   	pop    %edi
-80107283:	5d                   	pop    %ebp
-  kfree((char*)pgdir);
-80107284:	e9 e7 b1 ff ff       	jmp    80102470 <kfree>
-    panic("freevm: no pgdir");
-80107289:	83 ec 0c             	sub    $0xc,%esp
-8010728c:	68 4d 7f 10 80       	push   $0x80107f4d
-80107291:	e8 fa 90 ff ff       	call   80100390 <panic>
-80107296:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010729d:	8d 76 00             	lea    0x0(%esi),%esi
-
-801072a0 <setupkvm>:
-{
-801072a0:	f3 0f 1e fb          	endbr32 
-801072a4:	55                   	push   %ebp
-801072a5:	89 e5                	mov    %esp,%ebp
-801072a7:	56                   	push   %esi
-801072a8:	53                   	push   %ebx
-  if((pgdir = (pde_t*)kalloc()) == 0)
-801072a9:	e8 82 b3 ff ff       	call   80102630 <kalloc>
-801072ae:	89 c6                	mov    %eax,%esi
-801072b0:	85 c0                	test   %eax,%eax
-801072b2:	74 42                	je     801072f6 <setupkvm+0x56>
-  memset(pgdir, 0, PGSIZE);
-801072b4:	83 ec 04             	sub    $0x4,%esp
-  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-801072b7:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
-  memset(pgdir, 0, PGSIZE);
-801072bc:	68 00 10 00 00       	push   $0x1000
-801072c1:	6a 00                	push   $0x0
-801072c3:	50                   	push   %eax
-801072c4:	e8 07 d7 ff ff       	call   801049d0 <memset>
-801072c9:	83 c4 10             	add    $0x10,%esp
-                (uint)k->phys_start, k->perm) < 0) {
-801072cc:	8b 43 04             	mov    0x4(%ebx),%eax
-    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-801072cf:	83 ec 08             	sub    $0x8,%esp
-801072d2:	8b 4b 08             	mov    0x8(%ebx),%ecx
-801072d5:	ff 73 0c             	pushl  0xc(%ebx)
-801072d8:	8b 13                	mov    (%ebx),%edx
-801072da:	50                   	push   %eax
-801072db:	29 c1                	sub    %eax,%ecx
-801072dd:	89 f0                	mov    %esi,%eax
-801072df:	e8 8c f9 ff ff       	call   80106c70 <mappages>
-801072e4:	83 c4 10             	add    $0x10,%esp
-801072e7:	85 c0                	test   %eax,%eax
-801072e9:	78 15                	js     80107300 <setupkvm+0x60>
-  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-801072eb:	83 c3 10             	add    $0x10,%ebx
-801072ee:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
-801072f4:	75 d6                	jne    801072cc <setupkvm+0x2c>
-}
-801072f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801072f9:	89 f0                	mov    %esi,%eax
-801072fb:	5b                   	pop    %ebx
-801072fc:	5e                   	pop    %esi
-801072fd:	5d                   	pop    %ebp
-801072fe:	c3                   	ret    
-801072ff:	90                   	nop
-      freevm(pgdir);
-80107300:	83 ec 0c             	sub    $0xc,%esp
-80107303:	56                   	push   %esi
-      return 0;
-80107304:	31 f6                	xor    %esi,%esi
-      freevm(pgdir);
-80107306:	e8 15 ff ff ff       	call   80107220 <freevm>
-      return 0;
-8010730b:	83 c4 10             	add    $0x10,%esp
-}
-8010730e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80107311:	89 f0                	mov    %esi,%eax
-80107313:	5b                   	pop    %ebx
-80107314:	5e                   	pop    %esi
-80107315:	5d                   	pop    %ebp
-80107316:	c3                   	ret    
-80107317:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010731e:	66 90                	xchg   %ax,%ax
-
-80107320 <kvmalloc>:
-{
-80107320:	f3 0f 1e fb          	endbr32 
-80107324:	55                   	push   %ebp
-80107325:	89 e5                	mov    %esp,%ebp
-80107327:	83 ec 08             	sub    $0x8,%esp
-  kpgdir = setupkvm();
-8010732a:	e8 71 ff ff ff       	call   801072a0 <setupkvm>
-8010732f:	a3 a4 55 11 80       	mov    %eax,0x801155a4
-  lcr3(V2P(kpgdir));   // switch to the kernel page table
-80107334:	05 00 00 00 80       	add    $0x80000000,%eax
-80107339:	0f 22 d8             	mov    %eax,%cr3
-}
-8010733c:	c9                   	leave  
-8010733d:	c3                   	ret    
-8010733e:	66 90                	xchg   %ax,%ax
-
-80107340 <clearpteu>:
-
-// Clear PTE_U on a page. Used to create an inaccessible
-// page beneath the user stack.
-void
-clearpteu(pde_t *pgdir, char *uva)
-{
-80107340:	f3 0f 1e fb          	endbr32 
-80107344:	55                   	push   %ebp
-  pte_t *pte;
-
-  pte = walkpgdir(pgdir, uva, 0);
-80107345:	31 c9                	xor    %ecx,%ecx
-{
-80107347:	89 e5                	mov    %esp,%ebp
-80107349:	83 ec 08             	sub    $0x8,%esp
-  pte = walkpgdir(pgdir, uva, 0);
-8010734c:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010734f:	8b 45 08             	mov    0x8(%ebp),%eax
-80107352:	e8 99 f8 ff ff       	call   80106bf0 <walkpgdir>
-  if(pte == 0)
-80107357:	85 c0                	test   %eax,%eax
-80107359:	74 05                	je     80107360 <clearpteu+0x20>
-    panic("clearpteu");
-  *pte &= ~PTE_U;
-8010735b:	83 20 fb             	andl   $0xfffffffb,(%eax)
-}
-8010735e:	c9                   	leave  
-8010735f:	c3                   	ret    
-    panic("clearpteu");
-80107360:	83 ec 0c             	sub    $0xc,%esp
-80107363:	68 5e 7f 10 80       	push   $0x80107f5e
-80107368:	e8 23 90 ff ff       	call   80100390 <panic>
-8010736d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80107370 <copyuvm>:
-
-// Given a parent process's page table, create a copy
-// of it for a child.
-pde_t*
-copyuvm(pde_t *pgdir, uint sz)
-{
-80107370:	f3 0f 1e fb          	endbr32 
-80107374:	55                   	push   %ebp
-80107375:	89 e5                	mov    %esp,%ebp
-80107377:	57                   	push   %edi
-80107378:	56                   	push   %esi
-80107379:	53                   	push   %ebx
-8010737a:	83 ec 1c             	sub    $0x1c,%esp
-  pde_t *d;
-  pte_t *pte;
-  uint pa, i, flags;
-  char *mem;
-
-  if((d = setupkvm()) == 0)
-8010737d:	e8 1e ff ff ff       	call   801072a0 <setupkvm>
-80107382:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80107385:	85 c0                	test   %eax,%eax
-80107387:	0f 84 9b 00 00 00    	je     80107428 <copyuvm+0xb8>
-    return 0;
-  for(i = 0; i < sz; i += PGSIZE){
-8010738d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80107390:	85 c9                	test   %ecx,%ecx
-80107392:	0f 84 90 00 00 00    	je     80107428 <copyuvm+0xb8>
-80107398:	31 f6                	xor    %esi,%esi
-8010739a:	eb 46                	jmp    801073e2 <copyuvm+0x72>
-8010739c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-      panic("copyuvm: page not present");
-    pa = PTE_ADDR(*pte);
-    flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto bad;
-    memmove(mem, (char*)P2V(pa), PGSIZE);
-801073a0:	83 ec 04             	sub    $0x4,%esp
-801073a3:	81 c7 00 00 00 80    	add    $0x80000000,%edi
-801073a9:	68 00 10 00 00       	push   $0x1000
-801073ae:	57                   	push   %edi
-801073af:	50                   	push   %eax
-801073b0:	e8 bb d6 ff ff       	call   80104a70 <memmove>
-    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-801073b5:	58                   	pop    %eax
-801073b6:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-801073bc:	5a                   	pop    %edx
-801073bd:	ff 75 e4             	pushl  -0x1c(%ebp)
-801073c0:	b9 00 10 00 00       	mov    $0x1000,%ecx
-801073c5:	89 f2                	mov    %esi,%edx
-801073c7:	50                   	push   %eax
-801073c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801073cb:	e8 a0 f8 ff ff       	call   80106c70 <mappages>
-801073d0:	83 c4 10             	add    $0x10,%esp
-801073d3:	85 c0                	test   %eax,%eax
-801073d5:	78 61                	js     80107438 <copyuvm+0xc8>
-  for(i = 0; i < sz; i += PGSIZE){
-801073d7:	81 c6 00 10 00 00    	add    $0x1000,%esi
-801073dd:	39 75 0c             	cmp    %esi,0xc(%ebp)
-801073e0:	76 46                	jbe    80107428 <copyuvm+0xb8>
-    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-801073e2:	8b 45 08             	mov    0x8(%ebp),%eax
-801073e5:	31 c9                	xor    %ecx,%ecx
-801073e7:	89 f2                	mov    %esi,%edx
-801073e9:	e8 02 f8 ff ff       	call   80106bf0 <walkpgdir>
-801073ee:	85 c0                	test   %eax,%eax
-801073f0:	74 61                	je     80107453 <copyuvm+0xe3>
-    if(!(*pte & PTE_P))
-801073f2:	8b 00                	mov    (%eax),%eax
-801073f4:	a8 01                	test   $0x1,%al
-801073f6:	74 4e                	je     80107446 <copyuvm+0xd6>
-    pa = PTE_ADDR(*pte);
-801073f8:	89 c7                	mov    %eax,%edi
-    flags = PTE_FLAGS(*pte);
-801073fa:	25 ff 0f 00 00       	and    $0xfff,%eax
-801073ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    pa = PTE_ADDR(*pte);
-80107402:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
-    if((mem = kalloc()) == 0)
-80107408:	e8 23 b2 ff ff       	call   80102630 <kalloc>
-8010740d:	89 c3                	mov    %eax,%ebx
-8010740f:	85 c0                	test   %eax,%eax
-80107411:	75 8d                	jne    801073a0 <copyuvm+0x30>
-    }
-  }
-  return d;
-
-bad:
-  freevm(d);
-80107413:	83 ec 0c             	sub    $0xc,%esp
-80107416:	ff 75 e0             	pushl  -0x20(%ebp)
-80107419:	e8 02 fe ff ff       	call   80107220 <freevm>
-  return 0;
-8010741e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-80107425:	83 c4 10             	add    $0x10,%esp
-}
-80107428:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010742b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010742e:	5b                   	pop    %ebx
-8010742f:	5e                   	pop    %esi
-80107430:	5f                   	pop    %edi
-80107431:	5d                   	pop    %ebp
-80107432:	c3                   	ret    
-80107433:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80107437:	90                   	nop
-      kfree(mem);
-80107438:	83 ec 0c             	sub    $0xc,%esp
-8010743b:	53                   	push   %ebx
-8010743c:	e8 2f b0 ff ff       	call   80102470 <kfree>
-      goto bad;
-80107441:	83 c4 10             	add    $0x10,%esp
-80107444:	eb cd                	jmp    80107413 <copyuvm+0xa3>
-      panic("copyuvm: page not present");
-80107446:	83 ec 0c             	sub    $0xc,%esp
-80107449:	68 82 7f 10 80       	push   $0x80107f82
-8010744e:	e8 3d 8f ff ff       	call   80100390 <panic>
-      panic("copyuvm: pte should exist");
-80107453:	83 ec 0c             	sub    $0xc,%esp
-80107456:	68 68 7f 10 80       	push   $0x80107f68
-8010745b:	e8 30 8f ff ff       	call   80100390 <panic>
-
-80107460 <uva2ka>:
-
-//PAGEBREAK!
-// Map user virtual address to kernel address.
-char*
-uva2ka(pde_t *pgdir, char *uva)
-{
-80107460:	f3 0f 1e fb          	endbr32 
-80107464:	55                   	push   %ebp
-  pte_t *pte;
-
-  pte = walkpgdir(pgdir, uva, 0);
-80107465:	31 c9                	xor    %ecx,%ecx
-{
-80107467:	89 e5                	mov    %esp,%ebp
-80107469:	83 ec 08             	sub    $0x8,%esp
-  pte = walkpgdir(pgdir, uva, 0);
-8010746c:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010746f:	8b 45 08             	mov    0x8(%ebp),%eax
-80107472:	e8 79 f7 ff ff       	call   80106bf0 <walkpgdir>
-  if((*pte & PTE_P) == 0)
-80107477:	8b 00                	mov    (%eax),%eax
-    return 0;
-  if((*pte & PTE_U) == 0)
-    return 0;
-  return (char*)P2V(PTE_ADDR(*pte));
-}
-80107479:	c9                   	leave  
-  if((*pte & PTE_U) == 0)
-8010747a:	89 c2                	mov    %eax,%edx
-  return (char*)P2V(PTE_ADDR(*pte));
-8010747c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-  if((*pte & PTE_U) == 0)
-80107481:	83 e2 05             	and    $0x5,%edx
-  return (char*)P2V(PTE_ADDR(*pte));
-80107484:	05 00 00 00 80       	add    $0x80000000,%eax
-80107489:	83 fa 05             	cmp    $0x5,%edx
-8010748c:	ba 00 00 00 00       	mov    $0x0,%edx
-80107491:	0f 45 c2             	cmovne %edx,%eax
-}
-80107494:	c3                   	ret    
-80107495:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010749c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801074a0 <copyout>:
-// Copy len bytes from p to user address va in page table pgdir.
-// Most useful when pgdir is not the current page table.
-// uva2ka ensures this only works for PTE_U pages.
-int
-copyout(pde_t *pgdir, uint va, void *p, uint len)
-{
-801074a0:	f3 0f 1e fb          	endbr32 
-801074a4:	55                   	push   %ebp
-801074a5:	89 e5                	mov    %esp,%ebp
-801074a7:	57                   	push   %edi
-801074a8:	56                   	push   %esi
-801074a9:	53                   	push   %ebx
-801074aa:	83 ec 0c             	sub    $0xc,%esp
-801074ad:	8b 75 14             	mov    0x14(%ebp),%esi
-801074b0:	8b 55 0c             	mov    0xc(%ebp),%edx
-  char *buf, *pa0;
-  uint n, va0;
-
-  buf = (char*)p;
-  while(len > 0){
-801074b3:	85 f6                	test   %esi,%esi
-801074b5:	75 3c                	jne    801074f3 <copyout+0x53>
-801074b7:	eb 67                	jmp    80107520 <copyout+0x80>
-801074b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    va0 = (uint)PGROUNDDOWN(va);
-    pa0 = uva2ka(pgdir, (char*)va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (va - va0);
-801074c0:	8b 55 0c             	mov    0xc(%ebp),%edx
-801074c3:	89 fb                	mov    %edi,%ebx
-801074c5:	29 d3                	sub    %edx,%ebx
-801074c7:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-    if(n > len)
-801074cd:	39 f3                	cmp    %esi,%ebx
-801074cf:	0f 47 de             	cmova  %esi,%ebx
-      n = len;
-    memmove(pa0 + (va - va0), buf, n);
-801074d2:	29 fa                	sub    %edi,%edx
-801074d4:	83 ec 04             	sub    $0x4,%esp
-801074d7:	01 c2                	add    %eax,%edx
-801074d9:	53                   	push   %ebx
-801074da:	ff 75 10             	pushl  0x10(%ebp)
-801074dd:	52                   	push   %edx
-801074de:	e8 8d d5 ff ff       	call   80104a70 <memmove>
-    len -= n;
-    buf += n;
-801074e3:	01 5d 10             	add    %ebx,0x10(%ebp)
-    va = va0 + PGSIZE;
-801074e6:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
-  while(len > 0){
-801074ec:	83 c4 10             	add    $0x10,%esp
-801074ef:	29 de                	sub    %ebx,%esi
-801074f1:	74 2d                	je     80107520 <copyout+0x80>
-    va0 = (uint)PGROUNDDOWN(va);
-801074f3:	89 d7                	mov    %edx,%edi
-    pa0 = uva2ka(pgdir, (char*)va0);
-801074f5:	83 ec 08             	sub    $0x8,%esp
-    va0 = (uint)PGROUNDDOWN(va);
-801074f8:	89 55 0c             	mov    %edx,0xc(%ebp)
-801074fb:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
-    pa0 = uva2ka(pgdir, (char*)va0);
-80107501:	57                   	push   %edi
-80107502:	ff 75 08             	pushl  0x8(%ebp)
-80107505:	e8 56 ff ff ff       	call   80107460 <uva2ka>
-    if(pa0 == 0)
-8010750a:	83 c4 10             	add    $0x10,%esp
-8010750d:	85 c0                	test   %eax,%eax
-8010750f:	75 af                	jne    801074c0 <copyout+0x20>
-  }
-  return 0;
-}
-80107511:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return -1;
-80107514:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80107519:	5b                   	pop    %ebx
-8010751a:	5e                   	pop    %esi
-8010751b:	5f                   	pop    %edi
-8010751c:	5d                   	pop    %ebp
-8010751d:	c3                   	ret    
-8010751e:	66 90                	xchg   %ax,%ax
-80107520:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
-80107523:	31 c0                	xor    %eax,%eax
-}
-80107525:	5b                   	pop    %ebx
-80107526:	5e                   	pop    %esi
-80107527:	5f                   	pop    %edi
-80107528:	5d                   	pop    %ebp
-80107529:	c3                   	ret    
diff -ruN xv6-public/kernel.ld xv6-public-mynew/kernel.ld
--- xv6-public/kernel.ld	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/kernel.ld	1970-01-01 05:30:00.000000000 +0530
@@ -1,64 +0,0 @@
-/* Simple linker script for the JOS kernel.
-   See the GNU ld 'info' manual ("info ld") to learn the syntax. */
-
-OUTPUT_FORMAT("elf32-i386", "elf32-i386", "elf32-i386")
-OUTPUT_ARCH(i386)
-ENTRY(_start)
-
-SECTIONS
-{
-	/* Link the kernel at this address: "." means the current address */
-        /* Must be equal to KERNLINK */
-	. = 0x80100000;
-
-	.text : AT(0x100000) {
-		*(.text .stub .text.* .gnu.linkonce.t.*)
-	}
-
-	PROVIDE(etext = .);	/* Define the 'etext' symbol to this value */
-
-	.rodata : {
-		*(.rodata .rodata.* .gnu.linkonce.r.*)
-	}
-
-	/* Include debugging information in kernel memory */
-	.stab : {
-		PROVIDE(__STAB_BEGIN__ = .);
-		*(.stab);
-		PROVIDE(__STAB_END__ = .);
-	}
-
-	.stabstr : {
-		PROVIDE(__STABSTR_BEGIN__ = .);
-		*(.stabstr);
-		PROVIDE(__STABSTR_END__ = .);
-	}
-
-	/* Adjust the address for the data segment to the next page */
-	. = ALIGN(0x1000);
-
-	/* Conventionally, Unix linkers provide pseudo-symbols
-	 * etext, edata, and end, at the end of the text, data, and bss.
-	 * For the kernel mapping, we need the address at the beginning
-	 * of the data section, but that's not one of the conventional
-	 * symbols, because the convention started before there was a
-	 * read-only rodata section between text and data. */
-	PROVIDE(data = .);
-
-	/* The data segment */
-	.data : {
-		*(.data)
-	}
-
-	PROVIDE(edata = .);
-
-	.bss : {
-		*(.bss)
-	}
-
-	PROVIDE(end = .);
-
-	/DISCARD/ : {
-		*(.eh_frame .note.GNU-stack)
-	}
-}
diff -ruN xv6-public/kernel.sym xv6-public-mynew/kernel.sym
--- xv6-public/kernel.sym	2022-09-05 14:45:51.187290115 +0530
+++ xv6-public-mynew/kernel.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,524 +0,0 @@
-80100000 .text
-80107540 .rodata
-80108000 .data
-8010a520 .bss
-00000000 .debug_line
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_aranges
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 .comment
-00000000 bio.c
-00000000 console.c
-8010a520 cons
-8010a558 panicked
-80100410 consputc.part.0
-801005a0 printint
-801075b0 digits.1588
-00000000 exec.c
-00000000 file.c
-00000000 fs.c
-801011b0 bfree
-80101230 balloc
-80101340 iget
-80101430 bmap
-80101d70 namex
-00000000 ide.c
-80102070 idestart
-8010a580 idelock
-8010a560 havedisk1
-8010a564 idequeue
-00000000 ioapic.c
-00000000 kalloc.c
-00000000 kbd.c
-8010a5b4 shift.1427
-801078e0 shiftcode
-801077e0 togglecode
-801077c0 charcode.1428
-80108200 normalmap
-80108100 shiftmap
-80108000 ctlmap
-00000000 lapic.c
-00000000 log.c
-80102b90 install_trans
-80102c30 write_head
-00000000 main.c
-80102fe0 mpmain
-80103020 mpenter
-00000000 mp.c
-80103170 mpsearch1
-00000000 picirq.c
-00000000 pipe.c
-00000000 proc.c
-80103790 allocproc
-8010a000 first.1630
-8010a5b8 initproc
-80107b8c states.1656
-00000000 sleeplock.c
-00000000 spinlock.c
-00000000 string.c
-00000000 syscall.c
-80107c00 syscalls
-00000000 sysfile.c
-80104e10 create
-80104fb0 argfd.constprop.0
-00000000 sysproc.c
-00000000 trap.c
-00000000 uart.c
-80105ff0 uartgetc
-8010a5bc uart
-80106020 uartputc.part.0
-00000000 vm.c
-80106bf0 walkpgdir
-80106c70 mappages
-80106d00 deallocuvm.part.0
-8010a420 kmap
-80100290 consoleread
-80106b43 vector242
-8010659a vector119
-8010000c entry
-8010647a vector87
-80106471 vector86
-80104b90 safestrcpy
-80105150 sys_close
-80106baf vector251
-8010649e vector91
-80106294 vector33
-80106783 vector162
-80103ed0 yield
-80112680 log
-80112640 kmem
-801069e7 vector213
-80106537 vector108
-80106070 uartinit
-801062ee vector43
-801028c0 lapiceoi
-801067a7 vector165
-80106897 vector185
-80102380 ioapicinit
-80106576 vector115
-80100ff0 fileread
-801065b5 vector122
-80105aa0 sys_sbrk
-80112760 ioapicid
-801044c0 thread_exit
-8010673b vector156
-80106b67 vector245
-80112634 ioapic
-801068c7 vector189
-801061b8 vector7
-80106390 vector61
-80106243 vector24
-80106552 vector111
-8010694b vector200
-801063c6 vector67
-80106663 vector138
-80106405 vector74
-80103cd0 sched
-80104a70 memmove
-8010636c vector57
-80104da0 syscall
-801069f3 vector214
-801064e6 vector99
-80103940 cpuid
-80101b60 writei
-80106687 vector141
-80105a00 sys_fork
-8010b5c0 bcache
-801067fb vector172
-80106b37 vector241
-80104760 getcallerpcs
-80105660 sys_mkdir
-80106bc7 vector253
-80106194 vector3
-8010618b vector2
-80101c90 namecmp
-80106a8f vector227
-801069c3 vector210
-80104d60 argstr
-80106a6b vector224
-801062dc vector41
-801006b0 cprintf
-80100e70 filedup
-80102030 namei
-80106228 vector21
-80100040 binit
-80106837 vector177
-80106591 vector118
-801063e1 vector70
-801063d8 vector69
-80106b07 vector237
-801063ab vector64
-8010625e vector27
-8010661b vector132
-801068a3 vector186
-80105070 sys_read
-80106a17 vector217
-80104c10 fetchint
-801072a0 setupkvm
-80104ad0 memcpy
-80107220 freevm
-80106182 vector1
-80106843 vector178
-801062c1 vector38
-80102470 kfree
-80106b13 vector238
-801038d0 mycpu
-80101890 iput
-80106627 vector133
-801063fc vector73
-801066ab vector144
-80106bd3 vector254
-80101500 readsb
-8010a004 nextpid
-801064f8 vector101
-801069cf vector211
-801031f0 mpinit
-80106813 vector174
-80106b4f vector243
-80100de0 fileinit
-80104740 initlock
-801065eb vector128
-801074a0 copyout
-80106444 vector81
-80103f20 sleep
-801028e0 microdelay
-801061e6 vector13
-80106336 vector51
-801061fd vector16
-8010ff20 input
-80106b2b vector240
-80106351 vector54
-80106216 vector19
-801064a7 vector92
-80106b5b vector244
-80101a30 stati
-8010667b vector140
-80105a40 sys_kill
-80106300 vector45
-80106432 vector79
-80103500 pipeclose
-80106aa7 vector229
-80106753 vector158
-801051a0 sys_fstat
-80100640 consolewrite
-801062ca vector39
-801067cb vector168
-80105c60 sys_thread_create
-80102da0 end_op
-801062a6 vector35
-80106564 vector113
-80102510 freerange
-801065d0 vector125
-801070c0 allocuvm
-80105ce1 trapret
-80106a0b vector216
-801063a2 vector63
-80106255 vector26
-801068f7 vector193
-801027a0 lapicinit
-8010691b vector196
-801069b7 vector209
-8010619d vector4
-801067e3 vector170
-8010a5c0 stack
-8010664b vector136
-801061d1 vector10
-80106993 vector206
-80101840 iunlock
-80105af0 sys_sleep
-80106bdf vector255
-80106867 vector181
-8010637e vector59
-80106468 vector85
-8010645f vector84
-8010687f vector183
-8010675f vector159
-801069db vector212
-801051f0 sys_link
-80106312 vector47
-80106a9b vector228
-801062e5 vector42
-8010656d vector114
-80107460 uva2ka
-8010681f vector175
-8010669f vector143
-80100e00 filealloc
-801040e0 wakeup
-80106603 vector130
-80106b73 vector246
-801061c8 vector9
-80106693 vector142
-801064ef vector100
-80106957 vector201
-80107340 clearpteu
-80103960 myproc
-80105cf0 tvinit
-80106387 vector60
-8010623a vector23
-80101730 idup
-80106afb vector236
-80102780 kbdintr
-80105520 sys_open
-80106abf vector231
-801063bd vector66
-80106270 vector29
-80101a60 readi
-8010663f vector135
-80100860 consoleintr
-80104140 kill
-80106420 vector77
-801015e0 ialloc
-8010685b vector180
-801155a4 kpgdir
-801069ab vector208
-80102990 cmostime
-80106160 uartintr
-801064dd vector98
-801064d4 vector97
-8010682b vector176
-80106903 vector194
-8010628b vector32
-801155a8 end
-8010693f vector199
-8010660f vector131
-80106bbb vector252
-80101090 filewrite
-80106179 vector0
-80104cb0 argint
-80100a80 exec
-801066b7 vector145
-801050e0 sys_write
-80104980 release
-80104c50 fetchstr
-8010652e vector107
-801062d3 vector40
-80103fe0 wait
-80106501 vector102
-80109000 entrypgdir
-0010000c _start
-80106363 vector56
-801063cf vector68
-801061af vector6
-8010a48c _binary_initcode_end
-80100000 multiboot_header
-801065f7 vector129
-80103c30 scheduler
-80101cb0 dirlookup
-80106927 vector197
-80100ec0 fileclose
-80102d30 begin_op
-8010670b vector152
-80107320 kvmalloc
-80106ab3 vector230
-80104ae0 strncmp
-801062b8 vector37
-80106987 vector205
-80106777 vector161
-80114d60 tickslock
-801035a0 pipewrite
-80104b30 strncpy
-801063ea vector71
-80107370 copyuvm
-8010ffc0 ftable
-8010676b vector160
-80104d00 argptr
-801069ff vector215
-80106747 vector157
-80105000 sys_dup
-8010655b vector112
-80100390 panic
-80103860 forkret
-80106873 vector182
-801061df vector12
-80104a20 memcmp
-801026a0 kbdgetc
-80106540 vector109
-8010621f vector20
-80103b10 fork
-80106348 vector53
-8010620d vector18
-0000008a _binary_entryother_size
-80112780 cpus
-801046a0 releasesleep
-801064c2 vector95
-80104870 holding
-801109c0 sb
-801048c0 acquire
-80106a83 vector226
-80102050 nameiparent
-80106324 vector49
-801062f7 vector44
-8011267c lapic
-80106429 vector78
-80105cc9 alltraps
-80106807 vector173
-80106588 vector117
-8010644d vector82
-80106a53 vector222
-801061c1 vector8
-801066e7 vector149
-801016a0 iupdate
-80108000 data
-801049d0 memset
-80106acb vector232
-80103040 main
-80106e40 switchkvm
-80106525 vector106
-80106a3b vector220
-80106495 vector90
-8010678f vector163
-80106ae3 vector234
-80102f10 log_write
-80104640 acquiresleep
-80105340 sys_unlink
-80106399 vector62
-8010624c vector25
-80106933 vector198
-801065a3 vector120
-8010a48c _binary_entryother_start
-80102560 kinit1
-8010632d vector50
-801061f4 vector15
-801066ff vector151
-80106456 vector83
-8010648c vector89
-80106483 vector88
-80105da0 trap
-80105ba0 sys_uptime
-8010684f vector179
-8010629d vector34
-80106309 vector46
-80106633 vector134
-80106a5f vector223
-80114da0 idt
-80106a23 vector218
-801038b0 pinit
-801071f0 deallocuvm
-80106a77 vector225
-801028a0 lapicid
-801068af vector187
-80103a90 growproc
-801046e0 holdingsleep
-80112d00 ncpu
-80106279 vector30
-80103990 userinit
-801000d0 bread
-801065e2 vector127
-801036a0 piperead
-801155a0 ticks
-801068eb vector192
-801067b3 vector166
-80100a30 consoleinit
-80106417 vector76
-8010640e vector75
-801021e0 ideintr
-8010690f vector195
-801066f3 vector150
-80106375 vector58
-80106b8b vector248
-801065be vector123
-801064cb vector96
-80106282 vector31
-8010696f vector203
-8010666f vector139
-80106717 vector153
-8010679b vector164
-801041d0 procdump
-801065ac vector121
-80106130 uartputc
-801061a6 vector5
-801067bf vector167
-8010672f vector155
-80106b97 vector249
-801001f0 brelse
-80106ba3 vector250
-801065c7 vector124
-80106549 vector110
-8010697b vector204
-80101760 ilock
-80105820 sys_exec
-80106657 vector137
-8010a460 _binary_initcode_start
-80104bf3 swtch
-80106b7f vector247
-80106231 vector22
-80106963 vector202
-80106db0 seginit
-80101a00 iunlockput
-801063f3 vector72
-8010635a vector55
-801065d9 vector126
-801063b4 vector65
-80106267 vector28
-8010a516 _binary_entryother_end
-801067d7 vector169
-801001b0 bwrite
-80106ad7 vector233
-80105d70 idtinit
-80103d90 exit
-80105a30 sys_wait
-80105a10 sys_exit
-80101f70 dirlink
-0000002c _binary_initcode_size
-801066cf vector147
-80104600 initsleeplock
-80102150 ideinit
-80106ff0 loaduvm
-80106513 vector104
-8010657f vector116
-80112d20 ptable
-80102430 ioapicenable
-80104810 popcli
-8010a008 vectors
-8010633f vector52
-80106206 vector17
-8010688b vector184
-80104bd0 strlen
-80105920 sys_pipe
-80101540 iinit
-801033d0 picinit
-8010699f vector207
-80106f70 inituvm
-801068d3 vector190
-80105cb0 sys_thread_join
-80106b1f vector239
-801064b9 vector94
-801064b0 vector93
-80102c90 initlog
-801068bb vector188
-8010ffac isThread
-801042a0 thread_create
-8010631b vector48
-80102280 iderw
-80105cc0 sys_thread_exit
-80106a2f vector219
-801066db vector148
-80106a47 vector221
-80102630 kalloc
-80110960 devsw
-80105a80 sys_getpid
-80105bd0 sys_draw
-8010643b vector80
-801067ef vector171
-80106723 vector154
-801062af vector36
-801033f0 pipealloc
-80106aef vector235
-8010651c vector105
-80105770 sys_chdir
-801109e0 icache
-801066c3 vector146
-801068df vector191
-8010650a vector103
-801043d0 thread_join
-801056d0 sys_mknod
-801028f0 lapicstartap
-80106e60 switchuvm
-801047c0 pushcli
-801025d0 kinit2
-801061d8 vector11
-801061ed vector14
-80100fa0 filestat
Binary files xv6-public/_kill and xv6-public-mynew/_kill differ
diff -ruN xv6-public/kill.asm xv6-public-mynew/kill.asm
--- xv6-public/kill.asm	2022-09-05 09:51:05.322999140 +0530
+++ xv6-public-mynew/kill.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1222 +0,0 @@
-
-_kill:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char **argv)
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	56                   	push   %esi
-  12:	53                   	push   %ebx
-  13:	51                   	push   %ecx
-  14:	83 ec 0c             	sub    $0xc,%esp
-  17:	8b 01                	mov    (%ecx),%eax
-  19:	8b 51 04             	mov    0x4(%ecx),%edx
-  int i;
-
-  if(argc < 2){
-  1c:	83 f8 01             	cmp    $0x1,%eax
-  1f:	7e 30                	jle    51 <main+0x51>
-  21:	8d 5a 04             	lea    0x4(%edx),%ebx
-  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
-  27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  2e:	66 90                	xchg   %ax,%ax
-    printf(2, "usage: kill pid...\n");
-    exit();
-  }
-  for(i=1; i<argc; i++)
-    kill(atoi(argv[i]));
-  30:	83 ec 0c             	sub    $0xc,%esp
-  33:	ff 33                	pushl  (%ebx)
-  35:	83 c3 04             	add    $0x4,%ebx
-  38:	e8 23 02 00 00       	call   260 <atoi>
-  3d:	89 04 24             	mov    %eax,(%esp)
-  40:	e8 be 02 00 00       	call   303 <kill>
-  for(i=1; i<argc; i++)
-  45:	83 c4 10             	add    $0x10,%esp
-  48:	39 f3                	cmp    %esi,%ebx
-  4a:	75 e4                	jne    30 <main+0x30>
-  exit();
-  4c:	e8 82 02 00 00       	call   2d3 <exit>
-    printf(2, "usage: kill pid...\n");
-  51:	50                   	push   %eax
-  52:	50                   	push   %eax
-  53:	68 b8 07 00 00       	push   $0x7b8
-  58:	6a 02                	push   $0x2
-  5a:	e8 f1 03 00 00       	call   450 <printf>
-    exit();
-  5f:	e8 6f 02 00 00       	call   2d3 <exit>
-  64:	66 90                	xchg   %ax,%ax
-  66:	66 90                	xchg   %ax,%ax
-  68:	66 90                	xchg   %ax,%ax
-  6a:	66 90                	xchg   %ax,%ax
-  6c:	66 90                	xchg   %ax,%ax
-  6e:	66 90                	xchg   %ax,%ax
-
-00000070 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  70:	f3 0f 1e fb          	endbr32 
-  74:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  75:	31 c0                	xor    %eax,%eax
-{
-  77:	89 e5                	mov    %esp,%ebp
-  79:	53                   	push   %ebx
-  7a:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  7d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
-  80:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  84:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  87:	83 c0 01             	add    $0x1,%eax
-  8a:	84 d2                	test   %dl,%dl
-  8c:	75 f2                	jne    80 <strcpy+0x10>
-    ;
-  return os;
-}
-  8e:	89 c8                	mov    %ecx,%eax
-  90:	5b                   	pop    %ebx
-  91:	5d                   	pop    %ebp
-  92:	c3                   	ret    
-  93:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000000a0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  a0:	f3 0f 1e fb          	endbr32 
-  a4:	55                   	push   %ebp
-  a5:	89 e5                	mov    %esp,%ebp
-  a7:	53                   	push   %ebx
-  a8:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  ab:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
-  ae:	0f b6 01             	movzbl (%ecx),%eax
-  b1:	0f b6 1a             	movzbl (%edx),%ebx
-  b4:	84 c0                	test   %al,%al
-  b6:	75 19                	jne    d1 <strcmp+0x31>
-  b8:	eb 26                	jmp    e0 <strcmp+0x40>
-  ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  c0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
-  c4:	83 c1 01             	add    $0x1,%ecx
-  c7:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
-  ca:	0f b6 1a             	movzbl (%edx),%ebx
-  cd:	84 c0                	test   %al,%al
-  cf:	74 0f                	je     e0 <strcmp+0x40>
-  d1:	38 d8                	cmp    %bl,%al
-  d3:	74 eb                	je     c0 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
-  d5:	29 d8                	sub    %ebx,%eax
-}
-  d7:	5b                   	pop    %ebx
-  d8:	5d                   	pop    %ebp
-  d9:	c3                   	ret    
-  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  e0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
-  e2:	29 d8                	sub    %ebx,%eax
-}
-  e4:	5b                   	pop    %ebx
-  e5:	5d                   	pop    %ebp
-  e6:	c3                   	ret    
-  e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  ee:	66 90                	xchg   %ax,%ax
-
-000000f0 <strlen>:
-
-uint
-strlen(const char *s)
-{
-  f0:	f3 0f 1e fb          	endbr32 
-  f4:	55                   	push   %ebp
-  f5:	89 e5                	mov    %esp,%ebp
-  f7:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
-  fa:	80 3a 00             	cmpb   $0x0,(%edx)
-  fd:	74 21                	je     120 <strlen+0x30>
-  ff:	31 c0                	xor    %eax,%eax
- 101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 108:	83 c0 01             	add    $0x1,%eax
- 10b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 10f:	89 c1                	mov    %eax,%ecx
- 111:	75 f5                	jne    108 <strlen+0x18>
-    ;
-  return n;
-}
- 113:	89 c8                	mov    %ecx,%eax
- 115:	5d                   	pop    %ebp
- 116:	c3                   	ret    
- 117:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 11e:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 120:	31 c9                	xor    %ecx,%ecx
-}
- 122:	5d                   	pop    %ebp
- 123:	89 c8                	mov    %ecx,%eax
- 125:	c3                   	ret    
- 126:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 12d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000130 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 130:	f3 0f 1e fb          	endbr32 
- 134:	55                   	push   %ebp
- 135:	89 e5                	mov    %esp,%ebp
- 137:	57                   	push   %edi
- 138:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 13b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 13e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 141:	89 d7                	mov    %edx,%edi
- 143:	fc                   	cld    
- 144:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 146:	89 d0                	mov    %edx,%eax
- 148:	5f                   	pop    %edi
- 149:	5d                   	pop    %ebp
- 14a:	c3                   	ret    
- 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 14f:	90                   	nop
-
-00000150 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 150:	f3 0f 1e fb          	endbr32 
- 154:	55                   	push   %ebp
- 155:	89 e5                	mov    %esp,%ebp
- 157:	8b 45 08             	mov    0x8(%ebp),%eax
- 15a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 15e:	0f b6 10             	movzbl (%eax),%edx
- 161:	84 d2                	test   %dl,%dl
- 163:	75 16                	jne    17b <strchr+0x2b>
- 165:	eb 21                	jmp    188 <strchr+0x38>
- 167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 16e:	66 90                	xchg   %ax,%ax
- 170:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 174:	83 c0 01             	add    $0x1,%eax
- 177:	84 d2                	test   %dl,%dl
- 179:	74 0d                	je     188 <strchr+0x38>
-    if(*s == c)
- 17b:	38 d1                	cmp    %dl,%cl
- 17d:	75 f1                	jne    170 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 17f:	5d                   	pop    %ebp
- 180:	c3                   	ret    
- 181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 188:	31 c0                	xor    %eax,%eax
-}
- 18a:	5d                   	pop    %ebp
- 18b:	c3                   	ret    
- 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000190 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 190:	f3 0f 1e fb          	endbr32 
- 194:	55                   	push   %ebp
- 195:	89 e5                	mov    %esp,%ebp
- 197:	57                   	push   %edi
- 198:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 199:	31 f6                	xor    %esi,%esi
-{
- 19b:	53                   	push   %ebx
- 19c:	89 f3                	mov    %esi,%ebx
- 19e:	83 ec 1c             	sub    $0x1c,%esp
- 1a1:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 1a4:	eb 33                	jmp    1d9 <gets+0x49>
- 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1ad:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 1b0:	83 ec 04             	sub    $0x4,%esp
- 1b3:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 1b6:	6a 01                	push   $0x1
- 1b8:	50                   	push   %eax
- 1b9:	6a 00                	push   $0x0
- 1bb:	e8 2b 01 00 00       	call   2eb <read>
-    if(cc < 1)
- 1c0:	83 c4 10             	add    $0x10,%esp
- 1c3:	85 c0                	test   %eax,%eax
- 1c5:	7e 1c                	jle    1e3 <gets+0x53>
-      break;
-    buf[i++] = c;
- 1c7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 1cb:	83 c7 01             	add    $0x1,%edi
- 1ce:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 1d1:	3c 0a                	cmp    $0xa,%al
- 1d3:	74 23                	je     1f8 <gets+0x68>
- 1d5:	3c 0d                	cmp    $0xd,%al
- 1d7:	74 1f                	je     1f8 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 1d9:	83 c3 01             	add    $0x1,%ebx
- 1dc:	89 fe                	mov    %edi,%esi
- 1de:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1e1:	7c cd                	jl     1b0 <gets+0x20>
- 1e3:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 1e5:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 1e8:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 1eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1ee:	5b                   	pop    %ebx
- 1ef:	5e                   	pop    %esi
- 1f0:	5f                   	pop    %edi
- 1f1:	5d                   	pop    %ebp
- 1f2:	c3                   	ret    
- 1f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 1f7:	90                   	nop
- 1f8:	8b 75 08             	mov    0x8(%ebp),%esi
- 1fb:	8b 45 08             	mov    0x8(%ebp),%eax
- 1fe:	01 de                	add    %ebx,%esi
- 200:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 202:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 205:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 208:	5b                   	pop    %ebx
- 209:	5e                   	pop    %esi
- 20a:	5f                   	pop    %edi
- 20b:	5d                   	pop    %ebp
- 20c:	c3                   	ret    
- 20d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000210 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 210:	f3 0f 1e fb          	endbr32 
- 214:	55                   	push   %ebp
- 215:	89 e5                	mov    %esp,%ebp
- 217:	56                   	push   %esi
- 218:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 219:	83 ec 08             	sub    $0x8,%esp
- 21c:	6a 00                	push   $0x0
- 21e:	ff 75 08             	pushl  0x8(%ebp)
- 221:	e8 ed 00 00 00       	call   313 <open>
-  if(fd < 0)
- 226:	83 c4 10             	add    $0x10,%esp
- 229:	85 c0                	test   %eax,%eax
- 22b:	78 2b                	js     258 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 22d:	83 ec 08             	sub    $0x8,%esp
- 230:	ff 75 0c             	pushl  0xc(%ebp)
- 233:	89 c3                	mov    %eax,%ebx
- 235:	50                   	push   %eax
- 236:	e8 f0 00 00 00       	call   32b <fstat>
-  close(fd);
- 23b:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 23e:	89 c6                	mov    %eax,%esi
-  close(fd);
- 240:	e8 b6 00 00 00       	call   2fb <close>
-  return r;
- 245:	83 c4 10             	add    $0x10,%esp
-}
- 248:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 24b:	89 f0                	mov    %esi,%eax
- 24d:	5b                   	pop    %ebx
- 24e:	5e                   	pop    %esi
- 24f:	5d                   	pop    %ebp
- 250:	c3                   	ret    
- 251:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 258:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 25d:	eb e9                	jmp    248 <stat+0x38>
- 25f:	90                   	nop
-
-00000260 <atoi>:
-
-int
-atoi(const char *s)
-{
- 260:	f3 0f 1e fb          	endbr32 
- 264:	55                   	push   %ebp
- 265:	89 e5                	mov    %esp,%ebp
- 267:	53                   	push   %ebx
- 268:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 26b:	0f be 02             	movsbl (%edx),%eax
- 26e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 271:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 274:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 279:	77 1a                	ja     295 <atoi+0x35>
- 27b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 27f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 280:	83 c2 01             	add    $0x1,%edx
- 283:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 286:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 28a:	0f be 02             	movsbl (%edx),%eax
- 28d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 290:	80 fb 09             	cmp    $0x9,%bl
- 293:	76 eb                	jbe    280 <atoi+0x20>
-  return n;
-}
- 295:	89 c8                	mov    %ecx,%eax
- 297:	5b                   	pop    %ebx
- 298:	5d                   	pop    %ebp
- 299:	c3                   	ret    
- 29a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000002a0 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 2a0:	f3 0f 1e fb          	endbr32 
- 2a4:	55                   	push   %ebp
- 2a5:	89 e5                	mov    %esp,%ebp
- 2a7:	57                   	push   %edi
- 2a8:	8b 45 10             	mov    0x10(%ebp),%eax
- 2ab:	8b 55 08             	mov    0x8(%ebp),%edx
- 2ae:	56                   	push   %esi
- 2af:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 2b2:	85 c0                	test   %eax,%eax
- 2b4:	7e 0f                	jle    2c5 <memmove+0x25>
- 2b6:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 2b8:	89 d7                	mov    %edx,%edi
- 2ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 2c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 2c1:	39 f8                	cmp    %edi,%eax
- 2c3:	75 fb                	jne    2c0 <memmove+0x20>
-  return vdst;
-}
- 2c5:	5e                   	pop    %esi
- 2c6:	89 d0                	mov    %edx,%eax
- 2c8:	5f                   	pop    %edi
- 2c9:	5d                   	pop    %ebp
- 2ca:	c3                   	ret    
-
-000002cb <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2cb:	b8 01 00 00 00       	mov    $0x1,%eax
- 2d0:	cd 40                	int    $0x40
- 2d2:	c3                   	ret    
-
-000002d3 <exit>:
-SYSCALL(exit)
- 2d3:	b8 02 00 00 00       	mov    $0x2,%eax
- 2d8:	cd 40                	int    $0x40
- 2da:	c3                   	ret    
-
-000002db <wait>:
-SYSCALL(wait)
- 2db:	b8 03 00 00 00       	mov    $0x3,%eax
- 2e0:	cd 40                	int    $0x40
- 2e2:	c3                   	ret    
-
-000002e3 <pipe>:
-SYSCALL(pipe)
- 2e3:	b8 04 00 00 00       	mov    $0x4,%eax
- 2e8:	cd 40                	int    $0x40
- 2ea:	c3                   	ret    
-
-000002eb <read>:
-SYSCALL(read)
- 2eb:	b8 05 00 00 00       	mov    $0x5,%eax
- 2f0:	cd 40                	int    $0x40
- 2f2:	c3                   	ret    
-
-000002f3 <write>:
-SYSCALL(write)
- 2f3:	b8 10 00 00 00       	mov    $0x10,%eax
- 2f8:	cd 40                	int    $0x40
- 2fa:	c3                   	ret    
-
-000002fb <close>:
-SYSCALL(close)
- 2fb:	b8 15 00 00 00       	mov    $0x15,%eax
- 300:	cd 40                	int    $0x40
- 302:	c3                   	ret    
-
-00000303 <kill>:
-SYSCALL(kill)
- 303:	b8 06 00 00 00       	mov    $0x6,%eax
- 308:	cd 40                	int    $0x40
- 30a:	c3                   	ret    
-
-0000030b <exec>:
-SYSCALL(exec)
- 30b:	b8 07 00 00 00       	mov    $0x7,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret    
-
-00000313 <open>:
-SYSCALL(open)
- 313:	b8 0f 00 00 00       	mov    $0xf,%eax
- 318:	cd 40                	int    $0x40
- 31a:	c3                   	ret    
-
-0000031b <mknod>:
-SYSCALL(mknod)
- 31b:	b8 11 00 00 00       	mov    $0x11,%eax
- 320:	cd 40                	int    $0x40
- 322:	c3                   	ret    
-
-00000323 <unlink>:
-SYSCALL(unlink)
- 323:	b8 12 00 00 00       	mov    $0x12,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret    
-
-0000032b <fstat>:
-SYSCALL(fstat)
- 32b:	b8 08 00 00 00       	mov    $0x8,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret    
-
-00000333 <link>:
-SYSCALL(link)
- 333:	b8 13 00 00 00       	mov    $0x13,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret    
-
-0000033b <mkdir>:
-SYSCALL(mkdir)
- 33b:	b8 14 00 00 00       	mov    $0x14,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret    
-
-00000343 <chdir>:
-SYSCALL(chdir)
- 343:	b8 09 00 00 00       	mov    $0x9,%eax
- 348:	cd 40                	int    $0x40
- 34a:	c3                   	ret    
-
-0000034b <dup>:
-SYSCALL(dup)
- 34b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret    
-
-00000353 <getpid>:
-SYSCALL(getpid)
- 353:	b8 0b 00 00 00       	mov    $0xb,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret    
-
-0000035b <sbrk>:
-SYSCALL(sbrk)
- 35b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret    
-
-00000363 <sleep>:
-SYSCALL(sleep)
- 363:	b8 0d 00 00 00       	mov    $0xd,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret    
-
-0000036b <uptime>:
-SYSCALL(uptime)
- 36b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret    
-
-00000373 <draw>:
-SYSCALL(draw)
- 373:	b8 16 00 00 00       	mov    $0x16,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret    
-
-0000037b <thread_create>:
-SYSCALL(thread_create)
- 37b:	b8 18 00 00 00       	mov    $0x18,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret    
-
-00000383 <thread_join>:
-SYSCALL(thread_join)
- 383:	b8 19 00 00 00       	mov    $0x19,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret    
-
-0000038b <thread_exit>:
-SYSCALL(thread_exit)
- 38b:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 390:	cd 40                	int    $0x40
- 392:	c3                   	ret    
- 393:	66 90                	xchg   %ax,%ax
- 395:	66 90                	xchg   %ax,%ax
- 397:	66 90                	xchg   %ax,%ax
- 399:	66 90                	xchg   %ax,%ax
- 39b:	66 90                	xchg   %ax,%ax
- 39d:	66 90                	xchg   %ax,%ax
- 39f:	90                   	nop
-
-000003a0 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3a0:	55                   	push   %ebp
- 3a1:	89 e5                	mov    %esp,%ebp
- 3a3:	57                   	push   %edi
- 3a4:	56                   	push   %esi
- 3a5:	53                   	push   %ebx
- 3a6:	83 ec 3c             	sub    $0x3c,%esp
- 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 3ac:	89 d1                	mov    %edx,%ecx
-{
- 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 3b1:	85 d2                	test   %edx,%edx
- 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
- 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3bd:	74 79                	je     438 <printint+0x98>
-    neg = 1;
- 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 3c6:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 3c8:	31 db                	xor    %ebx,%ebx
- 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3cd:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 3d0:	89 c8                	mov    %ecx,%eax
- 3d2:	31 d2                	xor    %edx,%edx
- 3d4:	89 cf                	mov    %ecx,%edi
- 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3d9:	0f b6 92 d4 07 00 00 	movzbl 0x7d4(%edx),%edx
- 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3e3:	89 d8                	mov    %ebx,%eax
- 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3f1:	76 dd                	jbe    3d0 <printint+0x30>
-  if(neg)
- 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3f6:	85 c9                	test   %ecx,%ecx
- 3f8:	74 0c                	je     406 <printint+0x66>
-    buf[i++] = '-';
- 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 3ff:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 40d:	eb 07                	jmp    416 <printint+0x76>
- 40f:	90                   	nop
- 410:	0f b6 13             	movzbl (%ebx),%edx
- 413:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 416:	83 ec 04             	sub    $0x4,%esp
- 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 41c:	6a 01                	push   $0x1
- 41e:	56                   	push   %esi
- 41f:	57                   	push   %edi
- 420:	e8 ce fe ff ff       	call   2f3 <write>
-  while(--i >= 0)
- 425:	83 c4 10             	add    $0x10,%esp
- 428:	39 de                	cmp    %ebx,%esi
- 42a:	75 e4                	jne    410 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 42f:	5b                   	pop    %ebx
- 430:	5e                   	pop    %esi
- 431:	5f                   	pop    %edi
- 432:	5d                   	pop    %ebp
- 433:	c3                   	ret    
- 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 43f:	eb 87                	jmp    3c8 <printint+0x28>
- 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 44f:	90                   	nop
-
-00000450 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 450:	f3 0f 1e fb          	endbr32 
- 454:	55                   	push   %ebp
- 455:	89 e5                	mov    %esp,%ebp
- 457:	57                   	push   %edi
- 458:	56                   	push   %esi
- 459:	53                   	push   %ebx
- 45a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 45d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 460:	0f b6 1e             	movzbl (%esi),%ebx
- 463:	84 db                	test   %bl,%bl
- 465:	0f 84 b4 00 00 00    	je     51f <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 46b:	8d 45 10             	lea    0x10(%ebp),%eax
- 46e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 471:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 474:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 476:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 479:	eb 33                	jmp    4ae <printf+0x5e>
- 47b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 47f:	90                   	nop
- 480:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 483:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 488:	83 f8 25             	cmp    $0x25,%eax
- 48b:	74 17                	je     4a4 <printf+0x54>
-  write(fd, &c, 1);
- 48d:	83 ec 04             	sub    $0x4,%esp
- 490:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 493:	6a 01                	push   $0x1
- 495:	57                   	push   %edi
- 496:	ff 75 08             	pushl  0x8(%ebp)
- 499:	e8 55 fe ff ff       	call   2f3 <write>
- 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 4a1:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 4a4:	0f b6 1e             	movzbl (%esi),%ebx
- 4a7:	83 c6 01             	add    $0x1,%esi
- 4aa:	84 db                	test   %bl,%bl
- 4ac:	74 71                	je     51f <printf+0xcf>
-    c = fmt[i] & 0xff;
- 4ae:	0f be cb             	movsbl %bl,%ecx
- 4b1:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 4b4:	85 d2                	test   %edx,%edx
- 4b6:	74 c8                	je     480 <printf+0x30>
-      }
-    } else if(state == '%'){
- 4b8:	83 fa 25             	cmp    $0x25,%edx
- 4bb:	75 e7                	jne    4a4 <printf+0x54>
-      if(c == 'd'){
- 4bd:	83 f8 64             	cmp    $0x64,%eax
- 4c0:	0f 84 9a 00 00 00    	je     560 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 4c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4cc:	83 f9 70             	cmp    $0x70,%ecx
- 4cf:	74 5f                	je     530 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 4d1:	83 f8 73             	cmp    $0x73,%eax
- 4d4:	0f 84 d6 00 00 00    	je     5b0 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 4da:	83 f8 63             	cmp    $0x63,%eax
- 4dd:	0f 84 8d 00 00 00    	je     570 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 4e3:	83 f8 25             	cmp    $0x25,%eax
- 4e6:	0f 84 b4 00 00 00    	je     5a0 <printf+0x150>
-  write(fd, &c, 1);
- 4ec:	83 ec 04             	sub    $0x4,%esp
- 4ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4f3:	6a 01                	push   $0x1
- 4f5:	57                   	push   %edi
- 4f6:	ff 75 08             	pushl  0x8(%ebp)
- 4f9:	e8 f5 fd ff ff       	call   2f3 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 4fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 501:	83 c4 0c             	add    $0xc,%esp
- 504:	6a 01                	push   $0x1
- 506:	83 c6 01             	add    $0x1,%esi
- 509:	57                   	push   %edi
- 50a:	ff 75 08             	pushl  0x8(%ebp)
- 50d:	e8 e1 fd ff ff       	call   2f3 <write>
-  for(i = 0; fmt[i]; i++){
- 512:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 516:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 519:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 51b:	84 db                	test   %bl,%bl
- 51d:	75 8f                	jne    4ae <printf+0x5e>
-    }
-  }
-}
- 51f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 522:	5b                   	pop    %ebx
- 523:	5e                   	pop    %esi
- 524:	5f                   	pop    %edi
- 525:	5d                   	pop    %ebp
- 526:	c3                   	ret    
- 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 52e:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 530:	83 ec 0c             	sub    $0xc,%esp
- 533:	b9 10 00 00 00       	mov    $0x10,%ecx
- 538:	6a 00                	push   $0x0
- 53a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 53d:	8b 45 08             	mov    0x8(%ebp),%eax
- 540:	8b 13                	mov    (%ebx),%edx
- 542:	e8 59 fe ff ff       	call   3a0 <printint>
-        ap++;
- 547:	89 d8                	mov    %ebx,%eax
- 549:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 54c:	31 d2                	xor    %edx,%edx
-        ap++;
- 54e:	83 c0 04             	add    $0x4,%eax
- 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 554:	e9 4b ff ff ff       	jmp    4a4 <printf+0x54>
- 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 560:	83 ec 0c             	sub    $0xc,%esp
- 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 568:	6a 01                	push   $0x1
- 56a:	eb ce                	jmp    53a <printf+0xea>
- 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 573:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 576:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 578:	6a 01                	push   $0x1
-        ap++;
- 57a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 57d:	57                   	push   %edi
- 57e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 581:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 584:	e8 6a fd ff ff       	call   2f3 <write>
-        ap++;
- 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 58c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 58f:	31 d2                	xor    %edx,%edx
- 591:	e9 0e ff ff ff       	jmp    4a4 <printf+0x54>
- 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 59d:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 5a3:	83 ec 04             	sub    $0x4,%esp
- 5a6:	e9 59 ff ff ff       	jmp    504 <printf+0xb4>
- 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5af:	90                   	nop
-        s = (char*)*ap;
- 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5b3:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 5b5:	83 c0 04             	add    $0x4,%eax
- 5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 5bb:	85 db                	test   %ebx,%ebx
- 5bd:	74 17                	je     5d6 <printf+0x186>
-        while(*s != 0){
- 5bf:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 5c2:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 5c4:	84 c0                	test   %al,%al
- 5c6:	0f 84 d8 fe ff ff    	je     4a4 <printf+0x54>
- 5cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5cf:	89 de                	mov    %ebx,%esi
- 5d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5d4:	eb 1a                	jmp    5f0 <printf+0x1a0>
-          s = "(null)";
- 5d6:	bb cc 07 00 00       	mov    $0x7cc,%ebx
-        while(*s != 0){
- 5db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5de:	b8 28 00 00 00       	mov    $0x28,%eax
- 5e3:	89 de                	mov    %ebx,%esi
- 5e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5ef:	90                   	nop
-  write(fd, &c, 1);
- 5f0:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 5f3:	83 c6 01             	add    $0x1,%esi
- 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 5f9:	6a 01                	push   $0x1
- 5fb:	57                   	push   %edi
- 5fc:	53                   	push   %ebx
- 5fd:	e8 f1 fc ff ff       	call   2f3 <write>
-        while(*s != 0){
- 602:	0f b6 06             	movzbl (%esi),%eax
- 605:	83 c4 10             	add    $0x10,%esp
- 608:	84 c0                	test   %al,%al
- 60a:	75 e4                	jne    5f0 <printf+0x1a0>
- 60c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 60f:	31 d2                	xor    %edx,%edx
- 611:	e9 8e fe ff ff       	jmp    4a4 <printf+0x54>
- 616:	66 90                	xchg   %ax,%ax
- 618:	66 90                	xchg   %ax,%ax
- 61a:	66 90                	xchg   %ax,%ax
- 61c:	66 90                	xchg   %ax,%ax
- 61e:	66 90                	xchg   %ax,%ax
-
-00000620 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 620:	f3 0f 1e fb          	endbr32 
- 624:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 625:	a1 84 0a 00 00       	mov    0xa84,%eax
-{
- 62a:	89 e5                	mov    %esp,%ebp
- 62c:	57                   	push   %edi
- 62d:	56                   	push   %esi
- 62e:	53                   	push   %ebx
- 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 632:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 634:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 637:	39 c8                	cmp    %ecx,%eax
- 639:	73 15                	jae    650 <free+0x30>
- 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 63f:	90                   	nop
- 640:	39 d1                	cmp    %edx,%ecx
- 642:	72 14                	jb     658 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 644:	39 d0                	cmp    %edx,%eax
- 646:	73 10                	jae    658 <free+0x38>
-{
- 648:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 64a:	8b 10                	mov    (%eax),%edx
- 64c:	39 c8                	cmp    %ecx,%eax
- 64e:	72 f0                	jb     640 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 650:	39 d0                	cmp    %edx,%eax
- 652:	72 f4                	jb     648 <free+0x28>
- 654:	39 d1                	cmp    %edx,%ecx
- 656:	73 f0                	jae    648 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 65e:	39 fa                	cmp    %edi,%edx
- 660:	74 1e                	je     680 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 662:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 665:	8b 50 04             	mov    0x4(%eax),%edx
- 668:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 66b:	39 f1                	cmp    %esi,%ecx
- 66d:	74 28                	je     697 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 66f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 671:	5b                   	pop    %ebx
-  freep = p;
- 672:	a3 84 0a 00 00       	mov    %eax,0xa84
-}
- 677:	5e                   	pop    %esi
- 678:	5f                   	pop    %edi
- 679:	5d                   	pop    %ebp
- 67a:	c3                   	ret    
- 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 67f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 680:	03 72 04             	add    0x4(%edx),%esi
- 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 686:	8b 10                	mov    (%eax),%edx
- 688:	8b 12                	mov    (%edx),%edx
- 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 68d:	8b 50 04             	mov    0x4(%eax),%edx
- 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 693:	39 f1                	cmp    %esi,%ecx
- 695:	75 d8                	jne    66f <free+0x4f>
-    p->s.size += bp->s.size;
- 697:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 69a:	a3 84 0a 00 00       	mov    %eax,0xa84
-    p->s.size += bp->s.size;
- 69f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 6a5:	89 10                	mov    %edx,(%eax)
-}
- 6a7:	5b                   	pop    %ebx
- 6a8:	5e                   	pop    %esi
- 6a9:	5f                   	pop    %edi
- 6aa:	5d                   	pop    %ebp
- 6ab:	c3                   	ret    
- 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000006b0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 6b0:	f3 0f 1e fb          	endbr32 
- 6b4:	55                   	push   %ebp
- 6b5:	89 e5                	mov    %esp,%ebp
- 6b7:	57                   	push   %edi
- 6b8:	56                   	push   %esi
- 6b9:	53                   	push   %ebx
- 6ba:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6bd:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 6c0:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6c6:	8d 70 07             	lea    0x7(%eax),%esi
- 6c9:	c1 ee 03             	shr    $0x3,%esi
- 6cc:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 6cf:	85 ff                	test   %edi,%edi
- 6d1:	0f 84 a9 00 00 00    	je     780 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6d7:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 6d9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6dc:	39 f1                	cmp    %esi,%ecx
- 6de:	73 6d                	jae    74d <malloc+0x9d>
- 6e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6eb:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 6ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6f8:	eb 17                	jmp    711 <malloc+0x61>
- 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 700:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 702:	8b 4a 04             	mov    0x4(%edx),%ecx
- 705:	39 f1                	cmp    %esi,%ecx
- 707:	73 4f                	jae    758 <malloc+0xa8>
- 709:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
- 70f:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 711:	39 c7                	cmp    %eax,%edi
- 713:	75 eb                	jne    700 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 715:	83 ec 0c             	sub    $0xc,%esp
- 718:	ff 75 e4             	pushl  -0x1c(%ebp)
- 71b:	e8 3b fc ff ff       	call   35b <sbrk>
-  if(p == (char*)-1)
- 720:	83 c4 10             	add    $0x10,%esp
- 723:	83 f8 ff             	cmp    $0xffffffff,%eax
- 726:	74 1b                	je     743 <malloc+0x93>
-  hp->s.size = nu;
- 728:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 72b:	83 ec 0c             	sub    $0xc,%esp
- 72e:	83 c0 08             	add    $0x8,%eax
- 731:	50                   	push   %eax
- 732:	e8 e9 fe ff ff       	call   620 <free>
-  return freep;
- 737:	a1 84 0a 00 00       	mov    0xa84,%eax
-      if((p = morecore(nunits)) == 0)
- 73c:	83 c4 10             	add    $0x10,%esp
- 73f:	85 c0                	test   %eax,%eax
- 741:	75 bd                	jne    700 <malloc+0x50>
-        return 0;
-  }
-}
- 743:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 746:	31 c0                	xor    %eax,%eax
-}
- 748:	5b                   	pop    %ebx
- 749:	5e                   	pop    %esi
- 74a:	5f                   	pop    %edi
- 74b:	5d                   	pop    %ebp
- 74c:	c3                   	ret    
-    if(p->s.size >= nunits){
- 74d:	89 c2                	mov    %eax,%edx
- 74f:	89 f8                	mov    %edi,%eax
- 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- 758:	39 ce                	cmp    %ecx,%esi
- 75a:	74 54                	je     7b0 <malloc+0x100>
-        p->s.size -= nunits;
- 75c:	29 f1                	sub    %esi,%ecx
- 75e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- 761:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- 764:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- 767:	a3 84 0a 00 00       	mov    %eax,0xa84
-}
- 76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 76f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- 772:	5b                   	pop    %ebx
- 773:	5e                   	pop    %esi
- 774:	5f                   	pop    %edi
- 775:	5d                   	pop    %ebp
- 776:	c3                   	ret    
- 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 77e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- 780:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
- 787:	0a 00 00 
-    base.s.size = 0;
- 78a:	bf 88 0a 00 00       	mov    $0xa88,%edi
-    base.s.ptr = freep = prevp = &base;
- 78f:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
- 796:	0a 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 799:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- 79b:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
- 7a2:	00 00 00 
-    if(p->s.size >= nunits){
- 7a5:	e9 36 ff ff ff       	jmp    6e0 <malloc+0x30>
- 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- 7b0:	8b 0a                	mov    (%edx),%ecx
- 7b2:	89 08                	mov    %ecx,(%eax)
- 7b4:	eb b1                	jmp    767 <malloc+0xb7>
diff -ruN xv6-public/kill.c xv6-public-mynew/kill.c
--- xv6-public/kill.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/kill.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,17 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char **argv)
-{
-  int i;
-
-  if(argc < 2){
-    printf(2, "usage: kill pid...\n");
-    exit();
-  }
-  for(i=1; i<argc; i++)
-    kill(atoi(argv[i]));
-  exit();
-}
diff -ruN xv6-public/kill.d xv6-public-mynew/kill.d
--- xv6-public/kill.d	2022-09-05 09:51:05.298999139 +0530
+++ xv6-public-mynew/kill.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/kill.o and xv6-public-mynew/kill.o differ
diff -ruN xv6-public/kill.sym xv6-public-mynew/kill.sym
--- xv6-public/kill.sym	2022-09-05 09:51:05.326999140 +0530
+++ xv6-public-mynew/kill.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,61 +0,0 @@
-00000000 .text
-000007b8 .rodata
-000007e8 .eh_frame
-00000a84 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 kill.c
-00000000 ulib.c
-00000000 printf.c
-000003a0 printint
-000007d4 digits.1097
-00000000 umalloc.c
-00000a84 freep
-00000a88 base
-00000070 strcpy
-00000450 printf
-0000038b thread_exit
-000002a0 memmove
-0000031b mknod
-00000190 gets
-00000353 getpid
-000006b0 malloc
-00000363 sleep
-000002e3 pipe
-000002f3 write
-0000032b fstat
-00000303 kill
-00000343 chdir
-0000030b exec
-000002db wait
-000002eb read
-00000323 unlink
-000002cb fork
-0000035b sbrk
-0000036b uptime
-00000a84 __bss_start
-00000130 memset
-00000000 main
-000000a0 strcmp
-0000034b dup
-00000210 stat
-00000a84 _edata
-00000a90 _end
-00000333 link
-000002d3 exit
-00000260 atoi
-00000373 draw
-000000f0 strlen
-00000313 open
-00000150 strchr
-0000037b thread_create
-0000033b mkdir
-000002fb close
-00000383 thread_join
-00000620 free
diff -ruN xv6-public/lapic.c xv6-public-mynew/lapic.c
--- xv6-public/lapic.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/lapic.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,229 +0,0 @@
-// The local APIC manages internal (non-I/O) interrupts.
-// See Chapter 8 & Appendix C of Intel processor manual volume 3.
-
-#include "param.h"
-#include "types.h"
-#include "defs.h"
-#include "date.h"
-#include "memlayout.h"
-#include "traps.h"
-#include "mmu.h"
-#include "x86.h"
-
-// Local APIC registers, divided by 4 for use as uint[] indices.
-#define ID      (0x0020/4)   // ID
-#define VER     (0x0030/4)   // Version
-#define TPR     (0x0080/4)   // Task Priority
-#define EOI     (0x00B0/4)   // EOI
-#define SVR     (0x00F0/4)   // Spurious Interrupt Vector
-  #define ENABLE     0x00000100   // Unit Enable
-#define ESR     (0x0280/4)   // Error Status
-#define ICRLO   (0x0300/4)   // Interrupt Command
-  #define INIT       0x00000500   // INIT/RESET
-  #define STARTUP    0x00000600   // Startup IPI
-  #define DELIVS     0x00001000   // Delivery status
-  #define ASSERT     0x00004000   // Assert interrupt (vs deassert)
-  #define DEASSERT   0x00000000
-  #define LEVEL      0x00008000   // Level triggered
-  #define BCAST      0x00080000   // Send to all APICs, including self.
-  #define BUSY       0x00001000
-  #define FIXED      0x00000000
-#define ICRHI   (0x0310/4)   // Interrupt Command [63:32]
-#define TIMER   (0x0320/4)   // Local Vector Table 0 (TIMER)
-  #define X1         0x0000000B   // divide counts by 1
-  #define PERIODIC   0x00020000   // Periodic
-#define PCINT   (0x0340/4)   // Performance Counter LVT
-#define LINT0   (0x0350/4)   // Local Vector Table 1 (LINT0)
-#define LINT1   (0x0360/4)   // Local Vector Table 2 (LINT1)
-#define ERROR   (0x0370/4)   // Local Vector Table 3 (ERROR)
-  #define MASKED     0x00010000   // Interrupt masked
-#define TICR    (0x0380/4)   // Timer Initial Count
-#define TCCR    (0x0390/4)   // Timer Current Count
-#define TDCR    (0x03E0/4)   // Timer Divide Configuration
-
-volatile uint *lapic;  // Initialized in mp.c
-
-//PAGEBREAK!
-static void
-lapicw(int index, int value)
-{
-  lapic[index] = value;
-  lapic[ID];  // wait for write to finish, by reading
-}
-
-void
-lapicinit(void)
-{
-  if(!lapic)
-    return;
-
-  // Enable local APIC; set spurious interrupt vector.
-  lapicw(SVR, ENABLE | (T_IRQ0 + IRQ_SPURIOUS));
-
-  // The timer repeatedly counts down at bus frequency
-  // from lapic[TICR] and then issues an interrupt.
-  // If xv6 cared more about precise timekeeping,
-  // TICR would be calibrated using an external time source.
-  lapicw(TDCR, X1);
-  lapicw(TIMER, PERIODIC | (T_IRQ0 + IRQ_TIMER));
-  lapicw(TICR, 10000000);
-
-  // Disable logical interrupt lines.
-  lapicw(LINT0, MASKED);
-  lapicw(LINT1, MASKED);
-
-  // Disable performance counter overflow interrupts
-  // on machines that provide that interrupt entry.
-  if(((lapic[VER]>>16) & 0xFF) >= 4)
-    lapicw(PCINT, MASKED);
-
-  // Map error interrupt to IRQ_ERROR.
-  lapicw(ERROR, T_IRQ0 + IRQ_ERROR);
-
-  // Clear error status register (requires back-to-back writes).
-  lapicw(ESR, 0);
-  lapicw(ESR, 0);
-
-  // Ack any outstanding interrupts.
-  lapicw(EOI, 0);
-
-  // Send an Init Level De-Assert to synchronise arbitration ID's.
-  lapicw(ICRHI, 0);
-  lapicw(ICRLO, BCAST | INIT | LEVEL);
-  while(lapic[ICRLO] & DELIVS)
-    ;
-
-  // Enable interrupts on the APIC (but not on the processor).
-  lapicw(TPR, 0);
-}
-
-int
-lapicid(void)
-{
-  if (!lapic)
-    return 0;
-  return lapic[ID] >> 24;
-}
-
-// Acknowledge interrupt.
-void
-lapiceoi(void)
-{
-  if(lapic)
-    lapicw(EOI, 0);
-}
-
-// Spin for a given number of microseconds.
-// On real hardware would want to tune this dynamically.
-void
-microdelay(int us)
-{
-}
-
-#define CMOS_PORT    0x70
-#define CMOS_RETURN  0x71
-
-// Start additional processor running entry code at addr.
-// See Appendix B of MultiProcessor Specification.
-void
-lapicstartap(uchar apicid, uint addr)
-{
-  int i;
-  ushort *wrv;
-
-  // "The BSP must initialize CMOS shutdown code to 0AH
-  // and the warm reset vector (DWORD based at 40:67) to point at
-  // the AP startup code prior to the [universal startup algorithm]."
-  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
-  outb(CMOS_PORT+1, 0x0A);
-  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
-  wrv[0] = 0;
-  wrv[1] = addr >> 4;
-
-  // "Universal startup algorithm."
-  // Send INIT (level-triggered) interrupt to reset other CPU.
-  lapicw(ICRHI, apicid<<24);
-  lapicw(ICRLO, INIT | LEVEL | ASSERT);
-  microdelay(200);
-  lapicw(ICRLO, INIT | LEVEL);
-  microdelay(100);    // should be 10ms, but too slow in Bochs!
-
-  // Send startup IPI (twice!) to enter code.
-  // Regular hardware is supposed to only accept a STARTUP
-  // when it is in the halted state due to an INIT.  So the second
-  // should be ignored, but it is part of the official Intel algorithm.
-  // Bochs complains about the second one.  Too bad for Bochs.
-  for(i = 0; i < 2; i++){
-    lapicw(ICRHI, apicid<<24);
-    lapicw(ICRLO, STARTUP | (addr>>12));
-    microdelay(200);
-  }
-}
-
-#define CMOS_STATA   0x0a
-#define CMOS_STATB   0x0b
-#define CMOS_UIP    (1 << 7)        // RTC update in progress
-
-#define SECS    0x00
-#define MINS    0x02
-#define HOURS   0x04
-#define DAY     0x07
-#define MONTH   0x08
-#define YEAR    0x09
-
-static uint
-cmos_read(uint reg)
-{
-  outb(CMOS_PORT,  reg);
-  microdelay(200);
-
-  return inb(CMOS_RETURN);
-}
-
-static void
-fill_rtcdate(struct rtcdate *r)
-{
-  r->second = cmos_read(SECS);
-  r->minute = cmos_read(MINS);
-  r->hour   = cmos_read(HOURS);
-  r->day    = cmos_read(DAY);
-  r->month  = cmos_read(MONTH);
-  r->year   = cmos_read(YEAR);
-}
-
-// qemu seems to use 24-hour GWT and the values are BCD encoded
-void
-cmostime(struct rtcdate *r)
-{
-  struct rtcdate t1, t2;
-  int sb, bcd;
-
-  sb = cmos_read(CMOS_STATB);
-
-  bcd = (sb & (1 << 2)) == 0;
-
-  // make sure CMOS doesn't modify time while we read it
-  for(;;) {
-    fill_rtcdate(&t1);
-    if(cmos_read(CMOS_STATA) & CMOS_UIP)
-        continue;
-    fill_rtcdate(&t2);
-    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
-      break;
-  }
-
-  // convert
-  if(bcd) {
-#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
-    CONV(second);
-    CONV(minute);
-    CONV(hour  );
-    CONV(day   );
-    CONV(month );
-    CONV(year  );
-#undef     CONV
-  }
-
-  *r = t1;
-  r->year += 2000;
-}
diff -ruN xv6-public/lapic.d xv6-public-mynew/lapic.d
--- xv6-public/lapic.d	2022-09-05 09:51:07.698999209 +0530
+++ xv6-public-mynew/lapic.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-lapic.o: lapic.c /usr/include/stdc-predef.h param.h types.h defs.h date.h \
- memlayout.h traps.h mmu.h x86.h
Binary files xv6-public/lapic.o and xv6-public-mynew/lapic.o differ
diff -ruN xv6-public/LICENSE xv6-public-mynew/LICENSE
--- xv6-public/LICENSE	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/LICENSE	1970-01-01 05:30:00.000000000 +0530
@@ -1,24 +0,0 @@
-The xv6 software is:
-
-Copyright (c) 2006-2018 Frans Kaashoek, Robert Morris, Russ Cox,
-                        Massachusetts Institute of Technology
-
-Permission is hereby granted, free of charge, to any person obtaining
-a copy of this software and associated documentation files (the
-"Software"), to deal in the Software without restriction, including
-without limitation the rights to use, copy, modify, merge, publish,
-distribute, sublicense, and/or sell copies of the Software, and to
-permit persons to whom the Software is furnished to do so, subject to
-the following conditions:
-
-The above copyright notice and this permission notice shall be
-included in all copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-
Binary files xv6-public/_ln and xv6-public-mynew/_ln differ
diff -ruN xv6-public/ln.asm xv6-public-mynew/ln.asm
--- xv6-public/ln.asm	2022-09-05 09:51:05.382999142 +0530
+++ xv6-public-mynew/ln.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1214 +0,0 @@
-
-_ln:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-  if(argc != 3){
-   e:	83 39 03             	cmpl   $0x3,(%ecx)
-{
-  11:	55                   	push   %ebp
-  12:	89 e5                	mov    %esp,%ebp
-  14:	53                   	push   %ebx
-  15:	51                   	push   %ecx
-  16:	8b 59 04             	mov    0x4(%ecx),%ebx
-  if(argc != 3){
-  19:	74 13                	je     2e <main+0x2e>
-    printf(2, "Usage: ln old new\n");
-  1b:	52                   	push   %edx
-  1c:	52                   	push   %edx
-  1d:	68 a8 07 00 00       	push   $0x7a8
-  22:	6a 02                	push   $0x2
-  24:	e8 17 04 00 00       	call   440 <printf>
-    exit();
-  29:	e8 95 02 00 00       	call   2c3 <exit>
-  }
-  if(link(argv[1], argv[2]) < 0)
-  2e:	50                   	push   %eax
-  2f:	50                   	push   %eax
-  30:	ff 73 08             	pushl  0x8(%ebx)
-  33:	ff 73 04             	pushl  0x4(%ebx)
-  36:	e8 e8 02 00 00       	call   323 <link>
-  3b:	83 c4 10             	add    $0x10,%esp
-  3e:	85 c0                	test   %eax,%eax
-  40:	78 05                	js     47 <main+0x47>
-    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
-  exit();
-  42:	e8 7c 02 00 00       	call   2c3 <exit>
-    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
-  47:	ff 73 08             	pushl  0x8(%ebx)
-  4a:	ff 73 04             	pushl  0x4(%ebx)
-  4d:	68 bb 07 00 00       	push   $0x7bb
-  52:	6a 02                	push   $0x2
-  54:	e8 e7 03 00 00       	call   440 <printf>
-  59:	83 c4 10             	add    $0x10,%esp
-  5c:	eb e4                	jmp    42 <main+0x42>
-  5e:	66 90                	xchg   %ax,%ax
-
-00000060 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  60:	f3 0f 1e fb          	endbr32 
-  64:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  65:	31 c0                	xor    %eax,%eax
-{
-  67:	89 e5                	mov    %esp,%ebp
-  69:	53                   	push   %ebx
-  6a:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  6d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
-  70:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  74:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  77:	83 c0 01             	add    $0x1,%eax
-  7a:	84 d2                	test   %dl,%dl
-  7c:	75 f2                	jne    70 <strcpy+0x10>
-    ;
-  return os;
-}
-  7e:	89 c8                	mov    %ecx,%eax
-  80:	5b                   	pop    %ebx
-  81:	5d                   	pop    %ebp
-  82:	c3                   	ret    
-  83:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000090 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  90:	f3 0f 1e fb          	endbr32 
-  94:	55                   	push   %ebp
-  95:	89 e5                	mov    %esp,%ebp
-  97:	53                   	push   %ebx
-  98:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  9b:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
-  9e:	0f b6 01             	movzbl (%ecx),%eax
-  a1:	0f b6 1a             	movzbl (%edx),%ebx
-  a4:	84 c0                	test   %al,%al
-  a6:	75 19                	jne    c1 <strcmp+0x31>
-  a8:	eb 26                	jmp    d0 <strcmp+0x40>
-  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  b0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
-  b4:	83 c1 01             	add    $0x1,%ecx
-  b7:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
-  ba:	0f b6 1a             	movzbl (%edx),%ebx
-  bd:	84 c0                	test   %al,%al
-  bf:	74 0f                	je     d0 <strcmp+0x40>
-  c1:	38 d8                	cmp    %bl,%al
-  c3:	74 eb                	je     b0 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
-  c5:	29 d8                	sub    %ebx,%eax
-}
-  c7:	5b                   	pop    %ebx
-  c8:	5d                   	pop    %ebp
-  c9:	c3                   	ret    
-  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  d0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
-  d2:	29 d8                	sub    %ebx,%eax
-}
-  d4:	5b                   	pop    %ebx
-  d5:	5d                   	pop    %ebp
-  d6:	c3                   	ret    
-  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  de:	66 90                	xchg   %ax,%ax
-
-000000e0 <strlen>:
-
-uint
-strlen(const char *s)
-{
-  e0:	f3 0f 1e fb          	endbr32 
-  e4:	55                   	push   %ebp
-  e5:	89 e5                	mov    %esp,%ebp
-  e7:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
-  ea:	80 3a 00             	cmpb   $0x0,(%edx)
-  ed:	74 21                	je     110 <strlen+0x30>
-  ef:	31 c0                	xor    %eax,%eax
-  f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  f8:	83 c0 01             	add    $0x1,%eax
-  fb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-  ff:	89 c1                	mov    %eax,%ecx
- 101:	75 f5                	jne    f8 <strlen+0x18>
-    ;
-  return n;
-}
- 103:	89 c8                	mov    %ecx,%eax
- 105:	5d                   	pop    %ebp
- 106:	c3                   	ret    
- 107:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 10e:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 110:	31 c9                	xor    %ecx,%ecx
-}
- 112:	5d                   	pop    %ebp
- 113:	89 c8                	mov    %ecx,%eax
- 115:	c3                   	ret    
- 116:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 11d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000120 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 120:	f3 0f 1e fb          	endbr32 
- 124:	55                   	push   %ebp
- 125:	89 e5                	mov    %esp,%ebp
- 127:	57                   	push   %edi
- 128:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 12b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 12e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 131:	89 d7                	mov    %edx,%edi
- 133:	fc                   	cld    
- 134:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 136:	89 d0                	mov    %edx,%eax
- 138:	5f                   	pop    %edi
- 139:	5d                   	pop    %ebp
- 13a:	c3                   	ret    
- 13b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 13f:	90                   	nop
-
-00000140 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 140:	f3 0f 1e fb          	endbr32 
- 144:	55                   	push   %ebp
- 145:	89 e5                	mov    %esp,%ebp
- 147:	8b 45 08             	mov    0x8(%ebp),%eax
- 14a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 14e:	0f b6 10             	movzbl (%eax),%edx
- 151:	84 d2                	test   %dl,%dl
- 153:	75 16                	jne    16b <strchr+0x2b>
- 155:	eb 21                	jmp    178 <strchr+0x38>
- 157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 15e:	66 90                	xchg   %ax,%ax
- 160:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 164:	83 c0 01             	add    $0x1,%eax
- 167:	84 d2                	test   %dl,%dl
- 169:	74 0d                	je     178 <strchr+0x38>
-    if(*s == c)
- 16b:	38 d1                	cmp    %dl,%cl
- 16d:	75 f1                	jne    160 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 16f:	5d                   	pop    %ebp
- 170:	c3                   	ret    
- 171:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 178:	31 c0                	xor    %eax,%eax
-}
- 17a:	5d                   	pop    %ebp
- 17b:	c3                   	ret    
- 17c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000180 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 180:	f3 0f 1e fb          	endbr32 
- 184:	55                   	push   %ebp
- 185:	89 e5                	mov    %esp,%ebp
- 187:	57                   	push   %edi
- 188:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 189:	31 f6                	xor    %esi,%esi
-{
- 18b:	53                   	push   %ebx
- 18c:	89 f3                	mov    %esi,%ebx
- 18e:	83 ec 1c             	sub    $0x1c,%esp
- 191:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 194:	eb 33                	jmp    1c9 <gets+0x49>
- 196:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 19d:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 1a0:	83 ec 04             	sub    $0x4,%esp
- 1a3:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 1a6:	6a 01                	push   $0x1
- 1a8:	50                   	push   %eax
- 1a9:	6a 00                	push   $0x0
- 1ab:	e8 2b 01 00 00       	call   2db <read>
-    if(cc < 1)
- 1b0:	83 c4 10             	add    $0x10,%esp
- 1b3:	85 c0                	test   %eax,%eax
- 1b5:	7e 1c                	jle    1d3 <gets+0x53>
-      break;
-    buf[i++] = c;
- 1b7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 1bb:	83 c7 01             	add    $0x1,%edi
- 1be:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 1c1:	3c 0a                	cmp    $0xa,%al
- 1c3:	74 23                	je     1e8 <gets+0x68>
- 1c5:	3c 0d                	cmp    $0xd,%al
- 1c7:	74 1f                	je     1e8 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 1c9:	83 c3 01             	add    $0x1,%ebx
- 1cc:	89 fe                	mov    %edi,%esi
- 1ce:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1d1:	7c cd                	jl     1a0 <gets+0x20>
- 1d3:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 1d5:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 1d8:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 1db:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1de:	5b                   	pop    %ebx
- 1df:	5e                   	pop    %esi
- 1e0:	5f                   	pop    %edi
- 1e1:	5d                   	pop    %ebp
- 1e2:	c3                   	ret    
- 1e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 1e7:	90                   	nop
- 1e8:	8b 75 08             	mov    0x8(%ebp),%esi
- 1eb:	8b 45 08             	mov    0x8(%ebp),%eax
- 1ee:	01 de                	add    %ebx,%esi
- 1f0:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 1f2:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 1f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1f8:	5b                   	pop    %ebx
- 1f9:	5e                   	pop    %esi
- 1fa:	5f                   	pop    %edi
- 1fb:	5d                   	pop    %ebp
- 1fc:	c3                   	ret    
- 1fd:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000200 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 200:	f3 0f 1e fb          	endbr32 
- 204:	55                   	push   %ebp
- 205:	89 e5                	mov    %esp,%ebp
- 207:	56                   	push   %esi
- 208:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 209:	83 ec 08             	sub    $0x8,%esp
- 20c:	6a 00                	push   $0x0
- 20e:	ff 75 08             	pushl  0x8(%ebp)
- 211:	e8 ed 00 00 00       	call   303 <open>
-  if(fd < 0)
- 216:	83 c4 10             	add    $0x10,%esp
- 219:	85 c0                	test   %eax,%eax
- 21b:	78 2b                	js     248 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 21d:	83 ec 08             	sub    $0x8,%esp
- 220:	ff 75 0c             	pushl  0xc(%ebp)
- 223:	89 c3                	mov    %eax,%ebx
- 225:	50                   	push   %eax
- 226:	e8 f0 00 00 00       	call   31b <fstat>
-  close(fd);
- 22b:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 22e:	89 c6                	mov    %eax,%esi
-  close(fd);
- 230:	e8 b6 00 00 00       	call   2eb <close>
-  return r;
- 235:	83 c4 10             	add    $0x10,%esp
-}
- 238:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 23b:	89 f0                	mov    %esi,%eax
- 23d:	5b                   	pop    %ebx
- 23e:	5e                   	pop    %esi
- 23f:	5d                   	pop    %ebp
- 240:	c3                   	ret    
- 241:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 248:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 24d:	eb e9                	jmp    238 <stat+0x38>
- 24f:	90                   	nop
-
-00000250 <atoi>:
-
-int
-atoi(const char *s)
-{
- 250:	f3 0f 1e fb          	endbr32 
- 254:	55                   	push   %ebp
- 255:	89 e5                	mov    %esp,%ebp
- 257:	53                   	push   %ebx
- 258:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 25b:	0f be 02             	movsbl (%edx),%eax
- 25e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 261:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 264:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 269:	77 1a                	ja     285 <atoi+0x35>
- 26b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 26f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 270:	83 c2 01             	add    $0x1,%edx
- 273:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 276:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 27a:	0f be 02             	movsbl (%edx),%eax
- 27d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 280:	80 fb 09             	cmp    $0x9,%bl
- 283:	76 eb                	jbe    270 <atoi+0x20>
-  return n;
-}
- 285:	89 c8                	mov    %ecx,%eax
- 287:	5b                   	pop    %ebx
- 288:	5d                   	pop    %ebp
- 289:	c3                   	ret    
- 28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000290 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 290:	f3 0f 1e fb          	endbr32 
- 294:	55                   	push   %ebp
- 295:	89 e5                	mov    %esp,%ebp
- 297:	57                   	push   %edi
- 298:	8b 45 10             	mov    0x10(%ebp),%eax
- 29b:	8b 55 08             	mov    0x8(%ebp),%edx
- 29e:	56                   	push   %esi
- 29f:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 2a2:	85 c0                	test   %eax,%eax
- 2a4:	7e 0f                	jle    2b5 <memmove+0x25>
- 2a6:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 2a8:	89 d7                	mov    %edx,%edi
- 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 2b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 2b1:	39 f8                	cmp    %edi,%eax
- 2b3:	75 fb                	jne    2b0 <memmove+0x20>
-  return vdst;
-}
- 2b5:	5e                   	pop    %esi
- 2b6:	89 d0                	mov    %edx,%eax
- 2b8:	5f                   	pop    %edi
- 2b9:	5d                   	pop    %ebp
- 2ba:	c3                   	ret    
-
-000002bb <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2bb:	b8 01 00 00 00       	mov    $0x1,%eax
- 2c0:	cd 40                	int    $0x40
- 2c2:	c3                   	ret    
-
-000002c3 <exit>:
-SYSCALL(exit)
- 2c3:	b8 02 00 00 00       	mov    $0x2,%eax
- 2c8:	cd 40                	int    $0x40
- 2ca:	c3                   	ret    
-
-000002cb <wait>:
-SYSCALL(wait)
- 2cb:	b8 03 00 00 00       	mov    $0x3,%eax
- 2d0:	cd 40                	int    $0x40
- 2d2:	c3                   	ret    
-
-000002d3 <pipe>:
-SYSCALL(pipe)
- 2d3:	b8 04 00 00 00       	mov    $0x4,%eax
- 2d8:	cd 40                	int    $0x40
- 2da:	c3                   	ret    
-
-000002db <read>:
-SYSCALL(read)
- 2db:	b8 05 00 00 00       	mov    $0x5,%eax
- 2e0:	cd 40                	int    $0x40
- 2e2:	c3                   	ret    
-
-000002e3 <write>:
-SYSCALL(write)
- 2e3:	b8 10 00 00 00       	mov    $0x10,%eax
- 2e8:	cd 40                	int    $0x40
- 2ea:	c3                   	ret    
-
-000002eb <close>:
-SYSCALL(close)
- 2eb:	b8 15 00 00 00       	mov    $0x15,%eax
- 2f0:	cd 40                	int    $0x40
- 2f2:	c3                   	ret    
-
-000002f3 <kill>:
-SYSCALL(kill)
- 2f3:	b8 06 00 00 00       	mov    $0x6,%eax
- 2f8:	cd 40                	int    $0x40
- 2fa:	c3                   	ret    
-
-000002fb <exec>:
-SYSCALL(exec)
- 2fb:	b8 07 00 00 00       	mov    $0x7,%eax
- 300:	cd 40                	int    $0x40
- 302:	c3                   	ret    
-
-00000303 <open>:
-SYSCALL(open)
- 303:	b8 0f 00 00 00       	mov    $0xf,%eax
- 308:	cd 40                	int    $0x40
- 30a:	c3                   	ret    
-
-0000030b <mknod>:
-SYSCALL(mknod)
- 30b:	b8 11 00 00 00       	mov    $0x11,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret    
-
-00000313 <unlink>:
-SYSCALL(unlink)
- 313:	b8 12 00 00 00       	mov    $0x12,%eax
- 318:	cd 40                	int    $0x40
- 31a:	c3                   	ret    
-
-0000031b <fstat>:
-SYSCALL(fstat)
- 31b:	b8 08 00 00 00       	mov    $0x8,%eax
- 320:	cd 40                	int    $0x40
- 322:	c3                   	ret    
-
-00000323 <link>:
-SYSCALL(link)
- 323:	b8 13 00 00 00       	mov    $0x13,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret    
-
-0000032b <mkdir>:
-SYSCALL(mkdir)
- 32b:	b8 14 00 00 00       	mov    $0x14,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret    
-
-00000333 <chdir>:
-SYSCALL(chdir)
- 333:	b8 09 00 00 00       	mov    $0x9,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret    
-
-0000033b <dup>:
-SYSCALL(dup)
- 33b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret    
-
-00000343 <getpid>:
-SYSCALL(getpid)
- 343:	b8 0b 00 00 00       	mov    $0xb,%eax
- 348:	cd 40                	int    $0x40
- 34a:	c3                   	ret    
-
-0000034b <sbrk>:
-SYSCALL(sbrk)
- 34b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret    
-
-00000353 <sleep>:
-SYSCALL(sleep)
- 353:	b8 0d 00 00 00       	mov    $0xd,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret    
-
-0000035b <uptime>:
-SYSCALL(uptime)
- 35b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret    
-
-00000363 <draw>:
-SYSCALL(draw)
- 363:	b8 16 00 00 00       	mov    $0x16,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret    
-
-0000036b <thread_create>:
-SYSCALL(thread_create)
- 36b:	b8 18 00 00 00       	mov    $0x18,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret    
-
-00000373 <thread_join>:
-SYSCALL(thread_join)
- 373:	b8 19 00 00 00       	mov    $0x19,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret    
-
-0000037b <thread_exit>:
-SYSCALL(thread_exit)
- 37b:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret    
- 383:	66 90                	xchg   %ax,%ax
- 385:	66 90                	xchg   %ax,%ax
- 387:	66 90                	xchg   %ax,%ax
- 389:	66 90                	xchg   %ax,%ax
- 38b:	66 90                	xchg   %ax,%ax
- 38d:	66 90                	xchg   %ax,%ax
- 38f:	90                   	nop
-
-00000390 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 390:	55                   	push   %ebp
- 391:	89 e5                	mov    %esp,%ebp
- 393:	57                   	push   %edi
- 394:	56                   	push   %esi
- 395:	53                   	push   %ebx
- 396:	83 ec 3c             	sub    $0x3c,%esp
- 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 39c:	89 d1                	mov    %edx,%ecx
-{
- 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 3a1:	85 d2                	test   %edx,%edx
- 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
- 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3ad:	74 79                	je     428 <printint+0x98>
-    neg = 1;
- 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 3b6:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 3b8:	31 db                	xor    %ebx,%ebx
- 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3bd:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 3c0:	89 c8                	mov    %ecx,%eax
- 3c2:	31 d2                	xor    %edx,%edx
- 3c4:	89 cf                	mov    %ecx,%edi
- 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3c9:	0f b6 92 d8 07 00 00 	movzbl 0x7d8(%edx),%edx
- 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3d3:	89 d8                	mov    %ebx,%eax
- 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3e1:	76 dd                	jbe    3c0 <printint+0x30>
-  if(neg)
- 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3e6:	85 c9                	test   %ecx,%ecx
- 3e8:	74 0c                	je     3f6 <printint+0x66>
-    buf[i++] = '-';
- 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 3ef:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3fd:	eb 07                	jmp    406 <printint+0x76>
- 3ff:	90                   	nop
- 400:	0f b6 13             	movzbl (%ebx),%edx
- 403:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 406:	83 ec 04             	sub    $0x4,%esp
- 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 40c:	6a 01                	push   $0x1
- 40e:	56                   	push   %esi
- 40f:	57                   	push   %edi
- 410:	e8 ce fe ff ff       	call   2e3 <write>
-  while(--i >= 0)
- 415:	83 c4 10             	add    $0x10,%esp
- 418:	39 de                	cmp    %ebx,%esi
- 41a:	75 e4                	jne    400 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 41f:	5b                   	pop    %ebx
- 420:	5e                   	pop    %esi
- 421:	5f                   	pop    %edi
- 422:	5d                   	pop    %ebp
- 423:	c3                   	ret    
- 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 42f:	eb 87                	jmp    3b8 <printint+0x28>
- 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 43f:	90                   	nop
-
-00000440 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 440:	f3 0f 1e fb          	endbr32 
- 444:	55                   	push   %ebp
- 445:	89 e5                	mov    %esp,%ebp
- 447:	57                   	push   %edi
- 448:	56                   	push   %esi
- 449:	53                   	push   %ebx
- 44a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 44d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 450:	0f b6 1e             	movzbl (%esi),%ebx
- 453:	84 db                	test   %bl,%bl
- 455:	0f 84 b4 00 00 00    	je     50f <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 45b:	8d 45 10             	lea    0x10(%ebp),%eax
- 45e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 461:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 464:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 466:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 469:	eb 33                	jmp    49e <printf+0x5e>
- 46b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 46f:	90                   	nop
- 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 473:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 478:	83 f8 25             	cmp    $0x25,%eax
- 47b:	74 17                	je     494 <printf+0x54>
-  write(fd, &c, 1);
- 47d:	83 ec 04             	sub    $0x4,%esp
- 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 483:	6a 01                	push   $0x1
- 485:	57                   	push   %edi
- 486:	ff 75 08             	pushl  0x8(%ebp)
- 489:	e8 55 fe ff ff       	call   2e3 <write>
- 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 491:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 494:	0f b6 1e             	movzbl (%esi),%ebx
- 497:	83 c6 01             	add    $0x1,%esi
- 49a:	84 db                	test   %bl,%bl
- 49c:	74 71                	je     50f <printf+0xcf>
-    c = fmt[i] & 0xff;
- 49e:	0f be cb             	movsbl %bl,%ecx
- 4a1:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 4a4:	85 d2                	test   %edx,%edx
- 4a6:	74 c8                	je     470 <printf+0x30>
-      }
-    } else if(state == '%'){
- 4a8:	83 fa 25             	cmp    $0x25,%edx
- 4ab:	75 e7                	jne    494 <printf+0x54>
-      if(c == 'd'){
- 4ad:	83 f8 64             	cmp    $0x64,%eax
- 4b0:	0f 84 9a 00 00 00    	je     550 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 4b6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4bc:	83 f9 70             	cmp    $0x70,%ecx
- 4bf:	74 5f                	je     520 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 4c1:	83 f8 73             	cmp    $0x73,%eax
- 4c4:	0f 84 d6 00 00 00    	je     5a0 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 4ca:	83 f8 63             	cmp    $0x63,%eax
- 4cd:	0f 84 8d 00 00 00    	je     560 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 4d3:	83 f8 25             	cmp    $0x25,%eax
- 4d6:	0f 84 b4 00 00 00    	je     590 <printf+0x150>
-  write(fd, &c, 1);
- 4dc:	83 ec 04             	sub    $0x4,%esp
- 4df:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4e3:	6a 01                	push   $0x1
- 4e5:	57                   	push   %edi
- 4e6:	ff 75 08             	pushl  0x8(%ebp)
- 4e9:	e8 f5 fd ff ff       	call   2e3 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 4ee:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 4f1:	83 c4 0c             	add    $0xc,%esp
- 4f4:	6a 01                	push   $0x1
- 4f6:	83 c6 01             	add    $0x1,%esi
- 4f9:	57                   	push   %edi
- 4fa:	ff 75 08             	pushl  0x8(%ebp)
- 4fd:	e8 e1 fd ff ff       	call   2e3 <write>
-  for(i = 0; fmt[i]; i++){
- 502:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 506:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 509:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 50b:	84 db                	test   %bl,%bl
- 50d:	75 8f                	jne    49e <printf+0x5e>
-    }
-  }
-}
- 50f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 512:	5b                   	pop    %ebx
- 513:	5e                   	pop    %esi
- 514:	5f                   	pop    %edi
- 515:	5d                   	pop    %ebp
- 516:	c3                   	ret    
- 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 51e:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 520:	83 ec 0c             	sub    $0xc,%esp
- 523:	b9 10 00 00 00       	mov    $0x10,%ecx
- 528:	6a 00                	push   $0x0
- 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 52d:	8b 45 08             	mov    0x8(%ebp),%eax
- 530:	8b 13                	mov    (%ebx),%edx
- 532:	e8 59 fe ff ff       	call   390 <printint>
-        ap++;
- 537:	89 d8                	mov    %ebx,%eax
- 539:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 53c:	31 d2                	xor    %edx,%edx
-        ap++;
- 53e:	83 c0 04             	add    $0x4,%eax
- 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
- 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 550:	83 ec 0c             	sub    $0xc,%esp
- 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 558:	6a 01                	push   $0x1
- 55a:	eb ce                	jmp    52a <printf+0xea>
- 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 563:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 566:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 568:	6a 01                	push   $0x1
-        ap++;
- 56a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 56d:	57                   	push   %edi
- 56e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 571:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 574:	e8 6a fd ff ff       	call   2e3 <write>
-        ap++;
- 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 57c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 57f:	31 d2                	xor    %edx,%edx
- 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
- 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 58d:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 593:	83 ec 04             	sub    $0x4,%esp
- 596:	e9 59 ff ff ff       	jmp    4f4 <printf+0xb4>
- 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 59f:	90                   	nop
-        s = (char*)*ap;
- 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5a3:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 5a5:	83 c0 04             	add    $0x4,%eax
- 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 5ab:	85 db                	test   %ebx,%ebx
- 5ad:	74 17                	je     5c6 <printf+0x186>
-        while(*s != 0){
- 5af:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 5b2:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 5b4:	84 c0                	test   %al,%al
- 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
- 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5bf:	89 de                	mov    %ebx,%esi
- 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
-          s = "(null)";
- 5c6:	bb cf 07 00 00       	mov    $0x7cf,%ebx
-        while(*s != 0){
- 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
- 5d3:	89 de                	mov    %ebx,%esi
- 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5df:	90                   	nop
-  write(fd, &c, 1);
- 5e0:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 5e3:	83 c6 01             	add    $0x1,%esi
- 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 5e9:	6a 01                	push   $0x1
- 5eb:	57                   	push   %edi
- 5ec:	53                   	push   %ebx
- 5ed:	e8 f1 fc ff ff       	call   2e3 <write>
-        while(*s != 0){
- 5f2:	0f b6 06             	movzbl (%esi),%eax
- 5f5:	83 c4 10             	add    $0x10,%esp
- 5f8:	84 c0                	test   %al,%al
- 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
- 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 5ff:	31 d2                	xor    %edx,%edx
- 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
- 606:	66 90                	xchg   %ax,%ax
- 608:	66 90                	xchg   %ax,%ax
- 60a:	66 90                	xchg   %ax,%ax
- 60c:	66 90                	xchg   %ax,%ax
- 60e:	66 90                	xchg   %ax,%ax
-
-00000610 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 610:	f3 0f 1e fb          	endbr32 
- 614:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 615:	a1 84 0a 00 00       	mov    0xa84,%eax
-{
- 61a:	89 e5                	mov    %esp,%ebp
- 61c:	57                   	push   %edi
- 61d:	56                   	push   %esi
- 61e:	53                   	push   %ebx
- 61f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 622:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 624:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 627:	39 c8                	cmp    %ecx,%eax
- 629:	73 15                	jae    640 <free+0x30>
- 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 62f:	90                   	nop
- 630:	39 d1                	cmp    %edx,%ecx
- 632:	72 14                	jb     648 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 634:	39 d0                	cmp    %edx,%eax
- 636:	73 10                	jae    648 <free+0x38>
-{
- 638:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 63a:	8b 10                	mov    (%eax),%edx
- 63c:	39 c8                	cmp    %ecx,%eax
- 63e:	72 f0                	jb     630 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 640:	39 d0                	cmp    %edx,%eax
- 642:	72 f4                	jb     638 <free+0x28>
- 644:	39 d1                	cmp    %edx,%ecx
- 646:	73 f0                	jae    638 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 64e:	39 fa                	cmp    %edi,%edx
- 650:	74 1e                	je     670 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 655:	8b 50 04             	mov    0x4(%eax),%edx
- 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 65b:	39 f1                	cmp    %esi,%ecx
- 65d:	74 28                	je     687 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 65f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 661:	5b                   	pop    %ebx
-  freep = p;
- 662:	a3 84 0a 00 00       	mov    %eax,0xa84
-}
- 667:	5e                   	pop    %esi
- 668:	5f                   	pop    %edi
- 669:	5d                   	pop    %ebp
- 66a:	c3                   	ret    
- 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 66f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 670:	03 72 04             	add    0x4(%edx),%esi
- 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 676:	8b 10                	mov    (%eax),%edx
- 678:	8b 12                	mov    (%edx),%edx
- 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 67d:	8b 50 04             	mov    0x4(%eax),%edx
- 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 683:	39 f1                	cmp    %esi,%ecx
- 685:	75 d8                	jne    65f <free+0x4f>
-    p->s.size += bp->s.size;
- 687:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 68a:	a3 84 0a 00 00       	mov    %eax,0xa84
-    p->s.size += bp->s.size;
- 68f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 695:	89 10                	mov    %edx,(%eax)
-}
- 697:	5b                   	pop    %ebx
- 698:	5e                   	pop    %esi
- 699:	5f                   	pop    %edi
- 69a:	5d                   	pop    %ebp
- 69b:	c3                   	ret    
- 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000006a0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 6a0:	f3 0f 1e fb          	endbr32 
- 6a4:	55                   	push   %ebp
- 6a5:	89 e5                	mov    %esp,%ebp
- 6a7:	57                   	push   %edi
- 6a8:	56                   	push   %esi
- 6a9:	53                   	push   %ebx
- 6aa:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6ad:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 6b0:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6b6:	8d 70 07             	lea    0x7(%eax),%esi
- 6b9:	c1 ee 03             	shr    $0x3,%esi
- 6bc:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 6bf:	85 ff                	test   %edi,%edi
- 6c1:	0f 84 a9 00 00 00    	je     770 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c7:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 6c9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6cc:	39 f1                	cmp    %esi,%ecx
- 6ce:	73 6d                	jae    73d <malloc+0x9d>
- 6d0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6d6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6db:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 6de:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6e5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6e8:	eb 17                	jmp    701 <malloc+0x61>
- 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6f0:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6f5:	39 f1                	cmp    %esi,%ecx
- 6f7:	73 4f                	jae    748 <malloc+0xa8>
- 6f9:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
- 6ff:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 701:	39 c7                	cmp    %eax,%edi
- 703:	75 eb                	jne    6f0 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 705:	83 ec 0c             	sub    $0xc,%esp
- 708:	ff 75 e4             	pushl  -0x1c(%ebp)
- 70b:	e8 3b fc ff ff       	call   34b <sbrk>
-  if(p == (char*)-1)
- 710:	83 c4 10             	add    $0x10,%esp
- 713:	83 f8 ff             	cmp    $0xffffffff,%eax
- 716:	74 1b                	je     733 <malloc+0x93>
-  hp->s.size = nu;
- 718:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 71b:	83 ec 0c             	sub    $0xc,%esp
- 71e:	83 c0 08             	add    $0x8,%eax
- 721:	50                   	push   %eax
- 722:	e8 e9 fe ff ff       	call   610 <free>
-  return freep;
- 727:	a1 84 0a 00 00       	mov    0xa84,%eax
-      if((p = morecore(nunits)) == 0)
- 72c:	83 c4 10             	add    $0x10,%esp
- 72f:	85 c0                	test   %eax,%eax
- 731:	75 bd                	jne    6f0 <malloc+0x50>
-        return 0;
-  }
-}
- 733:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 736:	31 c0                	xor    %eax,%eax
-}
- 738:	5b                   	pop    %ebx
- 739:	5e                   	pop    %esi
- 73a:	5f                   	pop    %edi
- 73b:	5d                   	pop    %ebp
- 73c:	c3                   	ret    
-    if(p->s.size >= nunits){
- 73d:	89 c2                	mov    %eax,%edx
- 73f:	89 f8                	mov    %edi,%eax
- 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- 748:	39 ce                	cmp    %ecx,%esi
- 74a:	74 54                	je     7a0 <malloc+0x100>
-        p->s.size -= nunits;
- 74c:	29 f1                	sub    %esi,%ecx
- 74e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- 751:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- 754:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- 757:	a3 84 0a 00 00       	mov    %eax,0xa84
-}
- 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 75f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- 762:	5b                   	pop    %ebx
- 763:	5e                   	pop    %esi
- 764:	5f                   	pop    %edi
- 765:	5d                   	pop    %ebp
- 766:	c3                   	ret    
- 767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 76e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- 770:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
- 777:	0a 00 00 
-    base.s.size = 0;
- 77a:	bf 88 0a 00 00       	mov    $0xa88,%edi
-    base.s.ptr = freep = prevp = &base;
- 77f:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
- 786:	0a 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 789:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- 78b:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
- 792:	00 00 00 
-    if(p->s.size >= nunits){
- 795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
- 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- 7a0:	8b 0a                	mov    (%edx),%ecx
- 7a2:	89 08                	mov    %ecx,(%eax)
- 7a4:	eb b1                	jmp    757 <malloc+0xb7>
diff -ruN xv6-public/ln.c xv6-public-mynew/ln.c
--- xv6-public/ln.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/ln.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,15 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-  if(argc != 3){
-    printf(2, "Usage: ln old new\n");
-    exit();
-  }
-  if(link(argv[1], argv[2]) < 0)
-    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
-  exit();
-}
diff -ruN xv6-public/ln.d xv6-public-mynew/ln.d
--- xv6-public/ln.d	2022-09-05 09:51:05.358999141 +0530
+++ xv6-public-mynew/ln.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/ln.o and xv6-public-mynew/ln.o differ
diff -ruN xv6-public/ln.sym xv6-public-mynew/ln.sym
--- xv6-public/ln.sym	2022-09-05 09:51:05.386999142 +0530
+++ xv6-public-mynew/ln.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,61 +0,0 @@
-00000000 .text
-000007a8 .rodata
-000007ec .eh_frame
-00000a84 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 ln.c
-00000000 ulib.c
-00000000 printf.c
-00000390 printint
-000007d8 digits.1097
-00000000 umalloc.c
-00000a84 freep
-00000a88 base
-00000060 strcpy
-00000440 printf
-0000037b thread_exit
-00000290 memmove
-0000030b mknod
-00000180 gets
-00000343 getpid
-000006a0 malloc
-00000353 sleep
-000002d3 pipe
-000002e3 write
-0000031b fstat
-000002f3 kill
-00000333 chdir
-000002fb exec
-000002cb wait
-000002db read
-00000313 unlink
-000002bb fork
-0000034b sbrk
-0000035b uptime
-00000a84 __bss_start
-00000120 memset
-00000000 main
-00000090 strcmp
-0000033b dup
-00000200 stat
-00000a84 _edata
-00000a90 _end
-00000323 link
-000002c3 exit
-00000250 atoi
-00000363 draw
-000000e0 strlen
-00000303 open
-00000140 strchr
-0000036b thread_create
-0000032b mkdir
-000002eb close
-00000373 thread_join
-00000610 free
diff -ruN xv6-public/lockFunc.h xv6-public-mynew/lockFunc.h
--- xv6-public/lockFunc.h	2022-09-05 11:41:03.521024258 +0530
+++ xv6-public-mynew/lockFunc.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,43 +0,0 @@
-#include "lock.h"
-static inline uint xchg(volatile uint *addr, uint newval) {
-	uint result;
-
-	asm volatile("lock; xchgl %0, %1" :
-			"+m" (*addr), "=a" (result) :
-			"1" (newval) :
-			"cc");
-	return result;
-};
-
-void thread_spin_init(struct thread_spinlock *lk) {
-	lk->lock = 0;
-	lk->name = "null";
-};
-
-void thread_spin_lock(struct thread_spinlock *lk) {
-	while (xchg(&lk->lock, 1) != 0)
-		;
-	__sync_synchronize();
-
-};
-
-void thread_spin_unlock(struct thread_spinlock *lk) {
-	__sync_synchronize();
-	asm volatile("movl $0, %0" : "+m" (lk->lock) : );
-};
-
-void thread_mutex_init(struct thread_mutex *m) {
-	m->lock = 0;
-	m->name = "null";
-};
-
-void thread_mutex_lock(struct thread_mutex *m) {
-	while (xchg(&m->lock, 1) != 0)
-		sleep(1);
-	__sync_synchronize();
-};
-
-void thread_mutex_unlock(struct thread_mutex *m) {
-	__sync_synchronize();
-	asm volatile("movl $0, %0" : "+m" (m->lock) : );
-};
\ No newline at end of file
diff -ruN xv6-public/lock.h xv6-public-mynew/lock.h
--- xv6-public/lock.h	2022-08-31 17:40:06.610407490 +0530
+++ xv6-public-mynew/lock.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,15 +0,0 @@
-
-struct thread_spinlock{
-        volatile uint lock;
-        char *name;
-};
-
-struct thread_mutex{
-        volatile uint lock;
-        char *name;
-};
-
-struct thread_cond{
-	volatile uint cond;
-	char *name;
-};
\ No newline at end of file
diff -ruN xv6-public/log.c xv6-public-mynew/log.c
--- xv6-public/log.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/log.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,234 +0,0 @@
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "spinlock.h"
-#include "sleeplock.h"
-#include "fs.h"
-#include "buf.h"
-
-// Simple logging that allows concurrent FS system calls.
-//
-// A log transaction contains the updates of multiple FS system
-// calls. The logging system only commits when there are
-// no FS system calls active. Thus there is never
-// any reasoning required about whether a commit might
-// write an uncommitted system call's updates to disk.
-//
-// A system call should call begin_op()/end_op() to mark
-// its start and end. Usually begin_op() just increments
-// the count of in-progress FS system calls and returns.
-// But if it thinks the log is close to running out, it
-// sleeps until the last outstanding end_op() commits.
-//
-// The log is a physical re-do log containing disk blocks.
-// The on-disk log format:
-//   header block, containing block #s for block A, B, C, ...
-//   block A
-//   block B
-//   block C
-//   ...
-// Log appends are synchronous.
-
-// Contents of the header block, used for both the on-disk header block
-// and to keep track in memory of logged block# before commit.
-struct logheader {
-  int n;
-  int block[LOGSIZE];
-};
-
-struct log {
-  struct spinlock lock;
-  int start;
-  int size;
-  int outstanding; // how many FS sys calls are executing.
-  int committing;  // in commit(), please wait.
-  int dev;
-  struct logheader lh;
-};
-struct log log;
-
-static void recover_from_log(void);
-static void commit();
-
-void
-initlog(int dev)
-{
-  if (sizeof(struct logheader) >= BSIZE)
-    panic("initlog: too big logheader");
-
-  struct superblock sb;
-  initlock(&log.lock, "log");
-  readsb(dev, &sb);
-  log.start = sb.logstart;
-  log.size = sb.nlog;
-  log.dev = dev;
-  recover_from_log();
-}
-
-// Copy committed blocks from log to their home location
-static void
-install_trans(void)
-{
-  int tail;
-
-  for (tail = 0; tail < log.lh.n; tail++) {
-    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-    bwrite(dbuf);  // write dst to disk
-    brelse(lbuf);
-    brelse(dbuf);
-  }
-}
-
-// Read the log header from disk into the in-memory log header
-static void
-read_head(void)
-{
-  struct buf *buf = bread(log.dev, log.start);
-  struct logheader *lh = (struct logheader *) (buf->data);
-  int i;
-  log.lh.n = lh->n;
-  for (i = 0; i < log.lh.n; i++) {
-    log.lh.block[i] = lh->block[i];
-  }
-  brelse(buf);
-}
-
-// Write in-memory log header to disk.
-// This is the true point at which the
-// current transaction commits.
-static void
-write_head(void)
-{
-  struct buf *buf = bread(log.dev, log.start);
-  struct logheader *hb = (struct logheader *) (buf->data);
-  int i;
-  hb->n = log.lh.n;
-  for (i = 0; i < log.lh.n; i++) {
-    hb->block[i] = log.lh.block[i];
-  }
-  bwrite(buf);
-  brelse(buf);
-}
-
-static void
-recover_from_log(void)
-{
-  read_head();
-  install_trans(); // if committed, copy from log to disk
-  log.lh.n = 0;
-  write_head(); // clear the log
-}
-
-// called at the start of each FS system call.
-void
-begin_op(void)
-{
-  acquire(&log.lock);
-  while(1){
-    if(log.committing){
-      sleep(&log, &log.lock);
-    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-      // this op might exhaust log space; wait for commit.
-      sleep(&log, &log.lock);
-    } else {
-      log.outstanding += 1;
-      release(&log.lock);
-      break;
-    }
-  }
-}
-
-// called at the end of each FS system call.
-// commits if this was the last outstanding operation.
-void
-end_op(void)
-{
-  int do_commit = 0;
-
-  acquire(&log.lock);
-  log.outstanding -= 1;
-  if(log.committing)
-    panic("log.committing");
-  if(log.outstanding == 0){
-    do_commit = 1;
-    log.committing = 1;
-  } else {
-    // begin_op() may be waiting for log space,
-    // and decrementing log.outstanding has decreased
-    // the amount of reserved space.
-    wakeup(&log);
-  }
-  release(&log.lock);
-
-  if(do_commit){
-    // call commit w/o holding locks, since not allowed
-    // to sleep with locks.
-    commit();
-    acquire(&log.lock);
-    log.committing = 0;
-    wakeup(&log);
-    release(&log.lock);
-  }
-}
-
-// Copy modified blocks from cache to log.
-static void
-write_log(void)
-{
-  int tail;
-
-  for (tail = 0; tail < log.lh.n; tail++) {
-    struct buf *to = bread(log.dev, log.start+tail+1); // log block
-    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-    memmove(to->data, from->data, BSIZE);
-    bwrite(to);  // write the log
-    brelse(from);
-    brelse(to);
-  }
-}
-
-static void
-commit()
-{
-  if (log.lh.n > 0) {
-    write_log();     // Write modified blocks from cache to log
-    write_head();    // Write header to disk -- the real commit
-    install_trans(); // Now install writes to home locations
-    log.lh.n = 0;
-    write_head();    // Erase the transaction from the log
-  }
-}
-
-// Caller has modified b->data and is done with the buffer.
-// Record the block number and pin in the cache with B_DIRTY.
-// commit()/write_log() will do the disk write.
-//
-// log_write() replaces bwrite(); a typical use is:
-//   bp = bread(...)
-//   modify bp->data[]
-//   log_write(bp)
-//   brelse(bp)
-void
-log_write(struct buf *b)
-{
-  int i;
-
-  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-    panic("too big a transaction");
-  if (log.outstanding < 1)
-    panic("log_write outside of trans");
-
-  acquire(&log.lock);
-  for (i = 0; i < log.lh.n; i++) {
-    if (log.lh.block[i] == b->blockno)   // log absorbtion
-      break;
-  }
-  log.lh.block[i] = b->blockno;
-  if (i == log.lh.n)
-    log.lh.n++;
-  b->flags |= B_DIRTY; // prevent eviction
-  release(&log.lock);
-}
-
diff -ruN xv6-public/log.d xv6-public-mynew/log.d
--- xv6-public/log.d	2022-09-05 09:51:07.782999211 +0530
+++ xv6-public-mynew/log.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-log.o: log.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
- sleeplock.h fs.h buf.h
Binary files xv6-public/log.o and xv6-public-mynew/log.o differ
Binary files xv6-public/_ls and xv6-public-mynew/_ls differ
diff -ruN xv6-public/ls.asm xv6-public-mynew/ls.asm
--- xv6-public/ls.asm	2022-09-05 09:51:05.478999145 +0530
+++ xv6-public-mynew/ls.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1495 +0,0 @@
-
-_ls:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  close(fd);
-}
-
-int
-main(int argc, char *argv[])
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	56                   	push   %esi
-  12:	53                   	push   %ebx
-  13:	51                   	push   %ecx
-  14:	83 ec 0c             	sub    $0xc,%esp
-  17:	8b 01                	mov    (%ecx),%eax
-  19:	8b 51 04             	mov    0x4(%ecx),%edx
-  int i;
-
-  if(argc < 2){
-  1c:	83 f8 01             	cmp    $0x1,%eax
-  1f:	7e 28                	jle    49 <main+0x49>
-  21:	8d 5a 04             	lea    0x4(%edx),%ebx
-  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
-  27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  2e:	66 90                	xchg   %ax,%ax
-    ls(".");
-    exit();
-  }
-  for(i=1; i<argc; i++)
-    ls(argv[i]);
-  30:	83 ec 0c             	sub    $0xc,%esp
-  33:	ff 33                	pushl  (%ebx)
-  35:	83 c3 04             	add    $0x4,%ebx
-  38:	e8 c3 00 00 00       	call   100 <ls>
-  for(i=1; i<argc; i++)
-  3d:	83 c4 10             	add    $0x10,%esp
-  40:	39 f3                	cmp    %esi,%ebx
-  42:	75 ec                	jne    30 <main+0x30>
-  exit();
-  44:	e8 5a 05 00 00       	call   5a3 <exit>
-    ls(".");
-  49:	83 ec 0c             	sub    $0xc,%esp
-  4c:	68 d0 0a 00 00       	push   $0xad0
-  51:	e8 aa 00 00 00       	call   100 <ls>
-    exit();
-  56:	e8 48 05 00 00       	call   5a3 <exit>
-  5b:	66 90                	xchg   %ax,%ax
-  5d:	66 90                	xchg   %ax,%ax
-  5f:	90                   	nop
-
-00000060 <fmtname>:
-{
-  60:	f3 0f 1e fb          	endbr32 
-  64:	55                   	push   %ebp
-  65:	89 e5                	mov    %esp,%ebp
-  67:	56                   	push   %esi
-  68:	53                   	push   %ebx
-  69:	8b 75 08             	mov    0x8(%ebp),%esi
-  for(p=path+strlen(path); p >= path && *p != '/'; p--)
-  6c:	83 ec 0c             	sub    $0xc,%esp
-  6f:	56                   	push   %esi
-  70:	e8 4b 03 00 00       	call   3c0 <strlen>
-  75:	83 c4 10             	add    $0x10,%esp
-  78:	01 f0                	add    %esi,%eax
-  7a:	89 c3                	mov    %eax,%ebx
-  7c:	73 0b                	jae    89 <fmtname+0x29>
-  7e:	eb 0e                	jmp    8e <fmtname+0x2e>
-  80:	8d 43 ff             	lea    -0x1(%ebx),%eax
-  83:	39 c6                	cmp    %eax,%esi
-  85:	77 0a                	ja     91 <fmtname+0x31>
-  87:	89 c3                	mov    %eax,%ebx
-  89:	80 3b 2f             	cmpb   $0x2f,(%ebx)
-  8c:	75 f2                	jne    80 <fmtname+0x20>
-  8e:	83 c3 01             	add    $0x1,%ebx
-  if(strlen(p) >= DIRSIZ)
-  91:	83 ec 0c             	sub    $0xc,%esp
-  94:	53                   	push   %ebx
-  95:	e8 26 03 00 00       	call   3c0 <strlen>
-  9a:	83 c4 10             	add    $0x10,%esp
-  9d:	83 f8 0d             	cmp    $0xd,%eax
-  a0:	77 4a                	ja     ec <fmtname+0x8c>
-  memmove(buf, p, strlen(p));
-  a2:	83 ec 0c             	sub    $0xc,%esp
-  a5:	53                   	push   %ebx
-  a6:	e8 15 03 00 00       	call   3c0 <strlen>
-  ab:	83 c4 0c             	add    $0xc,%esp
-  ae:	50                   	push   %eax
-  af:	53                   	push   %ebx
-  b0:	68 04 0e 00 00       	push   $0xe04
-  b5:	e8 b6 04 00 00       	call   570 <memmove>
-  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
-  ba:	89 1c 24             	mov    %ebx,(%esp)
-  bd:	e8 fe 02 00 00       	call   3c0 <strlen>
-  c2:	89 1c 24             	mov    %ebx,(%esp)
-  return buf;
-  c5:	bb 04 0e 00 00       	mov    $0xe04,%ebx
-  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
-  ca:	89 c6                	mov    %eax,%esi
-  cc:	e8 ef 02 00 00       	call   3c0 <strlen>
-  d1:	ba 0e 00 00 00       	mov    $0xe,%edx
-  d6:	83 c4 0c             	add    $0xc,%esp
-  d9:	29 f2                	sub    %esi,%edx
-  db:	05 04 0e 00 00       	add    $0xe04,%eax
-  e0:	52                   	push   %edx
-  e1:	6a 20                	push   $0x20
-  e3:	50                   	push   %eax
-  e4:	e8 17 03 00 00       	call   400 <memset>
-  return buf;
-  e9:	83 c4 10             	add    $0x10,%esp
-}
-  ec:	8d 65 f8             	lea    -0x8(%ebp),%esp
-  ef:	89 d8                	mov    %ebx,%eax
-  f1:	5b                   	pop    %ebx
-  f2:	5e                   	pop    %esi
-  f3:	5d                   	pop    %ebp
-  f4:	c3                   	ret    
-  f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000100 <ls>:
-{
- 100:	f3 0f 1e fb          	endbr32 
- 104:	55                   	push   %ebp
- 105:	89 e5                	mov    %esp,%ebp
- 107:	57                   	push   %edi
- 108:	56                   	push   %esi
- 109:	53                   	push   %ebx
- 10a:	81 ec 64 02 00 00    	sub    $0x264,%esp
- 110:	8b 7d 08             	mov    0x8(%ebp),%edi
-  if((fd = open(path, 0)) < 0){
- 113:	6a 00                	push   $0x0
- 115:	57                   	push   %edi
- 116:	e8 c8 04 00 00       	call   5e3 <open>
- 11b:	83 c4 10             	add    $0x10,%esp
- 11e:	85 c0                	test   %eax,%eax
- 120:	0f 88 9a 01 00 00    	js     2c0 <ls+0x1c0>
-  if(fstat(fd, &st) < 0){
- 126:	83 ec 08             	sub    $0x8,%esp
- 129:	8d b5 d4 fd ff ff    	lea    -0x22c(%ebp),%esi
- 12f:	89 c3                	mov    %eax,%ebx
- 131:	56                   	push   %esi
- 132:	50                   	push   %eax
- 133:	e8 c3 04 00 00       	call   5fb <fstat>
- 138:	83 c4 10             	add    $0x10,%esp
- 13b:	85 c0                	test   %eax,%eax
- 13d:	0f 88 bd 01 00 00    	js     300 <ls+0x200>
-  switch(st.type){
- 143:	0f b7 85 d4 fd ff ff 	movzwl -0x22c(%ebp),%eax
- 14a:	66 83 f8 01          	cmp    $0x1,%ax
- 14e:	74 60                	je     1b0 <ls+0xb0>
- 150:	66 83 f8 02          	cmp    $0x2,%ax
- 154:	74 1a                	je     170 <ls+0x70>
-  close(fd);
- 156:	83 ec 0c             	sub    $0xc,%esp
- 159:	53                   	push   %ebx
- 15a:	e8 6c 04 00 00       	call   5cb <close>
- 15f:	83 c4 10             	add    $0x10,%esp
-}
- 162:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 165:	5b                   	pop    %ebx
- 166:	5e                   	pop    %esi
- 167:	5f                   	pop    %edi
- 168:	5d                   	pop    %ebp
- 169:	c3                   	ret    
- 16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
- 170:	83 ec 0c             	sub    $0xc,%esp
- 173:	8b 95 e4 fd ff ff    	mov    -0x21c(%ebp),%edx
- 179:	8b b5 dc fd ff ff    	mov    -0x224(%ebp),%esi
- 17f:	57                   	push   %edi
- 180:	89 95 b4 fd ff ff    	mov    %edx,-0x24c(%ebp)
- 186:	e8 d5 fe ff ff       	call   60 <fmtname>
- 18b:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
- 191:	59                   	pop    %ecx
- 192:	5f                   	pop    %edi
- 193:	52                   	push   %edx
- 194:	56                   	push   %esi
- 195:	6a 02                	push   $0x2
- 197:	50                   	push   %eax
- 198:	68 b0 0a 00 00       	push   $0xab0
- 19d:	6a 01                	push   $0x1
- 19f:	e8 7c 05 00 00       	call   720 <printf>
-    break;
- 1a4:	83 c4 20             	add    $0x20,%esp
- 1a7:	eb ad                	jmp    156 <ls+0x56>
- 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
- 1b0:	83 ec 0c             	sub    $0xc,%esp
- 1b3:	57                   	push   %edi
- 1b4:	e8 07 02 00 00       	call   3c0 <strlen>
- 1b9:	83 c4 10             	add    $0x10,%esp
- 1bc:	83 c0 10             	add    $0x10,%eax
- 1bf:	3d 00 02 00 00       	cmp    $0x200,%eax
- 1c4:	0f 87 16 01 00 00    	ja     2e0 <ls+0x1e0>
-    strcpy(buf, path);
- 1ca:	83 ec 08             	sub    $0x8,%esp
- 1cd:	57                   	push   %edi
- 1ce:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
- 1d4:	57                   	push   %edi
- 1d5:	e8 66 01 00 00       	call   340 <strcpy>
-    p = buf+strlen(buf);
- 1da:	89 3c 24             	mov    %edi,(%esp)
- 1dd:	e8 de 01 00 00       	call   3c0 <strlen>
-    while(read(fd, &de, sizeof(de)) == sizeof(de)){
- 1e2:	83 c4 10             	add    $0x10,%esp
-    p = buf+strlen(buf);
- 1e5:	01 f8                	add    %edi,%eax
-    *p++ = '/';
- 1e7:	8d 48 01             	lea    0x1(%eax),%ecx
-    p = buf+strlen(buf);
- 1ea:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
-    *p++ = '/';
- 1f0:	89 8d a4 fd ff ff    	mov    %ecx,-0x25c(%ebp)
- 1f6:	c6 00 2f             	movb   $0x2f,(%eax)
-    while(read(fd, &de, sizeof(de)) == sizeof(de)){
- 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 200:	83 ec 04             	sub    $0x4,%esp
- 203:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax
- 209:	6a 10                	push   $0x10
- 20b:	50                   	push   %eax
- 20c:	53                   	push   %ebx
- 20d:	e8 a9 03 00 00       	call   5bb <read>
- 212:	83 c4 10             	add    $0x10,%esp
- 215:	83 f8 10             	cmp    $0x10,%eax
- 218:	0f 85 38 ff ff ff    	jne    156 <ls+0x56>
-      if(de.inum == 0)
- 21e:	66 83 bd c4 fd ff ff 	cmpw   $0x0,-0x23c(%ebp)
- 225:	00 
- 226:	74 d8                	je     200 <ls+0x100>
-      memmove(p, de.name, DIRSIZ);
- 228:	83 ec 04             	sub    $0x4,%esp
- 22b:	8d 85 c6 fd ff ff    	lea    -0x23a(%ebp),%eax
- 231:	6a 0e                	push   $0xe
- 233:	50                   	push   %eax
- 234:	ff b5 a4 fd ff ff    	pushl  -0x25c(%ebp)
- 23a:	e8 31 03 00 00       	call   570 <memmove>
-      p[DIRSIZ] = 0;
- 23f:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
- 245:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
-      if(stat(buf, &st) < 0){
- 249:	58                   	pop    %eax
- 24a:	5a                   	pop    %edx
- 24b:	56                   	push   %esi
- 24c:	57                   	push   %edi
- 24d:	e8 8e 02 00 00       	call   4e0 <stat>
- 252:	83 c4 10             	add    $0x10,%esp
- 255:	85 c0                	test   %eax,%eax
- 257:	0f 88 cb 00 00 00    	js     328 <ls+0x228>
-      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
- 25d:	83 ec 0c             	sub    $0xc,%esp
- 260:	8b 8d e4 fd ff ff    	mov    -0x21c(%ebp),%ecx
- 266:	8b 95 dc fd ff ff    	mov    -0x224(%ebp),%edx
- 26c:	57                   	push   %edi
- 26d:	0f bf 85 d4 fd ff ff 	movswl -0x22c(%ebp),%eax
- 274:	89 8d ac fd ff ff    	mov    %ecx,-0x254(%ebp)
- 27a:	89 95 b0 fd ff ff    	mov    %edx,-0x250(%ebp)
- 280:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
- 286:	e8 d5 fd ff ff       	call   60 <fmtname>
- 28b:	5a                   	pop    %edx
- 28c:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
- 292:	59                   	pop    %ecx
- 293:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
- 299:	51                   	push   %ecx
- 29a:	52                   	push   %edx
- 29b:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
- 2a1:	50                   	push   %eax
- 2a2:	68 b0 0a 00 00       	push   $0xab0
- 2a7:	6a 01                	push   $0x1
- 2a9:	e8 72 04 00 00       	call   720 <printf>
- 2ae:	83 c4 20             	add    $0x20,%esp
- 2b1:	e9 4a ff ff ff       	jmp    200 <ls+0x100>
- 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 2bd:	8d 76 00             	lea    0x0(%esi),%esi
-    printf(2, "ls: cannot open %s\n", path);
- 2c0:	83 ec 04             	sub    $0x4,%esp
- 2c3:	57                   	push   %edi
- 2c4:	68 88 0a 00 00       	push   $0xa88
- 2c9:	6a 02                	push   $0x2
- 2cb:	e8 50 04 00 00       	call   720 <printf>
-    return;
- 2d0:	83 c4 10             	add    $0x10,%esp
-}
- 2d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 2d6:	5b                   	pop    %ebx
- 2d7:	5e                   	pop    %esi
- 2d8:	5f                   	pop    %edi
- 2d9:	5d                   	pop    %ebp
- 2da:	c3                   	ret    
- 2db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 2df:	90                   	nop
-      printf(1, "ls: path too long\n");
- 2e0:	83 ec 08             	sub    $0x8,%esp
- 2e3:	68 bd 0a 00 00       	push   $0xabd
- 2e8:	6a 01                	push   $0x1
- 2ea:	e8 31 04 00 00       	call   720 <printf>
-      break;
- 2ef:	83 c4 10             	add    $0x10,%esp
- 2f2:	e9 5f fe ff ff       	jmp    156 <ls+0x56>
- 2f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 2fe:	66 90                	xchg   %ax,%ax
-    printf(2, "ls: cannot stat %s\n", path);
- 300:	83 ec 04             	sub    $0x4,%esp
- 303:	57                   	push   %edi
- 304:	68 9c 0a 00 00       	push   $0xa9c
- 309:	6a 02                	push   $0x2
- 30b:	e8 10 04 00 00       	call   720 <printf>
-    close(fd);
- 310:	89 1c 24             	mov    %ebx,(%esp)
- 313:	e8 b3 02 00 00       	call   5cb <close>
-    return;
- 318:	83 c4 10             	add    $0x10,%esp
-}
- 31b:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 31e:	5b                   	pop    %ebx
- 31f:	5e                   	pop    %esi
- 320:	5f                   	pop    %edi
- 321:	5d                   	pop    %ebp
- 322:	c3                   	ret    
- 323:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 327:	90                   	nop
-        printf(1, "ls: cannot stat %s\n", buf);
- 328:	83 ec 04             	sub    $0x4,%esp
- 32b:	57                   	push   %edi
- 32c:	68 9c 0a 00 00       	push   $0xa9c
- 331:	6a 01                	push   $0x1
- 333:	e8 e8 03 00 00       	call   720 <printf>
-        continue;
- 338:	83 c4 10             	add    $0x10,%esp
- 33b:	e9 c0 fe ff ff       	jmp    200 <ls+0x100>
-
-00000340 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 340:	f3 0f 1e fb          	endbr32 
- 344:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 345:	31 c0                	xor    %eax,%eax
-{
- 347:	89 e5                	mov    %esp,%ebp
- 349:	53                   	push   %ebx
- 34a:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 34d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
- 350:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 354:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 357:	83 c0 01             	add    $0x1,%eax
- 35a:	84 d2                	test   %dl,%dl
- 35c:	75 f2                	jne    350 <strcpy+0x10>
-    ;
-  return os;
-}
- 35e:	89 c8                	mov    %ecx,%eax
- 360:	5b                   	pop    %ebx
- 361:	5d                   	pop    %ebp
- 362:	c3                   	ret    
- 363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000370 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 370:	f3 0f 1e fb          	endbr32 
- 374:	55                   	push   %ebp
- 375:	89 e5                	mov    %esp,%ebp
- 377:	53                   	push   %ebx
- 378:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 37b:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
- 37e:	0f b6 01             	movzbl (%ecx),%eax
- 381:	0f b6 1a             	movzbl (%edx),%ebx
- 384:	84 c0                	test   %al,%al
- 386:	75 19                	jne    3a1 <strcmp+0x31>
- 388:	eb 26                	jmp    3b0 <strcmp+0x40>
- 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 390:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
- 394:	83 c1 01             	add    $0x1,%ecx
- 397:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
- 39a:	0f b6 1a             	movzbl (%edx),%ebx
- 39d:	84 c0                	test   %al,%al
- 39f:	74 0f                	je     3b0 <strcmp+0x40>
- 3a1:	38 d8                	cmp    %bl,%al
- 3a3:	74 eb                	je     390 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
- 3a5:	29 d8                	sub    %ebx,%eax
-}
- 3a7:	5b                   	pop    %ebx
- 3a8:	5d                   	pop    %ebp
- 3a9:	c3                   	ret    
- 3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 3b0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
- 3b2:	29 d8                	sub    %ebx,%eax
-}
- 3b4:	5b                   	pop    %ebx
- 3b5:	5d                   	pop    %ebp
- 3b6:	c3                   	ret    
- 3b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3be:	66 90                	xchg   %ax,%ax
-
-000003c0 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 3c0:	f3 0f 1e fb          	endbr32 
- 3c4:	55                   	push   %ebp
- 3c5:	89 e5                	mov    %esp,%ebp
- 3c7:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 3ca:	80 3a 00             	cmpb   $0x0,(%edx)
- 3cd:	74 21                	je     3f0 <strlen+0x30>
- 3cf:	31 c0                	xor    %eax,%eax
- 3d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3d8:	83 c0 01             	add    $0x1,%eax
- 3db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 3df:	89 c1                	mov    %eax,%ecx
- 3e1:	75 f5                	jne    3d8 <strlen+0x18>
-    ;
-  return n;
-}
- 3e3:	89 c8                	mov    %ecx,%eax
- 3e5:	5d                   	pop    %ebp
- 3e6:	c3                   	ret    
- 3e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3ee:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 3f0:	31 c9                	xor    %ecx,%ecx
-}
- 3f2:	5d                   	pop    %ebp
- 3f3:	89 c8                	mov    %ecx,%eax
- 3f5:	c3                   	ret    
- 3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3fd:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000400 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 400:	f3 0f 1e fb          	endbr32 
- 404:	55                   	push   %ebp
- 405:	89 e5                	mov    %esp,%ebp
- 407:	57                   	push   %edi
- 408:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 40b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 40e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 411:	89 d7                	mov    %edx,%edi
- 413:	fc                   	cld    
- 414:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 416:	89 d0                	mov    %edx,%eax
- 418:	5f                   	pop    %edi
- 419:	5d                   	pop    %ebp
- 41a:	c3                   	ret    
- 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 41f:	90                   	nop
-
-00000420 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 420:	f3 0f 1e fb          	endbr32 
- 424:	55                   	push   %ebp
- 425:	89 e5                	mov    %esp,%ebp
- 427:	8b 45 08             	mov    0x8(%ebp),%eax
- 42a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 42e:	0f b6 10             	movzbl (%eax),%edx
- 431:	84 d2                	test   %dl,%dl
- 433:	75 16                	jne    44b <strchr+0x2b>
- 435:	eb 21                	jmp    458 <strchr+0x38>
- 437:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 43e:	66 90                	xchg   %ax,%ax
- 440:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 444:	83 c0 01             	add    $0x1,%eax
- 447:	84 d2                	test   %dl,%dl
- 449:	74 0d                	je     458 <strchr+0x38>
-    if(*s == c)
- 44b:	38 d1                	cmp    %dl,%cl
- 44d:	75 f1                	jne    440 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 44f:	5d                   	pop    %ebp
- 450:	c3                   	ret    
- 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 458:	31 c0                	xor    %eax,%eax
-}
- 45a:	5d                   	pop    %ebp
- 45b:	c3                   	ret    
- 45c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000460 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 460:	f3 0f 1e fb          	endbr32 
- 464:	55                   	push   %ebp
- 465:	89 e5                	mov    %esp,%ebp
- 467:	57                   	push   %edi
- 468:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 469:	31 f6                	xor    %esi,%esi
-{
- 46b:	53                   	push   %ebx
- 46c:	89 f3                	mov    %esi,%ebx
- 46e:	83 ec 1c             	sub    $0x1c,%esp
- 471:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 474:	eb 33                	jmp    4a9 <gets+0x49>
- 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 47d:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 480:	83 ec 04             	sub    $0x4,%esp
- 483:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 486:	6a 01                	push   $0x1
- 488:	50                   	push   %eax
- 489:	6a 00                	push   $0x0
- 48b:	e8 2b 01 00 00       	call   5bb <read>
-    if(cc < 1)
- 490:	83 c4 10             	add    $0x10,%esp
- 493:	85 c0                	test   %eax,%eax
- 495:	7e 1c                	jle    4b3 <gets+0x53>
-      break;
-    buf[i++] = c;
- 497:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 49b:	83 c7 01             	add    $0x1,%edi
- 49e:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 4a1:	3c 0a                	cmp    $0xa,%al
- 4a3:	74 23                	je     4c8 <gets+0x68>
- 4a5:	3c 0d                	cmp    $0xd,%al
- 4a7:	74 1f                	je     4c8 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 4a9:	83 c3 01             	add    $0x1,%ebx
- 4ac:	89 fe                	mov    %edi,%esi
- 4ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 4b1:	7c cd                	jl     480 <gets+0x20>
- 4b3:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 4b5:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 4b8:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 4bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4be:	5b                   	pop    %ebx
- 4bf:	5e                   	pop    %esi
- 4c0:	5f                   	pop    %edi
- 4c1:	5d                   	pop    %ebp
- 4c2:	c3                   	ret    
- 4c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 4c7:	90                   	nop
- 4c8:	8b 75 08             	mov    0x8(%ebp),%esi
- 4cb:	8b 45 08             	mov    0x8(%ebp),%eax
- 4ce:	01 de                	add    %ebx,%esi
- 4d0:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 4d2:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 4d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4d8:	5b                   	pop    %ebx
- 4d9:	5e                   	pop    %esi
- 4da:	5f                   	pop    %edi
- 4db:	5d                   	pop    %ebp
- 4dc:	c3                   	ret    
- 4dd:	8d 76 00             	lea    0x0(%esi),%esi
-
-000004e0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 4e0:	f3 0f 1e fb          	endbr32 
- 4e4:	55                   	push   %ebp
- 4e5:	89 e5                	mov    %esp,%ebp
- 4e7:	56                   	push   %esi
- 4e8:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 4e9:	83 ec 08             	sub    $0x8,%esp
- 4ec:	6a 00                	push   $0x0
- 4ee:	ff 75 08             	pushl  0x8(%ebp)
- 4f1:	e8 ed 00 00 00       	call   5e3 <open>
-  if(fd < 0)
- 4f6:	83 c4 10             	add    $0x10,%esp
- 4f9:	85 c0                	test   %eax,%eax
- 4fb:	78 2b                	js     528 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 4fd:	83 ec 08             	sub    $0x8,%esp
- 500:	ff 75 0c             	pushl  0xc(%ebp)
- 503:	89 c3                	mov    %eax,%ebx
- 505:	50                   	push   %eax
- 506:	e8 f0 00 00 00       	call   5fb <fstat>
-  close(fd);
- 50b:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 50e:	89 c6                	mov    %eax,%esi
-  close(fd);
- 510:	e8 b6 00 00 00       	call   5cb <close>
-  return r;
- 515:	83 c4 10             	add    $0x10,%esp
-}
- 518:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 51b:	89 f0                	mov    %esi,%eax
- 51d:	5b                   	pop    %ebx
- 51e:	5e                   	pop    %esi
- 51f:	5d                   	pop    %ebp
- 520:	c3                   	ret    
- 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 528:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 52d:	eb e9                	jmp    518 <stat+0x38>
- 52f:	90                   	nop
-
-00000530 <atoi>:
-
-int
-atoi(const char *s)
-{
- 530:	f3 0f 1e fb          	endbr32 
- 534:	55                   	push   %ebp
- 535:	89 e5                	mov    %esp,%ebp
- 537:	53                   	push   %ebx
- 538:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 53b:	0f be 02             	movsbl (%edx),%eax
- 53e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 541:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 544:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 549:	77 1a                	ja     565 <atoi+0x35>
- 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 54f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 550:	83 c2 01             	add    $0x1,%edx
- 553:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 556:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 55a:	0f be 02             	movsbl (%edx),%eax
- 55d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 560:	80 fb 09             	cmp    $0x9,%bl
- 563:	76 eb                	jbe    550 <atoi+0x20>
-  return n;
-}
- 565:	89 c8                	mov    %ecx,%eax
- 567:	5b                   	pop    %ebx
- 568:	5d                   	pop    %ebp
- 569:	c3                   	ret    
- 56a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000570 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 570:	f3 0f 1e fb          	endbr32 
- 574:	55                   	push   %ebp
- 575:	89 e5                	mov    %esp,%ebp
- 577:	57                   	push   %edi
- 578:	8b 45 10             	mov    0x10(%ebp),%eax
- 57b:	8b 55 08             	mov    0x8(%ebp),%edx
- 57e:	56                   	push   %esi
- 57f:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 582:	85 c0                	test   %eax,%eax
- 584:	7e 0f                	jle    595 <memmove+0x25>
- 586:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 588:	89 d7                	mov    %edx,%edi
- 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 590:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 591:	39 f8                	cmp    %edi,%eax
- 593:	75 fb                	jne    590 <memmove+0x20>
-  return vdst;
-}
- 595:	5e                   	pop    %esi
- 596:	89 d0                	mov    %edx,%eax
- 598:	5f                   	pop    %edi
- 599:	5d                   	pop    %ebp
- 59a:	c3                   	ret    
-
-0000059b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 59b:	b8 01 00 00 00       	mov    $0x1,%eax
- 5a0:	cd 40                	int    $0x40
- 5a2:	c3                   	ret    
-
-000005a3 <exit>:
-SYSCALL(exit)
- 5a3:	b8 02 00 00 00       	mov    $0x2,%eax
- 5a8:	cd 40                	int    $0x40
- 5aa:	c3                   	ret    
-
-000005ab <wait>:
-SYSCALL(wait)
- 5ab:	b8 03 00 00 00       	mov    $0x3,%eax
- 5b0:	cd 40                	int    $0x40
- 5b2:	c3                   	ret    
-
-000005b3 <pipe>:
-SYSCALL(pipe)
- 5b3:	b8 04 00 00 00       	mov    $0x4,%eax
- 5b8:	cd 40                	int    $0x40
- 5ba:	c3                   	ret    
-
-000005bb <read>:
-SYSCALL(read)
- 5bb:	b8 05 00 00 00       	mov    $0x5,%eax
- 5c0:	cd 40                	int    $0x40
- 5c2:	c3                   	ret    
-
-000005c3 <write>:
-SYSCALL(write)
- 5c3:	b8 10 00 00 00       	mov    $0x10,%eax
- 5c8:	cd 40                	int    $0x40
- 5ca:	c3                   	ret    
-
-000005cb <close>:
-SYSCALL(close)
- 5cb:	b8 15 00 00 00       	mov    $0x15,%eax
- 5d0:	cd 40                	int    $0x40
- 5d2:	c3                   	ret    
-
-000005d3 <kill>:
-SYSCALL(kill)
- 5d3:	b8 06 00 00 00       	mov    $0x6,%eax
- 5d8:	cd 40                	int    $0x40
- 5da:	c3                   	ret    
-
-000005db <exec>:
-SYSCALL(exec)
- 5db:	b8 07 00 00 00       	mov    $0x7,%eax
- 5e0:	cd 40                	int    $0x40
- 5e2:	c3                   	ret    
-
-000005e3 <open>:
-SYSCALL(open)
- 5e3:	b8 0f 00 00 00       	mov    $0xf,%eax
- 5e8:	cd 40                	int    $0x40
- 5ea:	c3                   	ret    
-
-000005eb <mknod>:
-SYSCALL(mknod)
- 5eb:	b8 11 00 00 00       	mov    $0x11,%eax
- 5f0:	cd 40                	int    $0x40
- 5f2:	c3                   	ret    
-
-000005f3 <unlink>:
-SYSCALL(unlink)
- 5f3:	b8 12 00 00 00       	mov    $0x12,%eax
- 5f8:	cd 40                	int    $0x40
- 5fa:	c3                   	ret    
-
-000005fb <fstat>:
-SYSCALL(fstat)
- 5fb:	b8 08 00 00 00       	mov    $0x8,%eax
- 600:	cd 40                	int    $0x40
- 602:	c3                   	ret    
-
-00000603 <link>:
-SYSCALL(link)
- 603:	b8 13 00 00 00       	mov    $0x13,%eax
- 608:	cd 40                	int    $0x40
- 60a:	c3                   	ret    
-
-0000060b <mkdir>:
-SYSCALL(mkdir)
- 60b:	b8 14 00 00 00       	mov    $0x14,%eax
- 610:	cd 40                	int    $0x40
- 612:	c3                   	ret    
-
-00000613 <chdir>:
-SYSCALL(chdir)
- 613:	b8 09 00 00 00       	mov    $0x9,%eax
- 618:	cd 40                	int    $0x40
- 61a:	c3                   	ret    
-
-0000061b <dup>:
-SYSCALL(dup)
- 61b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 620:	cd 40                	int    $0x40
- 622:	c3                   	ret    
-
-00000623 <getpid>:
-SYSCALL(getpid)
- 623:	b8 0b 00 00 00       	mov    $0xb,%eax
- 628:	cd 40                	int    $0x40
- 62a:	c3                   	ret    
-
-0000062b <sbrk>:
-SYSCALL(sbrk)
- 62b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 630:	cd 40                	int    $0x40
- 632:	c3                   	ret    
-
-00000633 <sleep>:
-SYSCALL(sleep)
- 633:	b8 0d 00 00 00       	mov    $0xd,%eax
- 638:	cd 40                	int    $0x40
- 63a:	c3                   	ret    
-
-0000063b <uptime>:
-SYSCALL(uptime)
- 63b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 640:	cd 40                	int    $0x40
- 642:	c3                   	ret    
-
-00000643 <draw>:
-SYSCALL(draw)
- 643:	b8 16 00 00 00       	mov    $0x16,%eax
- 648:	cd 40                	int    $0x40
- 64a:	c3                   	ret    
-
-0000064b <thread_create>:
-SYSCALL(thread_create)
- 64b:	b8 18 00 00 00       	mov    $0x18,%eax
- 650:	cd 40                	int    $0x40
- 652:	c3                   	ret    
-
-00000653 <thread_join>:
-SYSCALL(thread_join)
- 653:	b8 19 00 00 00       	mov    $0x19,%eax
- 658:	cd 40                	int    $0x40
- 65a:	c3                   	ret    
-
-0000065b <thread_exit>:
-SYSCALL(thread_exit)
- 65b:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 660:	cd 40                	int    $0x40
- 662:	c3                   	ret    
- 663:	66 90                	xchg   %ax,%ax
- 665:	66 90                	xchg   %ax,%ax
- 667:	66 90                	xchg   %ax,%ax
- 669:	66 90                	xchg   %ax,%ax
- 66b:	66 90                	xchg   %ax,%ax
- 66d:	66 90                	xchg   %ax,%ax
- 66f:	90                   	nop
-
-00000670 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 670:	55                   	push   %ebp
- 671:	89 e5                	mov    %esp,%ebp
- 673:	57                   	push   %edi
- 674:	56                   	push   %esi
- 675:	53                   	push   %ebx
- 676:	83 ec 3c             	sub    $0x3c,%esp
- 679:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 67c:	89 d1                	mov    %edx,%ecx
-{
- 67e:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 681:	85 d2                	test   %edx,%edx
- 683:	0f 89 7f 00 00 00    	jns    708 <printint+0x98>
- 689:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 68d:	74 79                	je     708 <printint+0x98>
-    neg = 1;
- 68f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 696:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 698:	31 db                	xor    %ebx,%ebx
- 69a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 69d:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 6a0:	89 c8                	mov    %ecx,%eax
- 6a2:	31 d2                	xor    %edx,%edx
- 6a4:	89 cf                	mov    %ecx,%edi
- 6a6:	f7 75 c4             	divl   -0x3c(%ebp)
- 6a9:	0f b6 92 dc 0a 00 00 	movzbl 0xadc(%edx),%edx
- 6b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 6b3:	89 d8                	mov    %ebx,%eax
- 6b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 6b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 6bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 6be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 6c1:	76 dd                	jbe    6a0 <printint+0x30>
-  if(neg)
- 6c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 6c6:	85 c9                	test   %ecx,%ecx
- 6c8:	74 0c                	je     6d6 <printint+0x66>
-    buf[i++] = '-';
- 6ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 6cf:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 6d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 6d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 6d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 6dd:	eb 07                	jmp    6e6 <printint+0x76>
- 6df:	90                   	nop
- 6e0:	0f b6 13             	movzbl (%ebx),%edx
- 6e3:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 6e6:	83 ec 04             	sub    $0x4,%esp
- 6e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 6ec:	6a 01                	push   $0x1
- 6ee:	56                   	push   %esi
- 6ef:	57                   	push   %edi
- 6f0:	e8 ce fe ff ff       	call   5c3 <write>
-  while(--i >= 0)
- 6f5:	83 c4 10             	add    $0x10,%esp
- 6f8:	39 de                	cmp    %ebx,%esi
- 6fa:	75 e4                	jne    6e0 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 6fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 6ff:	5b                   	pop    %ebx
- 700:	5e                   	pop    %esi
- 701:	5f                   	pop    %edi
- 702:	5d                   	pop    %ebp
- 703:	c3                   	ret    
- 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 708:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 70f:	eb 87                	jmp    698 <printint+0x28>
- 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 71f:	90                   	nop
-
-00000720 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 720:	f3 0f 1e fb          	endbr32 
- 724:	55                   	push   %ebp
- 725:	89 e5                	mov    %esp,%ebp
- 727:	57                   	push   %edi
- 728:	56                   	push   %esi
- 729:	53                   	push   %ebx
- 72a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 72d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 730:	0f b6 1e             	movzbl (%esi),%ebx
- 733:	84 db                	test   %bl,%bl
- 735:	0f 84 b4 00 00 00    	je     7ef <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 73b:	8d 45 10             	lea    0x10(%ebp),%eax
- 73e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 741:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 744:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 746:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 749:	eb 33                	jmp    77e <printf+0x5e>
- 74b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 74f:	90                   	nop
- 750:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 753:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 758:	83 f8 25             	cmp    $0x25,%eax
- 75b:	74 17                	je     774 <printf+0x54>
-  write(fd, &c, 1);
- 75d:	83 ec 04             	sub    $0x4,%esp
- 760:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 763:	6a 01                	push   $0x1
- 765:	57                   	push   %edi
- 766:	ff 75 08             	pushl  0x8(%ebp)
- 769:	e8 55 fe ff ff       	call   5c3 <write>
- 76e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 771:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 774:	0f b6 1e             	movzbl (%esi),%ebx
- 777:	83 c6 01             	add    $0x1,%esi
- 77a:	84 db                	test   %bl,%bl
- 77c:	74 71                	je     7ef <printf+0xcf>
-    c = fmt[i] & 0xff;
- 77e:	0f be cb             	movsbl %bl,%ecx
- 781:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 784:	85 d2                	test   %edx,%edx
- 786:	74 c8                	je     750 <printf+0x30>
-      }
-    } else if(state == '%'){
- 788:	83 fa 25             	cmp    $0x25,%edx
- 78b:	75 e7                	jne    774 <printf+0x54>
-      if(c == 'd'){
- 78d:	83 f8 64             	cmp    $0x64,%eax
- 790:	0f 84 9a 00 00 00    	je     830 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 796:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 79c:	83 f9 70             	cmp    $0x70,%ecx
- 79f:	74 5f                	je     800 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 7a1:	83 f8 73             	cmp    $0x73,%eax
- 7a4:	0f 84 d6 00 00 00    	je     880 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 7aa:	83 f8 63             	cmp    $0x63,%eax
- 7ad:	0f 84 8d 00 00 00    	je     840 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 7b3:	83 f8 25             	cmp    $0x25,%eax
- 7b6:	0f 84 b4 00 00 00    	je     870 <printf+0x150>
-  write(fd, &c, 1);
- 7bc:	83 ec 04             	sub    $0x4,%esp
- 7bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 7c3:	6a 01                	push   $0x1
- 7c5:	57                   	push   %edi
- 7c6:	ff 75 08             	pushl  0x8(%ebp)
- 7c9:	e8 f5 fd ff ff       	call   5c3 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 7ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 7d1:	83 c4 0c             	add    $0xc,%esp
- 7d4:	6a 01                	push   $0x1
- 7d6:	83 c6 01             	add    $0x1,%esi
- 7d9:	57                   	push   %edi
- 7da:	ff 75 08             	pushl  0x8(%ebp)
- 7dd:	e8 e1 fd ff ff       	call   5c3 <write>
-  for(i = 0; fmt[i]; i++){
- 7e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 7e6:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 7e9:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 7eb:	84 db                	test   %bl,%bl
- 7ed:	75 8f                	jne    77e <printf+0x5e>
-    }
-  }
-}
- 7ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 7f2:	5b                   	pop    %ebx
- 7f3:	5e                   	pop    %esi
- 7f4:	5f                   	pop    %edi
- 7f5:	5d                   	pop    %ebp
- 7f6:	c3                   	ret    
- 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7fe:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 800:	83 ec 0c             	sub    $0xc,%esp
- 803:	b9 10 00 00 00       	mov    $0x10,%ecx
- 808:	6a 00                	push   $0x0
- 80a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 80d:	8b 45 08             	mov    0x8(%ebp),%eax
- 810:	8b 13                	mov    (%ebx),%edx
- 812:	e8 59 fe ff ff       	call   670 <printint>
-        ap++;
- 817:	89 d8                	mov    %ebx,%eax
- 819:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 81c:	31 d2                	xor    %edx,%edx
-        ap++;
- 81e:	83 c0 04             	add    $0x4,%eax
- 821:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 824:	e9 4b ff ff ff       	jmp    774 <printf+0x54>
- 829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 830:	83 ec 0c             	sub    $0xc,%esp
- 833:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 838:	6a 01                	push   $0x1
- 83a:	eb ce                	jmp    80a <printf+0xea>
- 83c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 840:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 843:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 846:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 848:	6a 01                	push   $0x1
-        ap++;
- 84a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 84d:	57                   	push   %edi
- 84e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 851:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 854:	e8 6a fd ff ff       	call   5c3 <write>
-        ap++;
- 859:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 85c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 85f:	31 d2                	xor    %edx,%edx
- 861:	e9 0e ff ff ff       	jmp    774 <printf+0x54>
- 866:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 86d:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 870:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 873:	83 ec 04             	sub    $0x4,%esp
- 876:	e9 59 ff ff ff       	jmp    7d4 <printf+0xb4>
- 87b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 87f:	90                   	nop
-        s = (char*)*ap;
- 880:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 883:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 885:	83 c0 04             	add    $0x4,%eax
- 888:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 88b:	85 db                	test   %ebx,%ebx
- 88d:	74 17                	je     8a6 <printf+0x186>
-        while(*s != 0){
- 88f:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 892:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 894:	84 c0                	test   %al,%al
- 896:	0f 84 d8 fe ff ff    	je     774 <printf+0x54>
- 89c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 89f:	89 de                	mov    %ebx,%esi
- 8a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 8a4:	eb 1a                	jmp    8c0 <printf+0x1a0>
-          s = "(null)";
- 8a6:	bb d2 0a 00 00       	mov    $0xad2,%ebx
-        while(*s != 0){
- 8ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 8ae:	b8 28 00 00 00       	mov    $0x28,%eax
- 8b3:	89 de                	mov    %ebx,%esi
- 8b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 8b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 8bf:	90                   	nop
-  write(fd, &c, 1);
- 8c0:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 8c3:	83 c6 01             	add    $0x1,%esi
- 8c6:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 8c9:	6a 01                	push   $0x1
- 8cb:	57                   	push   %edi
- 8cc:	53                   	push   %ebx
- 8cd:	e8 f1 fc ff ff       	call   5c3 <write>
-        while(*s != 0){
- 8d2:	0f b6 06             	movzbl (%esi),%eax
- 8d5:	83 c4 10             	add    $0x10,%esp
- 8d8:	84 c0                	test   %al,%al
- 8da:	75 e4                	jne    8c0 <printf+0x1a0>
- 8dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 8df:	31 d2                	xor    %edx,%edx
- 8e1:	e9 8e fe ff ff       	jmp    774 <printf+0x54>
- 8e6:	66 90                	xchg   %ax,%ax
- 8e8:	66 90                	xchg   %ax,%ax
- 8ea:	66 90                	xchg   %ax,%ax
- 8ec:	66 90                	xchg   %ax,%ax
- 8ee:	66 90                	xchg   %ax,%ax
-
-000008f0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 8f0:	f3 0f 1e fb          	endbr32 
- 8f4:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8f5:	a1 14 0e 00 00       	mov    0xe14,%eax
-{
- 8fa:	89 e5                	mov    %esp,%ebp
- 8fc:	57                   	push   %edi
- 8fd:	56                   	push   %esi
- 8fe:	53                   	push   %ebx
- 8ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 902:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 904:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 907:	39 c8                	cmp    %ecx,%eax
- 909:	73 15                	jae    920 <free+0x30>
- 90b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 90f:	90                   	nop
- 910:	39 d1                	cmp    %edx,%ecx
- 912:	72 14                	jb     928 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 914:	39 d0                	cmp    %edx,%eax
- 916:	73 10                	jae    928 <free+0x38>
-{
- 918:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 91a:	8b 10                	mov    (%eax),%edx
- 91c:	39 c8                	cmp    %ecx,%eax
- 91e:	72 f0                	jb     910 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 920:	39 d0                	cmp    %edx,%eax
- 922:	72 f4                	jb     918 <free+0x28>
- 924:	39 d1                	cmp    %edx,%ecx
- 926:	73 f0                	jae    918 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 928:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 92b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 92e:	39 fa                	cmp    %edi,%edx
- 930:	74 1e                	je     950 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 932:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 935:	8b 50 04             	mov    0x4(%eax),%edx
- 938:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 93b:	39 f1                	cmp    %esi,%ecx
- 93d:	74 28                	je     967 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 93f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 941:	5b                   	pop    %ebx
-  freep = p;
- 942:	a3 14 0e 00 00       	mov    %eax,0xe14
-}
- 947:	5e                   	pop    %esi
- 948:	5f                   	pop    %edi
- 949:	5d                   	pop    %ebp
- 94a:	c3                   	ret    
- 94b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 94f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 950:	03 72 04             	add    0x4(%edx),%esi
- 953:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 956:	8b 10                	mov    (%eax),%edx
- 958:	8b 12                	mov    (%edx),%edx
- 95a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 95d:	8b 50 04             	mov    0x4(%eax),%edx
- 960:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 963:	39 f1                	cmp    %esi,%ecx
- 965:	75 d8                	jne    93f <free+0x4f>
-    p->s.size += bp->s.size;
- 967:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 96a:	a3 14 0e 00 00       	mov    %eax,0xe14
-    p->s.size += bp->s.size;
- 96f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 972:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 975:	89 10                	mov    %edx,(%eax)
-}
- 977:	5b                   	pop    %ebx
- 978:	5e                   	pop    %esi
- 979:	5f                   	pop    %edi
- 97a:	5d                   	pop    %ebp
- 97b:	c3                   	ret    
- 97c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000980 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 980:	f3 0f 1e fb          	endbr32 
- 984:	55                   	push   %ebp
- 985:	89 e5                	mov    %esp,%ebp
- 987:	57                   	push   %edi
- 988:	56                   	push   %esi
- 989:	53                   	push   %ebx
- 98a:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 98d:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 990:	8b 3d 14 0e 00 00    	mov    0xe14,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 996:	8d 70 07             	lea    0x7(%eax),%esi
- 999:	c1 ee 03             	shr    $0x3,%esi
- 99c:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 99f:	85 ff                	test   %edi,%edi
- 9a1:	0f 84 a9 00 00 00    	je     a50 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9a7:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 9a9:	8b 48 04             	mov    0x4(%eax),%ecx
- 9ac:	39 f1                	cmp    %esi,%ecx
- 9ae:	73 6d                	jae    a1d <malloc+0x9d>
- 9b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 9b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 9bb:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 9be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 9c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 9c8:	eb 17                	jmp    9e1 <malloc+0x61>
- 9ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9d0:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 9d2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 9d5:	39 f1                	cmp    %esi,%ecx
- 9d7:	73 4f                	jae    a28 <malloc+0xa8>
- 9d9:	8b 3d 14 0e 00 00    	mov    0xe14,%edi
- 9df:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 9e1:	39 c7                	cmp    %eax,%edi
- 9e3:	75 eb                	jne    9d0 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 9e5:	83 ec 0c             	sub    $0xc,%esp
- 9e8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 9eb:	e8 3b fc ff ff       	call   62b <sbrk>
-  if(p == (char*)-1)
- 9f0:	83 c4 10             	add    $0x10,%esp
- 9f3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 9f6:	74 1b                	je     a13 <malloc+0x93>
-  hp->s.size = nu;
- 9f8:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 9fb:	83 ec 0c             	sub    $0xc,%esp
- 9fe:	83 c0 08             	add    $0x8,%eax
- a01:	50                   	push   %eax
- a02:	e8 e9 fe ff ff       	call   8f0 <free>
-  return freep;
- a07:	a1 14 0e 00 00       	mov    0xe14,%eax
-      if((p = morecore(nunits)) == 0)
- a0c:	83 c4 10             	add    $0x10,%esp
- a0f:	85 c0                	test   %eax,%eax
- a11:	75 bd                	jne    9d0 <malloc+0x50>
-        return 0;
-  }
-}
- a13:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- a16:	31 c0                	xor    %eax,%eax
-}
- a18:	5b                   	pop    %ebx
- a19:	5e                   	pop    %esi
- a1a:	5f                   	pop    %edi
- a1b:	5d                   	pop    %ebp
- a1c:	c3                   	ret    
-    if(p->s.size >= nunits){
- a1d:	89 c2                	mov    %eax,%edx
- a1f:	89 f8                	mov    %edi,%eax
- a21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- a28:	39 ce                	cmp    %ecx,%esi
- a2a:	74 54                	je     a80 <malloc+0x100>
-        p->s.size -= nunits;
- a2c:	29 f1                	sub    %esi,%ecx
- a2e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- a31:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- a34:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- a37:	a3 14 0e 00 00       	mov    %eax,0xe14
-}
- a3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- a3f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- a42:	5b                   	pop    %ebx
- a43:	5e                   	pop    %esi
- a44:	5f                   	pop    %edi
- a45:	5d                   	pop    %ebp
- a46:	c3                   	ret    
- a47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- a4e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- a50:	c7 05 14 0e 00 00 18 	movl   $0xe18,0xe14
- a57:	0e 00 00 
-    base.s.size = 0;
- a5a:	bf 18 0e 00 00       	mov    $0xe18,%edi
-    base.s.ptr = freep = prevp = &base;
- a5f:	c7 05 18 0e 00 00 18 	movl   $0xe18,0xe18
- a66:	0e 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- a69:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- a6b:	c7 05 1c 0e 00 00 00 	movl   $0x0,0xe1c
- a72:	00 00 00 
-    if(p->s.size >= nunits){
- a75:	e9 36 ff ff ff       	jmp    9b0 <malloc+0x30>
- a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- a80:	8b 0a                	mov    (%edx),%ecx
- a82:	89 08                	mov    %ecx,(%eax)
- a84:	eb b1                	jmp    a37 <malloc+0xb7>
diff -ruN xv6-public/ls.c xv6-public-mynew/ls.c
--- xv6-public/ls.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/ls.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,85 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-#include "fs.h"
-
-char*
-fmtname(char *path)
-{
-  static char buf[DIRSIZ+1];
-  char *p;
-
-  // Find first character after last slash.
-  for(p=path+strlen(path); p >= path && *p != '/'; p--)
-    ;
-  p++;
-
-  // Return blank-padded name.
-  if(strlen(p) >= DIRSIZ)
-    return p;
-  memmove(buf, p, strlen(p));
-  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
-  return buf;
-}
-
-void
-ls(char *path)
-{
-  char buf[512], *p;
-  int fd;
-  struct dirent de;
-  struct stat st;
-
-  if((fd = open(path, 0)) < 0){
-    printf(2, "ls: cannot open %s\n", path);
-    return;
-  }
-
-  if(fstat(fd, &st) < 0){
-    printf(2, "ls: cannot stat %s\n", path);
-    close(fd);
-    return;
-  }
-
-  switch(st.type){
-  case T_FILE:
-    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
-    break;
-
-  case T_DIR:
-    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
-      printf(1, "ls: path too long\n");
-      break;
-    }
-    strcpy(buf, path);
-    p = buf+strlen(buf);
-    *p++ = '/';
-    while(read(fd, &de, sizeof(de)) == sizeof(de)){
-      if(de.inum == 0)
-        continue;
-      memmove(p, de.name, DIRSIZ);
-      p[DIRSIZ] = 0;
-      if(stat(buf, &st) < 0){
-        printf(1, "ls: cannot stat %s\n", buf);
-        continue;
-      }
-      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
-    }
-    break;
-  }
-  close(fd);
-}
-
-int
-main(int argc, char *argv[])
-{
-  int i;
-
-  if(argc < 2){
-    ls(".");
-    exit();
-  }
-  for(i=1; i<argc; i++)
-    ls(argv[i]);
-  exit();
-}
diff -ruN xv6-public/ls.d xv6-public-mynew/ls.d
--- xv6-public/ls.d	2022-09-05 09:51:05.454999144 +0530
+++ xv6-public-mynew/ls.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h fs.h
Binary files xv6-public/ls.o and xv6-public-mynew/ls.o differ
diff -ruN xv6-public/ls.sym xv6-public-mynew/ls.sym
--- xv6-public/ls.sym	2022-09-05 09:51:05.482999145 +0530
+++ xv6-public-mynew/ls.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,64 +0,0 @@
-00000000 .text
-00000a88 .rodata
-00000af0 .eh_frame
-00000e04 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 ls.c
-00000e04 buf.1108
-00000000 ulib.c
-00000000 printf.c
-00000670 printint
-00000adc digits.1097
-00000000 umalloc.c
-00000e14 freep
-00000e18 base
-00000340 strcpy
-00000060 fmtname
-00000720 printf
-0000065b thread_exit
-00000570 memmove
-000005eb mknod
-00000460 gets
-00000623 getpid
-00000980 malloc
-00000633 sleep
-000005b3 pipe
-000005c3 write
-000005fb fstat
-000005d3 kill
-00000613 chdir
-000005db exec
-000005ab wait
-000005bb read
-000005f3 unlink
-0000059b fork
-0000062b sbrk
-0000063b uptime
-00000e04 __bss_start
-00000400 memset
-00000000 main
-00000370 strcmp
-0000061b dup
-000004e0 stat
-00000e04 _edata
-00000e20 _end
-00000603 link
-00000100 ls
-000005a3 exit
-00000530 atoi
-00000643 draw
-000003c0 strlen
-000005e3 open
-00000420 strchr
-0000064b thread_create
-0000060b mkdir
-000005cb close
-00000653 thread_join
-000008f0 free
diff -ruN xv6-public/main.c xv6-public-mynew/main.c
--- xv6-public/main.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/main.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,116 +0,0 @@
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-
-static void startothers(void);
-static void mpmain(void)  __attribute__((noreturn));
-extern pde_t *kpgdir;
-extern char end[]; // first address after kernel loaded from ELF file
-
-// Bootstrap processor starts running C code here.
-// Allocate a real stack and switch to it, first
-// doing some setup required for memory allocator to work.
-int
-main(void)
-{
-  kinit1(end, P2V(4*1024*1024)); // phys page allocator
-  kvmalloc();      // kernel page table
-  mpinit();        // detect other processors
-  lapicinit();     // interrupt controller
-  seginit();       // segment descriptors
-  picinit();       // disable pic
-  ioapicinit();    // another interrupt controller
-  consoleinit();   // console hardware
-  uartinit();      // serial port
-  pinit();         // process table
-  tvinit();        // trap vectors
-  binit();         // buffer cache
-  fileinit();      // file table
-  ideinit();       // disk 
-  startothers();   // start other processors
-  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
-  userinit();      // first user process
-  mpmain();        // finish this processor's setup
-}
-
-// Other CPUs jump here from entryother.S.
-static void
-mpenter(void)
-{
-  switchkvm();
-  seginit();
-  lapicinit();
-  mpmain();
-}
-
-// Common CPU setup code.
-static void
-mpmain(void)
-{
-  cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
-  idtinit();       // load idt register
-  xchg(&(mycpu()->started), 1); // tell startothers() we're up
-  scheduler();     // start running processes
-}
-
-pde_t entrypgdir[];  // For entry.S
-
-// Start the non-boot (AP) processors.
-static void
-startothers(void)
-{
-  extern uchar _binary_entryother_start[], _binary_entryother_size[];
-  uchar *code;
-  struct cpu *c;
-  char *stack;
-
-  // Write entry code to unused memory at 0x7000.
-  // The linker has placed the image of entryother.S in
-  // _binary_entryother_start.
-  code = P2V(0x7000);
-  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
-
-  for(c = cpus; c < cpus+ncpu; c++){
-    if(c == mycpu())  // We've started already.
-      continue;
-
-    // Tell entryother.S what stack to use, where to enter, and what
-    // pgdir to use. We cannot use kpgdir yet, because the AP processor
-    // is running in low  memory, so we use entrypgdir for the APs too.
-    stack = kalloc();
-    *(void**)(code-4) = stack + KSTACKSIZE;
-    *(void(**)(void))(code-8) = mpenter;
-    *(int**)(code-12) = (void *) V2P(entrypgdir);
-
-    lapicstartap(c->apicid, V2P(code));
-
-    // wait for cpu to finish mpmain()
-    while(c->started == 0)
-      ;
-  }
-}
-
-// The boot page table used in entry.S and entryother.S.
-// Page directories (and page tables) must start on page boundaries,
-// hence the __aligned__ attribute.
-// PTE_PS in a page directory entry enables 4Mbyte pages.
-
-__attribute__((__aligned__(PGSIZE)))
-pde_t entrypgdir[NPDENTRIES] = {
-  // Map VA's [0, 4MB) to PA's [0, 4MB)
-  [0] = (0) | PTE_P | PTE_W | PTE_PS,
-  // Map VA's [KERNBASE, KERNBASE+4MB) to PA's [0, 4MB)
-  [KERNBASE>>PDXSHIFT] = (0) | PTE_P | PTE_W | PTE_PS,
-};
-
-//PAGEBREAK!
-// Blank page.
-//PAGEBREAK!
-// Blank page.
-//PAGEBREAK!
-// Blank page.
-
diff -ruN xv6-public/main.d xv6-public-mynew/main.d
--- xv6-public/main.d	2022-09-05 09:51:07.830999212 +0530
+++ xv6-public-mynew/main.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-main.o: main.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h proc.h x86.h
Binary files xv6-public/main.o and xv6-public-mynew/main.o differ
diff -ruN xv6-public/Makefile xv6-public-mynew/Makefile
--- xv6-public/Makefile	2022-08-31 17:25:19.646054032 +0530
+++ xv6-public-mynew/Makefile	1970-01-01 05:30:00.000000000 +0530
@@ -1,288 +0,0 @@
-OBJS = \
-	bio.o\
-	console.o\
-	exec.o\
-	file.o\
-	fs.o\
-	ide.o\
-	ioapic.o\
-	kalloc.o\
-	kbd.o\
-	lapic.o\
-	log.o\
-	main.o\
-	mp.o\
-	picirq.o\
-	pipe.o\
-	proc.o\
-	sleeplock.o\
-	spinlock.o\
-	string.o\
-	swtch.o\
-	syscall.o\
-	sysfile.o\
-	sysproc.o\
-	trapasm.o\
-	trap.o\
-	uart.o\
-	vectors.o\
-	vm.o\
-
-# Cross-compiling (e.g., on Mac OS X)
-# TOOLPREFIX = i386-jos-elf
-
-# Using native tools (e.g., on X86 Linux)
-#TOOLPREFIX = 
-
-# Try to infer the correct TOOLPREFIX if not set
-ifndef TOOLPREFIX
-TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \
-	then echo 'i386-jos-elf-'; \
-	elif objdump -i 2>&1 | grep 'elf32-i386' >/dev/null 2>&1; \
-	then echo ''; \
-	else echo "***" 1>&2; \
-	echo "*** Error: Couldn't find an i386-*-elf version of GCC/binutils." 1>&2; \
-	echo "*** Is the directory with i386-jos-elf-gcc in your PATH?" 1>&2; \
-	echo "*** If your i386-*-elf toolchain is installed with a command" 1>&2; \
-	echo "*** prefix other than 'i386-jos-elf-', set your TOOLPREFIX" 1>&2; \
-	echo "*** environment variable to that prefix and run 'make' again." 1>&2; \
-	echo "*** To turn off this error, run 'gmake TOOLPREFIX= ...'." 1>&2; \
-	echo "***" 1>&2; exit 1; fi)
-endif
-
-# If the makefile can't find QEMU, specify its path here
- QEMU = qemu-system-i386
-
-# Try to infer the correct QEMU
-ifndef QEMU
-QEMU = $(shell if which qemu > /dev/null; \
-	then echo qemu; exit; \
-	elif which qemu-system-i386 > /dev/null; \
-	then echo qemu-system-i386; exit; \
-	elif which qemu-system-x86_64 > /dev/null; \
-	then echo qemu-system-x86_64; exit; \
-	else \
-	qemu=/Applications/Q.app/Contents/MacOS/i386-softmmu.app/Contents/MacOS/i386-softmmu; \
-	if test -x $$qemu; then echo $$qemu; exit; fi; fi; \
-	echo "***" 1>&2; \
-	echo "*** Error: Couldn't find a working QEMU executable." 1>&2; \
-	echo "*** Is the directory containing the qemu binary in your PATH" 1>&2; \
-	echo "*** or have you tried setting the QEMU variable in Makefile?" 1>&2; \
-	echo "***" 1>&2; exit 1)
-endif
-
-CC = $(TOOLPREFIX)gcc
-AS = $(TOOLPREFIX)gas
-LD = $(TOOLPREFIX)ld
-OBJCOPY = $(TOOLPREFIX)objcopy
-OBJDUMP = $(TOOLPREFIX)objdump
-CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
-CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
-ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
-# FreeBSD ld wants ``elf_i386_fbsd''
-LDFLAGS += -m $(shell $(LD) -V | grep elf_i386 2>/dev/null | head -n 1)
-
-# Disable PIE when possible (for Ubuntu 16.10 toolchain)
-ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
-CFLAGS += -fno-pie -no-pie
-endif
-ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]nopie'),)
-CFLAGS += -fno-pie -nopie
-endif
-
-xv6.img: bootblock kernel
-	dd if=/dev/zero of=xv6.img count=10000
-	dd if=bootblock of=xv6.img conv=notrunc
-	dd if=kernel of=xv6.img seek=1 conv=notrunc
-
-xv6memfs.img: bootblock kernelmemfs
-	dd if=/dev/zero of=xv6memfs.img count=10000
-	dd if=bootblock of=xv6memfs.img conv=notrunc
-	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc
-
-bootblock: bootasm.S bootmain.c
-	$(CC) $(CFLAGS) -fno-pic -O -nostdinc -I. -c bootmain.c
-	$(CC) $(CFLAGS) -fno-pic -nostdinc -I. -c bootasm.S
-	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 -o bootblock.o bootasm.o bootmain.o
-	$(OBJDUMP) -S bootblock.o > bootblock.asm
-	$(OBJCOPY) -S -O binary -j .text bootblock.o bootblock
-	./sign.pl bootblock
-
-entryother: entryother.S
-	$(CC) $(CFLAGS) -fno-pic -nostdinc -I. -c entryother.S
-	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7000 -o bootblockother.o entryother.o
-	$(OBJCOPY) -S -O binary -j .text bootblockother.o entryother
-	$(OBJDUMP) -S bootblockother.o > entryother.asm
-
-initcode: initcode.S
-	$(CC) $(CFLAGS) -nostdinc -I. -c initcode.S
-	$(LD) $(LDFLAGS) -N -e start -Ttext 0 -o initcode.out initcode.o
-	$(OBJCOPY) -S -O binary initcode.out initcode
-	$(OBJDUMP) -S initcode.o > initcode.asm
-
-kernel: $(OBJS) entry.o entryother initcode kernel.ld
-	$(LD) $(LDFLAGS) -T kernel.ld -o kernel entry.o $(OBJS) -b binary initcode entryother
-	$(OBJDUMP) -S kernel > kernel.asm
-	$(OBJDUMP) -t kernel | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > kernel.sym
-
-# kernelmemfs is a copy of kernel that maintains the
-# disk image in memory instead of writing to a disk.
-# This is not so useful for testing persistent storage or
-# exploring disk buffering implementations, but it is
-# great for testing the kernel on real hardware without
-# needing a scratch disk.
-MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o
-kernelmemfs: $(MEMFSOBJS) entry.o entryother initcode kernel.ld fs.img
-	$(LD) $(LDFLAGS) -T kernel.ld -o kernelmemfs entry.o  $(MEMFSOBJS) -b binary initcode entryother fs.img
-	$(OBJDUMP) -S kernelmemfs > kernelmemfs.asm
-	$(OBJDUMP) -t kernelmemfs | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > kernelmemfs.sym
-
-tags: $(OBJS) entryother.S _init
-	etags *.S *.c
-
-vectors.S: vectors.pl
-	./vectors.pl > vectors.S
-
-ULIB = ulib.o usys.o printf.o umalloc.o
-
-_%: %.o $(ULIB)
-	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
-	$(OBJDUMP) -S $@ > $*.asm
-	$(OBJDUMP) -t $@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $*.sym
-
-_forktest: forktest.o $(ULIB)
-	# forktest has less library code linked in - needs to be small
-	# in order to be able to max out the proc table.
-	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o _forktest forktest.o ulib.o usys.o
-	$(OBJDUMP) -S _forktest > forktest.asm
-
-mkfs: mkfs.c fs.h
-	gcc -Werror -Wall -o mkfs mkfs.c
-
-# Prevent deletion of intermediate files, e.g. cat.o, after first build, so
-# that disk image changes after first build are persistent until clean.  More
-# details:
-# http://www.gnu.org/software/make/manual/html_node/Chained-Rules.html
-.PRECIOUS: %.o
-
-UPROGS=\
-	_cat\
-	_echo\
-	_forktest\
-	_grep\
-	_init\
-	_kill\
-	_ln\
-	_ls\
-	_mkdir\
-	_rm\
-	_sh\
-	_stressfs\
-	_usertests\
-	_wc\
-	_zombie\
-	_drawtest\
-	_thread\
-
-fs.img: mkfs README $(UPROGS)
-	./mkfs fs.img README $(UPROGS)
-
--include *.d
-
-clean: 
-	rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \
-	*.o *.d *.asm *.sym vectors.S bootblock entryother \
-	initcode initcode.out kernel xv6.img fs.img kernelmemfs \
-	xv6memfs.img mkfs .gdbinit \
-	$(UPROGS)
-
-# make a printout
-FILES = $(shell grep -v '^\#' runoff.list)
-PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)
-
-xv6.pdf: $(PRINT)
-	./runoff
-	ls -l xv6.pdf
-
-print: xv6.pdf
-
-# run in emulators
-
-bochs : fs.img xv6.img
-	if [ ! -e .bochsrc ]; then ln -s dot-bochsrc .bochsrc; fi
-	bochs -q
-
-# try to generate a unique GDB port
-GDBPORT = $(shell expr `id -u` % 5000 + 25000)
-# QEMU's gdb stub command line changed in 0.11
-QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
-	then echo "-gdb tcp::$(GDBPORT)"; \
-	else echo "-s -p $(GDBPORT)"; fi)
-ifndef CPUS
-CPUS := 2
-endif
-QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
-
-qemu: fs.img xv6.img
-	$(QEMU) -serial mon:stdio $(QEMUOPTS)
-
-qemu-memfs: xv6memfs.img
-	$(QEMU) -drive file=xv6memfs.img,index=0,media=disk,format=raw -smp $(CPUS) -m 256
-
-qemu-nox: fs.img xv6.img
-	$(QEMU) -nographic $(QEMUOPTS)
-
-.gdbinit: .gdbinit.tmpl
-	sed "s/localhost:1234/localhost:$(GDBPORT)/" < $^ > $@
-
-qemu-gdb: fs.img xv6.img .gdbinit
-	@echo "*** Now run 'gdb'." 1>&2
-	$(QEMU) -serial mon:stdio $(QEMUOPTS) -S $(QEMUGDB)
-
-qemu-nox-gdb: fs.img xv6.img .gdbinit
-	@echo "*** Now run 'gdb'." 1>&2
-	$(QEMU) -nographic $(QEMUOPTS) -S $(QEMUGDB)
-
-# CUT HERE
-# prepare dist for students
-# after running make dist, probably want to
-# rename it to rev0 or rev1 or so on and then
-# check in that version.
-
-EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c drawtest.c\
-	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
-	.gdbinit.tmpl gdbutil\
-
-dist:
-	rm -rf dist
-	mkdir dist
-	for i in $(FILES); \
-	do \
-		grep -v PAGEBREAK $$i >dist/$$i; \
-	done
-	sed '/CUT HERE/,$$d' Makefile >dist/Makefile
-	echo >dist/runoff.spec
-	cp $(EXTRA) dist
-
-dist-test:
-	rm -rf dist
-	make dist
-	rm -rf dist-test
-	mkdir dist-test
-	cp dist/* dist-test
-	cd dist-test; $(MAKE) print
-	cd dist-test; $(MAKE) bochs || true
-	cd dist-test; $(MAKE) qemu
-
-# update this rule (change rev#) when it is time to
-# make a new revision.
-tar:
-	rm -rf /tmp/xv6
-	mkdir -p /tmp/xv6
-	cp dist/* dist/.gdbinit.tmpl /tmp/xv6
-	(cd /tmp; tar cf - xv6) | gzip >xv6-rev10.tar.gz  # the next one will be 10 (9/17)
-
-.PHONY: dist-test dist
diff -ruN xv6-public/memide.c xv6-public-mynew/memide.c
--- xv6-public/memide.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/memide.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,60 +0,0 @@
-// Fake IDE disk; stores blocks in memory.
-// Useful for running kernel without scratch disk.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-#include "traps.h"
-#include "spinlock.h"
-#include "sleeplock.h"
-#include "fs.h"
-#include "buf.h"
-
-extern uchar _binary_fs_img_start[], _binary_fs_img_size[];
-
-static int disksize;
-static uchar *memdisk;
-
-void
-ideinit(void)
-{
-  memdisk = _binary_fs_img_start;
-  disksize = (uint)_binary_fs_img_size/BSIZE;
-}
-
-// Interrupt handler.
-void
-ideintr(void)
-{
-  // no-op
-}
-
-// Sync buf with disk.
-// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
-// Else if B_VALID is not set, read buf from disk, set B_VALID.
-void
-iderw(struct buf *b)
-{
-  uchar *p;
-
-  if(!holdingsleep(&b->lock))
-    panic("iderw: buf not locked");
-  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
-    panic("iderw: nothing to do");
-  if(b->dev != 1)
-    panic("iderw: request not for disk 1");
-  if(b->blockno >= disksize)
-    panic("iderw: block out of range");
-
-  p = memdisk + b->blockno*BSIZE;
-
-  if(b->flags & B_DIRTY){
-    b->flags &= ~B_DIRTY;
-    memmove(p, b->data, BSIZE);
-  } else
-    memmove(b->data, p, BSIZE);
-  b->flags |= B_VALID;
-}
diff -ruN xv6-public/memlayout.h xv6-public-mynew/memlayout.h
--- xv6-public/memlayout.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/memlayout.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,15 +0,0 @@
-// Memory layout
-
-#define EXTMEM  0x100000            // Start of extended memory
-#define PHYSTOP 0xE000000           // Top physical memory
-#define DEVSPACE 0xFE000000         // Other devices are at high addresses
-
-// Key addresses for address space layout (see kmap in vm.c for layout)
-#define KERNBASE 0x80000000         // First kernel virtual address
-#define KERNLINK (KERNBASE+EXTMEM)  // Address where kernel is linked
-
-#define V2P(a) (((uint) (a)) - KERNBASE)
-#define P2V(a) ((void *)(((char *) (a)) + KERNBASE))
-
-#define V2P_WO(x) ((x) - KERNBASE)    // same as V2P, but without casts
-#define P2V_WO(x) ((x) + KERNBASE)    // same as P2V, but without casts
Binary files xv6-public/_mkdir and xv6-public-mynew/_mkdir differ
diff -ruN xv6-public/mkdir.asm xv6-public-mynew/mkdir.asm
--- xv6-public/mkdir.asm	2022-09-05 09:51:05.542999146 +0530
+++ xv6-public-mynew/mkdir.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1237 +0,0 @@
-
-_mkdir:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	57                   	push   %edi
-  12:	bf 01 00 00 00       	mov    $0x1,%edi
-  17:	56                   	push   %esi
-  18:	53                   	push   %ebx
-  19:	51                   	push   %ecx
-  1a:	83 ec 08             	sub    $0x8,%esp
-  1d:	8b 59 04             	mov    0x4(%ecx),%ebx
-  20:	8b 31                	mov    (%ecx),%esi
-  22:	83 c3 04             	add    $0x4,%ebx
-  int i;
-
-  if(argc < 2){
-  25:	83 fe 01             	cmp    $0x1,%esi
-  28:	7e 3a                	jle    64 <main+0x64>
-  2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    printf(2, "Usage: mkdir files...\n");
-    exit();
-  }
-
-  for(i = 1; i < argc; i++){
-    if(mkdir(argv[i]) < 0){
-  30:	83 ec 0c             	sub    $0xc,%esp
-  33:	ff 33                	pushl  (%ebx)
-  35:	e8 11 03 00 00       	call   34b <mkdir>
-  3a:	83 c4 10             	add    $0x10,%esp
-  3d:	85 c0                	test   %eax,%eax
-  3f:	78 0f                	js     50 <main+0x50>
-  for(i = 1; i < argc; i++){
-  41:	83 c7 01             	add    $0x1,%edi
-  44:	83 c3 04             	add    $0x4,%ebx
-  47:	39 fe                	cmp    %edi,%esi
-  49:	75 e5                	jne    30 <main+0x30>
-      printf(2, "mkdir: %s failed to create\n", argv[i]);
-      break;
-    }
-  }
-
-  exit();
-  4b:	e8 93 02 00 00       	call   2e3 <exit>
-      printf(2, "mkdir: %s failed to create\n", argv[i]);
-  50:	50                   	push   %eax
-  51:	ff 33                	pushl  (%ebx)
-  53:	68 df 07 00 00       	push   $0x7df
-  58:	6a 02                	push   $0x2
-  5a:	e8 01 04 00 00       	call   460 <printf>
-      break;
-  5f:	83 c4 10             	add    $0x10,%esp
-  62:	eb e7                	jmp    4b <main+0x4b>
-    printf(2, "Usage: mkdir files...\n");
-  64:	52                   	push   %edx
-  65:	52                   	push   %edx
-  66:	68 c8 07 00 00       	push   $0x7c8
-  6b:	6a 02                	push   $0x2
-  6d:	e8 ee 03 00 00       	call   460 <printf>
-    exit();
-  72:	e8 6c 02 00 00       	call   2e3 <exit>
-  77:	66 90                	xchg   %ax,%ax
-  79:	66 90                	xchg   %ax,%ax
-  7b:	66 90                	xchg   %ax,%ax
-  7d:	66 90                	xchg   %ax,%ax
-  7f:	90                   	nop
-
-00000080 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  80:	f3 0f 1e fb          	endbr32 
-  84:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  85:	31 c0                	xor    %eax,%eax
-{
-  87:	89 e5                	mov    %esp,%ebp
-  89:	53                   	push   %ebx
-  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
-  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  97:	83 c0 01             	add    $0x1,%eax
-  9a:	84 d2                	test   %dl,%dl
-  9c:	75 f2                	jne    90 <strcpy+0x10>
-    ;
-  return os;
-}
-  9e:	89 c8                	mov    %ecx,%eax
-  a0:	5b                   	pop    %ebx
-  a1:	5d                   	pop    %ebp
-  a2:	c3                   	ret    
-  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000000b0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  b0:	f3 0f 1e fb          	endbr32 
-  b4:	55                   	push   %ebp
-  b5:	89 e5                	mov    %esp,%ebp
-  b7:	53                   	push   %ebx
-  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
-  be:	0f b6 01             	movzbl (%ecx),%eax
-  c1:	0f b6 1a             	movzbl (%edx),%ebx
-  c4:	84 c0                	test   %al,%al
-  c6:	75 19                	jne    e1 <strcmp+0x31>
-  c8:	eb 26                	jmp    f0 <strcmp+0x40>
-  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
-  d4:	83 c1 01             	add    $0x1,%ecx
-  d7:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
-  da:	0f b6 1a             	movzbl (%edx),%ebx
-  dd:	84 c0                	test   %al,%al
-  df:	74 0f                	je     f0 <strcmp+0x40>
-  e1:	38 d8                	cmp    %bl,%al
-  e3:	74 eb                	je     d0 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
-  e5:	29 d8                	sub    %ebx,%eax
-}
-  e7:	5b                   	pop    %ebx
-  e8:	5d                   	pop    %ebp
-  e9:	c3                   	ret    
-  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  f0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
-  f2:	29 d8                	sub    %ebx,%eax
-}
-  f4:	5b                   	pop    %ebx
-  f5:	5d                   	pop    %ebp
-  f6:	c3                   	ret    
-  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  fe:	66 90                	xchg   %ax,%ax
-
-00000100 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 100:	f3 0f 1e fb          	endbr32 
- 104:	55                   	push   %ebp
- 105:	89 e5                	mov    %esp,%ebp
- 107:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 10a:	80 3a 00             	cmpb   $0x0,(%edx)
- 10d:	74 21                	je     130 <strlen+0x30>
- 10f:	31 c0                	xor    %eax,%eax
- 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 118:	83 c0 01             	add    $0x1,%eax
- 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 11f:	89 c1                	mov    %eax,%ecx
- 121:	75 f5                	jne    118 <strlen+0x18>
-    ;
-  return n;
-}
- 123:	89 c8                	mov    %ecx,%eax
- 125:	5d                   	pop    %ebp
- 126:	c3                   	ret    
- 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 12e:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 130:	31 c9                	xor    %ecx,%ecx
-}
- 132:	5d                   	pop    %ebp
- 133:	89 c8                	mov    %ecx,%eax
- 135:	c3                   	ret    
- 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 13d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000140 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 140:	f3 0f 1e fb          	endbr32 
- 144:	55                   	push   %ebp
- 145:	89 e5                	mov    %esp,%ebp
- 147:	57                   	push   %edi
- 148:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 151:	89 d7                	mov    %edx,%edi
- 153:	fc                   	cld    
- 154:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 156:	89 d0                	mov    %edx,%eax
- 158:	5f                   	pop    %edi
- 159:	5d                   	pop    %ebp
- 15a:	c3                   	ret    
- 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 15f:	90                   	nop
-
-00000160 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 160:	f3 0f 1e fb          	endbr32 
- 164:	55                   	push   %ebp
- 165:	89 e5                	mov    %esp,%ebp
- 167:	8b 45 08             	mov    0x8(%ebp),%eax
- 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 16e:	0f b6 10             	movzbl (%eax),%edx
- 171:	84 d2                	test   %dl,%dl
- 173:	75 16                	jne    18b <strchr+0x2b>
- 175:	eb 21                	jmp    198 <strchr+0x38>
- 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 17e:	66 90                	xchg   %ax,%ax
- 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 184:	83 c0 01             	add    $0x1,%eax
- 187:	84 d2                	test   %dl,%dl
- 189:	74 0d                	je     198 <strchr+0x38>
-    if(*s == c)
- 18b:	38 d1                	cmp    %dl,%cl
- 18d:	75 f1                	jne    180 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 18f:	5d                   	pop    %ebp
- 190:	c3                   	ret    
- 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 198:	31 c0                	xor    %eax,%eax
-}
- 19a:	5d                   	pop    %ebp
- 19b:	c3                   	ret    
- 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000001a0 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 1a0:	f3 0f 1e fb          	endbr32 
- 1a4:	55                   	push   %ebp
- 1a5:	89 e5                	mov    %esp,%ebp
- 1a7:	57                   	push   %edi
- 1a8:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1a9:	31 f6                	xor    %esi,%esi
-{
- 1ab:	53                   	push   %ebx
- 1ac:	89 f3                	mov    %esi,%ebx
- 1ae:	83 ec 1c             	sub    $0x1c,%esp
- 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 1b4:	eb 33                	jmp    1e9 <gets+0x49>
- 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1bd:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 1c0:	83 ec 04             	sub    $0x4,%esp
- 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 1c6:	6a 01                	push   $0x1
- 1c8:	50                   	push   %eax
- 1c9:	6a 00                	push   $0x0
- 1cb:	e8 2b 01 00 00       	call   2fb <read>
-    if(cc < 1)
- 1d0:	83 c4 10             	add    $0x10,%esp
- 1d3:	85 c0                	test   %eax,%eax
- 1d5:	7e 1c                	jle    1f3 <gets+0x53>
-      break;
-    buf[i++] = c;
- 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 1db:	83 c7 01             	add    $0x1,%edi
- 1de:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 1e1:	3c 0a                	cmp    $0xa,%al
- 1e3:	74 23                	je     208 <gets+0x68>
- 1e5:	3c 0d                	cmp    $0xd,%al
- 1e7:	74 1f                	je     208 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 1e9:	83 c3 01             	add    $0x1,%ebx
- 1ec:	89 fe                	mov    %edi,%esi
- 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1f1:	7c cd                	jl     1c0 <gets+0x20>
- 1f3:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 1f8:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1fe:	5b                   	pop    %ebx
- 1ff:	5e                   	pop    %esi
- 200:	5f                   	pop    %edi
- 201:	5d                   	pop    %ebp
- 202:	c3                   	ret    
- 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 207:	90                   	nop
- 208:	8b 75 08             	mov    0x8(%ebp),%esi
- 20b:	8b 45 08             	mov    0x8(%ebp),%eax
- 20e:	01 de                	add    %ebx,%esi
- 210:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 212:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 218:	5b                   	pop    %ebx
- 219:	5e                   	pop    %esi
- 21a:	5f                   	pop    %edi
- 21b:	5d                   	pop    %ebp
- 21c:	c3                   	ret    
- 21d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000220 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 220:	f3 0f 1e fb          	endbr32 
- 224:	55                   	push   %ebp
- 225:	89 e5                	mov    %esp,%ebp
- 227:	56                   	push   %esi
- 228:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 229:	83 ec 08             	sub    $0x8,%esp
- 22c:	6a 00                	push   $0x0
- 22e:	ff 75 08             	pushl  0x8(%ebp)
- 231:	e8 ed 00 00 00       	call   323 <open>
-  if(fd < 0)
- 236:	83 c4 10             	add    $0x10,%esp
- 239:	85 c0                	test   %eax,%eax
- 23b:	78 2b                	js     268 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 23d:	83 ec 08             	sub    $0x8,%esp
- 240:	ff 75 0c             	pushl  0xc(%ebp)
- 243:	89 c3                	mov    %eax,%ebx
- 245:	50                   	push   %eax
- 246:	e8 f0 00 00 00       	call   33b <fstat>
-  close(fd);
- 24b:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 24e:	89 c6                	mov    %eax,%esi
-  close(fd);
- 250:	e8 b6 00 00 00       	call   30b <close>
-  return r;
- 255:	83 c4 10             	add    $0x10,%esp
-}
- 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 25b:	89 f0                	mov    %esi,%eax
- 25d:	5b                   	pop    %ebx
- 25e:	5e                   	pop    %esi
- 25f:	5d                   	pop    %ebp
- 260:	c3                   	ret    
- 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 26d:	eb e9                	jmp    258 <stat+0x38>
- 26f:	90                   	nop
-
-00000270 <atoi>:
-
-int
-atoi(const char *s)
-{
- 270:	f3 0f 1e fb          	endbr32 
- 274:	55                   	push   %ebp
- 275:	89 e5                	mov    %esp,%ebp
- 277:	53                   	push   %ebx
- 278:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 27b:	0f be 02             	movsbl (%edx),%eax
- 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 281:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 284:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 289:	77 1a                	ja     2a5 <atoi+0x35>
- 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 28f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 290:	83 c2 01             	add    $0x1,%edx
- 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 29a:	0f be 02             	movsbl (%edx),%eax
- 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 2a0:	80 fb 09             	cmp    $0x9,%bl
- 2a3:	76 eb                	jbe    290 <atoi+0x20>
-  return n;
-}
- 2a5:	89 c8                	mov    %ecx,%eax
- 2a7:	5b                   	pop    %ebx
- 2a8:	5d                   	pop    %ebp
- 2a9:	c3                   	ret    
- 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000002b0 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 2b0:	f3 0f 1e fb          	endbr32 
- 2b4:	55                   	push   %ebp
- 2b5:	89 e5                	mov    %esp,%ebp
- 2b7:	57                   	push   %edi
- 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
- 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
- 2be:	56                   	push   %esi
- 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 2c2:	85 c0                	test   %eax,%eax
- 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
- 2c6:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 2c8:	89 d7                	mov    %edx,%edi
- 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 2d1:	39 f8                	cmp    %edi,%eax
- 2d3:	75 fb                	jne    2d0 <memmove+0x20>
-  return vdst;
-}
- 2d5:	5e                   	pop    %esi
- 2d6:	89 d0                	mov    %edx,%eax
- 2d8:	5f                   	pop    %edi
- 2d9:	5d                   	pop    %ebp
- 2da:	c3                   	ret    
-
-000002db <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2db:	b8 01 00 00 00       	mov    $0x1,%eax
- 2e0:	cd 40                	int    $0x40
- 2e2:	c3                   	ret    
-
-000002e3 <exit>:
-SYSCALL(exit)
- 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
- 2e8:	cd 40                	int    $0x40
- 2ea:	c3                   	ret    
-
-000002eb <wait>:
-SYSCALL(wait)
- 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
- 2f0:	cd 40                	int    $0x40
- 2f2:	c3                   	ret    
-
-000002f3 <pipe>:
-SYSCALL(pipe)
- 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
- 2f8:	cd 40                	int    $0x40
- 2fa:	c3                   	ret    
-
-000002fb <read>:
-SYSCALL(read)
- 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
- 300:	cd 40                	int    $0x40
- 302:	c3                   	ret    
-
-00000303 <write>:
-SYSCALL(write)
- 303:	b8 10 00 00 00       	mov    $0x10,%eax
- 308:	cd 40                	int    $0x40
- 30a:	c3                   	ret    
-
-0000030b <close>:
-SYSCALL(close)
- 30b:	b8 15 00 00 00       	mov    $0x15,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret    
-
-00000313 <kill>:
-SYSCALL(kill)
- 313:	b8 06 00 00 00       	mov    $0x6,%eax
- 318:	cd 40                	int    $0x40
- 31a:	c3                   	ret    
-
-0000031b <exec>:
-SYSCALL(exec)
- 31b:	b8 07 00 00 00       	mov    $0x7,%eax
- 320:	cd 40                	int    $0x40
- 322:	c3                   	ret    
-
-00000323 <open>:
-SYSCALL(open)
- 323:	b8 0f 00 00 00       	mov    $0xf,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret    
-
-0000032b <mknod>:
-SYSCALL(mknod)
- 32b:	b8 11 00 00 00       	mov    $0x11,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret    
-
-00000333 <unlink>:
-SYSCALL(unlink)
- 333:	b8 12 00 00 00       	mov    $0x12,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret    
-
-0000033b <fstat>:
-SYSCALL(fstat)
- 33b:	b8 08 00 00 00       	mov    $0x8,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret    
-
-00000343 <link>:
-SYSCALL(link)
- 343:	b8 13 00 00 00       	mov    $0x13,%eax
- 348:	cd 40                	int    $0x40
- 34a:	c3                   	ret    
-
-0000034b <mkdir>:
-SYSCALL(mkdir)
- 34b:	b8 14 00 00 00       	mov    $0x14,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret    
-
-00000353 <chdir>:
-SYSCALL(chdir)
- 353:	b8 09 00 00 00       	mov    $0x9,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret    
-
-0000035b <dup>:
-SYSCALL(dup)
- 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret    
-
-00000363 <getpid>:
-SYSCALL(getpid)
- 363:	b8 0b 00 00 00       	mov    $0xb,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret    
-
-0000036b <sbrk>:
-SYSCALL(sbrk)
- 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret    
-
-00000373 <sleep>:
-SYSCALL(sleep)
- 373:	b8 0d 00 00 00       	mov    $0xd,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret    
-
-0000037b <uptime>:
-SYSCALL(uptime)
- 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret    
-
-00000383 <draw>:
-SYSCALL(draw)
- 383:	b8 16 00 00 00       	mov    $0x16,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret    
-
-0000038b <thread_create>:
-SYSCALL(thread_create)
- 38b:	b8 18 00 00 00       	mov    $0x18,%eax
- 390:	cd 40                	int    $0x40
- 392:	c3                   	ret    
-
-00000393 <thread_join>:
-SYSCALL(thread_join)
- 393:	b8 19 00 00 00       	mov    $0x19,%eax
- 398:	cd 40                	int    $0x40
- 39a:	c3                   	ret    
-
-0000039b <thread_exit>:
-SYSCALL(thread_exit)
- 39b:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 3a0:	cd 40                	int    $0x40
- 3a2:	c3                   	ret    
- 3a3:	66 90                	xchg   %ax,%ax
- 3a5:	66 90                	xchg   %ax,%ax
- 3a7:	66 90                	xchg   %ax,%ax
- 3a9:	66 90                	xchg   %ax,%ax
- 3ab:	66 90                	xchg   %ax,%ax
- 3ad:	66 90                	xchg   %ax,%ax
- 3af:	90                   	nop
-
-000003b0 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3b0:	55                   	push   %ebp
- 3b1:	89 e5                	mov    %esp,%ebp
- 3b3:	57                   	push   %edi
- 3b4:	56                   	push   %esi
- 3b5:	53                   	push   %ebx
- 3b6:	83 ec 3c             	sub    $0x3c,%esp
- 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 3bc:	89 d1                	mov    %edx,%ecx
-{
- 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 3c1:	85 d2                	test   %edx,%edx
- 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
- 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3cd:	74 79                	je     448 <printint+0x98>
-    neg = 1;
- 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 3d6:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 3d8:	31 db                	xor    %ebx,%ebx
- 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3dd:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 3e0:	89 c8                	mov    %ecx,%eax
- 3e2:	31 d2                	xor    %edx,%edx
- 3e4:	89 cf                	mov    %ecx,%edi
- 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3e9:	0f b6 92 04 08 00 00 	movzbl 0x804(%edx),%edx
- 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3f3:	89 d8                	mov    %ebx,%eax
- 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 401:	76 dd                	jbe    3e0 <printint+0x30>
-  if(neg)
- 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 406:	85 c9                	test   %ecx,%ecx
- 408:	74 0c                	je     416 <printint+0x66>
-    buf[i++] = '-';
- 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 40f:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 41d:	eb 07                	jmp    426 <printint+0x76>
- 41f:	90                   	nop
- 420:	0f b6 13             	movzbl (%ebx),%edx
- 423:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 426:	83 ec 04             	sub    $0x4,%esp
- 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 42c:	6a 01                	push   $0x1
- 42e:	56                   	push   %esi
- 42f:	57                   	push   %edi
- 430:	e8 ce fe ff ff       	call   303 <write>
-  while(--i >= 0)
- 435:	83 c4 10             	add    $0x10,%esp
- 438:	39 de                	cmp    %ebx,%esi
- 43a:	75 e4                	jne    420 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 43f:	5b                   	pop    %ebx
- 440:	5e                   	pop    %esi
- 441:	5f                   	pop    %edi
- 442:	5d                   	pop    %ebp
- 443:	c3                   	ret    
- 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 44f:	eb 87                	jmp    3d8 <printint+0x28>
- 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 45f:	90                   	nop
-
-00000460 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 460:	f3 0f 1e fb          	endbr32 
- 464:	55                   	push   %ebp
- 465:	89 e5                	mov    %esp,%ebp
- 467:	57                   	push   %edi
- 468:	56                   	push   %esi
- 469:	53                   	push   %ebx
- 46a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 46d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 470:	0f b6 1e             	movzbl (%esi),%ebx
- 473:	84 db                	test   %bl,%bl
- 475:	0f 84 b4 00 00 00    	je     52f <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 47b:	8d 45 10             	lea    0x10(%ebp),%eax
- 47e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 481:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 484:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 486:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 489:	eb 33                	jmp    4be <printf+0x5e>
- 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 48f:	90                   	nop
- 490:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 493:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 498:	83 f8 25             	cmp    $0x25,%eax
- 49b:	74 17                	je     4b4 <printf+0x54>
-  write(fd, &c, 1);
- 49d:	83 ec 04             	sub    $0x4,%esp
- 4a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 4a3:	6a 01                	push   $0x1
- 4a5:	57                   	push   %edi
- 4a6:	ff 75 08             	pushl  0x8(%ebp)
- 4a9:	e8 55 fe ff ff       	call   303 <write>
- 4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 4b1:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 4b4:	0f b6 1e             	movzbl (%esi),%ebx
- 4b7:	83 c6 01             	add    $0x1,%esi
- 4ba:	84 db                	test   %bl,%bl
- 4bc:	74 71                	je     52f <printf+0xcf>
-    c = fmt[i] & 0xff;
- 4be:	0f be cb             	movsbl %bl,%ecx
- 4c1:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 4c4:	85 d2                	test   %edx,%edx
- 4c6:	74 c8                	je     490 <printf+0x30>
-      }
-    } else if(state == '%'){
- 4c8:	83 fa 25             	cmp    $0x25,%edx
- 4cb:	75 e7                	jne    4b4 <printf+0x54>
-      if(c == 'd'){
- 4cd:	83 f8 64             	cmp    $0x64,%eax
- 4d0:	0f 84 9a 00 00 00    	je     570 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 4d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4dc:	83 f9 70             	cmp    $0x70,%ecx
- 4df:	74 5f                	je     540 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 4e1:	83 f8 73             	cmp    $0x73,%eax
- 4e4:	0f 84 d6 00 00 00    	je     5c0 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 4ea:	83 f8 63             	cmp    $0x63,%eax
- 4ed:	0f 84 8d 00 00 00    	je     580 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 4f3:	83 f8 25             	cmp    $0x25,%eax
- 4f6:	0f 84 b4 00 00 00    	je     5b0 <printf+0x150>
-  write(fd, &c, 1);
- 4fc:	83 ec 04             	sub    $0x4,%esp
- 4ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 503:	6a 01                	push   $0x1
- 505:	57                   	push   %edi
- 506:	ff 75 08             	pushl  0x8(%ebp)
- 509:	e8 f5 fd ff ff       	call   303 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 50e:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 511:	83 c4 0c             	add    $0xc,%esp
- 514:	6a 01                	push   $0x1
- 516:	83 c6 01             	add    $0x1,%esi
- 519:	57                   	push   %edi
- 51a:	ff 75 08             	pushl  0x8(%ebp)
- 51d:	e8 e1 fd ff ff       	call   303 <write>
-  for(i = 0; fmt[i]; i++){
- 522:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 526:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 529:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 52b:	84 db                	test   %bl,%bl
- 52d:	75 8f                	jne    4be <printf+0x5e>
-    }
-  }
-}
- 52f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 532:	5b                   	pop    %ebx
- 533:	5e                   	pop    %esi
- 534:	5f                   	pop    %edi
- 535:	5d                   	pop    %ebp
- 536:	c3                   	ret    
- 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 53e:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 540:	83 ec 0c             	sub    $0xc,%esp
- 543:	b9 10 00 00 00       	mov    $0x10,%ecx
- 548:	6a 00                	push   $0x0
- 54a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 54d:	8b 45 08             	mov    0x8(%ebp),%eax
- 550:	8b 13                	mov    (%ebx),%edx
- 552:	e8 59 fe ff ff       	call   3b0 <printint>
-        ap++;
- 557:	89 d8                	mov    %ebx,%eax
- 559:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 55c:	31 d2                	xor    %edx,%edx
-        ap++;
- 55e:	83 c0 04             	add    $0x4,%eax
- 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 564:	e9 4b ff ff ff       	jmp    4b4 <printf+0x54>
- 569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 570:	83 ec 0c             	sub    $0xc,%esp
- 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 578:	6a 01                	push   $0x1
- 57a:	eb ce                	jmp    54a <printf+0xea>
- 57c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 580:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 583:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 586:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 588:	6a 01                	push   $0x1
-        ap++;
- 58a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 58d:	57                   	push   %edi
- 58e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 591:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 594:	e8 6a fd ff ff       	call   303 <write>
-        ap++;
- 599:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 59c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 59f:	31 d2                	xor    %edx,%edx
- 5a1:	e9 0e ff ff ff       	jmp    4b4 <printf+0x54>
- 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5ad:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 5b3:	83 ec 04             	sub    $0x4,%esp
- 5b6:	e9 59 ff ff ff       	jmp    514 <printf+0xb4>
- 5bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5bf:	90                   	nop
-        s = (char*)*ap;
- 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5c3:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 5c5:	83 c0 04             	add    $0x4,%eax
- 5c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 5cb:	85 db                	test   %ebx,%ebx
- 5cd:	74 17                	je     5e6 <printf+0x186>
-        while(*s != 0){
- 5cf:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 5d2:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 5d4:	84 c0                	test   %al,%al
- 5d6:	0f 84 d8 fe ff ff    	je     4b4 <printf+0x54>
- 5dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5df:	89 de                	mov    %ebx,%esi
- 5e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5e4:	eb 1a                	jmp    600 <printf+0x1a0>
-          s = "(null)";
- 5e6:	bb fb 07 00 00       	mov    $0x7fb,%ebx
-        while(*s != 0){
- 5eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
- 5f3:	89 de                	mov    %ebx,%esi
- 5f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5ff:	90                   	nop
-  write(fd, &c, 1);
- 600:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 603:	83 c6 01             	add    $0x1,%esi
- 606:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 609:	6a 01                	push   $0x1
- 60b:	57                   	push   %edi
- 60c:	53                   	push   %ebx
- 60d:	e8 f1 fc ff ff       	call   303 <write>
-        while(*s != 0){
- 612:	0f b6 06             	movzbl (%esi),%eax
- 615:	83 c4 10             	add    $0x10,%esp
- 618:	84 c0                	test   %al,%al
- 61a:	75 e4                	jne    600 <printf+0x1a0>
- 61c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 61f:	31 d2                	xor    %edx,%edx
- 621:	e9 8e fe ff ff       	jmp    4b4 <printf+0x54>
- 626:	66 90                	xchg   %ax,%ax
- 628:	66 90                	xchg   %ax,%ax
- 62a:	66 90                	xchg   %ax,%ax
- 62c:	66 90                	xchg   %ax,%ax
- 62e:	66 90                	xchg   %ax,%ax
-
-00000630 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 630:	f3 0f 1e fb          	endbr32 
- 634:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 635:	a1 bc 0a 00 00       	mov    0xabc,%eax
-{
- 63a:	89 e5                	mov    %esp,%ebp
- 63c:	57                   	push   %edi
- 63d:	56                   	push   %esi
- 63e:	53                   	push   %ebx
- 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 642:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 644:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 647:	39 c8                	cmp    %ecx,%eax
- 649:	73 15                	jae    660 <free+0x30>
- 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 64f:	90                   	nop
- 650:	39 d1                	cmp    %edx,%ecx
- 652:	72 14                	jb     668 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 654:	39 d0                	cmp    %edx,%eax
- 656:	73 10                	jae    668 <free+0x38>
-{
- 658:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 65a:	8b 10                	mov    (%eax),%edx
- 65c:	39 c8                	cmp    %ecx,%eax
- 65e:	72 f0                	jb     650 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 660:	39 d0                	cmp    %edx,%eax
- 662:	72 f4                	jb     658 <free+0x28>
- 664:	39 d1                	cmp    %edx,%ecx
- 666:	73 f0                	jae    658 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 66e:	39 fa                	cmp    %edi,%edx
- 670:	74 1e                	je     690 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 672:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 675:	8b 50 04             	mov    0x4(%eax),%edx
- 678:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 67b:	39 f1                	cmp    %esi,%ecx
- 67d:	74 28                	je     6a7 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 67f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 681:	5b                   	pop    %ebx
-  freep = p;
- 682:	a3 bc 0a 00 00       	mov    %eax,0xabc
-}
- 687:	5e                   	pop    %esi
- 688:	5f                   	pop    %edi
- 689:	5d                   	pop    %ebp
- 68a:	c3                   	ret    
- 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 68f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 690:	03 72 04             	add    0x4(%edx),%esi
- 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 696:	8b 10                	mov    (%eax),%edx
- 698:	8b 12                	mov    (%edx),%edx
- 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 69d:	8b 50 04             	mov    0x4(%eax),%edx
- 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6a3:	39 f1                	cmp    %esi,%ecx
- 6a5:	75 d8                	jne    67f <free+0x4f>
-    p->s.size += bp->s.size;
- 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 6aa:	a3 bc 0a 00 00       	mov    %eax,0xabc
-    p->s.size += bp->s.size;
- 6af:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 6b5:	89 10                	mov    %edx,(%eax)
-}
- 6b7:	5b                   	pop    %ebx
- 6b8:	5e                   	pop    %esi
- 6b9:	5f                   	pop    %edi
- 6ba:	5d                   	pop    %ebp
- 6bb:	c3                   	ret    
- 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000006c0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 6c0:	f3 0f 1e fb          	endbr32 
- 6c4:	55                   	push   %ebp
- 6c5:	89 e5                	mov    %esp,%ebp
- 6c7:	57                   	push   %edi
- 6c8:	56                   	push   %esi
- 6c9:	53                   	push   %ebx
- 6ca:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6cd:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 6d0:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6d6:	8d 70 07             	lea    0x7(%eax),%esi
- 6d9:	c1 ee 03             	shr    $0x3,%esi
- 6dc:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 6df:	85 ff                	test   %edi,%edi
- 6e1:	0f 84 a9 00 00 00    	je     790 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6e7:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 6e9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6ec:	39 f1                	cmp    %esi,%ecx
- 6ee:	73 6d                	jae    75d <malloc+0x9d>
- 6f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6fb:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 6fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 705:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 708:	eb 17                	jmp    721 <malloc+0x61>
- 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 710:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 712:	8b 4a 04             	mov    0x4(%edx),%ecx
- 715:	39 f1                	cmp    %esi,%ecx
- 717:	73 4f                	jae    768 <malloc+0xa8>
- 719:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
- 71f:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 721:	39 c7                	cmp    %eax,%edi
- 723:	75 eb                	jne    710 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 725:	83 ec 0c             	sub    $0xc,%esp
- 728:	ff 75 e4             	pushl  -0x1c(%ebp)
- 72b:	e8 3b fc ff ff       	call   36b <sbrk>
-  if(p == (char*)-1)
- 730:	83 c4 10             	add    $0x10,%esp
- 733:	83 f8 ff             	cmp    $0xffffffff,%eax
- 736:	74 1b                	je     753 <malloc+0x93>
-  hp->s.size = nu;
- 738:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 73b:	83 ec 0c             	sub    $0xc,%esp
- 73e:	83 c0 08             	add    $0x8,%eax
- 741:	50                   	push   %eax
- 742:	e8 e9 fe ff ff       	call   630 <free>
-  return freep;
- 747:	a1 bc 0a 00 00       	mov    0xabc,%eax
-      if((p = morecore(nunits)) == 0)
- 74c:	83 c4 10             	add    $0x10,%esp
- 74f:	85 c0                	test   %eax,%eax
- 751:	75 bd                	jne    710 <malloc+0x50>
-        return 0;
-  }
-}
- 753:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 756:	31 c0                	xor    %eax,%eax
-}
- 758:	5b                   	pop    %ebx
- 759:	5e                   	pop    %esi
- 75a:	5f                   	pop    %edi
- 75b:	5d                   	pop    %ebp
- 75c:	c3                   	ret    
-    if(p->s.size >= nunits){
- 75d:	89 c2                	mov    %eax,%edx
- 75f:	89 f8                	mov    %edi,%eax
- 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- 768:	39 ce                	cmp    %ecx,%esi
- 76a:	74 54                	je     7c0 <malloc+0x100>
-        p->s.size -= nunits;
- 76c:	29 f1                	sub    %esi,%ecx
- 76e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- 771:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- 774:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- 777:	a3 bc 0a 00 00       	mov    %eax,0xabc
-}
- 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 77f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- 782:	5b                   	pop    %ebx
- 783:	5e                   	pop    %esi
- 784:	5f                   	pop    %edi
- 785:	5d                   	pop    %ebp
- 786:	c3                   	ret    
- 787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 78e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- 790:	c7 05 bc 0a 00 00 c0 	movl   $0xac0,0xabc
- 797:	0a 00 00 
-    base.s.size = 0;
- 79a:	bf c0 0a 00 00       	mov    $0xac0,%edi
-    base.s.ptr = freep = prevp = &base;
- 79f:	c7 05 c0 0a 00 00 c0 	movl   $0xac0,0xac0
- 7a6:	0a 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7a9:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- 7ab:	c7 05 c4 0a 00 00 00 	movl   $0x0,0xac4
- 7b2:	00 00 00 
-    if(p->s.size >= nunits){
- 7b5:	e9 36 ff ff ff       	jmp    6f0 <malloc+0x30>
- 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- 7c0:	8b 0a                	mov    (%edx),%ecx
- 7c2:	89 08                	mov    %ecx,(%eax)
- 7c4:	eb b1                	jmp    777 <malloc+0xb7>
diff -ruN xv6-public/mkdir.c xv6-public-mynew/mkdir.c
--- xv6-public/mkdir.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/mkdir.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,23 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-  int i;
-
-  if(argc < 2){
-    printf(2, "Usage: mkdir files...\n");
-    exit();
-  }
-
-  for(i = 1; i < argc; i++){
-    if(mkdir(argv[i]) < 0){
-      printf(2, "mkdir: %s failed to create\n", argv[i]);
-      break;
-    }
-  }
-
-  exit();
-}
diff -ruN xv6-public/mkdir.d xv6-public-mynew/mkdir.d
--- xv6-public/mkdir.d	2022-09-05 09:51:05.518999146 +0530
+++ xv6-public-mynew/mkdir.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/mkdir.o and xv6-public-mynew/mkdir.o differ
diff -ruN xv6-public/mkdir.sym xv6-public-mynew/mkdir.sym
--- xv6-public/mkdir.sym	2022-09-05 09:51:05.546999146 +0530
+++ xv6-public-mynew/mkdir.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,61 +0,0 @@
-00000000 .text
-000007c8 .rodata
-00000818 .eh_frame
-00000abc .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 mkdir.c
-00000000 ulib.c
-00000000 printf.c
-000003b0 printint
-00000804 digits.1097
-00000000 umalloc.c
-00000abc freep
-00000ac0 base
-00000080 strcpy
-00000460 printf
-0000039b thread_exit
-000002b0 memmove
-0000032b mknod
-000001a0 gets
-00000363 getpid
-000006c0 malloc
-00000373 sleep
-000002f3 pipe
-00000303 write
-0000033b fstat
-00000313 kill
-00000353 chdir
-0000031b exec
-000002eb wait
-000002fb read
-00000333 unlink
-000002db fork
-0000036b sbrk
-0000037b uptime
-00000abc __bss_start
-00000140 memset
-00000000 main
-000000b0 strcmp
-0000035b dup
-00000220 stat
-00000abc _edata
-00000ac8 _end
-00000343 link
-000002e3 exit
-00000270 atoi
-00000383 draw
-00000100 strlen
-00000323 open
-00000160 strchr
-0000038b thread_create
-0000034b mkdir
-0000030b close
-00000393 thread_join
-00000630 free
Binary files xv6-public/mkfs and xv6-public-mynew/mkfs differ
diff -ruN xv6-public/mkfs.c xv6-public-mynew/mkfs.c
--- xv6-public/mkfs.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/mkfs.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,297 +0,0 @@
-#include <stdio.h>
-#include <unistd.h>
-#include <stdlib.h>
-#include <string.h>
-#include <fcntl.h>
-#include <assert.h>
-
-#define stat xv6_stat  // avoid clash with host struct stat
-#include "types.h"
-#include "fs.h"
-#include "stat.h"
-#include "param.h"
-
-#ifndef static_assert
-#define static_assert(a, b) do { switch (0) case 0: case (a): ; } while (0)
-#endif
-
-#define NINODES 200
-
-// Disk layout:
-// [ boot block | sb block | log | inode blocks | free bit map | data blocks ]
-
-int nbitmap = FSSIZE/(BSIZE*8) + 1;
-int ninodeblocks = NINODES / IPB + 1;
-int nlog = LOGSIZE;
-int nmeta;    // Number of meta blocks (boot, sb, nlog, inode, bitmap)
-int nblocks;  // Number of data blocks
-
-int fsfd;
-struct superblock sb;
-char zeroes[BSIZE];
-uint freeinode = 1;
-uint freeblock;
-
-
-void balloc(int);
-void wsect(uint, void*);
-void winode(uint, struct dinode*);
-void rinode(uint inum, struct dinode *ip);
-void rsect(uint sec, void *buf);
-uint ialloc(ushort type);
-void iappend(uint inum, void *p, int n);
-
-// convert to intel byte order
-ushort
-xshort(ushort x)
-{
-  ushort y;
-  uchar *a = (uchar*)&y;
-  a[0] = x;
-  a[1] = x >> 8;
-  return y;
-}
-
-uint
-xint(uint x)
-{
-  uint y;
-  uchar *a = (uchar*)&y;
-  a[0] = x;
-  a[1] = x >> 8;
-  a[2] = x >> 16;
-  a[3] = x >> 24;
-  return y;
-}
-
-int
-main(int argc, char *argv[])
-{
-  int i, cc, fd;
-  uint rootino, inum, off;
-  struct dirent de;
-  char buf[BSIZE];
-  struct dinode din;
-
-
-  static_assert(sizeof(int) == 4, "Integers must be 4 bytes!");
-
-  if(argc < 2){
-    fprintf(stderr, "Usage: mkfs fs.img files...\n");
-    exit(1);
-  }
-
-  assert((BSIZE % sizeof(struct dinode)) == 0);
-  assert((BSIZE % sizeof(struct dirent)) == 0);
-
-  fsfd = open(argv[1], O_RDWR|O_CREAT|O_TRUNC, 0666);
-  if(fsfd < 0){
-    perror(argv[1]);
-    exit(1);
-  }
-
-  // 1 fs block = 1 disk sector
-  nmeta = 2 + nlog + ninodeblocks + nbitmap;
-  nblocks = FSSIZE - nmeta;
-
-  sb.size = xint(FSSIZE);
-  sb.nblocks = xint(nblocks);
-  sb.ninodes = xint(NINODES);
-  sb.nlog = xint(nlog);
-  sb.logstart = xint(2);
-  sb.inodestart = xint(2+nlog);
-  sb.bmapstart = xint(2+nlog+ninodeblocks);
-
-  printf("nmeta %d (boot, super, log blocks %u inode blocks %u, bitmap blocks %u) blocks %d total %d\n",
-         nmeta, nlog, ninodeblocks, nbitmap, nblocks, FSSIZE);
-
-  freeblock = nmeta;     // the first free block that we can allocate
-
-  for(i = 0; i < FSSIZE; i++)
-    wsect(i, zeroes);
-
-  memset(buf, 0, sizeof(buf));
-  memmove(buf, &sb, sizeof(sb));
-  wsect(1, buf);
-
-  rootino = ialloc(T_DIR);
-  assert(rootino == ROOTINO);
-
-  bzero(&de, sizeof(de));
-  de.inum = xshort(rootino);
-  strcpy(de.name, ".");
-  iappend(rootino, &de, sizeof(de));
-
-  bzero(&de, sizeof(de));
-  de.inum = xshort(rootino);
-  strcpy(de.name, "..");
-  iappend(rootino, &de, sizeof(de));
-
-  for(i = 2; i < argc; i++){
-    assert(index(argv[i], '/') == 0);
-
-    if((fd = open(argv[i], 0)) < 0){
-      perror(argv[i]);
-      exit(1);
-    }
-
-    // Skip leading _ in name when writing to file system.
-    // The binaries are named _rm, _cat, etc. to keep the
-    // build operating system from trying to execute them
-    // in place of system binaries like rm and cat.
-    if(argv[i][0] == '_')
-      ++argv[i];
-
-    inum = ialloc(T_FILE);
-
-    bzero(&de, sizeof(de));
-    de.inum = xshort(inum);
-    strncpy(de.name, argv[i], DIRSIZ);
-    iappend(rootino, &de, sizeof(de));
-
-    while((cc = read(fd, buf, sizeof(buf))) > 0)
-      iappend(inum, buf, cc);
-
-    close(fd);
-  }
-
-  // fix size of root inode dir
-  rinode(rootino, &din);
-  off = xint(din.size);
-  off = ((off/BSIZE) + 1) * BSIZE;
-  din.size = xint(off);
-  winode(rootino, &din);
-
-  balloc(freeblock);
-
-  exit(0);
-}
-
-void
-wsect(uint sec, void *buf)
-{
-  if(lseek(fsfd, sec * BSIZE, 0) != sec * BSIZE){
-    perror("lseek");
-    exit(1);
-  }
-  if(write(fsfd, buf, BSIZE) != BSIZE){
-    perror("write");
-    exit(1);
-  }
-}
-
-void
-winode(uint inum, struct dinode *ip)
-{
-  char buf[BSIZE];
-  uint bn;
-  struct dinode *dip;
-
-  bn = IBLOCK(inum, sb);
-  rsect(bn, buf);
-  dip = ((struct dinode*)buf) + (inum % IPB);
-  *dip = *ip;
-  wsect(bn, buf);
-}
-
-void
-rinode(uint inum, struct dinode *ip)
-{
-  char buf[BSIZE];
-  uint bn;
-  struct dinode *dip;
-
-  bn = IBLOCK(inum, sb);
-  rsect(bn, buf);
-  dip = ((struct dinode*)buf) + (inum % IPB);
-  *ip = *dip;
-}
-
-void
-rsect(uint sec, void *buf)
-{
-  if(lseek(fsfd, sec * BSIZE, 0) != sec * BSIZE){
-    perror("lseek");
-    exit(1);
-  }
-  if(read(fsfd, buf, BSIZE) != BSIZE){
-    perror("read");
-    exit(1);
-  }
-}
-
-uint
-ialloc(ushort type)
-{
-  uint inum = freeinode++;
-  struct dinode din;
-
-  bzero(&din, sizeof(din));
-  din.type = xshort(type);
-  din.nlink = xshort(1);
-  din.size = xint(0);
-  winode(inum, &din);
-  return inum;
-}
-
-void
-balloc(int used)
-{
-  uchar buf[BSIZE];
-  int i;
-
-  printf("balloc: first %d blocks have been allocated\n", used);
-  assert(used < BSIZE*8);
-  bzero(buf, BSIZE);
-  for(i = 0; i < used; i++){
-    buf[i/8] = buf[i/8] | (0x1 << (i%8));
-  }
-  printf("balloc: write bitmap block at sector %d\n", sb.bmapstart);
-  wsect(sb.bmapstart, buf);
-}
-
-#define min(a, b) ((a) < (b) ? (a) : (b))
-
-void
-iappend(uint inum, void *xp, int n)
-{
-  char *p = (char*)xp;
-  uint fbn, off, n1;
-  struct dinode din;
-  char buf[BSIZE];
-  uint indirect[NINDIRECT];
-  uint x;
-
-  rinode(inum, &din);
-  off = xint(din.size);
-  // printf("append inum %d at off %d sz %d\n", inum, off, n);
-  while(n > 0){
-    fbn = off / BSIZE;
-    assert(fbn < MAXFILE);
-    if(fbn < NDIRECT){
-      if(xint(din.addrs[fbn]) == 0){
-        din.addrs[fbn] = xint(freeblock++);
-      }
-      x = xint(din.addrs[fbn]);
-    } else {
-      if(xint(din.addrs[NDIRECT]) == 0){
-        din.addrs[NDIRECT] = xint(freeblock++);
-      }
-      rsect(xint(din.addrs[NDIRECT]), (char*)indirect);
-      if(indirect[fbn - NDIRECT] == 0){
-        indirect[fbn - NDIRECT] = xint(freeblock++);
-        wsect(xint(din.addrs[NDIRECT]), (char*)indirect);
-      }
-      x = xint(indirect[fbn-NDIRECT]);
-    }
-    n1 = min(n, (fbn + 1) * BSIZE - off);
-    rsect(x, buf);
-    bcopy(p, buf + off - (fbn * BSIZE), n1);
-    wsect(x, buf);
-    n -= n1;
-    off += n1;
-    p += n1;
-  }
-  din.size = xint(off);
-  winode(inum, &din);
-}
diff -ruN xv6-public/mmu.h xv6-public-mynew/mmu.h
--- xv6-public/mmu.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/mmu.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,181 +0,0 @@
-// This file contains definitions for the
-// x86 memory management unit (MMU).
-
-// Eflags register
-#define FL_IF           0x00000200      // Interrupt Enable
-
-// Control Register flags
-#define CR0_PE          0x00000001      // Protection Enable
-#define CR0_WP          0x00010000      // Write Protect
-#define CR0_PG          0x80000000      // Paging
-
-#define CR4_PSE         0x00000010      // Page size extension
-
-// various segment selectors.
-#define SEG_KCODE 1  // kernel code
-#define SEG_KDATA 2  // kernel data+stack
-#define SEG_UCODE 3  // user code
-#define SEG_UDATA 4  // user data+stack
-#define SEG_TSS   5  // this process's task state
-
-// cpu->gdt[NSEGS] holds the above segments.
-#define NSEGS     6
-
-#ifndef __ASSEMBLER__
-// Segment Descriptor
-struct segdesc {
-  uint lim_15_0 : 16;  // Low bits of segment limit
-  uint base_15_0 : 16; // Low bits of segment base address
-  uint base_23_16 : 8; // Middle bits of segment base address
-  uint type : 4;       // Segment type (see STS_ constants)
-  uint s : 1;          // 0 = system, 1 = application
-  uint dpl : 2;        // Descriptor Privilege Level
-  uint p : 1;          // Present
-  uint lim_19_16 : 4;  // High bits of segment limit
-  uint avl : 1;        // Unused (available for software use)
-  uint rsv1 : 1;       // Reserved
-  uint db : 1;         // 0 = 16-bit segment, 1 = 32-bit segment
-  uint g : 1;          // Granularity: limit scaled by 4K when set
-  uint base_31_24 : 8; // High bits of segment base address
-};
-
-// Normal segment
-#define SEG(type, base, lim, dpl) (struct segdesc)    \
-{ ((lim) >> 12) & 0xffff, (uint)(base) & 0xffff,      \
-  ((uint)(base) >> 16) & 0xff, type, 1, dpl, 1,       \
-  (uint)(lim) >> 28, 0, 0, 1, 1, (uint)(base) >> 24 }
-#define SEG16(type, base, lim, dpl) (struct segdesc)  \
-{ (lim) & 0xffff, (uint)(base) & 0xffff,              \
-  ((uint)(base) >> 16) & 0xff, type, 1, dpl, 1,       \
-  (uint)(lim) >> 16, 0, 0, 1, 0, (uint)(base) >> 24 }
-#endif
-
-#define DPL_USER    0x3     // User DPL
-
-// Application segment type bits
-#define STA_X       0x8     // Executable segment
-#define STA_W       0x2     // Writeable (non-executable segments)
-#define STA_R       0x2     // Readable (executable segments)
-
-// System segment type bits
-#define STS_T32A    0x9     // Available 32-bit TSS
-#define STS_IG32    0xE     // 32-bit Interrupt Gate
-#define STS_TG32    0xF     // 32-bit Trap Gate
-
-// A virtual address 'la' has a three-part structure as follows:
-//
-// +--------10------+-------10-------+---------12----------+
-// | Page Directory |   Page Table   | Offset within Page  |
-// |      Index     |      Index     |                     |
-// +----------------+----------------+---------------------+
-//  \--- PDX(va) --/ \--- PTX(va) --/
-
-// page directory index
-#define PDX(va)         (((uint)(va) >> PDXSHIFT) & 0x3FF)
-
-// page table index
-#define PTX(va)         (((uint)(va) >> PTXSHIFT) & 0x3FF)
-
-// construct virtual address from indexes and offset
-#define PGADDR(d, t, o) ((uint)((d) << PDXSHIFT | (t) << PTXSHIFT | (o)))
-
-// Page directory and page table constants.
-#define NPDENTRIES      1024    // # directory entries per page directory
-#define NPTENTRIES      1024    // # PTEs per page table
-#define PGSIZE          4096    // bytes mapped by a page
-
-#define PTXSHIFT        12      // offset of PTX in a linear address
-#define PDXSHIFT        22      // offset of PDX in a linear address
-
-#define PGROUNDUP(sz)  (((sz)+PGSIZE-1) & ~(PGSIZE-1))
-#define PGROUNDDOWN(a) (((a)) & ~(PGSIZE-1))
-
-// Page table/directory entry flags.
-#define PTE_P           0x001   // Present
-#define PTE_W           0x002   // Writeable
-#define PTE_U           0x004   // User
-#define PTE_PS          0x080   // Page Size
-
-// Address in page table or page directory entry
-#define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
-#define PTE_FLAGS(pte)  ((uint)(pte) &  0xFFF)
-
-#ifndef __ASSEMBLER__
-typedef uint pte_t;
-
-// Task state segment format
-struct taskstate {
-  uint link;         // Old ts selector
-  uint esp0;         // Stack pointers and segment selectors
-  ushort ss0;        //   after an increase in privilege level
-  ushort padding1;
-  uint *esp1;
-  ushort ss1;
-  ushort padding2;
-  uint *esp2;
-  ushort ss2;
-  ushort padding3;
-  void *cr3;         // Page directory base
-  uint *eip;         // Saved state from last task switch
-  uint eflags;
-  uint eax;          // More saved state (registers)
-  uint ecx;
-  uint edx;
-  uint ebx;
-  uint *esp;
-  uint *ebp;
-  uint esi;
-  uint edi;
-  ushort es;         // Even more saved state (segment selectors)
-  ushort padding4;
-  ushort cs;
-  ushort padding5;
-  ushort ss;
-  ushort padding6;
-  ushort ds;
-  ushort padding7;
-  ushort fs;
-  ushort padding8;
-  ushort gs;
-  ushort padding9;
-  ushort ldt;
-  ushort padding10;
-  ushort t;          // Trap on task switch
-  ushort iomb;       // I/O map base address
-};
-
-// Gate descriptors for interrupts and traps
-struct gatedesc {
-  uint off_15_0 : 16;   // low 16 bits of offset in segment
-  uint cs : 16;         // code segment selector
-  uint args : 5;        // # args, 0 for interrupt/trap gates
-  uint rsv1 : 3;        // reserved(should be zero I guess)
-  uint type : 4;        // type(STS_{IG32,TG32})
-  uint s : 1;           // must be 0 (system)
-  uint dpl : 2;         // descriptor(meaning new) privilege level
-  uint p : 1;           // Present
-  uint off_31_16 : 16;  // high bits of offset in segment
-};
-
-// Set up a normal interrupt/trap gate descriptor.
-// - istrap: 1 for a trap (= exception) gate, 0 for an interrupt gate.
-//   interrupt gate clears FL_IF, trap gate leaves FL_IF alone
-// - sel: Code segment selector for interrupt/trap handler
-// - off: Offset in code segment for interrupt/trap handler
-// - dpl: Descriptor Privilege Level -
-//        the privilege level required for software to invoke
-//        this interrupt/trap gate explicitly using an int instruction.
-#define SETGATE(gate, istrap, sel, off, d)                \
-{                                                         \
-  (gate).off_15_0 = (uint)(off) & 0xffff;                \
-  (gate).cs = (sel);                                      \
-  (gate).args = 0;                                        \
-  (gate).rsv1 = 0;                                        \
-  (gate).type = (istrap) ? STS_TG32 : STS_IG32;           \
-  (gate).s = 0;                                           \
-  (gate).dpl = (d);                                       \
-  (gate).p = 1;                                           \
-  (gate).off_31_16 = (uint)(off) >> 16;                  \
-}
-
-#endif
diff -ruN xv6-public/mp.c xv6-public-mynew/mp.c
--- xv6-public/mp.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/mp.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,139 +0,0 @@
-// Multiprocessor support
-// Search memory for MP description structures.
-// http://developer.intel.com/design/pentium/datashts/24201606.pdf
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mp.h"
-#include "x86.h"
-#include "mmu.h"
-#include "proc.h"
-
-struct cpu cpus[NCPU];
-int ncpu;
-uchar ioapicid;
-
-static uchar
-sum(uchar *addr, int len)
-{
-  int i, sum;
-
-  sum = 0;
-  for(i=0; i<len; i++)
-    sum += addr[i];
-  return sum;
-}
-
-// Look for an MP structure in the len bytes at addr.
-static struct mp*
-mpsearch1(uint a, int len)
-{
-  uchar *e, *p, *addr;
-
-  addr = P2V(a);
-  e = addr+len;
-  for(p = addr; p < e; p += sizeof(struct mp))
-    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-      return (struct mp*)p;
-  return 0;
-}
-
-// Search for the MP Floating Pointer Structure, which according to the
-// spec is in one of the following three locations:
-// 1) in the first KB of the EBDA;
-// 2) in the last KB of system base memory;
-// 3) in the BIOS ROM between 0xE0000 and 0xFFFFF.
-static struct mp*
-mpsearch(void)
-{
-  uchar *bda;
-  uint p;
-  struct mp *mp;
-
-  bda = (uchar *) P2V(0x400);
-  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
-    if((mp = mpsearch1(p, 1024)))
-      return mp;
-  } else {
-    p = ((bda[0x14]<<8)|bda[0x13])*1024;
-    if((mp = mpsearch1(p-1024, 1024)))
-      return mp;
-  }
-  return mpsearch1(0xF0000, 0x10000);
-}
-
-// Search for an MP configuration table.  For now,
-// don't accept the default configurations (physaddr == 0).
-// Check for correct signature, calculate the checksum and,
-// if correct, check the version.
-// To do: check extended table checksum.
-static struct mpconf*
-mpconfig(struct mp **pmp)
-{
-  struct mpconf *conf;
-  struct mp *mp;
-
-  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
-    return 0;
-  conf = (struct mpconf*) P2V((uint) mp->physaddr);
-  if(memcmp(conf, "PCMP", 4) != 0)
-    return 0;
-  if(conf->version != 1 && conf->version != 4)
-    return 0;
-  if(sum((uchar*)conf, conf->length) != 0)
-    return 0;
-  *pmp = mp;
-  return conf;
-}
-
-void
-mpinit(void)
-{
-  uchar *p, *e;
-  int ismp;
-  struct mp *mp;
-  struct mpconf *conf;
-  struct mpproc *proc;
-  struct mpioapic *ioapic;
-
-  if((conf = mpconfig(&mp)) == 0)
-    panic("Expect to run on an SMP");
-  ismp = 1;
-  lapic = (uint*)conf->lapicaddr;
-  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-    switch(*p){
-    case MPPROC:
-      proc = (struct mpproc*)p;
-      if(ncpu < NCPU) {
-        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-        ncpu++;
-      }
-      p += sizeof(struct mpproc);
-      continue;
-    case MPIOAPIC:
-      ioapic = (struct mpioapic*)p;
-      ioapicid = ioapic->apicno;
-      p += sizeof(struct mpioapic);
-      continue;
-    case MPBUS:
-    case MPIOINTR:
-    case MPLINTR:
-      p += 8;
-      continue;
-    default:
-      ismp = 0;
-      break;
-    }
-  }
-  if(!ismp)
-    panic("Didn't find a suitable machine");
-
-  if(mp->imcrp){
-    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
-    // But it would on real hardware.
-    outb(0x22, 0x70);   // Select IMCR
-    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
-  }
-}
diff -ruN xv6-public/mp.d xv6-public-mynew/mp.d
--- xv6-public/mp.d	2022-09-05 09:51:07.902999214 +0530
+++ xv6-public-mynew/mp.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-mp.o: mp.c /usr/include/stdc-predef.h types.h defs.h param.h memlayout.h \
- mp.h x86.h mmu.h proc.h
diff -ruN xv6-public/mp.h xv6-public-mynew/mp.h
--- xv6-public/mp.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/mp.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,56 +0,0 @@
-// See MultiProcessor Specification Version 1.[14]
-
-struct mp {             // floating pointer
-  uchar signature[4];           // "_MP_"
-  void *physaddr;               // phys addr of MP config table
-  uchar length;                 // 1
-  uchar specrev;                // [14]
-  uchar checksum;               // all bytes must add up to 0
-  uchar type;                   // MP system config type
-  uchar imcrp;
-  uchar reserved[3];
-};
-
-struct mpconf {         // configuration table header
-  uchar signature[4];           // "PCMP"
-  ushort length;                // total table length
-  uchar version;                // [14]
-  uchar checksum;               // all bytes must add up to 0
-  uchar product[20];            // product id
-  uint *oemtable;               // OEM table pointer
-  ushort oemlength;             // OEM table length
-  ushort entry;                 // entry count
-  uint *lapicaddr;              // address of local APIC
-  ushort xlength;               // extended table length
-  uchar xchecksum;              // extended table checksum
-  uchar reserved;
-};
-
-struct mpproc {         // processor table entry
-  uchar type;                   // entry type (0)
-  uchar apicid;                 // local APIC id
-  uchar version;                // local APIC verison
-  uchar flags;                  // CPU flags
-    #define MPBOOT 0x02           // This proc is the bootstrap processor.
-  uchar signature[4];           // CPU signature
-  uint feature;                 // feature flags from CPUID instruction
-  uchar reserved[8];
-};
-
-struct mpioapic {       // I/O APIC table entry
-  uchar type;                   // entry type (2)
-  uchar apicno;                 // I/O APIC id
-  uchar version;                // I/O APIC version
-  uchar flags;                  // I/O APIC flags
-  uint *addr;                  // I/O APIC address
-};
-
-// Table entry types
-#define MPPROC    0x00  // One per processor
-#define MPBUS     0x01  // One per bus
-#define MPIOAPIC  0x02  // One per I/O APIC
-#define MPIOINTR  0x03  // One per bus interrupt source
-#define MPLINTR   0x04  // One per system interrupt source
-
-//PAGEBREAK!
-// Blank page.
Binary files xv6-public/mp.o and xv6-public-mynew/mp.o differ
diff -ruN xv6-public/Notes xv6-public-mynew/Notes
--- xv6-public/Notes	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/Notes	1970-01-01 05:30:00.000000000 +0530
@@ -1,123 +0,0 @@
-bochs 2.2.6:
-./configure --enable-smp --enable-disasm --enable-debugger --enable-all-optimizations --enable-4meg-pages --enable-global-pages --enable-pae --disable-reset-on-triple-fault
-bochs CVS after 2.2.6:
-./configure --enable-smp --enable-disasm --enable-debugger --enable-all-optimizations --enable-4meg-pages --enable-global-pages --enable-pae 
-
-bootmain.c doesn't work right if the ELF sections aren't
-sector-aligned. so you can't use ld -N. and the sections may also need
-to be non-zero length, only really matters for tiny "kernels".
-
-kernel loaded at 1 megabyte. stack same place that bootasm.S left it.
-
-kinit() should find real mem size
-  and rescue useable memory below 1 meg
-
-no paging, no use of page table hardware, just segments
-
-no user area: no magic kernel stack mapping
-  so no copying of kernel stack during fork
-  though there is a kernel stack page for each process
-
-no kernel malloc(), just kalloc() for user core
-
-user pointers aren't valid in the kernel
-
-are interrupts turned on in the kernel? yes.
-
-pass curproc explicitly, or implicit from cpu #?
-  e.g. argument to newproc()?
-  hmm, you need a global curproc[cpu] for trap() &c
-
-no stack expansion
-
-test running out of memory, process slots
-
-we can't really use a separate stack segment, since stack addresses
-need to work correctly as ordinary pointers. the same may be true of
-data vs text. how can we have a gap between data and stack, so that
-both can grow, without committing 4GB of physical memory? does this
-mean we need paging?
-
-perhaps have fixed-size stack, put it in the data segment?
-
-oops, if kernel stack is in contiguous user phys mem, then moving
-users' memory (e.g. to expand it) will wreck any pointers into the
-kernel stack.
-
-do we need to set fs and gs? so user processes can't abuse them?
-
-setupsegs() may modify current segment table, is that legal?
-
-trap() ought to lgdt on return, since currently only done in swtch()
-
-protect hardware interrupt vectors from user INT instructions?
-
-test out-of-fd cases for creating pipe.
-test pipe reader closes then write
-test two readers, two writers.
-test children being inherited by grandparent &c
-
-some sleep()s should be interruptible by kill()
-
-locks
-  init_lock
-    sequences CPU startup
-  proc_table_lock
-    also protects next_pid
-  per-fd lock *just* protects count read-modify-write
-    also maybe freeness?
-  memory allocator
-  printf
-
-in general, the table locks protect both free-ness and
-  public variables of table elements
-  in many cases you can use table elements w/o a lock
-  e.g. if you are the process, or you are using an fd
-
-lock order
-  per-pipe lock
-  proc_table_lock fd_table_lock kalloc_lock
-  console_lock
-
-do you have to be holding the mutex in order to call wakeup()? yes
-
-device interrupts don't clear FL_IF
-  so a recursive timer interrupt is possible
-
-what does inode->busy mean?
-  might be held across disk reads
-  no-one is allowed to do anything to the inode
-  protected by inode_table_lock
-inode->count counts in-memory pointers to the struct
-  prevents inode[] element from being re-used
-  protected by inode_table_lock
-
-blocks and inodes have ad-hoc sleep-locks
-  provide a single mechanism?
-
-kalloc() can return 0; do callers handle this right?
-
-test: one process unlinks a file while another links to it
-test: one process opens a file while another deletes it
-test: deadlock d/.. vs ../d, two processes.
-test: dup() shared fd->off
-test: does echo foo > x truncate x?
-
-sh: ioredirection incorrect now we have pipes
-sh: chain of pipes won't work, also ugly that parent closes fdarray entries too
-sh: dynamic memory allocation?
-sh: should sh support ; () &
-sh: stop stdin on ctrl-d (for cat > y)
-
-really should have bdwrite() for file content
-  and make some inode updates async
-  so soft updates make sense
-
-disk scheduling
-echo foo > bar should truncate bar
-  so O_CREATE should not truncate
-  but O_TRUNC should
-
-make it work on a real machine
-release before acquire at end of sleep?
-check 2nd disk (i.e. if not in .bochsrc)
diff -ruN xv6-public/param.h xv6-public-mynew/param.h
--- xv6-public/param.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/param.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,14 +0,0 @@
-#define NPROC        64  // maximum number of processes
-#define KSTACKSIZE 4096  // size of per-process kernel stack
-#define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
-#define NFILE       100  // open files per system
-#define NINODE       50  // maximum number of active i-nodes
-#define NDEV         10  // maximum major device number
-#define ROOTDEV       1  // device number of file system root disk
-#define MAXARG       32  // max exec arguments
-#define MAXOPBLOCKS  10  // max # of blocks any FS op writes
-#define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
-#define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       1000  // size of file system in blocks
-
diff -ruN xv6-public/picirq.c xv6-public-mynew/picirq.c
--- xv6-public/picirq.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/picirq.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,19 +0,0 @@
-#include "types.h"
-#include "x86.h"
-#include "traps.h"
-
-// I/O Addresses of the two programmable interrupt controllers
-#define IO_PIC1         0x20    // Master (IRQs 0-7)
-#define IO_PIC2         0xA0    // Slave (IRQs 8-15)
-
-// Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
-void
-picinit(void)
-{
-  // mask all interrupts
-  outb(IO_PIC1+1, 0xFF);
-  outb(IO_PIC2+1, 0xFF);
-}
-
-//PAGEBREAK!
-// Blank page.
diff -ruN xv6-public/picirq.d xv6-public-mynew/picirq.d
--- xv6-public/picirq.d	2022-09-05 09:51:07.930999215 +0530
+++ xv6-public-mynew/picirq.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-picirq.o: picirq.c /usr/include/stdc-predef.h types.h x86.h traps.h
Binary files xv6-public/picirq.o and xv6-public-mynew/picirq.o differ
diff -ruN xv6-public/pipe.c xv6-public-mynew/pipe.c
--- xv6-public/pipe.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/pipe.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,121 +0,0 @@
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "mmu.h"
-#include "proc.h"
-#include "fs.h"
-#include "spinlock.h"
-#include "sleeplock.h"
-#include "file.h"
-
-#define PIPESIZE 512
-
-struct pipe {
-  struct spinlock lock;
-  char data[PIPESIZE];
-  uint nread;     // number of bytes read
-  uint nwrite;    // number of bytes written
-  int readopen;   // read fd is still open
-  int writeopen;  // write fd is still open
-};
-
-int
-pipealloc(struct file **f0, struct file **f1)
-{
-  struct pipe *p;
-
-  p = 0;
-  *f0 = *f1 = 0;
-  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
-    goto bad;
-  if((p = (struct pipe*)kalloc()) == 0)
-    goto bad;
-  p->readopen = 1;
-  p->writeopen = 1;
-  p->nwrite = 0;
-  p->nread = 0;
-  initlock(&p->lock, "pipe");
-  (*f0)->type = FD_PIPE;
-  (*f0)->readable = 1;
-  (*f0)->writable = 0;
-  (*f0)->pipe = p;
-  (*f1)->type = FD_PIPE;
-  (*f1)->readable = 0;
-  (*f1)->writable = 1;
-  (*f1)->pipe = p;
-  return 0;
-
-//PAGEBREAK: 20
- bad:
-  if(p)
-    kfree((char*)p);
-  if(*f0)
-    fileclose(*f0);
-  if(*f1)
-    fileclose(*f1);
-  return -1;
-}
-
-void
-pipeclose(struct pipe *p, int writable)
-{
-  acquire(&p->lock);
-  if(writable){
-    p->writeopen = 0;
-    wakeup(&p->nread);
-  } else {
-    p->readopen = 0;
-    wakeup(&p->nwrite);
-  }
-  if(p->readopen == 0 && p->writeopen == 0){
-    release(&p->lock);
-    kfree((char*)p);
-  } else
-    release(&p->lock);
-}
-
-//PAGEBREAK: 40
-int
-pipewrite(struct pipe *p, char *addr, int n)
-{
-  int i;
-
-  acquire(&p->lock);
-  for(i = 0; i < n; i++){
-    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-      if(p->readopen == 0 || myproc()->killed){
-        release(&p->lock);
-        return -1;
-      }
-      wakeup(&p->nread);
-      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-    }
-    p->data[p->nwrite++ % PIPESIZE] = addr[i];
-  }
-  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
-  release(&p->lock);
-  return n;
-}
-
-int
-piperead(struct pipe *p, char *addr, int n)
-{
-  int i;
-
-  acquire(&p->lock);
-  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-    if(myproc()->killed){
-      release(&p->lock);
-      return -1;
-    }
-    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
-  }
-  for(i = 0; i < n; i++){  //DOC: piperead-copy
-    if(p->nread == p->nwrite)
-      break;
-    addr[i] = p->data[p->nread++ % PIPESIZE];
-  }
-  wakeup(&p->nwrite);  //DOC: piperead-wakeup
-  release(&p->lock);
-  return i;
-}
diff -ruN xv6-public/pipe.d xv6-public-mynew/pipe.d
--- xv6-public/pipe.d	2022-09-05 09:51:08.002999217 +0530
+++ xv6-public-mynew/pipe.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-pipe.o: pipe.c /usr/include/stdc-predef.h types.h defs.h param.h mmu.h \
- proc.h fs.h spinlock.h sleeplock.h file.h
Binary files xv6-public/pipe.o and xv6-public-mynew/pipe.o differ
diff -ruN xv6-public/printf.c xv6-public-mynew/printf.c
--- xv6-public/printf.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/printf.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,85 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-static void
-putc(int fd, char c)
-{
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
-  static char digits[] = "0123456789ABCDEF";
-  char buf[16];
-  int i, neg;
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
-  } else {
-    x = xx;
-  }
-
-  i = 0;
-  do{
-    buf[i++] = digits[x % base];
-  }while((x /= base) != 0);
-  if(neg)
-    buf[i++] = '-';
-
-  while(--i >= 0)
-    putc(fd, buf[i]);
-}
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
-  char *s;
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
-      } else {
-        putc(fd, c);
-      }
-    } else if(state == '%'){
-      if(c == 'd'){
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
-        s = (char*)*ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
diff -ruN xv6-public/printf.d xv6-public-mynew/printf.d
--- xv6-public/printf.d	2022-09-05 09:51:04.754999124 +0530
+++ xv6-public-mynew/printf.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/printf.o and xv6-public-mynew/printf.o differ
diff -ruN xv6-public/printpcs xv6-public-mynew/printpcs
--- xv6-public/printpcs	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/printpcs	1970-01-01 05:30:00.000000000 +0530
@@ -1,14 +0,0 @@
-#!/bin/sh
-
-# Decode the symbols from a panic EIP list
-
-# Find a working addr2line
-for p in i386-jos-elf-addr2line addr2line; do
-    if which $p 2>&1 >/dev/null && \
-       $p -h 2>&1 | grep -q '\belf32-i386\b'; then
-        break
-    fi
-done
-
-# Enable as much pretty-printing as this addr2line can do
-$p $($p -h | grep ' -[aipsf] ' | awk '{print $1}') -e kernel "$@"
diff -ruN xv6-public/proc.c xv6-public-mynew/proc.c
--- xv6-public/proc.c	2022-09-05 12:35:55.975213002 +0530
+++ xv6-public-mynew/proc.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,664 +0,0 @@
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "x86.h"
-#include "proc.h"
-#include "spinlock.h"
-
-struct {
-  struct spinlock lock;
-  struct proc proc[NPROC];
-} ptable;
-
-static struct proc *initproc;
-
-int nextpid = 1;
-extern void forkret(void);
-extern void trapret(void);
-
-static void wakeup1(void *chan);
-
-void
-pinit(void)
-{
-  initlock(&ptable.lock, "ptable");
-}
-
-// Must be called with interrupts disabled
-int
-cpuid() {
-  return mycpu()-cpus;
-}
-
-// Must be called with interrupts disabled to avoid the caller being
-// rescheduled between reading lapicid and running through the loop.
-struct cpu*
-mycpu(void)
-{
-  int apicid, i;
-  
-  if(readeflags()&FL_IF)
-    panic("mycpu called with interrupts enabled\n");
-  
-  apicid = lapicid();
-  // APIC IDs are not guaranteed to be contiguous. Maybe we should have
-  // a reverse map, or reserve a register to store &cpus[i].
-  for (i = 0; i < ncpu; ++i) {
-    if (cpus[i].apicid == apicid)
-      return &cpus[i];
-  }
-  panic("unknown apicid\n");
-}
-
-// Disable interrupts so that we are not rescheduled
-// while reading proc from the cpu structure
-struct proc*
-myproc(void) {
-  struct cpu *c;
-  struct proc *p;
-  pushcli();
-  c = mycpu();
-  p = c->proc;
-  popcli();
-  return p;
-}
-
-//PAGEBREAK: 32
-// Look in the process table for an UNUSED proc.
-// If found, change state to EMBRYO and initialize
-// state required to run in the kernel.
-// Otherwise return 0.
-static struct proc*
-allocproc(void)
-{
-  struct proc *p;
-  char *sp;
-
-  acquire(&ptable.lock);
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
-      goto found;
-
-  release(&ptable.lock);
-  return 0;
-
-found:
-  p->state = EMBRYO;
-  p->pid = nextpid++;
-
-  release(&ptable.lock);
-
-  // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
-    p->state = UNUSED;
-    return 0;
-  }
-  sp = p->kstack + KSTACKSIZE;
-
-  // Leave room for trap frame.
-  sp -= sizeof *p->tf;
-  p->tf = (struct trapframe*)sp;
-
-  // Set up new context to start executing at forkret,
-  // which returns to trapret.
-  sp -= 4;
-  *(uint*)sp = (uint)trapret;
-
-  sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
-  memset(p->context, 0, sizeof *p->context);
-  p->context->eip = (uint)forkret;
-
-  return p;
-}
-
-//PAGEBREAK: 32
-// Set up first user process.
-void
-userinit(void)
-{
-  struct proc *p;
-  extern char _binary_initcode_start[], _binary_initcode_size[];
-
-  p = allocproc();
-  
-  initproc = p;
-  if((p->pgdir = setupkvm()) == 0)
-    panic("userinit: out of memory?");
-  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-  p->sz = PGSIZE;
-  memset(p->tf, 0, sizeof(*p->tf));
-  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-  p->tf->es = p->tf->ds;
-  p->tf->ss = p->tf->ds;
-  p->tf->eflags = FL_IF;
-  p->tf->esp = PGSIZE;
-  p->tf->eip = 0;  // beginning of initcode.S
-
-  safestrcpy(p->name, "initcode", sizeof(p->name));
-  p->cwd = namei("/");
-
-  // this assignment to p->state lets other cores
-  // run this process. the acquire forces the above
-  // writes to be visible, and the lock is also needed
-  // because the assignment might not be atomic.
-  acquire(&ptable.lock);
-
-  p->state = RUNNABLE;
-
-  release(&ptable.lock);
-}
-
-// Grow current process's memory by n bytes.
-// Return 0 on success, -1 on failure.
-int
-growproc(int n)
-{
-  uint sz;
-  struct proc *curproc = myproc();
-
-  sz = curproc->sz;
-  if(n > 0){
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-      return -1;
-  } else if(n < 0){
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-      return -1;
-  }
-  curproc->sz = sz;
-  switchuvm(curproc);
-  return 0;
-}
-
-// Create a new process copying p as the parent.
-// Sets up stack to return as if from system call.
-// Caller must set state of returned proc to RUNNABLE.
-int
-fork(void)
-{
-  int i, pid;
-  struct proc *np;
-  struct proc *curproc = myproc();
-
-  // Allocate process.
-  if((np = allocproc()) == 0){
-    return -1;
-  }
-
-  // Copy process state from proc.
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-    kfree(np->kstack);
-    np->kstack = 0;
-    np->state = UNUSED;
-    return -1;
-  }
-  np->sz = curproc->sz;
-  np->parent = curproc;
-  *np->tf = *curproc->tf;
-
-  // Clear %eax so that fork returns 0 in the child.
-  np->tf->eax = 0;
-
-  for(i = 0; i < NOFILE; i++)
-    if(curproc->ofile[i])
-      np->ofile[i] = filedup(curproc->ofile[i]);
-  np->cwd = idup(curproc->cwd);
-
-  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-
-  pid = np->pid;
-
-  acquire(&ptable.lock);
-
-  np->state = RUNNABLE;
-
-  release(&ptable.lock);
-
-  return pid;
-}
-
-// Exit the current process.  Does not return.
-// An exited process remains in the zombie state
-// until its parent calls wait() to find out it exited.
-void
-exit(void)
-{
-  struct proc *curproc = myproc();
-  struct proc *p;
-  int fd;
-
-  if(curproc == initproc)
-    panic("init exiting");
-
-  // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
-      fileclose(curproc->ofile[fd]);
-      curproc->ofile[fd] = 0;
-    }
-  }
-
-  begin_op();
-  iput(curproc->cwd);
-  end_op();
-  curproc->cwd = 0;
-
-  acquire(&ptable.lock);
-
-  // Parent might be sleeping in wait().
-  wakeup1(curproc->parent);
-
-  // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
-      p->parent = initproc;
-      if(p->state == ZOMBIE)
-        wakeup1(initproc);
-    }
-  }
-
-  // Jump into the scheduler, never to return.
-  curproc->state = ZOMBIE;
-  sched();
-  panic("zombie exit");
-}
-
-// Wait for a child process to exit and return its pid.
-// Return -1 if this process has no children.
-int
-wait(void)
-{
-  struct proc *p;
-  int havekids, pid;
-  struct proc *curproc = myproc();
-  
-  acquire(&ptable.lock);
-  for(;;){
-    // Scan through table looking for exited children.
-    havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
-        continue;
-      havekids = 1;
-      if(p->state == ZOMBIE){
-        // Found one.
-        pid = p->pid;
-        kfree(p->kstack);
-        p->kstack = 0;
-        freevm(p->pgdir);
-        p->pid = 0;
-        p->parent = 0;
-        p->name[0] = 0;
-        p->killed = 0;
-        p->state = UNUSED;
-        release(&ptable.lock);
-        return pid;
-      }
-    }
-
-    // No point waiting if we don't have any children.
-    if(!havekids || curproc->killed){
-      release(&ptable.lock);
-      return -1;
-    }
-
-    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-  }
-}
-
-//PAGEBREAK: 42
-// Per-CPU process scheduler.
-// Each CPU calls scheduler() after setting itself up.
-// Scheduler never returns.  It loops, doing:
-//  - choose a process to run
-//  - swtch to start running that process
-//  - eventually that process transfers control
-//      via swtch back to the scheduler.
-void
-scheduler(void)
-{
-  struct proc *p;
-  struct cpu *c = mycpu();
-  c->proc = 0;
-  
-  for(;;){
-    // Enable interrupts on this processor.
-    sti();
-
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
-    }
-    release(&ptable.lock);
-
-  }
-}
-
-// Enter scheduler.  Must hold only ptable.lock
-// and have changed proc->state. Saves and restores
-// intena because intena is a property of this
-// kernel thread, not this CPU. It should
-// be proc->intena and proc->ncli, but that would
-// break in the few places where a lock is held but
-// there's no process.
-void
-sched(void)
-{
-  int intena;
-  struct proc *p = myproc();
-
-  if(!holding(&ptable.lock))
-    panic("sched ptable.lock");
-  if(mycpu()->ncli != 1)
-    panic("sched locks");
-  if(p->state == RUNNING)
-    panic("sched running");
-  if(readeflags()&FL_IF)
-    panic("sched interruptible");
-  intena = mycpu()->intena;
-  swtch(&p->context, mycpu()->scheduler);
-  mycpu()->intena = intena;
-}
-
-// Give up the CPU for one scheduling round.
-void
-yield(void)
-{
-  acquire(&ptable.lock);  //DOC: yieldlock
-  myproc()->state = RUNNABLE;
-  sched();
-  release(&ptable.lock);
-}
-
-// A fork child's very first scheduling by scheduler()
-// will swtch here.  "Return" to user space.
-void
-forkret(void)
-{
-  static int first = 1;
-  // Still holding ptable.lock from scheduler.
-  release(&ptable.lock);
-
-  if (first) {
-    // Some initialization functions must be run in the context
-    // of a regular process (e.g., they call sleep), and thus cannot
-    // be run from main().
-    first = 0;
-    iinit(ROOTDEV);
-    initlog(ROOTDEV);
-  }
-
-  // Return to "caller", actually trapret (see allocproc).
-}
-
-// Atomically release lock and sleep on chan.
-// Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
-{
-  struct proc *p = myproc();
-  
-  if(p == 0)
-    panic("sleep");
-
-  if(lk == 0)
-    panic("sleep without lk");
-
-  // Must acquire ptable.lock in order to
-  // change p->state and then call sched.
-  // Once we hold ptable.lock, we can be
-  // guaranteed that we won't miss any wakeup
-  // (wakeup runs with ptable.lock locked),
-  // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-    acquire(&ptable.lock);  //DOC: sleeplock1
-    release(lk);
-  }
-  // Go to sleep.
-  p->chan = chan;
-  p->state = SLEEPING;
-
-  sched();
-
-  // Tidy up.
-  p->chan = 0;
-
-  // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
-    release(&ptable.lock);
-    acquire(lk);
-  }
-}
-
-//PAGEBREAK!
-// Wake up all processes sleeping on chan.
-// The ptable lock must be held.
-static void
-wakeup1(void *chan)
-{
-  struct proc *p;
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
-      p->state = RUNNABLE;
-}
-
-// Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
-{
-  acquire(&ptable.lock);
-  wakeup1(chan);
-  release(&ptable.lock);
-}
-
-// Kill the process with the given pid.
-// Process won't exit until it returns
-// to user space (see trap in trap.c).
-int
-kill(int pid)
-{
-  struct proc *p;
-
-  acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->pid == pid){
-      p->killed = 1;
-      // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
-        p->state = RUNNABLE;
-      release(&ptable.lock);
-      return 0;
-    }
-  }
-  release(&ptable.lock);
-  return -1;
-}
-
-//PAGEBREAK: 36
-// Print a process listing to console.  For debugging.
-// Runs when user types ^P on console.
-// No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
-{
-  static char *states[] = {
-  [UNUSED]    "unused",
-  [EMBRYO]    "embryo",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
-  int i;
-  struct proc *p;
-  char *state;
-  uint pc[10];
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
-      continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-      state = states[p->state];
-    else
-      state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
-        cprintf(" %p", pc[i]);
-    }
-    cprintf("\n");
-  }
-}
-
-// thread
-int thread_create(void (*fcn)(void *), void * arg, void * stack) {
-	if ((uint) stack == 0) {
-		return -1;
-	}
-	int i, pid;
-	struct proc *np;
-	struct proc *curproc = myproc();
-	// Allocate process.
-	if ((np = allocproc()) == 0)		return -1; 
-  // Threads share the same page table as the parent 
-	np->pgdir = curproc->pgdir;
-	np->parent = curproc;
-  np->sz = curproc->sz;
-	*np->tf = *curproc->tf;
-
-	// Mark this proc as a thread
-	np->isThread = 1;
-
-	// Clear %eax so that fork returns 0 in the child.
-	np->tf->eax = 0;
-
-	// set function
-	np->tf->eip = (int) fcn;
-
-  // We set stack pointer to the end of the stack
-	np->tf->esp = (int) stack + 4096; 
-	np->tf->esp -= 4;
-  // Store arguments of the fcn in the stack
-	*((int*) (np->tf->esp)) = (int) arg;
-	np->tf->esp -= 4;
-  // Fake PC Value
-	*((int*) (np->tf->esp)) = 0xffffffff;
-
-  // filedup gives the file descriptors and increments them by one inorder to keep track of the number of instances of a file used by proccesses; If no instance is being used then the OS may close the file
-	for (i = 0; i < NOFILE; i++)
-		if (curproc->ofile[i])
-			np->ofile[i] = filedup(curproc->ofile[i]);
-	np->cwd = idup(curproc->cwd);
-  // Process name and Process ID
-	safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-	pid = np->pid;
-  // Thread is ready to run
-	acquire(&ptable.lock);
-	np->state = RUNNABLE;
-	release(&ptable.lock);
-	return pid;
-}
-
-int thread_join(void) {
-	struct proc *p;
-	int havekids, pid;
-	struct proc *curproc = myproc();
-
-	acquire(&ptable.lock);
-	for (;;) {
-		// Scan through table looking for exited children.
-		havekids = 0;
-		for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
-			if (p->isThread == 0 || p->parent != curproc)
-				continue;
-			havekids = 1;
-			if (p->state == ZOMBIE) {
-				// Found one.
-				pid = p->pid;
-				//kfree(p->kstack);
-				p->kstack = 0;
-				//freevm(p->pgdir);
-				p->pid = 0;
-				p->parent = 0;
-				p->name[0] = 0;
-				p->killed = 0;
-				p->state = UNUSED;
-				release(&ptable.lock);
-				return pid;
-			}
-		}
-
-		// No point waiting if we don't have any children.
-		if (!havekids || curproc->killed) {
-			release(&ptable.lock);
-			return -1;
-		}
-
-		// Wait for children to exit.  (See wakeup1 call in proc_exit.)
-		sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-	}
-}
-
-int thread_exit() {
-	struct proc *curproc = myproc();
-	struct proc *p;
-	int fd;
-
-	if (curproc == initproc)
-		panic("init exiting");
-
-	// Close all open files.
-	for (fd = 0; fd < NOFILE; fd++) {
-		if (curproc->ofile[fd]) {
-			fileclose(curproc->ofile[fd]);
-			curproc->ofile[fd] = 0;
-		}
-	}
-
-	begin_op();
-	iput(curproc->cwd);
-	end_op();
-	curproc->cwd = 0;
-
-	acquire(&ptable.lock);
-
-	// Parent might be sleeping in wait().
-	wakeup1(curproc->parent);
-
-	// Pass abandoned children to init.
-	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
-		if (p->parent == curproc) {
-			p->parent = initproc;
-			if (p->state == ZOMBIE)
-				wakeup1(initproc);
-		}
-	}
-
-	// Jump into the scheduler, never to return.
-	curproc->state = ZOMBIE;
-	sched();
-	panic("zombie exit");
-}
diff -ruN xv6-public/proc.d xv6-public-mynew/proc.d
--- xv6-public/proc.d	2022-09-05 14:45:50.859289309 +0530
+++ xv6-public-mynew/proc.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h x86.h proc.h spinlock.h
diff -ruN xv6-public/proc.h xv6-public-mynew/proc.h
--- xv6-public/proc.h	2022-08-30 10:52:22.246804971 +0530
+++ xv6-public-mynew/proc.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,60 +0,0 @@
-// Per-CPU state
-struct cpu {
-  uchar apicid;                // Local APIC ID
-  struct context *scheduler;   // swtch() here to enter scheduler
-  struct taskstate ts;         // Used by x86 to find stack for interrupt
-  struct segdesc gdt[NSEGS];   // x86 global descriptor table
-  volatile uint started;       // Has the CPU started?
-  int ncli;                    // Depth of pushcli nesting.
-  int intena;                  // Were interrupts enabled before pushcli?
-  struct proc *proc;           // The process running on this cpu or null
-};
-
-extern struct cpu cpus[NCPU];
-extern int ncpu;
-
-//PAGEBREAK: 17
-// Saved registers for kernel context switches.
-// Don't need to save all the segment registers (%cs, etc),
-// because they are constant across kernel contexts.
-// Don't need to save %eax, %ecx, %edx, because the
-// x86 convention is that the caller has saved them.
-// Contexts are stored at the bottom of the stack they
-// describe; the stack pointer is the address of the context.
-// The layout of the context matches the layout of the stack in swtch.S
-// at the "Switch stacks" comment. Switch doesn't save eip explicitly,
-// but it is on the stack and allocproc() manipulates it.
-struct context {
-  uint edi;
-  uint esi;
-  uint ebx;
-  uint ebp;
-  uint eip;
-};
-
-enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
-
-// Per-process state
-struct proc {
-  uint sz;                     // Size of process memory (bytes)
-  pde_t* pgdir;                // Page table
-  char *kstack;                // Bottom of kernel stack for this process
-  enum procstate state;        // Process state
-  int pid;                     // Process ID
-  struct proc *parent;         // Parent process
-  struct trapframe *tf;        // Trap frame for current syscall
-  struct context *context;     // swtch() here to run process
-  void *chan;                  // If non-zero, sleeping on chan
-  int killed;                  // If non-zero, have been killed
-  struct file *ofile[NOFILE];  // Open files
-  struct inode *cwd;           // Current directory
-  char name[16];   // Process name (debugging)
-  int isThread;         // Whether Process is a thread    
-};
-
-// Process memory is laid out contiguously, low addresses first:
-//   text
-//   original data and bss
-//   fixed-size stack
-//   expandable heap
- int isThread;   
\ No newline at end of file
Binary files xv6-public/proc.o and xv6-public-mynew/proc.o differ
diff -ruN xv6-public/pr.pl xv6-public-mynew/pr.pl
--- xv6-public/pr.pl	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/pr.pl	1970-01-01 05:30:00.000000000 +0530
@@ -1,36 +0,0 @@
-#!/usr/bin/perl
-
-use POSIX qw(strftime);
-
-if($ARGV[0] eq "-h"){
-	shift @ARGV;
-	$h = $ARGV[0];
-	shift @ARGV;
-}else{
-	$h = $ARGV[0];
-}
-
-$page = 0;
-$now = strftime "%b %e %H:%M %Y", localtime;
-
-@lines = <>;
-for($i=0; $i<@lines; $i+=50){
-	print "\n\n";
-	++$page;
-	print "$now  $h  Page $page\n";
-	print "\n\n";
-	for($j=$i; $j<@lines && $j<$i +50; $j++){
-		$lines[$j] =~ s!//DOC.*!!;
-		print $lines[$j];
-	}
-	for(; $j<$i+50; $j++){
-		print "\n";
-	}
-	$sheet = "";
-	if($lines[$i] =~ /^([0-9][0-9])[0-9][0-9] /){
-		$sheet = "Sheet $1";
-	}
-	print "\n\n";
-	print "$sheet\n";
-	print "\n\n";
-}
diff -ruN xv6-public/README xv6-public-mynew/README
--- xv6-public/README	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/README	1970-01-01 05:30:00.000000000 +0530
@@ -1,51 +0,0 @@
-NOTE: we have stopped maintaining the x86 version of xv6, and switched
-our efforts to the RISC-V version
-(https://github.com/mit-pdos/xv6-riscv.git)
-
-xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
-Version 6 (v6).  xv6 loosely follows the structure and style of v6,
-but is implemented for a modern x86-based multiprocessor using ANSI C.
-
-ACKNOWLEDGMENTS
-
-xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
-to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
-2000)). See also https://pdos.csail.mit.edu/6.828/, which
-provides pointers to on-line resources for v6.
-
-xv6 borrows code from the following sources:
-    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
-    Plan 9 (entryother.S, mp.h, mp.c, lapic.c)
-    FreeBSD (ioapic.c)
-    NetBSD (console.c)
-
-The following people have made contributions: Russ Cox (context switching,
-locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
-Clements.
-
-We are also grateful for the bug reports and patches contributed by Silas
-Boyd-Wickizer, Anton Burtsev, Cody Cutler, Mike CAT, Tej Chajed, eyalz800,
-Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel Filardo, Peter
-Froehlich, Yakir Goaron,Shivam Handa, Bryan Henry, Jim Huang, Alexander
-Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller, Eddie Kohler, Austin
-Liew, Imbar Marinescu, Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi
-Merimovich, Mark Morrissey, mtasm, Joel Nider, Greg Price, Ayan Shafqat,
-Eldar Sehayek, Yongming Shen, Cam Tenny, tyfkda, Rafael Ubal, Warren
-Toomey, Stephen Tu, Pablo Ventura, Xi Wang, Keiichi Watanabe, Nicolas
-Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng, and Zou Chang Wei.
-
-The code in the files that constitute xv6 is
-Copyright 2006-2018 Frans Kaashoek, Robert Morris, and Russ Cox.
-
-ERROR REPORTS
-
-We don't process error reports (see note on top of this file).
-
-BUILDING AND RUNNING XV6
-
-To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run
-"make". On non-x86 or non-ELF machines (like OS X, even on x86), you
-will need to install a cross-compiler gcc suite capable of producing
-x86 ELF binaries (see https://pdos.csail.mit.edu/6.828/).
-Then run "make TOOLPREFIX=i386-jos-elf-". Now install the QEMU PC
-simulator and run "make qemu".
\ No newline at end of file
Binary files xv6-public/_rm and xv6-public-mynew/_rm differ
diff -ruN xv6-public/rm.asm xv6-public-mynew/rm.asm
--- xv6-public/rm.asm	2022-09-05 09:51:05.602999148 +0530
+++ xv6-public-mynew/rm.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1237 +0,0 @@
-
-_rm:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	57                   	push   %edi
-  12:	bf 01 00 00 00       	mov    $0x1,%edi
-  17:	56                   	push   %esi
-  18:	53                   	push   %ebx
-  19:	51                   	push   %ecx
-  1a:	83 ec 08             	sub    $0x8,%esp
-  1d:	8b 59 04             	mov    0x4(%ecx),%ebx
-  20:	8b 31                	mov    (%ecx),%esi
-  22:	83 c3 04             	add    $0x4,%ebx
-  int i;
-
-  if(argc < 2){
-  25:	83 fe 01             	cmp    $0x1,%esi
-  28:	7e 3a                	jle    64 <main+0x64>
-  2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    printf(2, "Usage: rm files...\n");
-    exit();
-  }
-
-  for(i = 1; i < argc; i++){
-    if(unlink(argv[i]) < 0){
-  30:	83 ec 0c             	sub    $0xc,%esp
-  33:	ff 33                	pushl  (%ebx)
-  35:	e8 f9 02 00 00       	call   333 <unlink>
-  3a:	83 c4 10             	add    $0x10,%esp
-  3d:	85 c0                	test   %eax,%eax
-  3f:	78 0f                	js     50 <main+0x50>
-  for(i = 1; i < argc; i++){
-  41:	83 c7 01             	add    $0x1,%edi
-  44:	83 c3 04             	add    $0x4,%ebx
-  47:	39 fe                	cmp    %edi,%esi
-  49:	75 e5                	jne    30 <main+0x30>
-      printf(2, "rm: %s failed to delete\n", argv[i]);
-      break;
-    }
-  }
-
-  exit();
-  4b:	e8 93 02 00 00       	call   2e3 <exit>
-      printf(2, "rm: %s failed to delete\n", argv[i]);
-  50:	50                   	push   %eax
-  51:	ff 33                	pushl  (%ebx)
-  53:	68 dc 07 00 00       	push   $0x7dc
-  58:	6a 02                	push   $0x2
-  5a:	e8 01 04 00 00       	call   460 <printf>
-      break;
-  5f:	83 c4 10             	add    $0x10,%esp
-  62:	eb e7                	jmp    4b <main+0x4b>
-    printf(2, "Usage: rm files...\n");
-  64:	52                   	push   %edx
-  65:	52                   	push   %edx
-  66:	68 c8 07 00 00       	push   $0x7c8
-  6b:	6a 02                	push   $0x2
-  6d:	e8 ee 03 00 00       	call   460 <printf>
-    exit();
-  72:	e8 6c 02 00 00       	call   2e3 <exit>
-  77:	66 90                	xchg   %ax,%ax
-  79:	66 90                	xchg   %ax,%ax
-  7b:	66 90                	xchg   %ax,%ax
-  7d:	66 90                	xchg   %ax,%ax
-  7f:	90                   	nop
-
-00000080 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  80:	f3 0f 1e fb          	endbr32 
-  84:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  85:	31 c0                	xor    %eax,%eax
-{
-  87:	89 e5                	mov    %esp,%ebp
-  89:	53                   	push   %ebx
-  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
-  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  97:	83 c0 01             	add    $0x1,%eax
-  9a:	84 d2                	test   %dl,%dl
-  9c:	75 f2                	jne    90 <strcpy+0x10>
-    ;
-  return os;
-}
-  9e:	89 c8                	mov    %ecx,%eax
-  a0:	5b                   	pop    %ebx
-  a1:	5d                   	pop    %ebp
-  a2:	c3                   	ret    
-  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000000b0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  b0:	f3 0f 1e fb          	endbr32 
-  b4:	55                   	push   %ebp
-  b5:	89 e5                	mov    %esp,%ebp
-  b7:	53                   	push   %ebx
-  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
-  be:	0f b6 01             	movzbl (%ecx),%eax
-  c1:	0f b6 1a             	movzbl (%edx),%ebx
-  c4:	84 c0                	test   %al,%al
-  c6:	75 19                	jne    e1 <strcmp+0x31>
-  c8:	eb 26                	jmp    f0 <strcmp+0x40>
-  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
-  d4:	83 c1 01             	add    $0x1,%ecx
-  d7:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
-  da:	0f b6 1a             	movzbl (%edx),%ebx
-  dd:	84 c0                	test   %al,%al
-  df:	74 0f                	je     f0 <strcmp+0x40>
-  e1:	38 d8                	cmp    %bl,%al
-  e3:	74 eb                	je     d0 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
-  e5:	29 d8                	sub    %ebx,%eax
-}
-  e7:	5b                   	pop    %ebx
-  e8:	5d                   	pop    %ebp
-  e9:	c3                   	ret    
-  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  f0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
-  f2:	29 d8                	sub    %ebx,%eax
-}
-  f4:	5b                   	pop    %ebx
-  f5:	5d                   	pop    %ebp
-  f6:	c3                   	ret    
-  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  fe:	66 90                	xchg   %ax,%ax
-
-00000100 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 100:	f3 0f 1e fb          	endbr32 
- 104:	55                   	push   %ebp
- 105:	89 e5                	mov    %esp,%ebp
- 107:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 10a:	80 3a 00             	cmpb   $0x0,(%edx)
- 10d:	74 21                	je     130 <strlen+0x30>
- 10f:	31 c0                	xor    %eax,%eax
- 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 118:	83 c0 01             	add    $0x1,%eax
- 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 11f:	89 c1                	mov    %eax,%ecx
- 121:	75 f5                	jne    118 <strlen+0x18>
-    ;
-  return n;
-}
- 123:	89 c8                	mov    %ecx,%eax
- 125:	5d                   	pop    %ebp
- 126:	c3                   	ret    
- 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 12e:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 130:	31 c9                	xor    %ecx,%ecx
-}
- 132:	5d                   	pop    %ebp
- 133:	89 c8                	mov    %ecx,%eax
- 135:	c3                   	ret    
- 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 13d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000140 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 140:	f3 0f 1e fb          	endbr32 
- 144:	55                   	push   %ebp
- 145:	89 e5                	mov    %esp,%ebp
- 147:	57                   	push   %edi
- 148:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 151:	89 d7                	mov    %edx,%edi
- 153:	fc                   	cld    
- 154:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 156:	89 d0                	mov    %edx,%eax
- 158:	5f                   	pop    %edi
- 159:	5d                   	pop    %ebp
- 15a:	c3                   	ret    
- 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 15f:	90                   	nop
-
-00000160 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 160:	f3 0f 1e fb          	endbr32 
- 164:	55                   	push   %ebp
- 165:	89 e5                	mov    %esp,%ebp
- 167:	8b 45 08             	mov    0x8(%ebp),%eax
- 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 16e:	0f b6 10             	movzbl (%eax),%edx
- 171:	84 d2                	test   %dl,%dl
- 173:	75 16                	jne    18b <strchr+0x2b>
- 175:	eb 21                	jmp    198 <strchr+0x38>
- 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 17e:	66 90                	xchg   %ax,%ax
- 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 184:	83 c0 01             	add    $0x1,%eax
- 187:	84 d2                	test   %dl,%dl
- 189:	74 0d                	je     198 <strchr+0x38>
-    if(*s == c)
- 18b:	38 d1                	cmp    %dl,%cl
- 18d:	75 f1                	jne    180 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 18f:	5d                   	pop    %ebp
- 190:	c3                   	ret    
- 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 198:	31 c0                	xor    %eax,%eax
-}
- 19a:	5d                   	pop    %ebp
- 19b:	c3                   	ret    
- 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000001a0 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 1a0:	f3 0f 1e fb          	endbr32 
- 1a4:	55                   	push   %ebp
- 1a5:	89 e5                	mov    %esp,%ebp
- 1a7:	57                   	push   %edi
- 1a8:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1a9:	31 f6                	xor    %esi,%esi
-{
- 1ab:	53                   	push   %ebx
- 1ac:	89 f3                	mov    %esi,%ebx
- 1ae:	83 ec 1c             	sub    $0x1c,%esp
- 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 1b4:	eb 33                	jmp    1e9 <gets+0x49>
- 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1bd:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 1c0:	83 ec 04             	sub    $0x4,%esp
- 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 1c6:	6a 01                	push   $0x1
- 1c8:	50                   	push   %eax
- 1c9:	6a 00                	push   $0x0
- 1cb:	e8 2b 01 00 00       	call   2fb <read>
-    if(cc < 1)
- 1d0:	83 c4 10             	add    $0x10,%esp
- 1d3:	85 c0                	test   %eax,%eax
- 1d5:	7e 1c                	jle    1f3 <gets+0x53>
-      break;
-    buf[i++] = c;
- 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 1db:	83 c7 01             	add    $0x1,%edi
- 1de:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 1e1:	3c 0a                	cmp    $0xa,%al
- 1e3:	74 23                	je     208 <gets+0x68>
- 1e5:	3c 0d                	cmp    $0xd,%al
- 1e7:	74 1f                	je     208 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 1e9:	83 c3 01             	add    $0x1,%ebx
- 1ec:	89 fe                	mov    %edi,%esi
- 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1f1:	7c cd                	jl     1c0 <gets+0x20>
- 1f3:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 1f8:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1fe:	5b                   	pop    %ebx
- 1ff:	5e                   	pop    %esi
- 200:	5f                   	pop    %edi
- 201:	5d                   	pop    %ebp
- 202:	c3                   	ret    
- 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 207:	90                   	nop
- 208:	8b 75 08             	mov    0x8(%ebp),%esi
- 20b:	8b 45 08             	mov    0x8(%ebp),%eax
- 20e:	01 de                	add    %ebx,%esi
- 210:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 212:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 218:	5b                   	pop    %ebx
- 219:	5e                   	pop    %esi
- 21a:	5f                   	pop    %edi
- 21b:	5d                   	pop    %ebp
- 21c:	c3                   	ret    
- 21d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000220 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 220:	f3 0f 1e fb          	endbr32 
- 224:	55                   	push   %ebp
- 225:	89 e5                	mov    %esp,%ebp
- 227:	56                   	push   %esi
- 228:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 229:	83 ec 08             	sub    $0x8,%esp
- 22c:	6a 00                	push   $0x0
- 22e:	ff 75 08             	pushl  0x8(%ebp)
- 231:	e8 ed 00 00 00       	call   323 <open>
-  if(fd < 0)
- 236:	83 c4 10             	add    $0x10,%esp
- 239:	85 c0                	test   %eax,%eax
- 23b:	78 2b                	js     268 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 23d:	83 ec 08             	sub    $0x8,%esp
- 240:	ff 75 0c             	pushl  0xc(%ebp)
- 243:	89 c3                	mov    %eax,%ebx
- 245:	50                   	push   %eax
- 246:	e8 f0 00 00 00       	call   33b <fstat>
-  close(fd);
- 24b:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 24e:	89 c6                	mov    %eax,%esi
-  close(fd);
- 250:	e8 b6 00 00 00       	call   30b <close>
-  return r;
- 255:	83 c4 10             	add    $0x10,%esp
-}
- 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 25b:	89 f0                	mov    %esi,%eax
- 25d:	5b                   	pop    %ebx
- 25e:	5e                   	pop    %esi
- 25f:	5d                   	pop    %ebp
- 260:	c3                   	ret    
- 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 26d:	eb e9                	jmp    258 <stat+0x38>
- 26f:	90                   	nop
-
-00000270 <atoi>:
-
-int
-atoi(const char *s)
-{
- 270:	f3 0f 1e fb          	endbr32 
- 274:	55                   	push   %ebp
- 275:	89 e5                	mov    %esp,%ebp
- 277:	53                   	push   %ebx
- 278:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 27b:	0f be 02             	movsbl (%edx),%eax
- 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 281:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 284:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 289:	77 1a                	ja     2a5 <atoi+0x35>
- 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 28f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 290:	83 c2 01             	add    $0x1,%edx
- 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 29a:	0f be 02             	movsbl (%edx),%eax
- 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 2a0:	80 fb 09             	cmp    $0x9,%bl
- 2a3:	76 eb                	jbe    290 <atoi+0x20>
-  return n;
-}
- 2a5:	89 c8                	mov    %ecx,%eax
- 2a7:	5b                   	pop    %ebx
- 2a8:	5d                   	pop    %ebp
- 2a9:	c3                   	ret    
- 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000002b0 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 2b0:	f3 0f 1e fb          	endbr32 
- 2b4:	55                   	push   %ebp
- 2b5:	89 e5                	mov    %esp,%ebp
- 2b7:	57                   	push   %edi
- 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
- 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
- 2be:	56                   	push   %esi
- 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 2c2:	85 c0                	test   %eax,%eax
- 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
- 2c6:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 2c8:	89 d7                	mov    %edx,%edi
- 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 2d1:	39 f8                	cmp    %edi,%eax
- 2d3:	75 fb                	jne    2d0 <memmove+0x20>
-  return vdst;
-}
- 2d5:	5e                   	pop    %esi
- 2d6:	89 d0                	mov    %edx,%eax
- 2d8:	5f                   	pop    %edi
- 2d9:	5d                   	pop    %ebp
- 2da:	c3                   	ret    
-
-000002db <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2db:	b8 01 00 00 00       	mov    $0x1,%eax
- 2e0:	cd 40                	int    $0x40
- 2e2:	c3                   	ret    
-
-000002e3 <exit>:
-SYSCALL(exit)
- 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
- 2e8:	cd 40                	int    $0x40
- 2ea:	c3                   	ret    
-
-000002eb <wait>:
-SYSCALL(wait)
- 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
- 2f0:	cd 40                	int    $0x40
- 2f2:	c3                   	ret    
-
-000002f3 <pipe>:
-SYSCALL(pipe)
- 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
- 2f8:	cd 40                	int    $0x40
- 2fa:	c3                   	ret    
-
-000002fb <read>:
-SYSCALL(read)
- 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
- 300:	cd 40                	int    $0x40
- 302:	c3                   	ret    
-
-00000303 <write>:
-SYSCALL(write)
- 303:	b8 10 00 00 00       	mov    $0x10,%eax
- 308:	cd 40                	int    $0x40
- 30a:	c3                   	ret    
-
-0000030b <close>:
-SYSCALL(close)
- 30b:	b8 15 00 00 00       	mov    $0x15,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret    
-
-00000313 <kill>:
-SYSCALL(kill)
- 313:	b8 06 00 00 00       	mov    $0x6,%eax
- 318:	cd 40                	int    $0x40
- 31a:	c3                   	ret    
-
-0000031b <exec>:
-SYSCALL(exec)
- 31b:	b8 07 00 00 00       	mov    $0x7,%eax
- 320:	cd 40                	int    $0x40
- 322:	c3                   	ret    
-
-00000323 <open>:
-SYSCALL(open)
- 323:	b8 0f 00 00 00       	mov    $0xf,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret    
-
-0000032b <mknod>:
-SYSCALL(mknod)
- 32b:	b8 11 00 00 00       	mov    $0x11,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret    
-
-00000333 <unlink>:
-SYSCALL(unlink)
- 333:	b8 12 00 00 00       	mov    $0x12,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret    
-
-0000033b <fstat>:
-SYSCALL(fstat)
- 33b:	b8 08 00 00 00       	mov    $0x8,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret    
-
-00000343 <link>:
-SYSCALL(link)
- 343:	b8 13 00 00 00       	mov    $0x13,%eax
- 348:	cd 40                	int    $0x40
- 34a:	c3                   	ret    
-
-0000034b <mkdir>:
-SYSCALL(mkdir)
- 34b:	b8 14 00 00 00       	mov    $0x14,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret    
-
-00000353 <chdir>:
-SYSCALL(chdir)
- 353:	b8 09 00 00 00       	mov    $0x9,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret    
-
-0000035b <dup>:
-SYSCALL(dup)
- 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret    
-
-00000363 <getpid>:
-SYSCALL(getpid)
- 363:	b8 0b 00 00 00       	mov    $0xb,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret    
-
-0000036b <sbrk>:
-SYSCALL(sbrk)
- 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret    
-
-00000373 <sleep>:
-SYSCALL(sleep)
- 373:	b8 0d 00 00 00       	mov    $0xd,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret    
-
-0000037b <uptime>:
-SYSCALL(uptime)
- 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret    
-
-00000383 <draw>:
-SYSCALL(draw)
- 383:	b8 16 00 00 00       	mov    $0x16,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret    
-
-0000038b <thread_create>:
-SYSCALL(thread_create)
- 38b:	b8 18 00 00 00       	mov    $0x18,%eax
- 390:	cd 40                	int    $0x40
- 392:	c3                   	ret    
-
-00000393 <thread_join>:
-SYSCALL(thread_join)
- 393:	b8 19 00 00 00       	mov    $0x19,%eax
- 398:	cd 40                	int    $0x40
- 39a:	c3                   	ret    
-
-0000039b <thread_exit>:
-SYSCALL(thread_exit)
- 39b:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 3a0:	cd 40                	int    $0x40
- 3a2:	c3                   	ret    
- 3a3:	66 90                	xchg   %ax,%ax
- 3a5:	66 90                	xchg   %ax,%ax
- 3a7:	66 90                	xchg   %ax,%ax
- 3a9:	66 90                	xchg   %ax,%ax
- 3ab:	66 90                	xchg   %ax,%ax
- 3ad:	66 90                	xchg   %ax,%ax
- 3af:	90                   	nop
-
-000003b0 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3b0:	55                   	push   %ebp
- 3b1:	89 e5                	mov    %esp,%ebp
- 3b3:	57                   	push   %edi
- 3b4:	56                   	push   %esi
- 3b5:	53                   	push   %ebx
- 3b6:	83 ec 3c             	sub    $0x3c,%esp
- 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 3bc:	89 d1                	mov    %edx,%ecx
-{
- 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 3c1:	85 d2                	test   %edx,%edx
- 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
- 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3cd:	74 79                	je     448 <printint+0x98>
-    neg = 1;
- 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 3d6:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 3d8:	31 db                	xor    %ebx,%ebx
- 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3dd:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 3e0:	89 c8                	mov    %ecx,%eax
- 3e2:	31 d2                	xor    %edx,%edx
- 3e4:	89 cf                	mov    %ecx,%edi
- 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3e9:	0f b6 92 fc 07 00 00 	movzbl 0x7fc(%edx),%edx
- 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3f3:	89 d8                	mov    %ebx,%eax
- 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 401:	76 dd                	jbe    3e0 <printint+0x30>
-  if(neg)
- 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 406:	85 c9                	test   %ecx,%ecx
- 408:	74 0c                	je     416 <printint+0x66>
-    buf[i++] = '-';
- 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 40f:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 41d:	eb 07                	jmp    426 <printint+0x76>
- 41f:	90                   	nop
- 420:	0f b6 13             	movzbl (%ebx),%edx
- 423:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 426:	83 ec 04             	sub    $0x4,%esp
- 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 42c:	6a 01                	push   $0x1
- 42e:	56                   	push   %esi
- 42f:	57                   	push   %edi
- 430:	e8 ce fe ff ff       	call   303 <write>
-  while(--i >= 0)
- 435:	83 c4 10             	add    $0x10,%esp
- 438:	39 de                	cmp    %ebx,%esi
- 43a:	75 e4                	jne    420 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 43f:	5b                   	pop    %ebx
- 440:	5e                   	pop    %esi
- 441:	5f                   	pop    %edi
- 442:	5d                   	pop    %ebp
- 443:	c3                   	ret    
- 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 44f:	eb 87                	jmp    3d8 <printint+0x28>
- 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 45f:	90                   	nop
-
-00000460 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 460:	f3 0f 1e fb          	endbr32 
- 464:	55                   	push   %ebp
- 465:	89 e5                	mov    %esp,%ebp
- 467:	57                   	push   %edi
- 468:	56                   	push   %esi
- 469:	53                   	push   %ebx
- 46a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 46d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 470:	0f b6 1e             	movzbl (%esi),%ebx
- 473:	84 db                	test   %bl,%bl
- 475:	0f 84 b4 00 00 00    	je     52f <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 47b:	8d 45 10             	lea    0x10(%ebp),%eax
- 47e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 481:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 484:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 486:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 489:	eb 33                	jmp    4be <printf+0x5e>
- 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 48f:	90                   	nop
- 490:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 493:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 498:	83 f8 25             	cmp    $0x25,%eax
- 49b:	74 17                	je     4b4 <printf+0x54>
-  write(fd, &c, 1);
- 49d:	83 ec 04             	sub    $0x4,%esp
- 4a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 4a3:	6a 01                	push   $0x1
- 4a5:	57                   	push   %edi
- 4a6:	ff 75 08             	pushl  0x8(%ebp)
- 4a9:	e8 55 fe ff ff       	call   303 <write>
- 4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 4b1:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 4b4:	0f b6 1e             	movzbl (%esi),%ebx
- 4b7:	83 c6 01             	add    $0x1,%esi
- 4ba:	84 db                	test   %bl,%bl
- 4bc:	74 71                	je     52f <printf+0xcf>
-    c = fmt[i] & 0xff;
- 4be:	0f be cb             	movsbl %bl,%ecx
- 4c1:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 4c4:	85 d2                	test   %edx,%edx
- 4c6:	74 c8                	je     490 <printf+0x30>
-      }
-    } else if(state == '%'){
- 4c8:	83 fa 25             	cmp    $0x25,%edx
- 4cb:	75 e7                	jne    4b4 <printf+0x54>
-      if(c == 'd'){
- 4cd:	83 f8 64             	cmp    $0x64,%eax
- 4d0:	0f 84 9a 00 00 00    	je     570 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 4d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4dc:	83 f9 70             	cmp    $0x70,%ecx
- 4df:	74 5f                	je     540 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 4e1:	83 f8 73             	cmp    $0x73,%eax
- 4e4:	0f 84 d6 00 00 00    	je     5c0 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 4ea:	83 f8 63             	cmp    $0x63,%eax
- 4ed:	0f 84 8d 00 00 00    	je     580 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 4f3:	83 f8 25             	cmp    $0x25,%eax
- 4f6:	0f 84 b4 00 00 00    	je     5b0 <printf+0x150>
-  write(fd, &c, 1);
- 4fc:	83 ec 04             	sub    $0x4,%esp
- 4ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 503:	6a 01                	push   $0x1
- 505:	57                   	push   %edi
- 506:	ff 75 08             	pushl  0x8(%ebp)
- 509:	e8 f5 fd ff ff       	call   303 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 50e:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 511:	83 c4 0c             	add    $0xc,%esp
- 514:	6a 01                	push   $0x1
- 516:	83 c6 01             	add    $0x1,%esi
- 519:	57                   	push   %edi
- 51a:	ff 75 08             	pushl  0x8(%ebp)
- 51d:	e8 e1 fd ff ff       	call   303 <write>
-  for(i = 0; fmt[i]; i++){
- 522:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 526:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 529:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 52b:	84 db                	test   %bl,%bl
- 52d:	75 8f                	jne    4be <printf+0x5e>
-    }
-  }
-}
- 52f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 532:	5b                   	pop    %ebx
- 533:	5e                   	pop    %esi
- 534:	5f                   	pop    %edi
- 535:	5d                   	pop    %ebp
- 536:	c3                   	ret    
- 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 53e:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 540:	83 ec 0c             	sub    $0xc,%esp
- 543:	b9 10 00 00 00       	mov    $0x10,%ecx
- 548:	6a 00                	push   $0x0
- 54a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 54d:	8b 45 08             	mov    0x8(%ebp),%eax
- 550:	8b 13                	mov    (%ebx),%edx
- 552:	e8 59 fe ff ff       	call   3b0 <printint>
-        ap++;
- 557:	89 d8                	mov    %ebx,%eax
- 559:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 55c:	31 d2                	xor    %edx,%edx
-        ap++;
- 55e:	83 c0 04             	add    $0x4,%eax
- 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 564:	e9 4b ff ff ff       	jmp    4b4 <printf+0x54>
- 569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 570:	83 ec 0c             	sub    $0xc,%esp
- 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 578:	6a 01                	push   $0x1
- 57a:	eb ce                	jmp    54a <printf+0xea>
- 57c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 580:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 583:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 586:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 588:	6a 01                	push   $0x1
-        ap++;
- 58a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 58d:	57                   	push   %edi
- 58e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 591:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 594:	e8 6a fd ff ff       	call   303 <write>
-        ap++;
- 599:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 59c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 59f:	31 d2                	xor    %edx,%edx
- 5a1:	e9 0e ff ff ff       	jmp    4b4 <printf+0x54>
- 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5ad:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 5b3:	83 ec 04             	sub    $0x4,%esp
- 5b6:	e9 59 ff ff ff       	jmp    514 <printf+0xb4>
- 5bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5bf:	90                   	nop
-        s = (char*)*ap;
- 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5c3:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 5c5:	83 c0 04             	add    $0x4,%eax
- 5c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 5cb:	85 db                	test   %ebx,%ebx
- 5cd:	74 17                	je     5e6 <printf+0x186>
-        while(*s != 0){
- 5cf:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 5d2:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 5d4:	84 c0                	test   %al,%al
- 5d6:	0f 84 d8 fe ff ff    	je     4b4 <printf+0x54>
- 5dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5df:	89 de                	mov    %ebx,%esi
- 5e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5e4:	eb 1a                	jmp    600 <printf+0x1a0>
-          s = "(null)";
- 5e6:	bb f5 07 00 00       	mov    $0x7f5,%ebx
-        while(*s != 0){
- 5eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
- 5f3:	89 de                	mov    %ebx,%esi
- 5f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5ff:	90                   	nop
-  write(fd, &c, 1);
- 600:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 603:	83 c6 01             	add    $0x1,%esi
- 606:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 609:	6a 01                	push   $0x1
- 60b:	57                   	push   %edi
- 60c:	53                   	push   %ebx
- 60d:	e8 f1 fc ff ff       	call   303 <write>
-        while(*s != 0){
- 612:	0f b6 06             	movzbl (%esi),%eax
- 615:	83 c4 10             	add    $0x10,%esp
- 618:	84 c0                	test   %al,%al
- 61a:	75 e4                	jne    600 <printf+0x1a0>
- 61c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 61f:	31 d2                	xor    %edx,%edx
- 621:	e9 8e fe ff ff       	jmp    4b4 <printf+0x54>
- 626:	66 90                	xchg   %ax,%ax
- 628:	66 90                	xchg   %ax,%ax
- 62a:	66 90                	xchg   %ax,%ax
- 62c:	66 90                	xchg   %ax,%ax
- 62e:	66 90                	xchg   %ax,%ax
-
-00000630 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 630:	f3 0f 1e fb          	endbr32 
- 634:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 635:	a1 b4 0a 00 00       	mov    0xab4,%eax
-{
- 63a:	89 e5                	mov    %esp,%ebp
- 63c:	57                   	push   %edi
- 63d:	56                   	push   %esi
- 63e:	53                   	push   %ebx
- 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 642:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 644:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 647:	39 c8                	cmp    %ecx,%eax
- 649:	73 15                	jae    660 <free+0x30>
- 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 64f:	90                   	nop
- 650:	39 d1                	cmp    %edx,%ecx
- 652:	72 14                	jb     668 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 654:	39 d0                	cmp    %edx,%eax
- 656:	73 10                	jae    668 <free+0x38>
-{
- 658:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 65a:	8b 10                	mov    (%eax),%edx
- 65c:	39 c8                	cmp    %ecx,%eax
- 65e:	72 f0                	jb     650 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 660:	39 d0                	cmp    %edx,%eax
- 662:	72 f4                	jb     658 <free+0x28>
- 664:	39 d1                	cmp    %edx,%ecx
- 666:	73 f0                	jae    658 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 66e:	39 fa                	cmp    %edi,%edx
- 670:	74 1e                	je     690 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 672:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 675:	8b 50 04             	mov    0x4(%eax),%edx
- 678:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 67b:	39 f1                	cmp    %esi,%ecx
- 67d:	74 28                	je     6a7 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 67f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 681:	5b                   	pop    %ebx
-  freep = p;
- 682:	a3 b4 0a 00 00       	mov    %eax,0xab4
-}
- 687:	5e                   	pop    %esi
- 688:	5f                   	pop    %edi
- 689:	5d                   	pop    %ebp
- 68a:	c3                   	ret    
- 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 68f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 690:	03 72 04             	add    0x4(%edx),%esi
- 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 696:	8b 10                	mov    (%eax),%edx
- 698:	8b 12                	mov    (%edx),%edx
- 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 69d:	8b 50 04             	mov    0x4(%eax),%edx
- 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6a3:	39 f1                	cmp    %esi,%ecx
- 6a5:	75 d8                	jne    67f <free+0x4f>
-    p->s.size += bp->s.size;
- 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 6aa:	a3 b4 0a 00 00       	mov    %eax,0xab4
-    p->s.size += bp->s.size;
- 6af:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 6b5:	89 10                	mov    %edx,(%eax)
-}
- 6b7:	5b                   	pop    %ebx
- 6b8:	5e                   	pop    %esi
- 6b9:	5f                   	pop    %edi
- 6ba:	5d                   	pop    %ebp
- 6bb:	c3                   	ret    
- 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000006c0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 6c0:	f3 0f 1e fb          	endbr32 
- 6c4:	55                   	push   %ebp
- 6c5:	89 e5                	mov    %esp,%ebp
- 6c7:	57                   	push   %edi
- 6c8:	56                   	push   %esi
- 6c9:	53                   	push   %ebx
- 6ca:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6cd:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 6d0:	8b 3d b4 0a 00 00    	mov    0xab4,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6d6:	8d 70 07             	lea    0x7(%eax),%esi
- 6d9:	c1 ee 03             	shr    $0x3,%esi
- 6dc:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 6df:	85 ff                	test   %edi,%edi
- 6e1:	0f 84 a9 00 00 00    	je     790 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6e7:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 6e9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6ec:	39 f1                	cmp    %esi,%ecx
- 6ee:	73 6d                	jae    75d <malloc+0x9d>
- 6f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6fb:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 6fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 705:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 708:	eb 17                	jmp    721 <malloc+0x61>
- 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 710:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 712:	8b 4a 04             	mov    0x4(%edx),%ecx
- 715:	39 f1                	cmp    %esi,%ecx
- 717:	73 4f                	jae    768 <malloc+0xa8>
- 719:	8b 3d b4 0a 00 00    	mov    0xab4,%edi
- 71f:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 721:	39 c7                	cmp    %eax,%edi
- 723:	75 eb                	jne    710 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 725:	83 ec 0c             	sub    $0xc,%esp
- 728:	ff 75 e4             	pushl  -0x1c(%ebp)
- 72b:	e8 3b fc ff ff       	call   36b <sbrk>
-  if(p == (char*)-1)
- 730:	83 c4 10             	add    $0x10,%esp
- 733:	83 f8 ff             	cmp    $0xffffffff,%eax
- 736:	74 1b                	je     753 <malloc+0x93>
-  hp->s.size = nu;
- 738:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 73b:	83 ec 0c             	sub    $0xc,%esp
- 73e:	83 c0 08             	add    $0x8,%eax
- 741:	50                   	push   %eax
- 742:	e8 e9 fe ff ff       	call   630 <free>
-  return freep;
- 747:	a1 b4 0a 00 00       	mov    0xab4,%eax
-      if((p = morecore(nunits)) == 0)
- 74c:	83 c4 10             	add    $0x10,%esp
- 74f:	85 c0                	test   %eax,%eax
- 751:	75 bd                	jne    710 <malloc+0x50>
-        return 0;
-  }
-}
- 753:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 756:	31 c0                	xor    %eax,%eax
-}
- 758:	5b                   	pop    %ebx
- 759:	5e                   	pop    %esi
- 75a:	5f                   	pop    %edi
- 75b:	5d                   	pop    %ebp
- 75c:	c3                   	ret    
-    if(p->s.size >= nunits){
- 75d:	89 c2                	mov    %eax,%edx
- 75f:	89 f8                	mov    %edi,%eax
- 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- 768:	39 ce                	cmp    %ecx,%esi
- 76a:	74 54                	je     7c0 <malloc+0x100>
-        p->s.size -= nunits;
- 76c:	29 f1                	sub    %esi,%ecx
- 76e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- 771:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- 774:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- 777:	a3 b4 0a 00 00       	mov    %eax,0xab4
-}
- 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 77f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- 782:	5b                   	pop    %ebx
- 783:	5e                   	pop    %esi
- 784:	5f                   	pop    %edi
- 785:	5d                   	pop    %ebp
- 786:	c3                   	ret    
- 787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 78e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- 790:	c7 05 b4 0a 00 00 b8 	movl   $0xab8,0xab4
- 797:	0a 00 00 
-    base.s.size = 0;
- 79a:	bf b8 0a 00 00       	mov    $0xab8,%edi
-    base.s.ptr = freep = prevp = &base;
- 79f:	c7 05 b8 0a 00 00 b8 	movl   $0xab8,0xab8
- 7a6:	0a 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7a9:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- 7ab:	c7 05 bc 0a 00 00 00 	movl   $0x0,0xabc
- 7b2:	00 00 00 
-    if(p->s.size >= nunits){
- 7b5:	e9 36 ff ff ff       	jmp    6f0 <malloc+0x30>
- 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- 7c0:	8b 0a                	mov    (%edx),%ecx
- 7c2:	89 08                	mov    %ecx,(%eax)
- 7c4:	eb b1                	jmp    777 <malloc+0xb7>
diff -ruN xv6-public/rm.c xv6-public-mynew/rm.c
--- xv6-public/rm.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/rm.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,23 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-  int i;
-
-  if(argc < 2){
-    printf(2, "Usage: rm files...\n");
-    exit();
-  }
-
-  for(i = 1; i < argc; i++){
-    if(unlink(argv[i]) < 0){
-      printf(2, "rm: %s failed to delete\n", argv[i]);
-      break;
-    }
-  }
-
-  exit();
-}
diff -ruN xv6-public/rm.d xv6-public-mynew/rm.d
--- xv6-public/rm.d	2022-09-05 09:51:05.578999147 +0530
+++ xv6-public-mynew/rm.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/rm.o and xv6-public-mynew/rm.o differ
diff -ruN xv6-public/rm.sym xv6-public-mynew/rm.sym
--- xv6-public/rm.sym	2022-09-05 09:51:05.606999148 +0530
+++ xv6-public-mynew/rm.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,61 +0,0 @@
-00000000 .text
-000007c8 .rodata
-00000810 .eh_frame
-00000ab4 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 rm.c
-00000000 ulib.c
-00000000 printf.c
-000003b0 printint
-000007fc digits.1097
-00000000 umalloc.c
-00000ab4 freep
-00000ab8 base
-00000080 strcpy
-00000460 printf
-0000039b thread_exit
-000002b0 memmove
-0000032b mknod
-000001a0 gets
-00000363 getpid
-000006c0 malloc
-00000373 sleep
-000002f3 pipe
-00000303 write
-0000033b fstat
-00000313 kill
-00000353 chdir
-0000031b exec
-000002eb wait
-000002fb read
-00000333 unlink
-000002db fork
-0000036b sbrk
-0000037b uptime
-00000ab4 __bss_start
-00000140 memset
-00000000 main
-000000b0 strcmp
-0000035b dup
-00000220 stat
-00000ab4 _edata
-00000ac0 _end
-00000343 link
-000002e3 exit
-00000270 atoi
-00000383 draw
-00000100 strlen
-00000323 open
-00000160 strchr
-0000038b thread_create
-0000034b mkdir
-0000030b close
-00000393 thread_join
-00000630 free
diff -ruN xv6-public/runoff xv6-public-mynew/runoff
--- xv6-public/runoff	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/runoff	1970-01-01 05:30:00.000000000 +0530
@@ -1,246 +0,0 @@
-#!/bin/sh
-
-echo This script takes a minute to run.  Be patient. 1>&2
-
-LC_CTYPE=C export LC_CTYPE
-
-# pad stdin to multiple of 120 lines
-pad()
-{
-	awk '{print} END{for(; NR%120!=0; NR++) print ""}'
-}
-
-# create formatted (numbered) files
-mkdir -p fmt
-rm -f fmt/*
-cp README fmt
-echo > fmt/blank
-files=`grep -v '^#' runoff.list | awk '{print $1}'`
-n=99
-for i in $files
-do
-	./runoff1 -n $n $i >fmt/$i
-	nn=`tail -1 fmt/$i | sed 's/ .*//; s/^0*//'`
-	if [ "x$nn" != x ]; then
-		n=$nn
-	fi
-done
-
-# create table of contents
-cat toc.hdr >fmt/toc
-pr -e8 -t runoff.list | awk '
-/^[a-z0-9]/ {
-	s=$0
-	f="fmt/"$1
-	getline<f
-	close(f)
-	n=$1
-	printf("%02d %s\n", n/100, s);
-	printf("TOC: %04d %s\n", n, s) >"fmt/tocdata"
-	next
-}
-{
-	print
-}' | pr -3 -t >>fmt/toc
-cat toc.ftr >>fmt/toc
-
-# check for bad alignments
-perl -e '
-	$leftwarn = 0;
-	while(<>){
-		chomp;
-		s!#.*!!;
-		s!\s+! !g;
-		s! +$!!;
-		next if /^$/;
-		
-		if(/TOC: (\d+) (.*)/){
-			$toc{$2} = $1;
-			next;
-		}
-		
-		if(/sheet1: (left|right)$/){
-			print STDERR "assuming that sheet 1 is a $1 page.  double-check!\n";
-			$left = $1 eq "left" ? "13579" : "02468";
-			$right = $1 eq "left" ? "02468" : "13579";
-			next;
-		}
-		
-		if(/even: (.*)/){
-			$file = $1;
-			if(!defined($toc{$file})){
-				print STDERR "Have no toc for $file\n";
-				next;
-			}
-			if($toc{$file} =~ /^\d\d[^0]/){
-				print STDERR "$file does not start on a fresh page.\n";
-			}
-			next;
-		}
-		
-		if(/odd: (.*)/){
-			$file = $1;
-			if(!defined($toc{$file})){
-				print STDERR "Have no toc for $file\n";
-				next;
-			}
-			if($toc{$file} !~ /^\d\d5/){
-				print STDERR "$file does not start on a second half page.\n";
-			}
-			next;
-		}
-		
-		if(/(left|right): (.*)/){
-			$what = $1;
-			$file = $2;
-			if(!defined($toc{$file})){
-				print STDERR "Have no toc for $file\n";
-				next;
-			}
-			if($what eq "left" && !($toc{$file} =~ /^\d[$left][05]/)){
-				print STDERR "$file does not start on a left page [$toc{$file}]\n";
-			}
-			# why does this not work if I inline $x in the if?
-			$x = ($toc{$file} =~ /^\d[$right][05]/);
-			if($what eq "right" && !$x){
-				print STDERR "$file does not start on a right page [$toc{$file}] [$x]\n";
-			}
-			next;
-		}
-		
-		print STDERR "Unknown spec: $_\n";
-	}
-' fmt/tocdata runoff.spec
-
-# make definition list
-cd fmt
-perl -e '
-	while(<>) {
-		chomp;
-
-		s!//.*!!;
-		s!/\*([^*]|[*][^/])*\*/!!g;
-		s!\s! !g;
-		s! +$!!;
-
-		# look for declarations like char* x;
-		if (/^[0-9]+ typedef .* u(int|short|long|char);/) {
-			next;
-		}
-		if (/^[0-9]+ extern/) {
-			next;
-		}
-		if (/^[0-9]+ struct [a-zA-Z0-9_]+;/) {
-			next;
-		}
-		if (/^([0-9]+) #define +([A-za-z0-9_]+) +?\(.*/) {
-			print "$1 $2\n"
-		}
-		elsif (/^([0-9]+) #define +([A-Za-z0-9_]+) +([^ ]+)/) {
-			print "$1 $2 $3\n";
-		}
-		elsif (/^([0-9]+) #define +([A-Za-z0-9_]+)/) {
-			print "$1 $2\n";
-		}
-		
-		if(/^^([0-9]+) \.globl ([a-zA-Z0-9_]+)/){
-			$isglobl{$2} = 1;
-		}
-		if(/^^([0-9]+) ([a-zA-Z0-9_]+):$/ && $isglobl{$2}){
-			print "$1 $2\n";
-		}
-		
-		if (/\(/) {
-			next;
-		}
-
-		if (/^([0-9]+) (((static|struct|extern|union|enum) +)*([A-Za-z0-9_]+))( .*)? +([A-Za-z_][A-Za-z0-9_]*)(,|;|=| =)/) {
-			print "$1 $7\n";
-		}
-		
-		elsif(/^([0-9]+) (enum|struct|union) +([A-Za-z0-9_]+) +{/){ 
-			print "$1 $3\n";
-		}
-		# TODO: enum members
-	}
-' $files >defs
-
-(for i in $files
-do
-	case "$i" in
-	*.S)
-		cat $i | sed 's;#.*;;; s;//.*;;;'
-		;;
-	*)
-		cat $i | sed 's;//.*;;; s;"([^"\\]|\\.)*";;;'
-	esac
-done
-) >alltext
-
-perl -n -e 'print if s/^([0-9]+ [a-zA-Z0-9_]+)\(.*$/\1/;' alltext |
-	egrep -v ' (STUB|usage|main|if|for)$' >>defs
-#perl -n -e 'print if s/^([0-9]+) STUB\(([a-zA-Z0-9_]+)\)$/\1 \2/;' alltext \
-#	>>defs
-(
->s.defs
-
-# make reference list
-for i in `awk '{print $2}' defs | sort -f | uniq`
-do
-	defs=`egrep '^[0-9]+ '$i'( |$)' defs | awk '{print $1}'`
-	echo $i $defs >>s.defs
-	uses=`egrep -h '([^a-zA-Z_0-9])'$i'($|[^a-zA-Z_0-9])' alltext | awk '{print $1}'`
-	if [ "x$defs" != "x$uses" ]; then
-		echo $i $defs
-		echo $uses |fmt -29 | sed 's/^/    /'
-#	else
-#		echo $i defined but not used >&2
-	fi
-done
-) >refs
-
-# build defs list
-awk '
-{
-	printf("%04d %s\n", $2, $1);
-	for(i=3; i<=NF; i++)
-		printf("%04d    \" \n", $i);
-}
-' s.defs > t.defs
-
-# format the whole thing
-(
-	../pr.pl README
-	../pr.pl -h "table of contents" toc
-	# pr -t -2 t.defs | ../pr.pl -h "definitions" | pad
-	pr -t -l50 -2 refs | ../pr.pl -h "cross-references" | pad
-	# pr.pl -h "definitions" -2 t.defs | pad
-	# pr.pl -h "cross-references" -2 refs | pad
-	../pr.pl blank  # make sheet 1 start on left page
-	../pr.pl blank
-	for i in $files
-	do
-		../pr.pl -h "xv6/$i" $i
-	done
-) | mpage -m50t50b -o -bLetter -T -t -2 -FCourier -L60 >all.ps
-grep Pages: all.ps
-
-# if we have the nice font, use it
-nicefont=LucidaSans-Typewriter83
-if [ ! -f ../$nicefont ]
-then
-	if git cat-file blob font:$nicefont > ../$nicefont~; then
-		mv ../$nicefont~ ../$nicefont
-	fi
-fi
-if [ -f ../$nicefont ]
-then
-	echo nicefont
-	(sed 1q all.ps; cat ../$nicefont; sed "1d; s/Courier/$nicefont/" all.ps) >allf.ps
-else
-	echo ugly font!
-	cp all.ps allf.ps
-fi
-ps2pdf allf.ps ../xv6.pdf
-# cd ..
-# pdftops xv6.pdf xv6.ps
diff -ruN xv6-public/runoff1 xv6-public-mynew/runoff1
--- xv6-public/runoff1	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/runoff1	1970-01-01 05:30:00.000000000 +0530
@@ -1,108 +0,0 @@
-#!/usr/bin/perl
-
-$n = 0;
-$v = 0;
-if($ARGV[0] eq "-v") {
-	$v = 1;
-	shift @ARGV;
-}
-if($ARGV[0] eq "-n") {
-	$n = $ARGV[1];
-	shift @ARGV;
-	shift @ARGV;
-}
-$n = int(($n+49)/50)*50 - 1;
-
-$file = $ARGV[0];
-@lines = <>;
-$linenum = 0;
-foreach (@lines) {
-	$linenum++;
-	chomp;
-	s/\s+$//;
-	if(length() >= 75){
-		print STDERR "$file:$linenum: line too long\n";
-	}
-}
-@outlines = ();
-$nextout = 0;
-
-for($i=0; $i<@lines; ){
-	# Skip leading blank lines.
-	$i++ while $i<@lines && $lines[$i] =~ /^$/;
-	last if $i>=@lines;
-
-	# If the rest of the file fits, use the whole thing.
-	if(@lines <= $i+50 && !grep { /PAGEBREAK/ } @lines){
-		$breakbefore = @lines;
-	}else{
-		# Find a good next page break;
-		# Hope for end of function.
-		# but settle for a blank line (but not first blank line
-		# in function, which comes after variable declarations).
-		$breakbefore = $i;
-		$lastblank = $i;
-		$sawbrace = 0;
-		$breaksize = 15;  # 15 lines to get to function
-		for($j=$i; $j<$i+50 && $j < @lines; $j++){
-			if($lines[$j] =~ /PAGEBREAK!/){
-				$lines[$j] = "";
-				$breakbefore = $j;
-				$breaksize = 100;
-				last;
-			}
-			if($lines[$j] =~ /PAGEBREAK:\s*([0-9]+)/){
-				$breaksize = $1;
-				$breakbefore = $j;
-				$lines[$j] = "";
-			}
-			if($lines[$j] =~ /^};?$/){
-				$breakbefore = $j+1;
-				$breaksize = 15;
-			}
-			if($lines[$j] =~ /^{$/){
-				$sawbrace = 1;
-			}
-			if($lines[$j] =~ /^$/){
-				if($sawbrace){
-					$sawbrace = 0;
-				}else{
-					$lastblank = $j;
-				}
-			}
-		}
-		if($j<@lines && $lines[$j] =~ /^$/){
-			$lastblank = $j;
-		}
-
-		# If we are not putting enough on a page, try a blank line.
-		if($breakbefore - $i < 50 - $breaksize && $lastblank > $breakbefore && $lastblank >= $i+50 - 5){
-			if($v){
-				print STDERR "breakbefore $breakbefore i $i breaksize $breaksize\n";
-			}
-			$breakbefore = $lastblank;
-			$breaksize = 5;  # only 5 lines to get to blank line
-		}
-
-		# If we are not putting enough on a page, force a full page.
-		if($breakbefore - $i < 50 - $breaksize && $breakbefore != @lines){
-			$breakbefore = $i + 50;
-			$breakbefore = @lines if @lines < $breakbefore;
-		}
-
-		if($breakbefore < $i+2){
-			$breakbefore = $i+2;
-		}
-	}
-
-	# Emit the page.
-	$i50 = $i + 50;
-	for(; $i<$breakbefore; $i++){
-		printf "%04d %s\n", ++$n, $lines[$i];
-	}
-
-	# Finish page
-	for($j=$i; $j<$i50; $j++){
-		printf "%04d \n", ++$n;
-	}
-}
diff -ruN xv6-public/runoff.list xv6-public-mynew/runoff.list
--- xv6-public/runoff.list	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/runoff.list	1970-01-01 05:30:00.000000000 +0530
@@ -1,80 +0,0 @@
-# basic headers
-types.h
-param.h
-memlayout.h
-defs.h
-x86.h
-asm.h
-mmu.h
-elf.h
-date.h
-
-# entering xv6
-entry.S
-entryother.S
-main.c
-
-# locks
-spinlock.h
-spinlock.c
-
-# processes
-vm.c
-proc.h
-proc.c
-swtch.S
-kalloc.c
-
-# system calls
-traps.h
-vectors.pl
-trapasm.S
-trap.c
-syscall.h
-syscall.c
-sysproc.c
-
-# file system
-buf.h
-sleeplock.h
-fcntl.h
-stat.h
-fs.h
-file.h
-ide.c
-bio.c
-sleeplock.c
-log.c
-fs.c
-file.c
-sysfile.c
-exec.c
-
-# pipes
-pipe.c
-
-# string operations
-string.c
-
-# low-level hardware
-mp.h
-mp.c
-lapic.c
-ioapic.c
-kbd.h
-kbd.c
-console.c
-uart.c
-
-# user-level
-initcode.S
-usys.S
-init.c
-sh.c
-
-# bootloader
-bootasm.S
-bootmain.c
-
-# link
-kernel.ld
diff -ruN xv6-public/runoff.spec xv6-public-mynew/runoff.spec
--- xv6-public/runoff.spec	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/runoff.spec	1970-01-01 05:30:00.000000000 +0530
@@ -1,102 +0,0 @@
-# Is sheet 01 (after the TOC) a left sheet or a right sheet?
-sheet1: left
-
-# "left" and "right" specify which page of a two-page spread a file
-# must start on.  "left" means that a file must start on the first of
-# the two pages.  "right" means it must start on the second of the two
-# pages.  The file may start in either column.
-#
-# "even" and "odd" specify which column a file must start on.  "even"
-# means it must start in the left of the two columns (00).  "odd" means it
-# must start in the right of the two columns (50).
-#
-# You'd think these would be the other way around.
-
-# types.h either
-# param.h either
-# defs.h either
-# x86.h either
-# asm.h either
-# mmu.h either
-# elf.h either
-# mp.h either
-
-even: entry.S  # mild preference
-even: entryother.S  # mild preference
-even: main.c
-# mp.c don't care at all
-# even: initcode.S
-# odd: init.c
-
-left: spinlock.h
-even: spinlock.h
-
-# This gets struct proc and allocproc on the same spread
-left: proc.h
-even: proc.h
-
-# goal is to have two action-packed 2-page spreads,
-# one with
-#     userinit growproc fork exit wait
-# and another with
-#     scheduler sched yield forkret sleep wakeup1 wakeup
-right: proc.c   # VERY important
-even: proc.c   # VERY important
-
-# A few more action packed spreads
-# page table creation and process loading
-#     walkpgdir mappages setupkvm switch[ku]vm inituvm (loaduvm)
-# process memory management
-#     allocuvm deallocuvm freevm
-left: vm.c
-
-even: kalloc.c  # mild preference
-
-# syscall.h either
-# trapasm.S either
-# traps.h either
-# even: trap.c
-# vectors.pl either
-# syscall.c either
-# sysproc.c either
-
-# buf.h either
-# dev.h either
-# fcntl.h either
-# stat.h either
-# file.h either
-# fs.h either
-# fsvar.h either
-# left: ide.c # mild preference
-even: ide.c
-# odd: bio.c
-
-# log.c fits nicely in a spread
-even: log.c
-left: log.c
-
-# with fs.c starting on 2nd column of a left page, we get these 2-page spreads:
-#	ialloc iupdate iget idup ilock iunlock iput iunlockput
-#	bmap itrunc stati readi writei
-#	namecmp dirlookup dirlink skipelem namex namei
-#	fileinit filealloc filedup fileclose filestat fileread filewrite
-# starting on 2nd column of a right page is not terrible either
-odd: fs.c   # VERY important
-left: fs.c  # mild preference
-# file.c either
-# exec.c either
-# sysfile.c either
-
-# Mild preference, but makes spreads of mp.c, lapic.c, and ioapic.c+picirq.c
-even: mp.c
-left: mp.c
-
-# even: pipe.c  # mild preference
-# string.c either
-# left: kbd.h  # mild preference
-even: kbd.h
-even: console.c
-odd: sh.c
-
-even: bootasm.S   # mild preference
-even: bootmain.c  # mild preference
Binary files xv6-public/_sh and xv6-public-mynew/_sh differ
diff -ruN xv6-public/sh.asm xv6-public-mynew/sh.asm
--- xv6-public/sh.asm	2022-09-05 09:51:05.794999154 +0530
+++ xv6-public-mynew/sh.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,2641 +0,0 @@
-
-_sh:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  return 0;
-}
-
-int
-main(void)
-{
-       0:	f3 0f 1e fb          	endbr32 
-       4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-       8:	83 e4 f0             	and    $0xfffffff0,%esp
-       b:	ff 71 fc             	pushl  -0x4(%ecx)
-       e:	55                   	push   %ebp
-       f:	89 e5                	mov    %esp,%ebp
-      11:	51                   	push   %ecx
-      12:	83 ec 04             	sub    $0x4,%esp
-  static char buf[100];
-  int fd;
-
-  // Ensure that three file descriptors are open.
-  while((fd = open("console", O_RDWR)) >= 0){
-      15:	eb 12                	jmp    29 <main+0x29>
-      17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      1e:	66 90                	xchg   %ax,%ax
-    if(fd >= 3){
-      20:	83 f8 02             	cmp    $0x2,%eax
-      23:	0f 8f b7 00 00 00    	jg     e0 <main+0xe0>
-  while((fd = open("console", O_RDWR)) >= 0){
-      29:	83 ec 08             	sub    $0x8,%esp
-      2c:	6a 02                	push   $0x2
-      2e:	68 19 13 00 00       	push   $0x1319
-      33:	e8 9b 0d 00 00       	call   dd3 <open>
-      38:	83 c4 10             	add    $0x10,%esp
-      3b:	85 c0                	test   %eax,%eax
-      3d:	79 e1                	jns    20 <main+0x20>
-      3f:	eb 32                	jmp    73 <main+0x73>
-      41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    }
-  }
-
-  // Read and run input commands.
-  while(getcmd(buf, sizeof(buf)) >= 0){
-    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      48:	80 3d 62 19 00 00 20 	cmpb   $0x20,0x1962
-      4f:	74 51                	je     a2 <main+0xa2>
-      51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-int
-fork1(void)
-{
-  int pid;
-
-  pid = fork();
-      58:	e8 2e 0d 00 00       	call   d8b <fork>
-  if(pid == -1)
-      5d:	83 f8 ff             	cmp    $0xffffffff,%eax
-      60:	0f 84 9d 00 00 00    	je     103 <main+0x103>
-    if(fork1() == 0)
-      66:	85 c0                	test   %eax,%eax
-      68:	0f 84 80 00 00 00    	je     ee <main+0xee>
-    wait();
-      6e:	e8 28 0d 00 00       	call   d9b <wait>
-  while(getcmd(buf, sizeof(buf)) >= 0){
-      73:	83 ec 08             	sub    $0x8,%esp
-      76:	6a 64                	push   $0x64
-      78:	68 60 19 00 00       	push   $0x1960
-      7d:	e8 8e 00 00 00       	call   110 <getcmd>
-      82:	83 c4 10             	add    $0x10,%esp
-      85:	85 c0                	test   %eax,%eax
-      87:	78 14                	js     9d <main+0x9d>
-    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      89:	80 3d 60 19 00 00 63 	cmpb   $0x63,0x1960
-      90:	75 c6                	jne    58 <main+0x58>
-      92:	80 3d 61 19 00 00 64 	cmpb   $0x64,0x1961
-      99:	75 bd                	jne    58 <main+0x58>
-      9b:	eb ab                	jmp    48 <main+0x48>
-  exit();
-      9d:	e8 f1 0c 00 00       	call   d93 <exit>
-      buf[strlen(buf)-1] = 0;  // chop \n
-      a2:	83 ec 0c             	sub    $0xc,%esp
-      a5:	68 60 19 00 00       	push   $0x1960
-      aa:	e8 01 0b 00 00       	call   bb0 <strlen>
-      if(chdir(buf+3) < 0)
-      af:	c7 04 24 63 19 00 00 	movl   $0x1963,(%esp)
-      buf[strlen(buf)-1] = 0;  // chop \n
-      b6:	c6 80 5f 19 00 00 00 	movb   $0x0,0x195f(%eax)
-      if(chdir(buf+3) < 0)
-      bd:	e8 41 0d 00 00       	call   e03 <chdir>
-      c2:	83 c4 10             	add    $0x10,%esp
-      c5:	85 c0                	test   %eax,%eax
-      c7:	79 aa                	jns    73 <main+0x73>
-        printf(2, "cannot cd %s\n", buf+3);
-      c9:	50                   	push   %eax
-      ca:	68 63 19 00 00       	push   $0x1963
-      cf:	68 21 13 00 00       	push   $0x1321
-      d4:	6a 02                	push   $0x2
-      d6:	e8 35 0e 00 00       	call   f10 <printf>
-      db:	83 c4 10             	add    $0x10,%esp
-      de:	eb 93                	jmp    73 <main+0x73>
-      close(fd);
-      e0:	83 ec 0c             	sub    $0xc,%esp
-      e3:	50                   	push   %eax
-      e4:	e8 d2 0c 00 00       	call   dbb <close>
-      break;
-      e9:	83 c4 10             	add    $0x10,%esp
-      ec:	eb 85                	jmp    73 <main+0x73>
-      runcmd(parsecmd(buf));
-      ee:	83 ec 0c             	sub    $0xc,%esp
-      f1:	68 60 19 00 00       	push   $0x1960
-      f6:	e8 c5 09 00 00       	call   ac0 <parsecmd>
-      fb:	89 04 24             	mov    %eax,(%esp)
-      fe:	e8 7d 00 00 00       	call   180 <runcmd>
-    panic("fork");
-     103:	83 ec 0c             	sub    $0xc,%esp
-     106:	68 a2 12 00 00       	push   $0x12a2
-     10b:	e8 50 00 00 00       	call   160 <panic>
-
-00000110 <getcmd>:
-{
-     110:	f3 0f 1e fb          	endbr32 
-     114:	55                   	push   %ebp
-     115:	89 e5                	mov    %esp,%ebp
-     117:	56                   	push   %esi
-     118:	53                   	push   %ebx
-     119:	8b 75 0c             	mov    0xc(%ebp),%esi
-     11c:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  printf(2, "$ ");
-     11f:	83 ec 08             	sub    $0x8,%esp
-     122:	68 78 12 00 00       	push   $0x1278
-     127:	6a 02                	push   $0x2
-     129:	e8 e2 0d 00 00       	call   f10 <printf>
-  memset(buf, 0, nbuf);
-     12e:	83 c4 0c             	add    $0xc,%esp
-     131:	56                   	push   %esi
-     132:	6a 00                	push   $0x0
-     134:	53                   	push   %ebx
-     135:	e8 b6 0a 00 00       	call   bf0 <memset>
-  gets(buf, nbuf);
-     13a:	58                   	pop    %eax
-     13b:	5a                   	pop    %edx
-     13c:	56                   	push   %esi
-     13d:	53                   	push   %ebx
-     13e:	e8 0d 0b 00 00       	call   c50 <gets>
-  if(buf[0] == 0) // EOF
-     143:	83 c4 10             	add    $0x10,%esp
-     146:	31 c0                	xor    %eax,%eax
-     148:	80 3b 00             	cmpb   $0x0,(%ebx)
-     14b:	0f 94 c0             	sete   %al
-}
-     14e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     151:	5b                   	pop    %ebx
-  if(buf[0] == 0) // EOF
-     152:	f7 d8                	neg    %eax
-}
-     154:	5e                   	pop    %esi
-     155:	5d                   	pop    %ebp
-     156:	c3                   	ret    
-     157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     15e:	66 90                	xchg   %ax,%ax
-
-00000160 <panic>:
-{
-     160:	f3 0f 1e fb          	endbr32 
-     164:	55                   	push   %ebp
-     165:	89 e5                	mov    %esp,%ebp
-     167:	83 ec 0c             	sub    $0xc,%esp
-  printf(2, "%s\n", s);
-     16a:	ff 75 08             	pushl  0x8(%ebp)
-     16d:	68 15 13 00 00       	push   $0x1315
-     172:	6a 02                	push   $0x2
-     174:	e8 97 0d 00 00       	call   f10 <printf>
-  exit();
-     179:	e8 15 0c 00 00       	call   d93 <exit>
-     17e:	66 90                	xchg   %ax,%ax
-
-00000180 <runcmd>:
-{
-     180:	f3 0f 1e fb          	endbr32 
-     184:	55                   	push   %ebp
-     185:	89 e5                	mov    %esp,%ebp
-     187:	53                   	push   %ebx
-     188:	83 ec 14             	sub    $0x14,%esp
-     18b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(cmd == 0)
-     18e:	85 db                	test   %ebx,%ebx
-     190:	74 7e                	je     210 <runcmd+0x90>
-  switch(cmd->type){
-     192:	83 3b 05             	cmpl   $0x5,(%ebx)
-     195:	0f 87 04 01 00 00    	ja     29f <runcmd+0x11f>
-     19b:	8b 03                	mov    (%ebx),%eax
-     19d:	3e ff 24 85 30 13 00 	notrack jmp *0x1330(,%eax,4)
-     1a4:	00 
-    if(pipe(p) < 0)
-     1a5:	83 ec 0c             	sub    $0xc,%esp
-     1a8:	8d 45 f0             	lea    -0x10(%ebp),%eax
-     1ab:	50                   	push   %eax
-     1ac:	e8 f2 0b 00 00       	call   da3 <pipe>
-     1b1:	83 c4 10             	add    $0x10,%esp
-     1b4:	85 c0                	test   %eax,%eax
-     1b6:	0f 88 05 01 00 00    	js     2c1 <runcmd+0x141>
-  pid = fork();
-     1bc:	e8 ca 0b 00 00       	call   d8b <fork>
-  if(pid == -1)
-     1c1:	83 f8 ff             	cmp    $0xffffffff,%eax
-     1c4:	0f 84 60 01 00 00    	je     32a <runcmd+0x1aa>
-    if(fork1() == 0){
-     1ca:	85 c0                	test   %eax,%eax
-     1cc:	0f 84 fc 00 00 00    	je     2ce <runcmd+0x14e>
-  pid = fork();
-     1d2:	e8 b4 0b 00 00       	call   d8b <fork>
-  if(pid == -1)
-     1d7:	83 f8 ff             	cmp    $0xffffffff,%eax
-     1da:	0f 84 4a 01 00 00    	je     32a <runcmd+0x1aa>
-    if(fork1() == 0){
-     1e0:	85 c0                	test   %eax,%eax
-     1e2:	0f 84 14 01 00 00    	je     2fc <runcmd+0x17c>
-    close(p[0]);
-     1e8:	83 ec 0c             	sub    $0xc,%esp
-     1eb:	ff 75 f0             	pushl  -0x10(%ebp)
-     1ee:	e8 c8 0b 00 00       	call   dbb <close>
-    close(p[1]);
-     1f3:	58                   	pop    %eax
-     1f4:	ff 75 f4             	pushl  -0xc(%ebp)
-     1f7:	e8 bf 0b 00 00       	call   dbb <close>
-    wait();
-     1fc:	e8 9a 0b 00 00       	call   d9b <wait>
-    wait();
-     201:	e8 95 0b 00 00       	call   d9b <wait>
-    break;
-     206:	83 c4 10             	add    $0x10,%esp
-     209:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    exit();
-     210:	e8 7e 0b 00 00       	call   d93 <exit>
-  pid = fork();
-     215:	e8 71 0b 00 00       	call   d8b <fork>
-  if(pid == -1)
-     21a:	83 f8 ff             	cmp    $0xffffffff,%eax
-     21d:	0f 84 07 01 00 00    	je     32a <runcmd+0x1aa>
-    if(fork1() == 0)
-     223:	85 c0                	test   %eax,%eax
-     225:	75 e9                	jne    210 <runcmd+0x90>
-     227:	eb 6b                	jmp    294 <runcmd+0x114>
-    if(ecmd->argv[0] == 0)
-     229:	8b 43 04             	mov    0x4(%ebx),%eax
-     22c:	85 c0                	test   %eax,%eax
-     22e:	74 e0                	je     210 <runcmd+0x90>
-    exec(ecmd->argv[0], ecmd->argv);
-     230:	8d 53 04             	lea    0x4(%ebx),%edx
-     233:	51                   	push   %ecx
-     234:	51                   	push   %ecx
-     235:	52                   	push   %edx
-     236:	50                   	push   %eax
-     237:	e8 8f 0b 00 00       	call   dcb <exec>
-    printf(2, "exec %s failed\n", ecmd->argv[0]);
-     23c:	83 c4 0c             	add    $0xc,%esp
-     23f:	ff 73 04             	pushl  0x4(%ebx)
-     242:	68 82 12 00 00       	push   $0x1282
-     247:	6a 02                	push   $0x2
-     249:	e8 c2 0c 00 00       	call   f10 <printf>
-    break;
-     24e:	83 c4 10             	add    $0x10,%esp
-     251:	eb bd                	jmp    210 <runcmd+0x90>
-  pid = fork();
-     253:	e8 33 0b 00 00       	call   d8b <fork>
-  if(pid == -1)
-     258:	83 f8 ff             	cmp    $0xffffffff,%eax
-     25b:	0f 84 c9 00 00 00    	je     32a <runcmd+0x1aa>
-    if(fork1() == 0)
-     261:	85 c0                	test   %eax,%eax
-     263:	74 2f                	je     294 <runcmd+0x114>
-    wait();
-     265:	e8 31 0b 00 00       	call   d9b <wait>
-    runcmd(lcmd->right);
-     26a:	83 ec 0c             	sub    $0xc,%esp
-     26d:	ff 73 08             	pushl  0x8(%ebx)
-     270:	e8 0b ff ff ff       	call   180 <runcmd>
-    close(rcmd->fd);
-     275:	83 ec 0c             	sub    $0xc,%esp
-     278:	ff 73 14             	pushl  0x14(%ebx)
-     27b:	e8 3b 0b 00 00       	call   dbb <close>
-    if(open(rcmd->file, rcmd->mode) < 0){
-     280:	58                   	pop    %eax
-     281:	5a                   	pop    %edx
-     282:	ff 73 10             	pushl  0x10(%ebx)
-     285:	ff 73 08             	pushl  0x8(%ebx)
-     288:	e8 46 0b 00 00       	call   dd3 <open>
-     28d:	83 c4 10             	add    $0x10,%esp
-     290:	85 c0                	test   %eax,%eax
-     292:	78 18                	js     2ac <runcmd+0x12c>
-      runcmd(bcmd->cmd);
-     294:	83 ec 0c             	sub    $0xc,%esp
-     297:	ff 73 04             	pushl  0x4(%ebx)
-     29a:	e8 e1 fe ff ff       	call   180 <runcmd>
-    panic("runcmd");
-     29f:	83 ec 0c             	sub    $0xc,%esp
-     2a2:	68 7b 12 00 00       	push   $0x127b
-     2a7:	e8 b4 fe ff ff       	call   160 <panic>
-      printf(2, "open %s failed\n", rcmd->file);
-     2ac:	51                   	push   %ecx
-     2ad:	ff 73 08             	pushl  0x8(%ebx)
-     2b0:	68 92 12 00 00       	push   $0x1292
-     2b5:	6a 02                	push   $0x2
-     2b7:	e8 54 0c 00 00       	call   f10 <printf>
-      exit();
-     2bc:	e8 d2 0a 00 00       	call   d93 <exit>
-      panic("pipe");
-     2c1:	83 ec 0c             	sub    $0xc,%esp
-     2c4:	68 a7 12 00 00       	push   $0x12a7
-     2c9:	e8 92 fe ff ff       	call   160 <panic>
-      close(1);
-     2ce:	83 ec 0c             	sub    $0xc,%esp
-     2d1:	6a 01                	push   $0x1
-     2d3:	e8 e3 0a 00 00       	call   dbb <close>
-      dup(p[1]);
-     2d8:	58                   	pop    %eax
-     2d9:	ff 75 f4             	pushl  -0xc(%ebp)
-     2dc:	e8 2a 0b 00 00       	call   e0b <dup>
-      close(p[0]);
-     2e1:	58                   	pop    %eax
-     2e2:	ff 75 f0             	pushl  -0x10(%ebp)
-     2e5:	e8 d1 0a 00 00       	call   dbb <close>
-      close(p[1]);
-     2ea:	58                   	pop    %eax
-     2eb:	ff 75 f4             	pushl  -0xc(%ebp)
-     2ee:	e8 c8 0a 00 00       	call   dbb <close>
-      runcmd(pcmd->left);
-     2f3:	5a                   	pop    %edx
-     2f4:	ff 73 04             	pushl  0x4(%ebx)
-     2f7:	e8 84 fe ff ff       	call   180 <runcmd>
-      close(0);
-     2fc:	83 ec 0c             	sub    $0xc,%esp
-     2ff:	6a 00                	push   $0x0
-     301:	e8 b5 0a 00 00       	call   dbb <close>
-      dup(p[0]);
-     306:	5a                   	pop    %edx
-     307:	ff 75 f0             	pushl  -0x10(%ebp)
-     30a:	e8 fc 0a 00 00       	call   e0b <dup>
-      close(p[0]);
-     30f:	59                   	pop    %ecx
-     310:	ff 75 f0             	pushl  -0x10(%ebp)
-     313:	e8 a3 0a 00 00       	call   dbb <close>
-      close(p[1]);
-     318:	58                   	pop    %eax
-     319:	ff 75 f4             	pushl  -0xc(%ebp)
-     31c:	e8 9a 0a 00 00       	call   dbb <close>
-      runcmd(pcmd->right);
-     321:	58                   	pop    %eax
-     322:	ff 73 08             	pushl  0x8(%ebx)
-     325:	e8 56 fe ff ff       	call   180 <runcmd>
-    panic("fork");
-     32a:	83 ec 0c             	sub    $0xc,%esp
-     32d:	68 a2 12 00 00       	push   $0x12a2
-     332:	e8 29 fe ff ff       	call   160 <panic>
-     337:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     33e:	66 90                	xchg   %ax,%ax
-
-00000340 <fork1>:
-{
-     340:	f3 0f 1e fb          	endbr32 
-     344:	55                   	push   %ebp
-     345:	89 e5                	mov    %esp,%ebp
-     347:	83 ec 08             	sub    $0x8,%esp
-  pid = fork();
-     34a:	e8 3c 0a 00 00       	call   d8b <fork>
-  if(pid == -1)
-     34f:	83 f8 ff             	cmp    $0xffffffff,%eax
-     352:	74 02                	je     356 <fork1+0x16>
-  return pid;
-}
-     354:	c9                   	leave  
-     355:	c3                   	ret    
-    panic("fork");
-     356:	83 ec 0c             	sub    $0xc,%esp
-     359:	68 a2 12 00 00       	push   $0x12a2
-     35e:	e8 fd fd ff ff       	call   160 <panic>
-     363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000370 <execcmd>:
-//PAGEBREAK!
-// Constructors
-
-struct cmd*
-execcmd(void)
-{
-     370:	f3 0f 1e fb          	endbr32 
-     374:	55                   	push   %ebp
-     375:	89 e5                	mov    %esp,%ebp
-     377:	53                   	push   %ebx
-     378:	83 ec 10             	sub    $0x10,%esp
-  struct execcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     37b:	6a 54                	push   $0x54
-     37d:	e8 ee 0d 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     382:	83 c4 0c             	add    $0xc,%esp
-     385:	6a 54                	push   $0x54
-  cmd = malloc(sizeof(*cmd));
-     387:	89 c3                	mov    %eax,%ebx
-  memset(cmd, 0, sizeof(*cmd));
-     389:	6a 00                	push   $0x0
-     38b:	50                   	push   %eax
-     38c:	e8 5f 08 00 00       	call   bf0 <memset>
-  cmd->type = EXEC;
-     391:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
-  return (struct cmd*)cmd;
-}
-     397:	89 d8                	mov    %ebx,%eax
-     399:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     39c:	c9                   	leave  
-     39d:	c3                   	ret    
-     39e:	66 90                	xchg   %ax,%ax
-
-000003a0 <redircmd>:
-
-struct cmd*
-redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
-{
-     3a0:	f3 0f 1e fb          	endbr32 
-     3a4:	55                   	push   %ebp
-     3a5:	89 e5                	mov    %esp,%ebp
-     3a7:	53                   	push   %ebx
-     3a8:	83 ec 10             	sub    $0x10,%esp
-  struct redircmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     3ab:	6a 18                	push   $0x18
-     3ad:	e8 be 0d 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     3b2:	83 c4 0c             	add    $0xc,%esp
-     3b5:	6a 18                	push   $0x18
-  cmd = malloc(sizeof(*cmd));
-     3b7:	89 c3                	mov    %eax,%ebx
-  memset(cmd, 0, sizeof(*cmd));
-     3b9:	6a 00                	push   $0x0
-     3bb:	50                   	push   %eax
-     3bc:	e8 2f 08 00 00       	call   bf0 <memset>
-  cmd->type = REDIR;
-  cmd->cmd = subcmd;
-     3c1:	8b 45 08             	mov    0x8(%ebp),%eax
-  cmd->type = REDIR;
-     3c4:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
-  cmd->cmd = subcmd;
-     3ca:	89 43 04             	mov    %eax,0x4(%ebx)
-  cmd->file = file;
-     3cd:	8b 45 0c             	mov    0xc(%ebp),%eax
-     3d0:	89 43 08             	mov    %eax,0x8(%ebx)
-  cmd->efile = efile;
-     3d3:	8b 45 10             	mov    0x10(%ebp),%eax
-     3d6:	89 43 0c             	mov    %eax,0xc(%ebx)
-  cmd->mode = mode;
-     3d9:	8b 45 14             	mov    0x14(%ebp),%eax
-     3dc:	89 43 10             	mov    %eax,0x10(%ebx)
-  cmd->fd = fd;
-     3df:	8b 45 18             	mov    0x18(%ebp),%eax
-     3e2:	89 43 14             	mov    %eax,0x14(%ebx)
-  return (struct cmd*)cmd;
-}
-     3e5:	89 d8                	mov    %ebx,%eax
-     3e7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     3ea:	c9                   	leave  
-     3eb:	c3                   	ret    
-     3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000003f0 <pipecmd>:
-
-struct cmd*
-pipecmd(struct cmd *left, struct cmd *right)
-{
-     3f0:	f3 0f 1e fb          	endbr32 
-     3f4:	55                   	push   %ebp
-     3f5:	89 e5                	mov    %esp,%ebp
-     3f7:	53                   	push   %ebx
-     3f8:	83 ec 10             	sub    $0x10,%esp
-  struct pipecmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     3fb:	6a 0c                	push   $0xc
-     3fd:	e8 6e 0d 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     402:	83 c4 0c             	add    $0xc,%esp
-     405:	6a 0c                	push   $0xc
-  cmd = malloc(sizeof(*cmd));
-     407:	89 c3                	mov    %eax,%ebx
-  memset(cmd, 0, sizeof(*cmd));
-     409:	6a 00                	push   $0x0
-     40b:	50                   	push   %eax
-     40c:	e8 df 07 00 00       	call   bf0 <memset>
-  cmd->type = PIPE;
-  cmd->left = left;
-     411:	8b 45 08             	mov    0x8(%ebp),%eax
-  cmd->type = PIPE;
-     414:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
-  cmd->left = left;
-     41a:	89 43 04             	mov    %eax,0x4(%ebx)
-  cmd->right = right;
-     41d:	8b 45 0c             	mov    0xc(%ebp),%eax
-     420:	89 43 08             	mov    %eax,0x8(%ebx)
-  return (struct cmd*)cmd;
-}
-     423:	89 d8                	mov    %ebx,%eax
-     425:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     428:	c9                   	leave  
-     429:	c3                   	ret    
-     42a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000430 <listcmd>:
-
-struct cmd*
-listcmd(struct cmd *left, struct cmd *right)
-{
-     430:	f3 0f 1e fb          	endbr32 
-     434:	55                   	push   %ebp
-     435:	89 e5                	mov    %esp,%ebp
-     437:	53                   	push   %ebx
-     438:	83 ec 10             	sub    $0x10,%esp
-  struct listcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     43b:	6a 0c                	push   $0xc
-     43d:	e8 2e 0d 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     442:	83 c4 0c             	add    $0xc,%esp
-     445:	6a 0c                	push   $0xc
-  cmd = malloc(sizeof(*cmd));
-     447:	89 c3                	mov    %eax,%ebx
-  memset(cmd, 0, sizeof(*cmd));
-     449:	6a 00                	push   $0x0
-     44b:	50                   	push   %eax
-     44c:	e8 9f 07 00 00       	call   bf0 <memset>
-  cmd->type = LIST;
-  cmd->left = left;
-     451:	8b 45 08             	mov    0x8(%ebp),%eax
-  cmd->type = LIST;
-     454:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
-  cmd->left = left;
-     45a:	89 43 04             	mov    %eax,0x4(%ebx)
-  cmd->right = right;
-     45d:	8b 45 0c             	mov    0xc(%ebp),%eax
-     460:	89 43 08             	mov    %eax,0x8(%ebx)
-  return (struct cmd*)cmd;
-}
-     463:	89 d8                	mov    %ebx,%eax
-     465:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     468:	c9                   	leave  
-     469:	c3                   	ret    
-     46a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000470 <backcmd>:
-
-struct cmd*
-backcmd(struct cmd *subcmd)
-{
-     470:	f3 0f 1e fb          	endbr32 
-     474:	55                   	push   %ebp
-     475:	89 e5                	mov    %esp,%ebp
-     477:	53                   	push   %ebx
-     478:	83 ec 10             	sub    $0x10,%esp
-  struct backcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     47b:	6a 08                	push   $0x8
-     47d:	e8 ee 0c 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     482:	83 c4 0c             	add    $0xc,%esp
-     485:	6a 08                	push   $0x8
-  cmd = malloc(sizeof(*cmd));
-     487:	89 c3                	mov    %eax,%ebx
-  memset(cmd, 0, sizeof(*cmd));
-     489:	6a 00                	push   $0x0
-     48b:	50                   	push   %eax
-     48c:	e8 5f 07 00 00       	call   bf0 <memset>
-  cmd->type = BACK;
-  cmd->cmd = subcmd;
-     491:	8b 45 08             	mov    0x8(%ebp),%eax
-  cmd->type = BACK;
-     494:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
-  cmd->cmd = subcmd;
-     49a:	89 43 04             	mov    %eax,0x4(%ebx)
-  return (struct cmd*)cmd;
-}
-     49d:	89 d8                	mov    %ebx,%eax
-     49f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     4a2:	c9                   	leave  
-     4a3:	c3                   	ret    
-     4a4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     4ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     4af:	90                   	nop
-
-000004b0 <gettoken>:
-char whitespace[] = " \t\r\n\v";
-char symbols[] = "<|>&;()";
-
-int
-gettoken(char **ps, char *es, char **q, char **eq)
-{
-     4b0:	f3 0f 1e fb          	endbr32 
-     4b4:	55                   	push   %ebp
-     4b5:	89 e5                	mov    %esp,%ebp
-     4b7:	57                   	push   %edi
-     4b8:	56                   	push   %esi
-     4b9:	53                   	push   %ebx
-     4ba:	83 ec 0c             	sub    $0xc,%esp
-  char *s;
-  int ret;
-
-  s = *ps;
-     4bd:	8b 45 08             	mov    0x8(%ebp),%eax
-{
-     4c0:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-     4c3:	8b 75 10             	mov    0x10(%ebp),%esi
-  s = *ps;
-     4c6:	8b 38                	mov    (%eax),%edi
-  while(s < es && strchr(whitespace, *s))
-     4c8:	39 df                	cmp    %ebx,%edi
-     4ca:	72 0b                	jb     4d7 <gettoken+0x27>
-     4cc:	eb 21                	jmp    4ef <gettoken+0x3f>
-     4ce:	66 90                	xchg   %ax,%ax
-    s++;
-     4d0:	83 c7 01             	add    $0x1,%edi
-  while(s < es && strchr(whitespace, *s))
-     4d3:	39 fb                	cmp    %edi,%ebx
-     4d5:	74 18                	je     4ef <gettoken+0x3f>
-     4d7:	0f be 07             	movsbl (%edi),%eax
-     4da:	83 ec 08             	sub    $0x8,%esp
-     4dd:	50                   	push   %eax
-     4de:	68 40 19 00 00       	push   $0x1940
-     4e3:	e8 28 07 00 00       	call   c10 <strchr>
-     4e8:	83 c4 10             	add    $0x10,%esp
-     4eb:	85 c0                	test   %eax,%eax
-     4ed:	75 e1                	jne    4d0 <gettoken+0x20>
-  if(q)
-     4ef:	85 f6                	test   %esi,%esi
-     4f1:	74 02                	je     4f5 <gettoken+0x45>
-    *q = s;
-     4f3:	89 3e                	mov    %edi,(%esi)
-  ret = *s;
-     4f5:	0f b6 07             	movzbl (%edi),%eax
-  switch(*s){
-     4f8:	3c 3c                	cmp    $0x3c,%al
-     4fa:	0f 8f d0 00 00 00    	jg     5d0 <gettoken+0x120>
-     500:	3c 3a                	cmp    $0x3a,%al
-     502:	0f 8f b4 00 00 00    	jg     5bc <gettoken+0x10c>
-     508:	84 c0                	test   %al,%al
-     50a:	75 44                	jne    550 <gettoken+0xa0>
-     50c:	31 f6                	xor    %esi,%esi
-    ret = 'a';
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-      s++;
-    break;
-  }
-  if(eq)
-     50e:	8b 55 14             	mov    0x14(%ebp),%edx
-     511:	85 d2                	test   %edx,%edx
-     513:	74 05                	je     51a <gettoken+0x6a>
-    *eq = s;
-     515:	8b 45 14             	mov    0x14(%ebp),%eax
-     518:	89 38                	mov    %edi,(%eax)
-
-  while(s < es && strchr(whitespace, *s))
-     51a:	39 df                	cmp    %ebx,%edi
-     51c:	72 09                	jb     527 <gettoken+0x77>
-     51e:	eb 1f                	jmp    53f <gettoken+0x8f>
-    s++;
-     520:	83 c7 01             	add    $0x1,%edi
-  while(s < es && strchr(whitespace, *s))
-     523:	39 fb                	cmp    %edi,%ebx
-     525:	74 18                	je     53f <gettoken+0x8f>
-     527:	0f be 07             	movsbl (%edi),%eax
-     52a:	83 ec 08             	sub    $0x8,%esp
-     52d:	50                   	push   %eax
-     52e:	68 40 19 00 00       	push   $0x1940
-     533:	e8 d8 06 00 00       	call   c10 <strchr>
-     538:	83 c4 10             	add    $0x10,%esp
-     53b:	85 c0                	test   %eax,%eax
-     53d:	75 e1                	jne    520 <gettoken+0x70>
-  *ps = s;
-     53f:	8b 45 08             	mov    0x8(%ebp),%eax
-     542:	89 38                	mov    %edi,(%eax)
-  return ret;
-}
-     544:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     547:	89 f0                	mov    %esi,%eax
-     549:	5b                   	pop    %ebx
-     54a:	5e                   	pop    %esi
-     54b:	5f                   	pop    %edi
-     54c:	5d                   	pop    %ebp
-     54d:	c3                   	ret    
-     54e:	66 90                	xchg   %ax,%ax
-  switch(*s){
-     550:	79 5e                	jns    5b0 <gettoken+0x100>
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-     552:	39 fb                	cmp    %edi,%ebx
-     554:	77 34                	ja     58a <gettoken+0xda>
-  if(eq)
-     556:	8b 45 14             	mov    0x14(%ebp),%eax
-     559:	be 61 00 00 00       	mov    $0x61,%esi
-     55e:	85 c0                	test   %eax,%eax
-     560:	75 b3                	jne    515 <gettoken+0x65>
-     562:	eb db                	jmp    53f <gettoken+0x8f>
-     564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-     568:	0f be 07             	movsbl (%edi),%eax
-     56b:	83 ec 08             	sub    $0x8,%esp
-     56e:	50                   	push   %eax
-     56f:	68 38 19 00 00       	push   $0x1938
-     574:	e8 97 06 00 00       	call   c10 <strchr>
-     579:	83 c4 10             	add    $0x10,%esp
-     57c:	85 c0                	test   %eax,%eax
-     57e:	75 22                	jne    5a2 <gettoken+0xf2>
-      s++;
-     580:	83 c7 01             	add    $0x1,%edi
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-     583:	39 fb                	cmp    %edi,%ebx
-     585:	74 cf                	je     556 <gettoken+0xa6>
-     587:	0f b6 07             	movzbl (%edi),%eax
-     58a:	83 ec 08             	sub    $0x8,%esp
-     58d:	0f be f0             	movsbl %al,%esi
-     590:	56                   	push   %esi
-     591:	68 40 19 00 00       	push   $0x1940
-     596:	e8 75 06 00 00       	call   c10 <strchr>
-     59b:	83 c4 10             	add    $0x10,%esp
-     59e:	85 c0                	test   %eax,%eax
-     5a0:	74 c6                	je     568 <gettoken+0xb8>
-    ret = 'a';
-     5a2:	be 61 00 00 00       	mov    $0x61,%esi
-     5a7:	e9 62 ff ff ff       	jmp    50e <gettoken+0x5e>
-     5ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  switch(*s){
-     5b0:	3c 26                	cmp    $0x26,%al
-     5b2:	74 08                	je     5bc <gettoken+0x10c>
-     5b4:	8d 48 d8             	lea    -0x28(%eax),%ecx
-     5b7:	80 f9 01             	cmp    $0x1,%cl
-     5ba:	77 96                	ja     552 <gettoken+0xa2>
-  ret = *s;
-     5bc:	0f be f0             	movsbl %al,%esi
-    s++;
-     5bf:	83 c7 01             	add    $0x1,%edi
-    break;
-     5c2:	e9 47 ff ff ff       	jmp    50e <gettoken+0x5e>
-     5c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     5ce:	66 90                	xchg   %ax,%ax
-  switch(*s){
-     5d0:	3c 3e                	cmp    $0x3e,%al
-     5d2:	75 1c                	jne    5f0 <gettoken+0x140>
-    if(*s == '>'){
-     5d4:	80 7f 01 3e          	cmpb   $0x3e,0x1(%edi)
-    s++;
-     5d8:	8d 47 01             	lea    0x1(%edi),%eax
-    if(*s == '>'){
-     5db:	74 1c                	je     5f9 <gettoken+0x149>
-    s++;
-     5dd:	89 c7                	mov    %eax,%edi
-     5df:	be 3e 00 00 00       	mov    $0x3e,%esi
-     5e4:	e9 25 ff ff ff       	jmp    50e <gettoken+0x5e>
-     5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  switch(*s){
-     5f0:	3c 7c                	cmp    $0x7c,%al
-     5f2:	74 c8                	je     5bc <gettoken+0x10c>
-     5f4:	e9 59 ff ff ff       	jmp    552 <gettoken+0xa2>
-      s++;
-     5f9:	83 c7 02             	add    $0x2,%edi
-      ret = '+';
-     5fc:	be 2b 00 00 00       	mov    $0x2b,%esi
-     601:	e9 08 ff ff ff       	jmp    50e <gettoken+0x5e>
-     606:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     60d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000610 <peek>:
-
-int
-peek(char **ps, char *es, char *toks)
-{
-     610:	f3 0f 1e fb          	endbr32 
-     614:	55                   	push   %ebp
-     615:	89 e5                	mov    %esp,%ebp
-     617:	57                   	push   %edi
-     618:	56                   	push   %esi
-     619:	53                   	push   %ebx
-     61a:	83 ec 0c             	sub    $0xc,%esp
-     61d:	8b 7d 08             	mov    0x8(%ebp),%edi
-     620:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *s;
-
-  s = *ps;
-     623:	8b 1f                	mov    (%edi),%ebx
-  while(s < es && strchr(whitespace, *s))
-     625:	39 f3                	cmp    %esi,%ebx
-     627:	72 0e                	jb     637 <peek+0x27>
-     629:	eb 24                	jmp    64f <peek+0x3f>
-     62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     62f:	90                   	nop
-    s++;
-     630:	83 c3 01             	add    $0x1,%ebx
-  while(s < es && strchr(whitespace, *s))
-     633:	39 de                	cmp    %ebx,%esi
-     635:	74 18                	je     64f <peek+0x3f>
-     637:	0f be 03             	movsbl (%ebx),%eax
-     63a:	83 ec 08             	sub    $0x8,%esp
-     63d:	50                   	push   %eax
-     63e:	68 40 19 00 00       	push   $0x1940
-     643:	e8 c8 05 00 00       	call   c10 <strchr>
-     648:	83 c4 10             	add    $0x10,%esp
-     64b:	85 c0                	test   %eax,%eax
-     64d:	75 e1                	jne    630 <peek+0x20>
-  *ps = s;
-     64f:	89 1f                	mov    %ebx,(%edi)
-  return *s && strchr(toks, *s);
-     651:	0f be 03             	movsbl (%ebx),%eax
-     654:	31 d2                	xor    %edx,%edx
-     656:	84 c0                	test   %al,%al
-     658:	75 0e                	jne    668 <peek+0x58>
-}
-     65a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     65d:	89 d0                	mov    %edx,%eax
-     65f:	5b                   	pop    %ebx
-     660:	5e                   	pop    %esi
-     661:	5f                   	pop    %edi
-     662:	5d                   	pop    %ebp
-     663:	c3                   	ret    
-     664:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  return *s && strchr(toks, *s);
-     668:	83 ec 08             	sub    $0x8,%esp
-     66b:	50                   	push   %eax
-     66c:	ff 75 10             	pushl  0x10(%ebp)
-     66f:	e8 9c 05 00 00       	call   c10 <strchr>
-     674:	83 c4 10             	add    $0x10,%esp
-     677:	31 d2                	xor    %edx,%edx
-     679:	85 c0                	test   %eax,%eax
-     67b:	0f 95 c2             	setne  %dl
-}
-     67e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     681:	5b                   	pop    %ebx
-     682:	89 d0                	mov    %edx,%eax
-     684:	5e                   	pop    %esi
-     685:	5f                   	pop    %edi
-     686:	5d                   	pop    %ebp
-     687:	c3                   	ret    
-     688:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     68f:	90                   	nop
-
-00000690 <parseredirs>:
-  return cmd;
-}
-
-struct cmd*
-parseredirs(struct cmd *cmd, char **ps, char *es)
-{
-     690:	f3 0f 1e fb          	endbr32 
-     694:	55                   	push   %ebp
-     695:	89 e5                	mov    %esp,%ebp
-     697:	57                   	push   %edi
-     698:	56                   	push   %esi
-     699:	53                   	push   %ebx
-     69a:	83 ec 1c             	sub    $0x1c,%esp
-     69d:	8b 75 0c             	mov    0xc(%ebp),%esi
-     6a0:	8b 5d 10             	mov    0x10(%ebp),%ebx
-  int tok;
-  char *q, *eq;
-
-  while(peek(ps, es, "<>")){
-     6a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     6a7:	90                   	nop
-     6a8:	83 ec 04             	sub    $0x4,%esp
-     6ab:	68 c9 12 00 00       	push   $0x12c9
-     6b0:	53                   	push   %ebx
-     6b1:	56                   	push   %esi
-     6b2:	e8 59 ff ff ff       	call   610 <peek>
-     6b7:	83 c4 10             	add    $0x10,%esp
-     6ba:	85 c0                	test   %eax,%eax
-     6bc:	74 6a                	je     728 <parseredirs+0x98>
-    tok = gettoken(ps, es, 0, 0);
-     6be:	6a 00                	push   $0x0
-     6c0:	6a 00                	push   $0x0
-     6c2:	53                   	push   %ebx
-     6c3:	56                   	push   %esi
-     6c4:	e8 e7 fd ff ff       	call   4b0 <gettoken>
-     6c9:	89 c7                	mov    %eax,%edi
-    if(gettoken(ps, es, &q, &eq) != 'a')
-     6cb:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-     6ce:	50                   	push   %eax
-     6cf:	8d 45 e0             	lea    -0x20(%ebp),%eax
-     6d2:	50                   	push   %eax
-     6d3:	53                   	push   %ebx
-     6d4:	56                   	push   %esi
-     6d5:	e8 d6 fd ff ff       	call   4b0 <gettoken>
-     6da:	83 c4 20             	add    $0x20,%esp
-     6dd:	83 f8 61             	cmp    $0x61,%eax
-     6e0:	75 51                	jne    733 <parseredirs+0xa3>
-      panic("missing file for redirection");
-    switch(tok){
-     6e2:	83 ff 3c             	cmp    $0x3c,%edi
-     6e5:	74 31                	je     718 <parseredirs+0x88>
-     6e7:	83 ff 3e             	cmp    $0x3e,%edi
-     6ea:	74 05                	je     6f1 <parseredirs+0x61>
-     6ec:	83 ff 2b             	cmp    $0x2b,%edi
-     6ef:	75 b7                	jne    6a8 <parseredirs+0x18>
-      break;
-    case '>':
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-      break;
-    case '+':  // >>
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-     6f1:	83 ec 0c             	sub    $0xc,%esp
-     6f4:	6a 01                	push   $0x1
-     6f6:	68 01 02 00 00       	push   $0x201
-     6fb:	ff 75 e4             	pushl  -0x1c(%ebp)
-     6fe:	ff 75 e0             	pushl  -0x20(%ebp)
-     701:	ff 75 08             	pushl  0x8(%ebp)
-     704:	e8 97 fc ff ff       	call   3a0 <redircmd>
-      break;
-     709:	83 c4 20             	add    $0x20,%esp
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-     70c:	89 45 08             	mov    %eax,0x8(%ebp)
-      break;
-     70f:	eb 97                	jmp    6a8 <parseredirs+0x18>
-     711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
-     718:	83 ec 0c             	sub    $0xc,%esp
-     71b:	6a 00                	push   $0x0
-     71d:	6a 00                	push   $0x0
-     71f:	eb da                	jmp    6fb <parseredirs+0x6b>
-     721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    }
-  }
-  return cmd;
-}
-     728:	8b 45 08             	mov    0x8(%ebp),%eax
-     72b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     72e:	5b                   	pop    %ebx
-     72f:	5e                   	pop    %esi
-     730:	5f                   	pop    %edi
-     731:	5d                   	pop    %ebp
-     732:	c3                   	ret    
-      panic("missing file for redirection");
-     733:	83 ec 0c             	sub    $0xc,%esp
-     736:	68 ac 12 00 00       	push   $0x12ac
-     73b:	e8 20 fa ff ff       	call   160 <panic>
-
-00000740 <parseexec>:
-  return cmd;
-}
-
-struct cmd*
-parseexec(char **ps, char *es)
-{
-     740:	f3 0f 1e fb          	endbr32 
-     744:	55                   	push   %ebp
-     745:	89 e5                	mov    %esp,%ebp
-     747:	57                   	push   %edi
-     748:	56                   	push   %esi
-     749:	53                   	push   %ebx
-     74a:	83 ec 30             	sub    $0x30,%esp
-     74d:	8b 75 08             	mov    0x8(%ebp),%esi
-     750:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  char *q, *eq;
-  int tok, argc;
-  struct execcmd *cmd;
-  struct cmd *ret;
-
-  if(peek(ps, es, "("))
-     753:	68 cc 12 00 00       	push   $0x12cc
-     758:	57                   	push   %edi
-     759:	56                   	push   %esi
-     75a:	e8 b1 fe ff ff       	call   610 <peek>
-     75f:	83 c4 10             	add    $0x10,%esp
-     762:	85 c0                	test   %eax,%eax
-     764:	0f 85 96 00 00 00    	jne    800 <parseexec+0xc0>
-     76a:	89 c3                	mov    %eax,%ebx
-    return parseblock(ps, es);
-
-  ret = execcmd();
-     76c:	e8 ff fb ff ff       	call   370 <execcmd>
-  cmd = (struct execcmd*)ret;
-
-  argc = 0;
-  ret = parseredirs(ret, ps, es);
-     771:	83 ec 04             	sub    $0x4,%esp
-     774:	57                   	push   %edi
-     775:	56                   	push   %esi
-     776:	50                   	push   %eax
-  ret = execcmd();
-     777:	89 45 d0             	mov    %eax,-0x30(%ebp)
-  ret = parseredirs(ret, ps, es);
-     77a:	e8 11 ff ff ff       	call   690 <parseredirs>
-  while(!peek(ps, es, "|)&;")){
-     77f:	83 c4 10             	add    $0x10,%esp
-  ret = parseredirs(ret, ps, es);
-     782:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-  while(!peek(ps, es, "|)&;")){
-     785:	eb 1c                	jmp    7a3 <parseexec+0x63>
-     787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     78e:	66 90                	xchg   %ax,%ax
-    cmd->argv[argc] = q;
-    cmd->eargv[argc] = eq;
-    argc++;
-    if(argc >= MAXARGS)
-      panic("too many args");
-    ret = parseredirs(ret, ps, es);
-     790:	83 ec 04             	sub    $0x4,%esp
-     793:	57                   	push   %edi
-     794:	56                   	push   %esi
-     795:	ff 75 d4             	pushl  -0x2c(%ebp)
-     798:	e8 f3 fe ff ff       	call   690 <parseredirs>
-     79d:	83 c4 10             	add    $0x10,%esp
-     7a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-  while(!peek(ps, es, "|)&;")){
-     7a3:	83 ec 04             	sub    $0x4,%esp
-     7a6:	68 e3 12 00 00       	push   $0x12e3
-     7ab:	57                   	push   %edi
-     7ac:	56                   	push   %esi
-     7ad:	e8 5e fe ff ff       	call   610 <peek>
-     7b2:	83 c4 10             	add    $0x10,%esp
-     7b5:	85 c0                	test   %eax,%eax
-     7b7:	75 67                	jne    820 <parseexec+0xe0>
-    if((tok=gettoken(ps, es, &q, &eq)) == 0)
-     7b9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-     7bc:	50                   	push   %eax
-     7bd:	8d 45 e0             	lea    -0x20(%ebp),%eax
-     7c0:	50                   	push   %eax
-     7c1:	57                   	push   %edi
-     7c2:	56                   	push   %esi
-     7c3:	e8 e8 fc ff ff       	call   4b0 <gettoken>
-     7c8:	83 c4 10             	add    $0x10,%esp
-     7cb:	85 c0                	test   %eax,%eax
-     7cd:	74 51                	je     820 <parseexec+0xe0>
-    if(tok != 'a')
-     7cf:	83 f8 61             	cmp    $0x61,%eax
-     7d2:	75 6b                	jne    83f <parseexec+0xff>
-    cmd->argv[argc] = q;
-     7d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
-     7d7:	8b 55 d0             	mov    -0x30(%ebp),%edx
-     7da:	89 44 9a 04          	mov    %eax,0x4(%edx,%ebx,4)
-    cmd->eargv[argc] = eq;
-     7de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-     7e1:	89 44 9a 2c          	mov    %eax,0x2c(%edx,%ebx,4)
-    argc++;
-     7e5:	83 c3 01             	add    $0x1,%ebx
-    if(argc >= MAXARGS)
-     7e8:	83 fb 0a             	cmp    $0xa,%ebx
-     7eb:	75 a3                	jne    790 <parseexec+0x50>
-      panic("too many args");
-     7ed:	83 ec 0c             	sub    $0xc,%esp
-     7f0:	68 d5 12 00 00       	push   $0x12d5
-     7f5:	e8 66 f9 ff ff       	call   160 <panic>
-     7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return parseblock(ps, es);
-     800:	83 ec 08             	sub    $0x8,%esp
-     803:	57                   	push   %edi
-     804:	56                   	push   %esi
-     805:	e8 66 01 00 00       	call   970 <parseblock>
-     80a:	83 c4 10             	add    $0x10,%esp
-     80d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-  }
-  cmd->argv[argc] = 0;
-  cmd->eargv[argc] = 0;
-  return ret;
-}
-     810:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-     813:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     816:	5b                   	pop    %ebx
-     817:	5e                   	pop    %esi
-     818:	5f                   	pop    %edi
-     819:	5d                   	pop    %ebp
-     81a:	c3                   	ret    
-     81b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     81f:	90                   	nop
-  cmd->argv[argc] = 0;
-     820:	8b 45 d0             	mov    -0x30(%ebp),%eax
-     823:	8d 04 98             	lea    (%eax,%ebx,4),%eax
-     826:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
-  cmd->eargv[argc] = 0;
-     82d:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
-}
-     834:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-     837:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     83a:	5b                   	pop    %ebx
-     83b:	5e                   	pop    %esi
-     83c:	5f                   	pop    %edi
-     83d:	5d                   	pop    %ebp
-     83e:	c3                   	ret    
-      panic("syntax");
-     83f:	83 ec 0c             	sub    $0xc,%esp
-     842:	68 ce 12 00 00       	push   $0x12ce
-     847:	e8 14 f9 ff ff       	call   160 <panic>
-     84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000850 <parsepipe>:
-{
-     850:	f3 0f 1e fb          	endbr32 
-     854:	55                   	push   %ebp
-     855:	89 e5                	mov    %esp,%ebp
-     857:	57                   	push   %edi
-     858:	56                   	push   %esi
-     859:	53                   	push   %ebx
-     85a:	83 ec 14             	sub    $0x14,%esp
-     85d:	8b 75 08             	mov    0x8(%ebp),%esi
-     860:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  cmd = parseexec(ps, es);
-     863:	57                   	push   %edi
-     864:	56                   	push   %esi
-     865:	e8 d6 fe ff ff       	call   740 <parseexec>
-  if(peek(ps, es, "|")){
-     86a:	83 c4 0c             	add    $0xc,%esp
-     86d:	68 e8 12 00 00       	push   $0x12e8
-  cmd = parseexec(ps, es);
-     872:	89 c3                	mov    %eax,%ebx
-  if(peek(ps, es, "|")){
-     874:	57                   	push   %edi
-     875:	56                   	push   %esi
-     876:	e8 95 fd ff ff       	call   610 <peek>
-     87b:	83 c4 10             	add    $0x10,%esp
-     87e:	85 c0                	test   %eax,%eax
-     880:	75 0e                	jne    890 <parsepipe+0x40>
-}
-     882:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     885:	89 d8                	mov    %ebx,%eax
-     887:	5b                   	pop    %ebx
-     888:	5e                   	pop    %esi
-     889:	5f                   	pop    %edi
-     88a:	5d                   	pop    %ebp
-     88b:	c3                   	ret    
-     88c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    gettoken(ps, es, 0, 0);
-     890:	6a 00                	push   $0x0
-     892:	6a 00                	push   $0x0
-     894:	57                   	push   %edi
-     895:	56                   	push   %esi
-     896:	e8 15 fc ff ff       	call   4b0 <gettoken>
-    cmd = pipecmd(cmd, parsepipe(ps, es));
-     89b:	58                   	pop    %eax
-     89c:	5a                   	pop    %edx
-     89d:	57                   	push   %edi
-     89e:	56                   	push   %esi
-     89f:	e8 ac ff ff ff       	call   850 <parsepipe>
-     8a4:	89 5d 08             	mov    %ebx,0x8(%ebp)
-     8a7:	83 c4 10             	add    $0x10,%esp
-     8aa:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-     8ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     8b0:	5b                   	pop    %ebx
-     8b1:	5e                   	pop    %esi
-     8b2:	5f                   	pop    %edi
-     8b3:	5d                   	pop    %ebp
-    cmd = pipecmd(cmd, parsepipe(ps, es));
-     8b4:	e9 37 fb ff ff       	jmp    3f0 <pipecmd>
-     8b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-000008c0 <parseline>:
-{
-     8c0:	f3 0f 1e fb          	endbr32 
-     8c4:	55                   	push   %ebp
-     8c5:	89 e5                	mov    %esp,%ebp
-     8c7:	57                   	push   %edi
-     8c8:	56                   	push   %esi
-     8c9:	53                   	push   %ebx
-     8ca:	83 ec 14             	sub    $0x14,%esp
-     8cd:	8b 75 08             	mov    0x8(%ebp),%esi
-     8d0:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  cmd = parsepipe(ps, es);
-     8d3:	57                   	push   %edi
-     8d4:	56                   	push   %esi
-     8d5:	e8 76 ff ff ff       	call   850 <parsepipe>
-  while(peek(ps, es, "&")){
-     8da:	83 c4 10             	add    $0x10,%esp
-  cmd = parsepipe(ps, es);
-     8dd:	89 c3                	mov    %eax,%ebx
-  while(peek(ps, es, "&")){
-     8df:	eb 1f                	jmp    900 <parseline+0x40>
-     8e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    gettoken(ps, es, 0, 0);
-     8e8:	6a 00                	push   $0x0
-     8ea:	6a 00                	push   $0x0
-     8ec:	57                   	push   %edi
-     8ed:	56                   	push   %esi
-     8ee:	e8 bd fb ff ff       	call   4b0 <gettoken>
-    cmd = backcmd(cmd);
-     8f3:	89 1c 24             	mov    %ebx,(%esp)
-     8f6:	e8 75 fb ff ff       	call   470 <backcmd>
-     8fb:	83 c4 10             	add    $0x10,%esp
-     8fe:	89 c3                	mov    %eax,%ebx
-  while(peek(ps, es, "&")){
-     900:	83 ec 04             	sub    $0x4,%esp
-     903:	68 ea 12 00 00       	push   $0x12ea
-     908:	57                   	push   %edi
-     909:	56                   	push   %esi
-     90a:	e8 01 fd ff ff       	call   610 <peek>
-     90f:	83 c4 10             	add    $0x10,%esp
-     912:	85 c0                	test   %eax,%eax
-     914:	75 d2                	jne    8e8 <parseline+0x28>
-  if(peek(ps, es, ";")){
-     916:	83 ec 04             	sub    $0x4,%esp
-     919:	68 e6 12 00 00       	push   $0x12e6
-     91e:	57                   	push   %edi
-     91f:	56                   	push   %esi
-     920:	e8 eb fc ff ff       	call   610 <peek>
-     925:	83 c4 10             	add    $0x10,%esp
-     928:	85 c0                	test   %eax,%eax
-     92a:	75 14                	jne    940 <parseline+0x80>
-}
-     92c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     92f:	89 d8                	mov    %ebx,%eax
-     931:	5b                   	pop    %ebx
-     932:	5e                   	pop    %esi
-     933:	5f                   	pop    %edi
-     934:	5d                   	pop    %ebp
-     935:	c3                   	ret    
-     936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     93d:	8d 76 00             	lea    0x0(%esi),%esi
-    gettoken(ps, es, 0, 0);
-     940:	6a 00                	push   $0x0
-     942:	6a 00                	push   $0x0
-     944:	57                   	push   %edi
-     945:	56                   	push   %esi
-     946:	e8 65 fb ff ff       	call   4b0 <gettoken>
-    cmd = listcmd(cmd, parseline(ps, es));
-     94b:	58                   	pop    %eax
-     94c:	5a                   	pop    %edx
-     94d:	57                   	push   %edi
-     94e:	56                   	push   %esi
-     94f:	e8 6c ff ff ff       	call   8c0 <parseline>
-     954:	89 5d 08             	mov    %ebx,0x8(%ebp)
-     957:	83 c4 10             	add    $0x10,%esp
-     95a:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-     95d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     960:	5b                   	pop    %ebx
-     961:	5e                   	pop    %esi
-     962:	5f                   	pop    %edi
-     963:	5d                   	pop    %ebp
-    cmd = listcmd(cmd, parseline(ps, es));
-     964:	e9 c7 fa ff ff       	jmp    430 <listcmd>
-     969:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000970 <parseblock>:
-{
-     970:	f3 0f 1e fb          	endbr32 
-     974:	55                   	push   %ebp
-     975:	89 e5                	mov    %esp,%ebp
-     977:	57                   	push   %edi
-     978:	56                   	push   %esi
-     979:	53                   	push   %ebx
-     97a:	83 ec 10             	sub    $0x10,%esp
-     97d:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     980:	8b 75 0c             	mov    0xc(%ebp),%esi
-  if(!peek(ps, es, "("))
-     983:	68 cc 12 00 00       	push   $0x12cc
-     988:	56                   	push   %esi
-     989:	53                   	push   %ebx
-     98a:	e8 81 fc ff ff       	call   610 <peek>
-     98f:	83 c4 10             	add    $0x10,%esp
-     992:	85 c0                	test   %eax,%eax
-     994:	74 4a                	je     9e0 <parseblock+0x70>
-  gettoken(ps, es, 0, 0);
-     996:	6a 00                	push   $0x0
-     998:	6a 00                	push   $0x0
-     99a:	56                   	push   %esi
-     99b:	53                   	push   %ebx
-     99c:	e8 0f fb ff ff       	call   4b0 <gettoken>
-  cmd = parseline(ps, es);
-     9a1:	58                   	pop    %eax
-     9a2:	5a                   	pop    %edx
-     9a3:	56                   	push   %esi
-     9a4:	53                   	push   %ebx
-     9a5:	e8 16 ff ff ff       	call   8c0 <parseline>
-  if(!peek(ps, es, ")"))
-     9aa:	83 c4 0c             	add    $0xc,%esp
-     9ad:	68 08 13 00 00       	push   $0x1308
-  cmd = parseline(ps, es);
-     9b2:	89 c7                	mov    %eax,%edi
-  if(!peek(ps, es, ")"))
-     9b4:	56                   	push   %esi
-     9b5:	53                   	push   %ebx
-     9b6:	e8 55 fc ff ff       	call   610 <peek>
-     9bb:	83 c4 10             	add    $0x10,%esp
-     9be:	85 c0                	test   %eax,%eax
-     9c0:	74 2b                	je     9ed <parseblock+0x7d>
-  gettoken(ps, es, 0, 0);
-     9c2:	6a 00                	push   $0x0
-     9c4:	6a 00                	push   $0x0
-     9c6:	56                   	push   %esi
-     9c7:	53                   	push   %ebx
-     9c8:	e8 e3 fa ff ff       	call   4b0 <gettoken>
-  cmd = parseredirs(cmd, ps, es);
-     9cd:	83 c4 0c             	add    $0xc,%esp
-     9d0:	56                   	push   %esi
-     9d1:	53                   	push   %ebx
-     9d2:	57                   	push   %edi
-     9d3:	e8 b8 fc ff ff       	call   690 <parseredirs>
-}
-     9d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     9db:	5b                   	pop    %ebx
-     9dc:	5e                   	pop    %esi
-     9dd:	5f                   	pop    %edi
-     9de:	5d                   	pop    %ebp
-     9df:	c3                   	ret    
-    panic("parseblock");
-     9e0:	83 ec 0c             	sub    $0xc,%esp
-     9e3:	68 ec 12 00 00       	push   $0x12ec
-     9e8:	e8 73 f7 ff ff       	call   160 <panic>
-    panic("syntax - missing )");
-     9ed:	83 ec 0c             	sub    $0xc,%esp
-     9f0:	68 f7 12 00 00       	push   $0x12f7
-     9f5:	e8 66 f7 ff ff       	call   160 <panic>
-     9fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000a00 <nulterminate>:
-
-// NUL-terminate all the counted strings.
-struct cmd*
-nulterminate(struct cmd *cmd)
-{
-     a00:	f3 0f 1e fb          	endbr32 
-     a04:	55                   	push   %ebp
-     a05:	89 e5                	mov    %esp,%ebp
-     a07:	53                   	push   %ebx
-     a08:	83 ec 04             	sub    $0x4,%esp
-     a0b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  struct execcmd *ecmd;
-  struct listcmd *lcmd;
-  struct pipecmd *pcmd;
-  struct redircmd *rcmd;
-
-  if(cmd == 0)
-     a0e:	85 db                	test   %ebx,%ebx
-     a10:	0f 84 9a 00 00 00    	je     ab0 <nulterminate+0xb0>
-    return 0;
-
-  switch(cmd->type){
-     a16:	83 3b 05             	cmpl   $0x5,(%ebx)
-     a19:	77 6d                	ja     a88 <nulterminate+0x88>
-     a1b:	8b 03                	mov    (%ebx),%eax
-     a1d:	3e ff 24 85 48 13 00 	notrack jmp *0x1348(,%eax,4)
-     a24:	00 
-     a25:	8d 76 00             	lea    0x0(%esi),%esi
-    nulterminate(pcmd->right);
-    break;
-
-  case LIST:
-    lcmd = (struct listcmd*)cmd;
-    nulterminate(lcmd->left);
-     a28:	83 ec 0c             	sub    $0xc,%esp
-     a2b:	ff 73 04             	pushl  0x4(%ebx)
-     a2e:	e8 cd ff ff ff       	call   a00 <nulterminate>
-    nulterminate(lcmd->right);
-     a33:	58                   	pop    %eax
-     a34:	ff 73 08             	pushl  0x8(%ebx)
-     a37:	e8 c4 ff ff ff       	call   a00 <nulterminate>
-    break;
-     a3c:	83 c4 10             	add    $0x10,%esp
-     a3f:	89 d8                	mov    %ebx,%eax
-    bcmd = (struct backcmd*)cmd;
-    nulterminate(bcmd->cmd);
-    break;
-  }
-  return cmd;
-}
-     a41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     a44:	c9                   	leave  
-     a45:	c3                   	ret    
-     a46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     a4d:	8d 76 00             	lea    0x0(%esi),%esi
-    nulterminate(bcmd->cmd);
-     a50:	83 ec 0c             	sub    $0xc,%esp
-     a53:	ff 73 04             	pushl  0x4(%ebx)
-     a56:	e8 a5 ff ff ff       	call   a00 <nulterminate>
-    break;
-     a5b:	89 d8                	mov    %ebx,%eax
-     a5d:	83 c4 10             	add    $0x10,%esp
-}
-     a60:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     a63:	c9                   	leave  
-     a64:	c3                   	ret    
-     a65:	8d 76 00             	lea    0x0(%esi),%esi
-    for(i=0; ecmd->argv[i]; i++)
-     a68:	8b 4b 04             	mov    0x4(%ebx),%ecx
-     a6b:	8d 43 08             	lea    0x8(%ebx),%eax
-     a6e:	85 c9                	test   %ecx,%ecx
-     a70:	74 16                	je     a88 <nulterminate+0x88>
-     a72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      *ecmd->eargv[i] = 0;
-     a78:	8b 50 24             	mov    0x24(%eax),%edx
-     a7b:	83 c0 04             	add    $0x4,%eax
-     a7e:	c6 02 00             	movb   $0x0,(%edx)
-    for(i=0; ecmd->argv[i]; i++)
-     a81:	8b 50 fc             	mov    -0x4(%eax),%edx
-     a84:	85 d2                	test   %edx,%edx
-     a86:	75 f0                	jne    a78 <nulterminate+0x78>
-  switch(cmd->type){
-     a88:	89 d8                	mov    %ebx,%eax
-}
-     a8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     a8d:	c9                   	leave  
-     a8e:	c3                   	ret    
-     a8f:	90                   	nop
-    nulterminate(rcmd->cmd);
-     a90:	83 ec 0c             	sub    $0xc,%esp
-     a93:	ff 73 04             	pushl  0x4(%ebx)
-     a96:	e8 65 ff ff ff       	call   a00 <nulterminate>
-    *rcmd->efile = 0;
-     a9b:	8b 43 0c             	mov    0xc(%ebx),%eax
-    break;
-     a9e:	83 c4 10             	add    $0x10,%esp
-    *rcmd->efile = 0;
-     aa1:	c6 00 00             	movb   $0x0,(%eax)
-    break;
-     aa4:	89 d8                	mov    %ebx,%eax
-}
-     aa6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     aa9:	c9                   	leave  
-     aaa:	c3                   	ret    
-     aab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     aaf:	90                   	nop
-    return 0;
-     ab0:	31 c0                	xor    %eax,%eax
-     ab2:	eb 8d                	jmp    a41 <nulterminate+0x41>
-     ab4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     abb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     abf:	90                   	nop
-
-00000ac0 <parsecmd>:
-{
-     ac0:	f3 0f 1e fb          	endbr32 
-     ac4:	55                   	push   %ebp
-     ac5:	89 e5                	mov    %esp,%ebp
-     ac7:	56                   	push   %esi
-     ac8:	53                   	push   %ebx
-  es = s + strlen(s);
-     ac9:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     acc:	83 ec 0c             	sub    $0xc,%esp
-     acf:	53                   	push   %ebx
-     ad0:	e8 db 00 00 00       	call   bb0 <strlen>
-  cmd = parseline(&s, es);
-     ad5:	59                   	pop    %ecx
-     ad6:	5e                   	pop    %esi
-  es = s + strlen(s);
-     ad7:	01 c3                	add    %eax,%ebx
-  cmd = parseline(&s, es);
-     ad9:	8d 45 08             	lea    0x8(%ebp),%eax
-     adc:	53                   	push   %ebx
-     add:	50                   	push   %eax
-     ade:	e8 dd fd ff ff       	call   8c0 <parseline>
-  peek(&s, es, "");
-     ae3:	83 c4 0c             	add    $0xc,%esp
-  cmd = parseline(&s, es);
-     ae6:	89 c6                	mov    %eax,%esi
-  peek(&s, es, "");
-     ae8:	8d 45 08             	lea    0x8(%ebp),%eax
-     aeb:	68 91 12 00 00       	push   $0x1291
-     af0:	53                   	push   %ebx
-     af1:	50                   	push   %eax
-     af2:	e8 19 fb ff ff       	call   610 <peek>
-  if(s != es){
-     af7:	8b 45 08             	mov    0x8(%ebp),%eax
-     afa:	83 c4 10             	add    $0x10,%esp
-     afd:	39 d8                	cmp    %ebx,%eax
-     aff:	75 12                	jne    b13 <parsecmd+0x53>
-  nulterminate(cmd);
-     b01:	83 ec 0c             	sub    $0xc,%esp
-     b04:	56                   	push   %esi
-     b05:	e8 f6 fe ff ff       	call   a00 <nulterminate>
-}
-     b0a:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     b0d:	89 f0                	mov    %esi,%eax
-     b0f:	5b                   	pop    %ebx
-     b10:	5e                   	pop    %esi
-     b11:	5d                   	pop    %ebp
-     b12:	c3                   	ret    
-    printf(2, "leftovers: %s\n", s);
-     b13:	52                   	push   %edx
-     b14:	50                   	push   %eax
-     b15:	68 0a 13 00 00       	push   $0x130a
-     b1a:	6a 02                	push   $0x2
-     b1c:	e8 ef 03 00 00       	call   f10 <printf>
-    panic("syntax");
-     b21:	c7 04 24 ce 12 00 00 	movl   $0x12ce,(%esp)
-     b28:	e8 33 f6 ff ff       	call   160 <panic>
-     b2d:	66 90                	xchg   %ax,%ax
-     b2f:	90                   	nop
-
-00000b30 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-     b30:	f3 0f 1e fb          	endbr32 
-     b34:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-     b35:	31 c0                	xor    %eax,%eax
-{
-     b37:	89 e5                	mov    %esp,%ebp
-     b39:	53                   	push   %ebx
-     b3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
-     b3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
-     b40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-     b44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-     b47:	83 c0 01             	add    $0x1,%eax
-     b4a:	84 d2                	test   %dl,%dl
-     b4c:	75 f2                	jne    b40 <strcpy+0x10>
-    ;
-  return os;
-}
-     b4e:	89 c8                	mov    %ecx,%eax
-     b50:	5b                   	pop    %ebx
-     b51:	5d                   	pop    %ebp
-     b52:	c3                   	ret    
-     b53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     b5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000b60 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-     b60:	f3 0f 1e fb          	endbr32 
-     b64:	55                   	push   %ebp
-     b65:	89 e5                	mov    %esp,%ebp
-     b67:	53                   	push   %ebx
-     b68:	8b 4d 08             	mov    0x8(%ebp),%ecx
-     b6b:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
-     b6e:	0f b6 01             	movzbl (%ecx),%eax
-     b71:	0f b6 1a             	movzbl (%edx),%ebx
-     b74:	84 c0                	test   %al,%al
-     b76:	75 19                	jne    b91 <strcmp+0x31>
-     b78:	eb 26                	jmp    ba0 <strcmp+0x40>
-     b7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-     b80:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
-     b84:	83 c1 01             	add    $0x1,%ecx
-     b87:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
-     b8a:	0f b6 1a             	movzbl (%edx),%ebx
-     b8d:	84 c0                	test   %al,%al
-     b8f:	74 0f                	je     ba0 <strcmp+0x40>
-     b91:	38 d8                	cmp    %bl,%al
-     b93:	74 eb                	je     b80 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
-     b95:	29 d8                	sub    %ebx,%eax
-}
-     b97:	5b                   	pop    %ebx
-     b98:	5d                   	pop    %ebp
-     b99:	c3                   	ret    
-     b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-     ba0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
-     ba2:	29 d8                	sub    %ebx,%eax
-}
-     ba4:	5b                   	pop    %ebx
-     ba5:	5d                   	pop    %ebp
-     ba6:	c3                   	ret    
-     ba7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     bae:	66 90                	xchg   %ax,%ax
-
-00000bb0 <strlen>:
-
-uint
-strlen(const char *s)
-{
-     bb0:	f3 0f 1e fb          	endbr32 
-     bb4:	55                   	push   %ebp
-     bb5:	89 e5                	mov    %esp,%ebp
-     bb7:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
-     bba:	80 3a 00             	cmpb   $0x0,(%edx)
-     bbd:	74 21                	je     be0 <strlen+0x30>
-     bbf:	31 c0                	xor    %eax,%eax
-     bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     bc8:	83 c0 01             	add    $0x1,%eax
-     bcb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-     bcf:	89 c1                	mov    %eax,%ecx
-     bd1:	75 f5                	jne    bc8 <strlen+0x18>
-    ;
-  return n;
-}
-     bd3:	89 c8                	mov    %ecx,%eax
-     bd5:	5d                   	pop    %ebp
-     bd6:	c3                   	ret    
-     bd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     bde:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
-     be0:	31 c9                	xor    %ecx,%ecx
-}
-     be2:	5d                   	pop    %ebp
-     be3:	89 c8                	mov    %ecx,%eax
-     be5:	c3                   	ret    
-     be6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     bed:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000bf0 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
-     bf0:	f3 0f 1e fb          	endbr32 
-     bf4:	55                   	push   %ebp
-     bf5:	89 e5                	mov    %esp,%ebp
-     bf7:	57                   	push   %edi
-     bf8:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
-     bfb:	8b 4d 10             	mov    0x10(%ebp),%ecx
-     bfe:	8b 45 0c             	mov    0xc(%ebp),%eax
-     c01:	89 d7                	mov    %edx,%edi
-     c03:	fc                   	cld    
-     c04:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
-     c06:	89 d0                	mov    %edx,%eax
-     c08:	5f                   	pop    %edi
-     c09:	5d                   	pop    %ebp
-     c0a:	c3                   	ret    
-     c0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     c0f:	90                   	nop
-
-00000c10 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
-     c10:	f3 0f 1e fb          	endbr32 
-     c14:	55                   	push   %ebp
-     c15:	89 e5                	mov    %esp,%ebp
-     c17:	8b 45 08             	mov    0x8(%ebp),%eax
-     c1a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
-     c1e:	0f b6 10             	movzbl (%eax),%edx
-     c21:	84 d2                	test   %dl,%dl
-     c23:	75 16                	jne    c3b <strchr+0x2b>
-     c25:	eb 21                	jmp    c48 <strchr+0x38>
-     c27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     c2e:	66 90                	xchg   %ax,%ax
-     c30:	0f b6 50 01          	movzbl 0x1(%eax),%edx
-     c34:	83 c0 01             	add    $0x1,%eax
-     c37:	84 d2                	test   %dl,%dl
-     c39:	74 0d                	je     c48 <strchr+0x38>
-    if(*s == c)
-     c3b:	38 d1                	cmp    %dl,%cl
-     c3d:	75 f1                	jne    c30 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
-     c3f:	5d                   	pop    %ebp
-     c40:	c3                   	ret    
-     c41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
-     c48:	31 c0                	xor    %eax,%eax
-}
-     c4a:	5d                   	pop    %ebp
-     c4b:	c3                   	ret    
-     c4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000c50 <gets>:
-
-char*
-gets(char *buf, int max)
-{
-     c50:	f3 0f 1e fb          	endbr32 
-     c54:	55                   	push   %ebp
-     c55:	89 e5                	mov    %esp,%ebp
-     c57:	57                   	push   %edi
-     c58:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-     c59:	31 f6                	xor    %esi,%esi
-{
-     c5b:	53                   	push   %ebx
-     c5c:	89 f3                	mov    %esi,%ebx
-     c5e:	83 ec 1c             	sub    $0x1c,%esp
-     c61:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
-     c64:	eb 33                	jmp    c99 <gets+0x49>
-     c66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     c6d:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
-     c70:	83 ec 04             	sub    $0x4,%esp
-     c73:	8d 45 e7             	lea    -0x19(%ebp),%eax
-     c76:	6a 01                	push   $0x1
-     c78:	50                   	push   %eax
-     c79:	6a 00                	push   $0x0
-     c7b:	e8 2b 01 00 00       	call   dab <read>
-    if(cc < 1)
-     c80:	83 c4 10             	add    $0x10,%esp
-     c83:	85 c0                	test   %eax,%eax
-     c85:	7e 1c                	jle    ca3 <gets+0x53>
-      break;
-    buf[i++] = c;
-     c87:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
-     c8b:	83 c7 01             	add    $0x1,%edi
-     c8e:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
-     c91:	3c 0a                	cmp    $0xa,%al
-     c93:	74 23                	je     cb8 <gets+0x68>
-     c95:	3c 0d                	cmp    $0xd,%al
-     c97:	74 1f                	je     cb8 <gets+0x68>
-  for(i=0; i+1 < max; ){
-     c99:	83 c3 01             	add    $0x1,%ebx
-     c9c:	89 fe                	mov    %edi,%esi
-     c9e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
-     ca1:	7c cd                	jl     c70 <gets+0x20>
-     ca3:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
-     ca5:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
-     ca8:	c6 03 00             	movb   $0x0,(%ebx)
-}
-     cab:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     cae:	5b                   	pop    %ebx
-     caf:	5e                   	pop    %esi
-     cb0:	5f                   	pop    %edi
-     cb1:	5d                   	pop    %ebp
-     cb2:	c3                   	ret    
-     cb3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     cb7:	90                   	nop
-     cb8:	8b 75 08             	mov    0x8(%ebp),%esi
-     cbb:	8b 45 08             	mov    0x8(%ebp),%eax
-     cbe:	01 de                	add    %ebx,%esi
-     cc0:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
-     cc2:	c6 03 00             	movb   $0x0,(%ebx)
-}
-     cc5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     cc8:	5b                   	pop    %ebx
-     cc9:	5e                   	pop    %esi
-     cca:	5f                   	pop    %edi
-     ccb:	5d                   	pop    %ebp
-     ccc:	c3                   	ret    
-     ccd:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000cd0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
-     cd0:	f3 0f 1e fb          	endbr32 
-     cd4:	55                   	push   %ebp
-     cd5:	89 e5                	mov    %esp,%ebp
-     cd7:	56                   	push   %esi
-     cd8:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
-     cd9:	83 ec 08             	sub    $0x8,%esp
-     cdc:	6a 00                	push   $0x0
-     cde:	ff 75 08             	pushl  0x8(%ebp)
-     ce1:	e8 ed 00 00 00       	call   dd3 <open>
-  if(fd < 0)
-     ce6:	83 c4 10             	add    $0x10,%esp
-     ce9:	85 c0                	test   %eax,%eax
-     ceb:	78 2b                	js     d18 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
-     ced:	83 ec 08             	sub    $0x8,%esp
-     cf0:	ff 75 0c             	pushl  0xc(%ebp)
-     cf3:	89 c3                	mov    %eax,%ebx
-     cf5:	50                   	push   %eax
-     cf6:	e8 f0 00 00 00       	call   deb <fstat>
-  close(fd);
-     cfb:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
-     cfe:	89 c6                	mov    %eax,%esi
-  close(fd);
-     d00:	e8 b6 00 00 00       	call   dbb <close>
-  return r;
-     d05:	83 c4 10             	add    $0x10,%esp
-}
-     d08:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     d0b:	89 f0                	mov    %esi,%eax
-     d0d:	5b                   	pop    %ebx
-     d0e:	5e                   	pop    %esi
-     d0f:	5d                   	pop    %ebp
-     d10:	c3                   	ret    
-     d11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-     d18:	be ff ff ff ff       	mov    $0xffffffff,%esi
-     d1d:	eb e9                	jmp    d08 <stat+0x38>
-     d1f:	90                   	nop
-
-00000d20 <atoi>:
-
-int
-atoi(const char *s)
-{
-     d20:	f3 0f 1e fb          	endbr32 
-     d24:	55                   	push   %ebp
-     d25:	89 e5                	mov    %esp,%ebp
-     d27:	53                   	push   %ebx
-     d28:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
-     d2b:	0f be 02             	movsbl (%edx),%eax
-     d2e:	8d 48 d0             	lea    -0x30(%eax),%ecx
-     d31:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
-     d34:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
-     d39:	77 1a                	ja     d55 <atoi+0x35>
-     d3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     d3f:	90                   	nop
-    n = n*10 + *s++ - '0';
-     d40:	83 c2 01             	add    $0x1,%edx
-     d43:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
-     d46:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
-     d4a:	0f be 02             	movsbl (%edx),%eax
-     d4d:	8d 58 d0             	lea    -0x30(%eax),%ebx
-     d50:	80 fb 09             	cmp    $0x9,%bl
-     d53:	76 eb                	jbe    d40 <atoi+0x20>
-  return n;
-}
-     d55:	89 c8                	mov    %ecx,%eax
-     d57:	5b                   	pop    %ebx
-     d58:	5d                   	pop    %ebp
-     d59:	c3                   	ret    
-     d5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000d60 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
-     d60:	f3 0f 1e fb          	endbr32 
-     d64:	55                   	push   %ebp
-     d65:	89 e5                	mov    %esp,%ebp
-     d67:	57                   	push   %edi
-     d68:	8b 45 10             	mov    0x10(%ebp),%eax
-     d6b:	8b 55 08             	mov    0x8(%ebp),%edx
-     d6e:	56                   	push   %esi
-     d6f:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
-     d72:	85 c0                	test   %eax,%eax
-     d74:	7e 0f                	jle    d85 <memmove+0x25>
-     d76:	01 d0                	add    %edx,%eax
-  dst = vdst;
-     d78:	89 d7                	mov    %edx,%edi
-     d7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
-     d80:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
-     d81:	39 f8                	cmp    %edi,%eax
-     d83:	75 fb                	jne    d80 <memmove+0x20>
-  return vdst;
-}
-     d85:	5e                   	pop    %esi
-     d86:	89 d0                	mov    %edx,%eax
-     d88:	5f                   	pop    %edi
-     d89:	5d                   	pop    %ebp
-     d8a:	c3                   	ret    
-
-00000d8b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
-     d8b:	b8 01 00 00 00       	mov    $0x1,%eax
-     d90:	cd 40                	int    $0x40
-     d92:	c3                   	ret    
-
-00000d93 <exit>:
-SYSCALL(exit)
-     d93:	b8 02 00 00 00       	mov    $0x2,%eax
-     d98:	cd 40                	int    $0x40
-     d9a:	c3                   	ret    
-
-00000d9b <wait>:
-SYSCALL(wait)
-     d9b:	b8 03 00 00 00       	mov    $0x3,%eax
-     da0:	cd 40                	int    $0x40
-     da2:	c3                   	ret    
-
-00000da3 <pipe>:
-SYSCALL(pipe)
-     da3:	b8 04 00 00 00       	mov    $0x4,%eax
-     da8:	cd 40                	int    $0x40
-     daa:	c3                   	ret    
-
-00000dab <read>:
-SYSCALL(read)
-     dab:	b8 05 00 00 00       	mov    $0x5,%eax
-     db0:	cd 40                	int    $0x40
-     db2:	c3                   	ret    
-
-00000db3 <write>:
-SYSCALL(write)
-     db3:	b8 10 00 00 00       	mov    $0x10,%eax
-     db8:	cd 40                	int    $0x40
-     dba:	c3                   	ret    
-
-00000dbb <close>:
-SYSCALL(close)
-     dbb:	b8 15 00 00 00       	mov    $0x15,%eax
-     dc0:	cd 40                	int    $0x40
-     dc2:	c3                   	ret    
-
-00000dc3 <kill>:
-SYSCALL(kill)
-     dc3:	b8 06 00 00 00       	mov    $0x6,%eax
-     dc8:	cd 40                	int    $0x40
-     dca:	c3                   	ret    
-
-00000dcb <exec>:
-SYSCALL(exec)
-     dcb:	b8 07 00 00 00       	mov    $0x7,%eax
-     dd0:	cd 40                	int    $0x40
-     dd2:	c3                   	ret    
-
-00000dd3 <open>:
-SYSCALL(open)
-     dd3:	b8 0f 00 00 00       	mov    $0xf,%eax
-     dd8:	cd 40                	int    $0x40
-     dda:	c3                   	ret    
-
-00000ddb <mknod>:
-SYSCALL(mknod)
-     ddb:	b8 11 00 00 00       	mov    $0x11,%eax
-     de0:	cd 40                	int    $0x40
-     de2:	c3                   	ret    
-
-00000de3 <unlink>:
-SYSCALL(unlink)
-     de3:	b8 12 00 00 00       	mov    $0x12,%eax
-     de8:	cd 40                	int    $0x40
-     dea:	c3                   	ret    
-
-00000deb <fstat>:
-SYSCALL(fstat)
-     deb:	b8 08 00 00 00       	mov    $0x8,%eax
-     df0:	cd 40                	int    $0x40
-     df2:	c3                   	ret    
-
-00000df3 <link>:
-SYSCALL(link)
-     df3:	b8 13 00 00 00       	mov    $0x13,%eax
-     df8:	cd 40                	int    $0x40
-     dfa:	c3                   	ret    
-
-00000dfb <mkdir>:
-SYSCALL(mkdir)
-     dfb:	b8 14 00 00 00       	mov    $0x14,%eax
-     e00:	cd 40                	int    $0x40
-     e02:	c3                   	ret    
-
-00000e03 <chdir>:
-SYSCALL(chdir)
-     e03:	b8 09 00 00 00       	mov    $0x9,%eax
-     e08:	cd 40                	int    $0x40
-     e0a:	c3                   	ret    
-
-00000e0b <dup>:
-SYSCALL(dup)
-     e0b:	b8 0a 00 00 00       	mov    $0xa,%eax
-     e10:	cd 40                	int    $0x40
-     e12:	c3                   	ret    
-
-00000e13 <getpid>:
-SYSCALL(getpid)
-     e13:	b8 0b 00 00 00       	mov    $0xb,%eax
-     e18:	cd 40                	int    $0x40
-     e1a:	c3                   	ret    
-
-00000e1b <sbrk>:
-SYSCALL(sbrk)
-     e1b:	b8 0c 00 00 00       	mov    $0xc,%eax
-     e20:	cd 40                	int    $0x40
-     e22:	c3                   	ret    
-
-00000e23 <sleep>:
-SYSCALL(sleep)
-     e23:	b8 0d 00 00 00       	mov    $0xd,%eax
-     e28:	cd 40                	int    $0x40
-     e2a:	c3                   	ret    
-
-00000e2b <uptime>:
-SYSCALL(uptime)
-     e2b:	b8 0e 00 00 00       	mov    $0xe,%eax
-     e30:	cd 40                	int    $0x40
-     e32:	c3                   	ret    
-
-00000e33 <draw>:
-SYSCALL(draw)
-     e33:	b8 16 00 00 00       	mov    $0x16,%eax
-     e38:	cd 40                	int    $0x40
-     e3a:	c3                   	ret    
-
-00000e3b <thread_create>:
-SYSCALL(thread_create)
-     e3b:	b8 18 00 00 00       	mov    $0x18,%eax
-     e40:	cd 40                	int    $0x40
-     e42:	c3                   	ret    
-
-00000e43 <thread_join>:
-SYSCALL(thread_join)
-     e43:	b8 19 00 00 00       	mov    $0x19,%eax
-     e48:	cd 40                	int    $0x40
-     e4a:	c3                   	ret    
-
-00000e4b <thread_exit>:
-SYSCALL(thread_exit)
-     e4b:	b8 1a 00 00 00       	mov    $0x1a,%eax
-     e50:	cd 40                	int    $0x40
-     e52:	c3                   	ret    
-     e53:	66 90                	xchg   %ax,%ax
-     e55:	66 90                	xchg   %ax,%ax
-     e57:	66 90                	xchg   %ax,%ax
-     e59:	66 90                	xchg   %ax,%ax
-     e5b:	66 90                	xchg   %ax,%ax
-     e5d:	66 90                	xchg   %ax,%ax
-     e5f:	90                   	nop
-
-00000e60 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
-     e60:	55                   	push   %ebp
-     e61:	89 e5                	mov    %esp,%ebp
-     e63:	57                   	push   %edi
-     e64:	56                   	push   %esi
-     e65:	53                   	push   %ebx
-     e66:	83 ec 3c             	sub    $0x3c,%esp
-     e69:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
-     e6c:	89 d1                	mov    %edx,%ecx
-{
-     e6e:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
-     e71:	85 d2                	test   %edx,%edx
-     e73:	0f 89 7f 00 00 00    	jns    ef8 <printint+0x98>
-     e79:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
-     e7d:	74 79                	je     ef8 <printint+0x98>
-    neg = 1;
-     e7f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
-     e86:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
-     e88:	31 db                	xor    %ebx,%ebx
-     e8a:	8d 75 d7             	lea    -0x29(%ebp),%esi
-     e8d:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
-     e90:	89 c8                	mov    %ecx,%eax
-     e92:	31 d2                	xor    %edx,%edx
-     e94:	89 cf                	mov    %ecx,%edi
-     e96:	f7 75 c4             	divl   -0x3c(%ebp)
-     e99:	0f b6 92 68 13 00 00 	movzbl 0x1368(%edx),%edx
-     ea0:	89 45 c0             	mov    %eax,-0x40(%ebp)
-     ea3:	89 d8                	mov    %ebx,%eax
-     ea5:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
-     ea8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
-     eab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
-     eae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
-     eb1:	76 dd                	jbe    e90 <printint+0x30>
-  if(neg)
-     eb3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
-     eb6:	85 c9                	test   %ecx,%ecx
-     eb8:	74 0c                	je     ec6 <printint+0x66>
-    buf[i++] = '-';
-     eba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
-     ebf:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
-     ec1:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
-     ec6:	8b 7d b8             	mov    -0x48(%ebp),%edi
-     ec9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
-     ecd:	eb 07                	jmp    ed6 <printint+0x76>
-     ecf:	90                   	nop
-     ed0:	0f b6 13             	movzbl (%ebx),%edx
-     ed3:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
-     ed6:	83 ec 04             	sub    $0x4,%esp
-     ed9:	88 55 d7             	mov    %dl,-0x29(%ebp)
-     edc:	6a 01                	push   $0x1
-     ede:	56                   	push   %esi
-     edf:	57                   	push   %edi
-     ee0:	e8 ce fe ff ff       	call   db3 <write>
-  while(--i >= 0)
-     ee5:	83 c4 10             	add    $0x10,%esp
-     ee8:	39 de                	cmp    %ebx,%esi
-     eea:	75 e4                	jne    ed0 <printint+0x70>
-    putc(fd, buf[i]);
-}
-     eec:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     eef:	5b                   	pop    %ebx
-     ef0:	5e                   	pop    %esi
-     ef1:	5f                   	pop    %edi
-     ef2:	5d                   	pop    %ebp
-     ef3:	c3                   	ret    
-     ef4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
-     ef8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
-     eff:	eb 87                	jmp    e88 <printint+0x28>
-     f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     f0f:	90                   	nop
-
-00000f10 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
-     f10:	f3 0f 1e fb          	endbr32 
-     f14:	55                   	push   %ebp
-     f15:	89 e5                	mov    %esp,%ebp
-     f17:	57                   	push   %edi
-     f18:	56                   	push   %esi
-     f19:	53                   	push   %ebx
-     f1a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
-     f1d:	8b 75 0c             	mov    0xc(%ebp),%esi
-     f20:	0f b6 1e             	movzbl (%esi),%ebx
-     f23:	84 db                	test   %bl,%bl
-     f25:	0f 84 b4 00 00 00    	je     fdf <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
-     f2b:	8d 45 10             	lea    0x10(%ebp),%eax
-     f2e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
-     f31:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
-     f34:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
-     f36:	89 45 d0             	mov    %eax,-0x30(%ebp)
-     f39:	eb 33                	jmp    f6e <printf+0x5e>
-     f3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     f3f:	90                   	nop
-     f40:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
-     f43:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
-     f48:	83 f8 25             	cmp    $0x25,%eax
-     f4b:	74 17                	je     f64 <printf+0x54>
-  write(fd, &c, 1);
-     f4d:	83 ec 04             	sub    $0x4,%esp
-     f50:	88 5d e7             	mov    %bl,-0x19(%ebp)
-     f53:	6a 01                	push   $0x1
-     f55:	57                   	push   %edi
-     f56:	ff 75 08             	pushl  0x8(%ebp)
-     f59:	e8 55 fe ff ff       	call   db3 <write>
-     f5e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
-     f61:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
-     f64:	0f b6 1e             	movzbl (%esi),%ebx
-     f67:	83 c6 01             	add    $0x1,%esi
-     f6a:	84 db                	test   %bl,%bl
-     f6c:	74 71                	je     fdf <printf+0xcf>
-    c = fmt[i] & 0xff;
-     f6e:	0f be cb             	movsbl %bl,%ecx
-     f71:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
-     f74:	85 d2                	test   %edx,%edx
-     f76:	74 c8                	je     f40 <printf+0x30>
-      }
-    } else if(state == '%'){
-     f78:	83 fa 25             	cmp    $0x25,%edx
-     f7b:	75 e7                	jne    f64 <printf+0x54>
-      if(c == 'd'){
-     f7d:	83 f8 64             	cmp    $0x64,%eax
-     f80:	0f 84 9a 00 00 00    	je     1020 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
-     f86:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
-     f8c:	83 f9 70             	cmp    $0x70,%ecx
-     f8f:	74 5f                	je     ff0 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
-     f91:	83 f8 73             	cmp    $0x73,%eax
-     f94:	0f 84 d6 00 00 00    	je     1070 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
-     f9a:	83 f8 63             	cmp    $0x63,%eax
-     f9d:	0f 84 8d 00 00 00    	je     1030 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
-     fa3:	83 f8 25             	cmp    $0x25,%eax
-     fa6:	0f 84 b4 00 00 00    	je     1060 <printf+0x150>
-  write(fd, &c, 1);
-     fac:	83 ec 04             	sub    $0x4,%esp
-     faf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
-     fb3:	6a 01                	push   $0x1
-     fb5:	57                   	push   %edi
-     fb6:	ff 75 08             	pushl  0x8(%ebp)
-     fb9:	e8 f5 fd ff ff       	call   db3 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
-     fbe:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
-     fc1:	83 c4 0c             	add    $0xc,%esp
-     fc4:	6a 01                	push   $0x1
-     fc6:	83 c6 01             	add    $0x1,%esi
-     fc9:	57                   	push   %edi
-     fca:	ff 75 08             	pushl  0x8(%ebp)
-     fcd:	e8 e1 fd ff ff       	call   db3 <write>
-  for(i = 0; fmt[i]; i++){
-     fd2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
-     fd6:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
-     fd9:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
-     fdb:	84 db                	test   %bl,%bl
-     fdd:	75 8f                	jne    f6e <printf+0x5e>
-    }
-  }
-}
-     fdf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     fe2:	5b                   	pop    %ebx
-     fe3:	5e                   	pop    %esi
-     fe4:	5f                   	pop    %edi
-     fe5:	5d                   	pop    %ebp
-     fe6:	c3                   	ret    
-     fe7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     fee:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
-     ff0:	83 ec 0c             	sub    $0xc,%esp
-     ff3:	b9 10 00 00 00       	mov    $0x10,%ecx
-     ff8:	6a 00                	push   $0x0
-     ffa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-     ffd:	8b 45 08             	mov    0x8(%ebp),%eax
-    1000:	8b 13                	mov    (%ebx),%edx
-    1002:	e8 59 fe ff ff       	call   e60 <printint>
-        ap++;
-    1007:	89 d8                	mov    %ebx,%eax
-    1009:	83 c4 10             	add    $0x10,%esp
-      state = 0;
-    100c:	31 d2                	xor    %edx,%edx
-        ap++;
-    100e:	83 c0 04             	add    $0x4,%eax
-    1011:	89 45 d0             	mov    %eax,-0x30(%ebp)
-    1014:	e9 4b ff ff ff       	jmp    f64 <printf+0x54>
-    1019:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
-    1020:	83 ec 0c             	sub    $0xc,%esp
-    1023:	b9 0a 00 00 00       	mov    $0xa,%ecx
-    1028:	6a 01                	push   $0x1
-    102a:	eb ce                	jmp    ffa <printf+0xea>
-    102c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
-    1030:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
-    1033:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
-    1036:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
-    1038:	6a 01                	push   $0x1
-        ap++;
-    103a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
-    103d:	57                   	push   %edi
-    103e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
-    1041:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
-    1044:	e8 6a fd ff ff       	call   db3 <write>
-        ap++;
-    1049:	89 5d d0             	mov    %ebx,-0x30(%ebp)
-    104c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
-    104f:	31 d2                	xor    %edx,%edx
-    1051:	e9 0e ff ff ff       	jmp    f64 <printf+0x54>
-    1056:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    105d:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
-    1060:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
-    1063:	83 ec 04             	sub    $0x4,%esp
-    1066:	e9 59 ff ff ff       	jmp    fc4 <printf+0xb4>
-    106b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    106f:	90                   	nop
-        s = (char*)*ap;
-    1070:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    1073:	8b 18                	mov    (%eax),%ebx
-        ap++;
-    1075:	83 c0 04             	add    $0x4,%eax
-    1078:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
-    107b:	85 db                	test   %ebx,%ebx
-    107d:	74 17                	je     1096 <printf+0x186>
-        while(*s != 0){
-    107f:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
-    1082:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
-    1084:	84 c0                	test   %al,%al
-    1086:	0f 84 d8 fe ff ff    	je     f64 <printf+0x54>
-    108c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    108f:	89 de                	mov    %ebx,%esi
-    1091:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    1094:	eb 1a                	jmp    10b0 <printf+0x1a0>
-          s = "(null)";
-    1096:	bb 60 13 00 00       	mov    $0x1360,%ebx
-        while(*s != 0){
-    109b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    109e:	b8 28 00 00 00       	mov    $0x28,%eax
-    10a3:	89 de                	mov    %ebx,%esi
-    10a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    10a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    10af:	90                   	nop
-  write(fd, &c, 1);
-    10b0:	83 ec 04             	sub    $0x4,%esp
-          s++;
-    10b3:	83 c6 01             	add    $0x1,%esi
-    10b6:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
-    10b9:	6a 01                	push   $0x1
-    10bb:	57                   	push   %edi
-    10bc:	53                   	push   %ebx
-    10bd:	e8 f1 fc ff ff       	call   db3 <write>
-        while(*s != 0){
-    10c2:	0f b6 06             	movzbl (%esi),%eax
-    10c5:	83 c4 10             	add    $0x10,%esp
-    10c8:	84 c0                	test   %al,%al
-    10ca:	75 e4                	jne    10b0 <printf+0x1a0>
-    10cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
-    10cf:	31 d2                	xor    %edx,%edx
-    10d1:	e9 8e fe ff ff       	jmp    f64 <printf+0x54>
-    10d6:	66 90                	xchg   %ax,%ax
-    10d8:	66 90                	xchg   %ax,%ax
-    10da:	66 90                	xchg   %ax,%ax
-    10dc:	66 90                	xchg   %ax,%ax
-    10de:	66 90                	xchg   %ax,%ax
-
-000010e0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
-    10e0:	f3 0f 1e fb          	endbr32 
-    10e4:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    10e5:	a1 c4 19 00 00       	mov    0x19c4,%eax
-{
-    10ea:	89 e5                	mov    %esp,%ebp
-    10ec:	57                   	push   %edi
-    10ed:	56                   	push   %esi
-    10ee:	53                   	push   %ebx
-    10ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    10f2:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
-    10f4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    10f7:	39 c8                	cmp    %ecx,%eax
-    10f9:	73 15                	jae    1110 <free+0x30>
-    10fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    10ff:	90                   	nop
-    1100:	39 d1                	cmp    %edx,%ecx
-    1102:	72 14                	jb     1118 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1104:	39 d0                	cmp    %edx,%eax
-    1106:	73 10                	jae    1118 <free+0x38>
-{
-    1108:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    110a:	8b 10                	mov    (%eax),%edx
-    110c:	39 c8                	cmp    %ecx,%eax
-    110e:	72 f0                	jb     1100 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1110:	39 d0                	cmp    %edx,%eax
-    1112:	72 f4                	jb     1108 <free+0x28>
-    1114:	39 d1                	cmp    %edx,%ecx
-    1116:	73 f0                	jae    1108 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
-    1118:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    111b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    111e:	39 fa                	cmp    %edi,%edx
-    1120:	74 1e                	je     1140 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
-    1122:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
-    1125:	8b 50 04             	mov    0x4(%eax),%edx
-    1128:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    112b:	39 f1                	cmp    %esi,%ecx
-    112d:	74 28                	je     1157 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
-    112f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
-    1131:	5b                   	pop    %ebx
-  freep = p;
-    1132:	a3 c4 19 00 00       	mov    %eax,0x19c4
-}
-    1137:	5e                   	pop    %esi
-    1138:	5f                   	pop    %edi
-    1139:	5d                   	pop    %ebp
-    113a:	c3                   	ret    
-    113b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    113f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
-    1140:	03 72 04             	add    0x4(%edx),%esi
-    1143:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
-    1146:	8b 10                	mov    (%eax),%edx
-    1148:	8b 12                	mov    (%edx),%edx
-    114a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
-    114d:	8b 50 04             	mov    0x4(%eax),%edx
-    1150:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    1153:	39 f1                	cmp    %esi,%ecx
-    1155:	75 d8                	jne    112f <free+0x4f>
-    p->s.size += bp->s.size;
-    1157:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
-    115a:	a3 c4 19 00 00       	mov    %eax,0x19c4
-    p->s.size += bp->s.size;
-    115f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
-    1162:	8b 53 f8             	mov    -0x8(%ebx),%edx
-    1165:	89 10                	mov    %edx,(%eax)
-}
-    1167:	5b                   	pop    %ebx
-    1168:	5e                   	pop    %esi
-    1169:	5f                   	pop    %edi
-    116a:	5d                   	pop    %ebp
-    116b:	c3                   	ret    
-    116c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00001170 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
-    1170:	f3 0f 1e fb          	endbr32 
-    1174:	55                   	push   %ebp
-    1175:	89 e5                	mov    %esp,%ebp
-    1177:	57                   	push   %edi
-    1178:	56                   	push   %esi
-    1179:	53                   	push   %ebx
-    117a:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    117d:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
-    1180:	8b 3d c4 19 00 00    	mov    0x19c4,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    1186:	8d 70 07             	lea    0x7(%eax),%esi
-    1189:	c1 ee 03             	shr    $0x3,%esi
-    118c:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
-    118f:	85 ff                	test   %edi,%edi
-    1191:	0f 84 a9 00 00 00    	je     1240 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1197:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
-    1199:	8b 48 04             	mov    0x4(%eax),%ecx
-    119c:	39 f1                	cmp    %esi,%ecx
-    119e:	73 6d                	jae    120d <malloc+0x9d>
-    11a0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
-    11a6:	bb 00 10 00 00       	mov    $0x1000,%ebx
-    11ab:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
-    11ae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
-    11b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-    11b8:	eb 17                	jmp    11d1 <malloc+0x61>
-    11ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    11c0:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
-    11c2:	8b 4a 04             	mov    0x4(%edx),%ecx
-    11c5:	39 f1                	cmp    %esi,%ecx
-    11c7:	73 4f                	jae    1218 <malloc+0xa8>
-    11c9:	8b 3d c4 19 00 00    	mov    0x19c4,%edi
-    11cf:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-    11d1:	39 c7                	cmp    %eax,%edi
-    11d3:	75 eb                	jne    11c0 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
-    11d5:	83 ec 0c             	sub    $0xc,%esp
-    11d8:	ff 75 e4             	pushl  -0x1c(%ebp)
-    11db:	e8 3b fc ff ff       	call   e1b <sbrk>
-  if(p == (char*)-1)
-    11e0:	83 c4 10             	add    $0x10,%esp
-    11e3:	83 f8 ff             	cmp    $0xffffffff,%eax
-    11e6:	74 1b                	je     1203 <malloc+0x93>
-  hp->s.size = nu;
-    11e8:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
-    11eb:	83 ec 0c             	sub    $0xc,%esp
-    11ee:	83 c0 08             	add    $0x8,%eax
-    11f1:	50                   	push   %eax
-    11f2:	e8 e9 fe ff ff       	call   10e0 <free>
-  return freep;
-    11f7:	a1 c4 19 00 00       	mov    0x19c4,%eax
-      if((p = morecore(nunits)) == 0)
-    11fc:	83 c4 10             	add    $0x10,%esp
-    11ff:	85 c0                	test   %eax,%eax
-    1201:	75 bd                	jne    11c0 <malloc+0x50>
-        return 0;
-  }
-}
-    1203:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
-    1206:	31 c0                	xor    %eax,%eax
-}
-    1208:	5b                   	pop    %ebx
-    1209:	5e                   	pop    %esi
-    120a:	5f                   	pop    %edi
-    120b:	5d                   	pop    %ebp
-    120c:	c3                   	ret    
-    if(p->s.size >= nunits){
-    120d:	89 c2                	mov    %eax,%edx
-    120f:	89 f8                	mov    %edi,%eax
-    1211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
-    1218:	39 ce                	cmp    %ecx,%esi
-    121a:	74 54                	je     1270 <malloc+0x100>
-        p->s.size -= nunits;
-    121c:	29 f1                	sub    %esi,%ecx
-    121e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
-    1221:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
-    1224:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
-    1227:	a3 c4 19 00 00       	mov    %eax,0x19c4
-}
-    122c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
-    122f:	8d 42 08             	lea    0x8(%edx),%eax
-}
-    1232:	5b                   	pop    %ebx
-    1233:	5e                   	pop    %esi
-    1234:	5f                   	pop    %edi
-    1235:	5d                   	pop    %ebp
-    1236:	c3                   	ret    
-    1237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    123e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
-    1240:	c7 05 c4 19 00 00 c8 	movl   $0x19c8,0x19c4
-    1247:	19 00 00 
-    base.s.size = 0;
-    124a:	bf c8 19 00 00       	mov    $0x19c8,%edi
-    base.s.ptr = freep = prevp = &base;
-    124f:	c7 05 c8 19 00 00 c8 	movl   $0x19c8,0x19c8
-    1256:	19 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1259:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
-    125b:	c7 05 cc 19 00 00 00 	movl   $0x0,0x19cc
-    1262:	00 00 00 
-    if(p->s.size >= nunits){
-    1265:	e9 36 ff ff ff       	jmp    11a0 <malloc+0x30>
-    126a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
-    1270:	8b 0a                	mov    (%edx),%ecx
-    1272:	89 08                	mov    %ecx,(%eax)
-    1274:	eb b1                	jmp    1227 <malloc+0xb7>
diff -ruN xv6-public/sh.c xv6-public-mynew/sh.c
--- xv6-public/sh.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/sh.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,493 +0,0 @@
-// Shell.
-
-#include "types.h"
-#include "user.h"
-#include "fcntl.h"
-
-// Parsed command representation
-#define EXEC  1
-#define REDIR 2
-#define PIPE  3
-#define LIST  4
-#define BACK  5
-
-#define MAXARGS 10
-
-struct cmd {
-  int type;
-};
-
-struct execcmd {
-  int type;
-  char *argv[MAXARGS];
-  char *eargv[MAXARGS];
-};
-
-struct redircmd {
-  int type;
-  struct cmd *cmd;
-  char *file;
-  char *efile;
-  int mode;
-  int fd;
-};
-
-struct pipecmd {
-  int type;
-  struct cmd *left;
-  struct cmd *right;
-};
-
-struct listcmd {
-  int type;
-  struct cmd *left;
-  struct cmd *right;
-};
-
-struct backcmd {
-  int type;
-  struct cmd *cmd;
-};
-
-int fork1(void);  // Fork but panics on failure.
-void panic(char*);
-struct cmd *parsecmd(char*);
-
-// Execute cmd.  Never returns.
-void
-runcmd(struct cmd *cmd)
-{
-  int p[2];
-  struct backcmd *bcmd;
-  struct execcmd *ecmd;
-  struct listcmd *lcmd;
-  struct pipecmd *pcmd;
-  struct redircmd *rcmd;
-
-  if(cmd == 0)
-    exit();
-
-  switch(cmd->type){
-  default:
-    panic("runcmd");
-
-  case EXEC:
-    ecmd = (struct execcmd*)cmd;
-    if(ecmd->argv[0] == 0)
-      exit();
-    exec(ecmd->argv[0], ecmd->argv);
-    printf(2, "exec %s failed\n", ecmd->argv[0]);
-    break;
-
-  case REDIR:
-    rcmd = (struct redircmd*)cmd;
-    close(rcmd->fd);
-    if(open(rcmd->file, rcmd->mode) < 0){
-      printf(2, "open %s failed\n", rcmd->file);
-      exit();
-    }
-    runcmd(rcmd->cmd);
-    break;
-
-  case LIST:
-    lcmd = (struct listcmd*)cmd;
-    if(fork1() == 0)
-      runcmd(lcmd->left);
-    wait();
-    runcmd(lcmd->right);
-    break;
-
-  case PIPE:
-    pcmd = (struct pipecmd*)cmd;
-    if(pipe(p) < 0)
-      panic("pipe");
-    if(fork1() == 0){
-      close(1);
-      dup(p[1]);
-      close(p[0]);
-      close(p[1]);
-      runcmd(pcmd->left);
-    }
-    if(fork1() == 0){
-      close(0);
-      dup(p[0]);
-      close(p[0]);
-      close(p[1]);
-      runcmd(pcmd->right);
-    }
-    close(p[0]);
-    close(p[1]);
-    wait();
-    wait();
-    break;
-
-  case BACK:
-    bcmd = (struct backcmd*)cmd;
-    if(fork1() == 0)
-      runcmd(bcmd->cmd);
-    break;
-  }
-  exit();
-}
-
-int
-getcmd(char *buf, int nbuf)
-{
-  printf(2, "$ ");
-  memset(buf, 0, nbuf);
-  gets(buf, nbuf);
-  if(buf[0] == 0) // EOF
-    return -1;
-  return 0;
-}
-
-int
-main(void)
-{
-  static char buf[100];
-  int fd;
-
-  // Ensure that three file descriptors are open.
-  while((fd = open("console", O_RDWR)) >= 0){
-    if(fd >= 3){
-      close(fd);
-      break;
-    }
-  }
-
-  // Read and run input commands.
-  while(getcmd(buf, sizeof(buf)) >= 0){
-    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      // Chdir must be called by the parent, not the child.
-      buf[strlen(buf)-1] = 0;  // chop \n
-      if(chdir(buf+3) < 0)
-        printf(2, "cannot cd %s\n", buf+3);
-      continue;
-    }
-    if(fork1() == 0)
-      runcmd(parsecmd(buf));
-    wait();
-  }
-  exit();
-}
-
-void
-panic(char *s)
-{
-  printf(2, "%s\n", s);
-  exit();
-}
-
-int
-fork1(void)
-{
-  int pid;
-
-  pid = fork();
-  if(pid == -1)
-    panic("fork");
-  return pid;
-}
-
-//PAGEBREAK!
-// Constructors
-
-struct cmd*
-execcmd(void)
-{
-  struct execcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = EXEC;
-  return (struct cmd*)cmd;
-}
-
-struct cmd*
-redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
-{
-  struct redircmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = REDIR;
-  cmd->cmd = subcmd;
-  cmd->file = file;
-  cmd->efile = efile;
-  cmd->mode = mode;
-  cmd->fd = fd;
-  return (struct cmd*)cmd;
-}
-
-struct cmd*
-pipecmd(struct cmd *left, struct cmd *right)
-{
-  struct pipecmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = PIPE;
-  cmd->left = left;
-  cmd->right = right;
-  return (struct cmd*)cmd;
-}
-
-struct cmd*
-listcmd(struct cmd *left, struct cmd *right)
-{
-  struct listcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = LIST;
-  cmd->left = left;
-  cmd->right = right;
-  return (struct cmd*)cmd;
-}
-
-struct cmd*
-backcmd(struct cmd *subcmd)
-{
-  struct backcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-  memset(cmd, 0, sizeof(*cmd));
-  cmd->type = BACK;
-  cmd->cmd = subcmd;
-  return (struct cmd*)cmd;
-}
-//PAGEBREAK!
-// Parsing
-
-char whitespace[] = " \t\r\n\v";
-char symbols[] = "<|>&;()";
-
-int
-gettoken(char **ps, char *es, char **q, char **eq)
-{
-  char *s;
-  int ret;
-
-  s = *ps;
-  while(s < es && strchr(whitespace, *s))
-    s++;
-  if(q)
-    *q = s;
-  ret = *s;
-  switch(*s){
-  case 0:
-    break;
-  case '|':
-  case '(':
-  case ')':
-  case ';':
-  case '&':
-  case '<':
-    s++;
-    break;
-  case '>':
-    s++;
-    if(*s == '>'){
-      ret = '+';
-      s++;
-    }
-    break;
-  default:
-    ret = 'a';
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-      s++;
-    break;
-  }
-  if(eq)
-    *eq = s;
-
-  while(s < es && strchr(whitespace, *s))
-    s++;
-  *ps = s;
-  return ret;
-}
-
-int
-peek(char **ps, char *es, char *toks)
-{
-  char *s;
-
-  s = *ps;
-  while(s < es && strchr(whitespace, *s))
-    s++;
-  *ps = s;
-  return *s && strchr(toks, *s);
-}
-
-struct cmd *parseline(char**, char*);
-struct cmd *parsepipe(char**, char*);
-struct cmd *parseexec(char**, char*);
-struct cmd *nulterminate(struct cmd*);
-
-struct cmd*
-parsecmd(char *s)
-{
-  char *es;
-  struct cmd *cmd;
-
-  es = s + strlen(s);
-  cmd = parseline(&s, es);
-  peek(&s, es, "");
-  if(s != es){
-    printf(2, "leftovers: %s\n", s);
-    panic("syntax");
-  }
-  nulterminate(cmd);
-  return cmd;
-}
-
-struct cmd*
-parseline(char **ps, char *es)
-{
-  struct cmd *cmd;
-
-  cmd = parsepipe(ps, es);
-  while(peek(ps, es, "&")){
-    gettoken(ps, es, 0, 0);
-    cmd = backcmd(cmd);
-  }
-  if(peek(ps, es, ";")){
-    gettoken(ps, es, 0, 0);
-    cmd = listcmd(cmd, parseline(ps, es));
-  }
-  return cmd;
-}
-
-struct cmd*
-parsepipe(char **ps, char *es)
-{
-  struct cmd *cmd;
-
-  cmd = parseexec(ps, es);
-  if(peek(ps, es, "|")){
-    gettoken(ps, es, 0, 0);
-    cmd = pipecmd(cmd, parsepipe(ps, es));
-  }
-  return cmd;
-}
-
-struct cmd*
-parseredirs(struct cmd *cmd, char **ps, char *es)
-{
-  int tok;
-  char *q, *eq;
-
-  while(peek(ps, es, "<>")){
-    tok = gettoken(ps, es, 0, 0);
-    if(gettoken(ps, es, &q, &eq) != 'a')
-      panic("missing file for redirection");
-    switch(tok){
-    case '<':
-      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
-      break;
-    case '>':
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-      break;
-    case '+':  // >>
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-      break;
-    }
-  }
-  return cmd;
-}
-
-struct cmd*
-parseblock(char **ps, char *es)
-{
-  struct cmd *cmd;
-
-  if(!peek(ps, es, "("))
-    panic("parseblock");
-  gettoken(ps, es, 0, 0);
-  cmd = parseline(ps, es);
-  if(!peek(ps, es, ")"))
-    panic("syntax - missing )");
-  gettoken(ps, es, 0, 0);
-  cmd = parseredirs(cmd, ps, es);
-  return cmd;
-}
-
-struct cmd*
-parseexec(char **ps, char *es)
-{
-  char *q, *eq;
-  int tok, argc;
-  struct execcmd *cmd;
-  struct cmd *ret;
-
-  if(peek(ps, es, "("))
-    return parseblock(ps, es);
-
-  ret = execcmd();
-  cmd = (struct execcmd*)ret;
-
-  argc = 0;
-  ret = parseredirs(ret, ps, es);
-  while(!peek(ps, es, "|)&;")){
-    if((tok=gettoken(ps, es, &q, &eq)) == 0)
-      break;
-    if(tok != 'a')
-      panic("syntax");
-    cmd->argv[argc] = q;
-    cmd->eargv[argc] = eq;
-    argc++;
-    if(argc >= MAXARGS)
-      panic("too many args");
-    ret = parseredirs(ret, ps, es);
-  }
-  cmd->argv[argc] = 0;
-  cmd->eargv[argc] = 0;
-  return ret;
-}
-
-// NUL-terminate all the counted strings.
-struct cmd*
-nulterminate(struct cmd *cmd)
-{
-  int i;
-  struct backcmd *bcmd;
-  struct execcmd *ecmd;
-  struct listcmd *lcmd;
-  struct pipecmd *pcmd;
-  struct redircmd *rcmd;
-
-  if(cmd == 0)
-    return 0;
-
-  switch(cmd->type){
-  case EXEC:
-    ecmd = (struct execcmd*)cmd;
-    for(i=0; ecmd->argv[i]; i++)
-      *ecmd->eargv[i] = 0;
-    break;
-
-  case REDIR:
-    rcmd = (struct redircmd*)cmd;
-    nulterminate(rcmd->cmd);
-    *rcmd->efile = 0;
-    break;
-
-  case PIPE:
-    pcmd = (struct pipecmd*)cmd;
-    nulterminate(pcmd->left);
-    nulterminate(pcmd->right);
-    break;
-
-  case LIST:
-    lcmd = (struct listcmd*)cmd;
-    nulterminate(lcmd->left);
-    nulterminate(lcmd->right);
-    break;
-
-  case BACK:
-    bcmd = (struct backcmd*)cmd;
-    nulterminate(bcmd->cmd);
-    break;
-  }
-  return cmd;
-}
diff -ruN xv6-public/sh.d xv6-public-mynew/sh.d
--- xv6-public/sh.d	2022-09-05 09:51:05.770999153 +0530
+++ xv6-public-mynew/sh.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-sh.o: sh.c /usr/include/stdc-predef.h types.h user.h fcntl.h
Binary files xv6-public/sh.o and xv6-public-mynew/sh.o differ
diff -ruN xv6-public/show1 xv6-public-mynew/show1
--- xv6-public/show1	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/show1	1970-01-01 05:30:00.000000000 +0530
@@ -1,3 +0,0 @@
-#!/bin/sh
-
-runoff1 "$@" | pr.pl -h "xv6/$@" | mpage -m50t50b -o -bLetter -T -t -2 -FLucidaSans-Typewriter83 -L60 >x.ps; gv --swap x.ps
diff -ruN xv6-public/sh.sym xv6-public-mynew/sh.sym
--- xv6-public/sh.sym	2022-09-05 09:51:05.798999154 +0530
+++ xv6-public-mynew/sh.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,83 +0,0 @@
-00000000 .text
-00001278 .rodata
-0000137c .eh_frame
-00001938 .data
-00001960 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 sh.c
-00001960 buf.1135
-00000000 ulib.c
-00000000 printf.c
-00000e60 printint
-00001368 digits.1097
-00000000 umalloc.c
-000019c4 freep
-000019c8 base
-00000b30 strcpy
-00000f10 printf
-00000e4b thread_exit
-00000d60 memmove
-00000ddb mknod
-00000370 execcmd
-00000c50 gets
-00000e13 getpid
-00000850 parsepipe
-00000ac0 parsecmd
-00000470 backcmd
-00000610 peek
-00000690 parseredirs
-000004b0 gettoken
-00001170 malloc
-00000e23 sleep
-00001940 whitespace
-00000340 fork1
-00000a00 nulterminate
-00000da3 pipe
-00000110 getcmd
-00000db3 write
-00000deb fstat
-00000dc3 kill
-00000e03 chdir
-000008c0 parseline
-00000180 runcmd
-00000970 parseblock
-00000dcb exec
-00000d9b wait
-00001938 symbols
-00000dab read
-00000740 parseexec
-00000de3 unlink
-00000160 panic
-00000d8b fork
-00000e1b sbrk
-00000e2b uptime
-00001946 __bss_start
-00000bf0 memset
-00000000 main
-00000b60 strcmp
-00000e0b dup
-000003f0 pipecmd
-000003a0 redircmd
-00000cd0 stat
-00001946 _edata
-000019d0 _end
-00000df3 link
-00000d93 exit
-00000d20 atoi
-00000e33 draw
-00000bb0 strlen
-00000dd3 open
-00000c10 strchr
-00000e3b thread_create
-00000dfb mkdir
-00000dbb close
-00000e43 thread_join
-00000430 listcmd
-000010e0 free
diff -ruN xv6-public/sign.pl xv6-public-mynew/sign.pl
--- xv6-public/sign.pl	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/sign.pl	1970-01-01 05:30:00.000000000 +0530
@@ -1,19 +0,0 @@
-#!/usr/bin/perl
-
-open(SIG, $ARGV[0]) || die "open $ARGV[0]: $!";
-
-$n = sysread(SIG, $buf, 1000);
-
-if($n > 510){
-  print STDERR "boot block too large: $n bytes (max 510)\n";
-  exit 1;
-}
-
-print STDERR "boot block is $n bytes (max 510)\n";
-
-$buf .= "\0" x (510-$n);
-$buf .= "\x55\xAA";
-
-open(SIG, ">$ARGV[0]") || die "open >$ARGV[0]: $!";
-print SIG $buf;
-close SIG;
diff -ruN xv6-public/sleep1.p xv6-public-mynew/sleep1.p
--- xv6-public/sleep1.p	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/sleep1.p	1970-01-01 05:30:00.000000000 +0530
@@ -1,134 +0,0 @@
-/*
-This file defines a Promela model for xv6's
-acquire, release, sleep, and wakeup, along with
-a model of a simple producer/consumer queue.
-
-To run:
-	spinp sleep1.p
-
-(You may need to install Spin, available at http://spinroot.com/.)
-
-After a successful run spin prints something like:
-
-	unreached in proctype consumer
-		(0 of 37 states)
-	unreached in proctype producer
-		(0 of 23 states)
-
-After an unsuccessful run, the spinp script prints
-an execution trace that causes a deadlock.
-
-The safe body of producer reads:
-
-		acquire(lk);
-		x = value; value = x + 1; x = 0;
-		wakeup(0);
-		release(lk);
-		i = i + 1;
-
-If this is changed to:
-
-		x = value; value = x + 1; x = 0;
-		acquire(lk);
-		wakeup(0);
-		release(lk);
-		i = i + 1;
-
-then a deadlock can happen, because the non-atomic
-increment of value conflicts with the non-atomic 
-decrement in consumer, causing value to have a bad value.
-Try this.
-
-If it is changed to:
-
-		acquire(lk);
-		x = value; value = x + 1; x = 0;
-		release(lk);
-		wakeup(0);
-		i = i + 1;
-
-then nothing bad happens: it is okay to wakeup after release
-instead of before, although it seems morally wrong.
-*/
-
-#define ITER 4
-#define N 2
-
-bit lk;
-byte value;
-bit sleeping[N];
-
-inline acquire(x)
-{
-	atomic { x == 0; x = 1 }
-}
-
-inline release(x)
-{
-	assert x==1;
-	x = 0
-}
-
-inline sleep(cond, lk)
-{
-	assert !sleeping[_pid];
-	if
-	:: cond ->
-		skip
-	:: else ->
-		atomic { release(lk); sleeping[_pid] = 1 };
-		sleeping[_pid] == 0;
-		acquire(lk)
-	fi
-}
-
-inline wakeup()
-{
-	w = 0;
-	do
-	:: w < N ->
-		sleeping[w] = 0;
-		w = w + 1
-	:: else ->
-		break
-	od
-}
-
-active[N] proctype consumer()
-{
-	byte i, x;
-	
-	i = 0;
-	do
-	:: i < ITER ->
-		acquire(lk);
-		sleep(value > 0, lk);
-		x = value; value = x - 1; x = 0;
-		release(lk);
-		i = i + 1;
-	:: else ->
-		break
-	od;
-	i = 0;
-	skip
-}
-
-active[N] proctype producer()
-{
-	byte i, x, w;
-	
-	i = 0;
-	do
-	:: i < ITER ->
-		acquire(lk);
-		x = value; value = x + 1; x = 0;
-		release(lk);
-		wakeup();
-		i = i + 1;
-	:: else ->
-		break
-	od;
-	i = 0;
-	skip	
-}
-
diff -ruN xv6-public/sleeplock.c xv6-public-mynew/sleeplock.c
--- xv6-public/sleeplock.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/sleeplock.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,56 +0,0 @@
-// Sleeping locks
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "x86.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "spinlock.h"
-#include "sleeplock.h"
-
-void
-initsleeplock(struct sleeplock *lk, char *name)
-{
-  initlock(&lk->lk, "sleep lock");
-  lk->name = name;
-  lk->locked = 0;
-  lk->pid = 0;
-}
-
-void
-acquiresleep(struct sleeplock *lk)
-{
-  acquire(&lk->lk);
-  while (lk->locked) {
-    sleep(lk, &lk->lk);
-  }
-  lk->locked = 1;
-  lk->pid = myproc()->pid;
-  release(&lk->lk);
-}
-
-void
-releasesleep(struct sleeplock *lk)
-{
-  acquire(&lk->lk);
-  lk->locked = 0;
-  lk->pid = 0;
-  wakeup(lk);
-  release(&lk->lk);
-}
-
-int
-holdingsleep(struct sleeplock *lk)
-{
-  int r;
-  
-  acquire(&lk->lk);
-  r = lk->locked && (lk->pid == myproc()->pid);
-  release(&lk->lk);
-  return r;
-}
-
-
-
diff -ruN xv6-public/sleeplock.d xv6-public-mynew/sleeplock.d
--- xv6-public/sleeplock.d	2022-09-05 09:51:08.214999223 +0530
+++ xv6-public-mynew/sleeplock.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-sleeplock.o: sleeplock.c /usr/include/stdc-predef.h types.h defs.h \
- param.h x86.h memlayout.h mmu.h proc.h spinlock.h sleeplock.h
diff -ruN xv6-public/sleeplock.h xv6-public-mynew/sleeplock.h
--- xv6-public/sleeplock.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/sleeplock.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,10 +0,0 @@
-// Long-term locks for processes
-struct sleeplock {
-  uint locked;       // Is the lock held?
-  struct spinlock lk; // spinlock protecting this sleep lock
-  
-  // For debugging:
-  char *name;        // Name of lock.
-  int pid;           // Process holding lock
-};
-
Binary files xv6-public/sleeplock.o and xv6-public-mynew/sleeplock.o differ
diff -ruN xv6-public/spinlock.c xv6-public-mynew/spinlock.c
--- xv6-public/spinlock.c	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/spinlock.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,126 +0,0 @@
-// Mutual exclusion spin locks.
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "x86.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "spinlock.h"
-
-void
-initlock(struct spinlock *lk, char *name)
-{
-  lk->name = name;
-  lk->locked = 0;
-  lk->cpu = 0;
-}
-
-// Acquire the lock.
-// Loops (spins) until the lock is acquired.
-// Holding a lock for a long time may cause
-// other CPUs to waste time spinning to acquire it.
-void
-acquire(struct spinlock *lk)
-{
-  pushcli(); // disable interrupts to avoid deadlock.
-  if(holding(lk))
-    panic("acquire");
-
-  // The xchg is atomic.
-  while(xchg(&lk->locked, 1) != 0)
-    ;
-
-  // Tell the C compiler and the processor to not move loads or stores
-  // past this point, to ensure that the critical section's memory
-  // references happen after the lock is acquired.
-  __sync_synchronize();
-
-  // Record info about lock acquisition for debugging.
-  lk->cpu = mycpu();
-  getcallerpcs(&lk, lk->pcs);
-}
-
-// Release the lock.
-void
-release(struct spinlock *lk)
-{
-  if(!holding(lk))
-    panic("release");
-
-  lk->pcs[0] = 0;
-  lk->cpu = 0;
-
-  // Tell the C compiler and the processor to not move loads or stores
-  // past this point, to ensure that all the stores in the critical
-  // section are visible to other cores before the lock is released.
-  // Both the C compiler and the hardware may re-order loads and
-  // stores; __sync_synchronize() tells them both not to.
-  __sync_synchronize();
-
-  // Release the lock, equivalent to lk->locked = 0.
-  // This code can't use a C assignment, since it might
-  // not be atomic. A real OS would use C atomics here.
-  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-
-  popcli();
-}
-
-// Record the current call stack in pcs[] by following the %ebp chain.
-void
-getcallerpcs(void *v, uint pcs[])
-{
-  uint *ebp;
-  int i;
-
-  ebp = (uint*)v - 2;
-  for(i = 0; i < 10; i++){
-    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-      break;
-    pcs[i] = ebp[1];     // saved %eip
-    ebp = (uint*)ebp[0]; // saved %ebp
-  }
-  for(; i < 10; i++)
-    pcs[i] = 0;
-}
-
-// Check whether this cpu is holding the lock.
-int
-holding(struct spinlock *lock)
-{
-  int r;
-  pushcli();
-  r = lock->locked && lock->cpu == mycpu();
-  popcli();
-  return r;
-}
-
-
-// Pushcli/popcli are like cli/sti except that they are matched:
-// it takes two popcli to undo two pushcli.  Also, if interrupts
-// are off, then pushcli, popcli leaves them off.
-
-void
-pushcli(void)
-{
-  int eflags;
-
-  eflags = readeflags();
-  cli();
-  if(mycpu()->ncli == 0)
-    mycpu()->intena = eflags & FL_IF;
-  mycpu()->ncli += 1;
-}
-
-void
-popcli(void)
-{
-  if(readeflags()&FL_IF)
-    panic("popcli - interruptible");
-  if(--mycpu()->ncli < 0)
-    panic("popcli");
-  if(mycpu()->ncli == 0 && mycpu()->intena)
-    sti();
-}
-
diff -ruN xv6-public/spinlock.d xv6-public-mynew/spinlock.d
--- xv6-public/spinlock.d	2022-09-05 09:51:08.290999226 +0530
+++ xv6-public-mynew/spinlock.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-spinlock.o: spinlock.c /usr/include/stdc-predef.h types.h defs.h param.h \
- x86.h memlayout.h mmu.h proc.h spinlock.h
diff -ruN xv6-public/spinlock.h xv6-public-mynew/spinlock.h
--- xv6-public/spinlock.h	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/spinlock.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,11 +0,0 @@
-// Mutual exclusion lock.
-struct spinlock {
-  uint locked;       // Is the lock held?
-
-  // For debugging:
-  char *name;        // Name of lock.
-  struct cpu *cpu;   // The cpu holding the lock.
-  uint pcs[10];      // The call stack (an array of program counters)
-                     // that locked the lock.
-};
-
Binary files xv6-public/spinlock.o and xv6-public-mynew/spinlock.o differ
diff -ruN xv6-public/spinp xv6-public-mynew/spinp
--- xv6-public/spinp	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/spinp	1970-01-01 05:30:00.000000000 +0530
@@ -1,16 +0,0 @@
-#!/bin/sh
-
-if [ $# != 1 ] || [ ! -f "$1" ]; then
-	echo 'usage: spinp file.p' 1>&2
-	exit 1
-fi
-
-rm -f $1.trail
-spin -a $1 || exit 1
-cc -DSAFETY -DREACH -DMEMLIM=500 -o pan pan.c
-pan -i
-rm pan.* pan
-if [ -f $1.trail ]; then
-	spin -t -p $1
-fi
-
diff -ruN xv6-public/stat.h xv6-public-mynew/stat.h
--- xv6-public/stat.h	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/stat.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,11 +0,0 @@
-#define T_DIR  1   // Directory
-#define T_FILE 2   // File
-#define T_DEV  3   // Device
-
-struct stat {
-  short type;  // Type of file
-  int dev;     // File system's disk device
-  uint ino;    // Inode number
-  short nlink; // Number of links to file
-  uint size;   // Size of file in bytes
-};
Binary files xv6-public/_stressfs and xv6-public-mynew/_stressfs differ
diff -ruN xv6-public/stressfs.asm xv6-public-mynew/stressfs.asm
--- xv6-public/stressfs.asm	2022-09-05 09:51:05.862999156 +0530
+++ xv6-public-mynew/stressfs.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1316 +0,0 @@
-
-_stressfs:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "fs.h"
-#include "fcntl.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-  int fd, i;
-  char path[] = "stressfs0";
-   b:	b8 30 00 00 00       	mov    $0x30,%eax
-{
-  10:	ff 71 fc             	pushl  -0x4(%ecx)
-  13:	55                   	push   %ebp
-  14:	89 e5                	mov    %esp,%ebp
-  16:	57                   	push   %edi
-  17:	56                   	push   %esi
-  char data[512];
-
-  printf(1, "stressfs starting\n");
-  memset(data, 'a', sizeof(data));
-  18:	8d b5 e8 fd ff ff    	lea    -0x218(%ebp),%esi
-{
-  1e:	53                   	push   %ebx
-
-  for(i = 0; i < 4; i++)
-  1f:	31 db                	xor    %ebx,%ebx
-{
-  21:	51                   	push   %ecx
-  22:	81 ec 20 02 00 00    	sub    $0x220,%esp
-  char path[] = "stressfs0";
-  28:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
-  printf(1, "stressfs starting\n");
-  2f:	68 88 08 00 00       	push   $0x888
-  34:	6a 01                	push   $0x1
-  char path[] = "stressfs0";
-  36:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
-  3d:	74 72 65 
-  40:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
-  47:	73 66 73 
-  printf(1, "stressfs starting\n");
-  4a:	e8 d1 04 00 00       	call   520 <printf>
-  memset(data, 'a', sizeof(data));
-  4f:	83 c4 0c             	add    $0xc,%esp
-  52:	68 00 02 00 00       	push   $0x200
-  57:	6a 61                	push   $0x61
-  59:	56                   	push   %esi
-  5a:	e8 a1 01 00 00       	call   200 <memset>
-  5f:	83 c4 10             	add    $0x10,%esp
-    if(fork() > 0)
-  62:	e8 34 03 00 00       	call   39b <fork>
-  67:	85 c0                	test   %eax,%eax
-  69:	0f 8f bb 00 00 00    	jg     12a <main+0x12a>
-  for(i = 0; i < 4; i++)
-  6f:	83 c3 01             	add    $0x1,%ebx
-  72:	83 fb 04             	cmp    $0x4,%ebx
-  75:	75 eb                	jne    62 <main+0x62>
-  77:	bf 04 00 00 00       	mov    $0x4,%edi
-      break;
-
-  printf(1, "write %d\n", i);
-  7c:	83 ec 04             	sub    $0x4,%esp
-  7f:	53                   	push   %ebx
-
-  path[8] += i;
-  fd = open(path, O_CREATE | O_RDWR);
-  80:	bb 14 00 00 00       	mov    $0x14,%ebx
-  printf(1, "write %d\n", i);
-  85:	68 9b 08 00 00       	push   $0x89b
-  8a:	6a 01                	push   $0x1
-  8c:	e8 8f 04 00 00       	call   520 <printf>
-  path[8] += i;
-  91:	89 f8                	mov    %edi,%eax
-  fd = open(path, O_CREATE | O_RDWR);
-  93:	5f                   	pop    %edi
-  path[8] += i;
-  94:	00 85 e6 fd ff ff    	add    %al,-0x21a(%ebp)
-  fd = open(path, O_CREATE | O_RDWR);
-  9a:	58                   	pop    %eax
-  9b:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
-  a1:	68 02 02 00 00       	push   $0x202
-  a6:	50                   	push   %eax
-  a7:	e8 37 03 00 00       	call   3e3 <open>
-  ac:	83 c4 10             	add    $0x10,%esp
-  af:	89 c7                	mov    %eax,%edi
-  for(i = 0; i < 20; i++)
-  b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-//    printf(fd, "%d\n", i);
-    write(fd, data, sizeof(data));
-  b8:	83 ec 04             	sub    $0x4,%esp
-  bb:	68 00 02 00 00       	push   $0x200
-  c0:	56                   	push   %esi
-  c1:	57                   	push   %edi
-  c2:	e8 fc 02 00 00       	call   3c3 <write>
-  for(i = 0; i < 20; i++)
-  c7:	83 c4 10             	add    $0x10,%esp
-  ca:	83 eb 01             	sub    $0x1,%ebx
-  cd:	75 e9                	jne    b8 <main+0xb8>
-  close(fd);
-  cf:	83 ec 0c             	sub    $0xc,%esp
-  d2:	57                   	push   %edi
-  d3:	e8 f3 02 00 00       	call   3cb <close>
-
-  printf(1, "read\n");
-  d8:	58                   	pop    %eax
-  d9:	5a                   	pop    %edx
-  da:	68 a5 08 00 00       	push   $0x8a5
-  df:	6a 01                	push   $0x1
-  e1:	e8 3a 04 00 00       	call   520 <printf>
-
-  fd = open(path, O_RDONLY);
-  e6:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
-  ec:	59                   	pop    %ecx
-  ed:	5b                   	pop    %ebx
-  ee:	6a 00                	push   $0x0
-  f0:	bb 14 00 00 00       	mov    $0x14,%ebx
-  f5:	50                   	push   %eax
-  f6:	e8 e8 02 00 00       	call   3e3 <open>
-  fb:	83 c4 10             	add    $0x10,%esp
-  fe:	89 c7                	mov    %eax,%edi
-  for (i = 0; i < 20; i++)
-    read(fd, data, sizeof(data));
- 100:	83 ec 04             	sub    $0x4,%esp
- 103:	68 00 02 00 00       	push   $0x200
- 108:	56                   	push   %esi
- 109:	57                   	push   %edi
- 10a:	e8 ac 02 00 00       	call   3bb <read>
-  for (i = 0; i < 20; i++)
- 10f:	83 c4 10             	add    $0x10,%esp
- 112:	83 eb 01             	sub    $0x1,%ebx
- 115:	75 e9                	jne    100 <main+0x100>
-  close(fd);
- 117:	83 ec 0c             	sub    $0xc,%esp
- 11a:	57                   	push   %edi
- 11b:	e8 ab 02 00 00       	call   3cb <close>
-
-  wait();
- 120:	e8 86 02 00 00       	call   3ab <wait>
-
-  exit();
- 125:	e8 79 02 00 00       	call   3a3 <exit>
- 12a:	89 df                	mov    %ebx,%edi
- 12c:	e9 4b ff ff ff       	jmp    7c <main+0x7c>
- 131:	66 90                	xchg   %ax,%ax
- 133:	66 90                	xchg   %ax,%ax
- 135:	66 90                	xchg   %ax,%ax
- 137:	66 90                	xchg   %ax,%ax
- 139:	66 90                	xchg   %ax,%ax
- 13b:	66 90                	xchg   %ax,%ax
- 13d:	66 90                	xchg   %ax,%ax
- 13f:	90                   	nop
-
-00000140 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 140:	f3 0f 1e fb          	endbr32 
- 144:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 145:	31 c0                	xor    %eax,%eax
-{
- 147:	89 e5                	mov    %esp,%ebp
- 149:	53                   	push   %ebx
- 14a:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 14d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
- 150:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 154:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 157:	83 c0 01             	add    $0x1,%eax
- 15a:	84 d2                	test   %dl,%dl
- 15c:	75 f2                	jne    150 <strcpy+0x10>
-    ;
-  return os;
-}
- 15e:	89 c8                	mov    %ecx,%eax
- 160:	5b                   	pop    %ebx
- 161:	5d                   	pop    %ebp
- 162:	c3                   	ret    
- 163:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000170 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 170:	f3 0f 1e fb          	endbr32 
- 174:	55                   	push   %ebp
- 175:	89 e5                	mov    %esp,%ebp
- 177:	53                   	push   %ebx
- 178:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 17b:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
- 17e:	0f b6 01             	movzbl (%ecx),%eax
- 181:	0f b6 1a             	movzbl (%edx),%ebx
- 184:	84 c0                	test   %al,%al
- 186:	75 19                	jne    1a1 <strcmp+0x31>
- 188:	eb 26                	jmp    1b0 <strcmp+0x40>
- 18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 190:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
- 194:	83 c1 01             	add    $0x1,%ecx
- 197:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
- 19a:	0f b6 1a             	movzbl (%edx),%ebx
- 19d:	84 c0                	test   %al,%al
- 19f:	74 0f                	je     1b0 <strcmp+0x40>
- 1a1:	38 d8                	cmp    %bl,%al
- 1a3:	74 eb                	je     190 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
- 1a5:	29 d8                	sub    %ebx,%eax
-}
- 1a7:	5b                   	pop    %ebx
- 1a8:	5d                   	pop    %ebp
- 1a9:	c3                   	ret    
- 1aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 1b0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
- 1b2:	29 d8                	sub    %ebx,%eax
-}
- 1b4:	5b                   	pop    %ebx
- 1b5:	5d                   	pop    %ebp
- 1b6:	c3                   	ret    
- 1b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1be:	66 90                	xchg   %ax,%ax
-
-000001c0 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 1c0:	f3 0f 1e fb          	endbr32 
- 1c4:	55                   	push   %ebp
- 1c5:	89 e5                	mov    %esp,%ebp
- 1c7:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 1ca:	80 3a 00             	cmpb   $0x0,(%edx)
- 1cd:	74 21                	je     1f0 <strlen+0x30>
- 1cf:	31 c0                	xor    %eax,%eax
- 1d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1d8:	83 c0 01             	add    $0x1,%eax
- 1db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 1df:	89 c1                	mov    %eax,%ecx
- 1e1:	75 f5                	jne    1d8 <strlen+0x18>
-    ;
-  return n;
-}
- 1e3:	89 c8                	mov    %ecx,%eax
- 1e5:	5d                   	pop    %ebp
- 1e6:	c3                   	ret    
- 1e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1ee:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 1f0:	31 c9                	xor    %ecx,%ecx
-}
- 1f2:	5d                   	pop    %ebp
- 1f3:	89 c8                	mov    %ecx,%eax
- 1f5:	c3                   	ret    
- 1f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1fd:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000200 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 200:	f3 0f 1e fb          	endbr32 
- 204:	55                   	push   %ebp
- 205:	89 e5                	mov    %esp,%ebp
- 207:	57                   	push   %edi
- 208:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 20b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 20e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 211:	89 d7                	mov    %edx,%edi
- 213:	fc                   	cld    
- 214:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 216:	89 d0                	mov    %edx,%eax
- 218:	5f                   	pop    %edi
- 219:	5d                   	pop    %ebp
- 21a:	c3                   	ret    
- 21b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 21f:	90                   	nop
-
-00000220 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 220:	f3 0f 1e fb          	endbr32 
- 224:	55                   	push   %ebp
- 225:	89 e5                	mov    %esp,%ebp
- 227:	8b 45 08             	mov    0x8(%ebp),%eax
- 22a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 22e:	0f b6 10             	movzbl (%eax),%edx
- 231:	84 d2                	test   %dl,%dl
- 233:	75 16                	jne    24b <strchr+0x2b>
- 235:	eb 21                	jmp    258 <strchr+0x38>
- 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 23e:	66 90                	xchg   %ax,%ax
- 240:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 244:	83 c0 01             	add    $0x1,%eax
- 247:	84 d2                	test   %dl,%dl
- 249:	74 0d                	je     258 <strchr+0x38>
-    if(*s == c)
- 24b:	38 d1                	cmp    %dl,%cl
- 24d:	75 f1                	jne    240 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 24f:	5d                   	pop    %ebp
- 250:	c3                   	ret    
- 251:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 258:	31 c0                	xor    %eax,%eax
-}
- 25a:	5d                   	pop    %ebp
- 25b:	c3                   	ret    
- 25c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000260 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 260:	f3 0f 1e fb          	endbr32 
- 264:	55                   	push   %ebp
- 265:	89 e5                	mov    %esp,%ebp
- 267:	57                   	push   %edi
- 268:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 269:	31 f6                	xor    %esi,%esi
-{
- 26b:	53                   	push   %ebx
- 26c:	89 f3                	mov    %esi,%ebx
- 26e:	83 ec 1c             	sub    $0x1c,%esp
- 271:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 274:	eb 33                	jmp    2a9 <gets+0x49>
- 276:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 27d:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 280:	83 ec 04             	sub    $0x4,%esp
- 283:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 286:	6a 01                	push   $0x1
- 288:	50                   	push   %eax
- 289:	6a 00                	push   $0x0
- 28b:	e8 2b 01 00 00       	call   3bb <read>
-    if(cc < 1)
- 290:	83 c4 10             	add    $0x10,%esp
- 293:	85 c0                	test   %eax,%eax
- 295:	7e 1c                	jle    2b3 <gets+0x53>
-      break;
-    buf[i++] = c;
- 297:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 29b:	83 c7 01             	add    $0x1,%edi
- 29e:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 2a1:	3c 0a                	cmp    $0xa,%al
- 2a3:	74 23                	je     2c8 <gets+0x68>
- 2a5:	3c 0d                	cmp    $0xd,%al
- 2a7:	74 1f                	je     2c8 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 2a9:	83 c3 01             	add    $0x1,%ebx
- 2ac:	89 fe                	mov    %edi,%esi
- 2ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 2b1:	7c cd                	jl     280 <gets+0x20>
- 2b3:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 2b5:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 2b8:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 2bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 2be:	5b                   	pop    %ebx
- 2bf:	5e                   	pop    %esi
- 2c0:	5f                   	pop    %edi
- 2c1:	5d                   	pop    %ebp
- 2c2:	c3                   	ret    
- 2c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 2c7:	90                   	nop
- 2c8:	8b 75 08             	mov    0x8(%ebp),%esi
- 2cb:	8b 45 08             	mov    0x8(%ebp),%eax
- 2ce:	01 de                	add    %ebx,%esi
- 2d0:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 2d2:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 2d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 2d8:	5b                   	pop    %ebx
- 2d9:	5e                   	pop    %esi
- 2da:	5f                   	pop    %edi
- 2db:	5d                   	pop    %ebp
- 2dc:	c3                   	ret    
- 2dd:	8d 76 00             	lea    0x0(%esi),%esi
-
-000002e0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 2e0:	f3 0f 1e fb          	endbr32 
- 2e4:	55                   	push   %ebp
- 2e5:	89 e5                	mov    %esp,%ebp
- 2e7:	56                   	push   %esi
- 2e8:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 2e9:	83 ec 08             	sub    $0x8,%esp
- 2ec:	6a 00                	push   $0x0
- 2ee:	ff 75 08             	pushl  0x8(%ebp)
- 2f1:	e8 ed 00 00 00       	call   3e3 <open>
-  if(fd < 0)
- 2f6:	83 c4 10             	add    $0x10,%esp
- 2f9:	85 c0                	test   %eax,%eax
- 2fb:	78 2b                	js     328 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 2fd:	83 ec 08             	sub    $0x8,%esp
- 300:	ff 75 0c             	pushl  0xc(%ebp)
- 303:	89 c3                	mov    %eax,%ebx
- 305:	50                   	push   %eax
- 306:	e8 f0 00 00 00       	call   3fb <fstat>
-  close(fd);
- 30b:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 30e:	89 c6                	mov    %eax,%esi
-  close(fd);
- 310:	e8 b6 00 00 00       	call   3cb <close>
-  return r;
- 315:	83 c4 10             	add    $0x10,%esp
-}
- 318:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 31b:	89 f0                	mov    %esi,%eax
- 31d:	5b                   	pop    %ebx
- 31e:	5e                   	pop    %esi
- 31f:	5d                   	pop    %ebp
- 320:	c3                   	ret    
- 321:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 328:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 32d:	eb e9                	jmp    318 <stat+0x38>
- 32f:	90                   	nop
-
-00000330 <atoi>:
-
-int
-atoi(const char *s)
-{
- 330:	f3 0f 1e fb          	endbr32 
- 334:	55                   	push   %ebp
- 335:	89 e5                	mov    %esp,%ebp
- 337:	53                   	push   %ebx
- 338:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 33b:	0f be 02             	movsbl (%edx),%eax
- 33e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 341:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 344:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 349:	77 1a                	ja     365 <atoi+0x35>
- 34b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 34f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 350:	83 c2 01             	add    $0x1,%edx
- 353:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 356:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 35a:	0f be 02             	movsbl (%edx),%eax
- 35d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 360:	80 fb 09             	cmp    $0x9,%bl
- 363:	76 eb                	jbe    350 <atoi+0x20>
-  return n;
-}
- 365:	89 c8                	mov    %ecx,%eax
- 367:	5b                   	pop    %ebx
- 368:	5d                   	pop    %ebp
- 369:	c3                   	ret    
- 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000370 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 370:	f3 0f 1e fb          	endbr32 
- 374:	55                   	push   %ebp
- 375:	89 e5                	mov    %esp,%ebp
- 377:	57                   	push   %edi
- 378:	8b 45 10             	mov    0x10(%ebp),%eax
- 37b:	8b 55 08             	mov    0x8(%ebp),%edx
- 37e:	56                   	push   %esi
- 37f:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 382:	85 c0                	test   %eax,%eax
- 384:	7e 0f                	jle    395 <memmove+0x25>
- 386:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 388:	89 d7                	mov    %edx,%edi
- 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 390:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 391:	39 f8                	cmp    %edi,%eax
- 393:	75 fb                	jne    390 <memmove+0x20>
-  return vdst;
-}
- 395:	5e                   	pop    %esi
- 396:	89 d0                	mov    %edx,%eax
- 398:	5f                   	pop    %edi
- 399:	5d                   	pop    %ebp
- 39a:	c3                   	ret    
-
-0000039b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 39b:	b8 01 00 00 00       	mov    $0x1,%eax
- 3a0:	cd 40                	int    $0x40
- 3a2:	c3                   	ret    
-
-000003a3 <exit>:
-SYSCALL(exit)
- 3a3:	b8 02 00 00 00       	mov    $0x2,%eax
- 3a8:	cd 40                	int    $0x40
- 3aa:	c3                   	ret    
-
-000003ab <wait>:
-SYSCALL(wait)
- 3ab:	b8 03 00 00 00       	mov    $0x3,%eax
- 3b0:	cd 40                	int    $0x40
- 3b2:	c3                   	ret    
-
-000003b3 <pipe>:
-SYSCALL(pipe)
- 3b3:	b8 04 00 00 00       	mov    $0x4,%eax
- 3b8:	cd 40                	int    $0x40
- 3ba:	c3                   	ret    
-
-000003bb <read>:
-SYSCALL(read)
- 3bb:	b8 05 00 00 00       	mov    $0x5,%eax
- 3c0:	cd 40                	int    $0x40
- 3c2:	c3                   	ret    
-
-000003c3 <write>:
-SYSCALL(write)
- 3c3:	b8 10 00 00 00       	mov    $0x10,%eax
- 3c8:	cd 40                	int    $0x40
- 3ca:	c3                   	ret    
-
-000003cb <close>:
-SYSCALL(close)
- 3cb:	b8 15 00 00 00       	mov    $0x15,%eax
- 3d0:	cd 40                	int    $0x40
- 3d2:	c3                   	ret    
-
-000003d3 <kill>:
-SYSCALL(kill)
- 3d3:	b8 06 00 00 00       	mov    $0x6,%eax
- 3d8:	cd 40                	int    $0x40
- 3da:	c3                   	ret    
-
-000003db <exec>:
-SYSCALL(exec)
- 3db:	b8 07 00 00 00       	mov    $0x7,%eax
- 3e0:	cd 40                	int    $0x40
- 3e2:	c3                   	ret    
-
-000003e3 <open>:
-SYSCALL(open)
- 3e3:	b8 0f 00 00 00       	mov    $0xf,%eax
- 3e8:	cd 40                	int    $0x40
- 3ea:	c3                   	ret    
-
-000003eb <mknod>:
-SYSCALL(mknod)
- 3eb:	b8 11 00 00 00       	mov    $0x11,%eax
- 3f0:	cd 40                	int    $0x40
- 3f2:	c3                   	ret    
-
-000003f3 <unlink>:
-SYSCALL(unlink)
- 3f3:	b8 12 00 00 00       	mov    $0x12,%eax
- 3f8:	cd 40                	int    $0x40
- 3fa:	c3                   	ret    
-
-000003fb <fstat>:
-SYSCALL(fstat)
- 3fb:	b8 08 00 00 00       	mov    $0x8,%eax
- 400:	cd 40                	int    $0x40
- 402:	c3                   	ret    
-
-00000403 <link>:
-SYSCALL(link)
- 403:	b8 13 00 00 00       	mov    $0x13,%eax
- 408:	cd 40                	int    $0x40
- 40a:	c3                   	ret    
-
-0000040b <mkdir>:
-SYSCALL(mkdir)
- 40b:	b8 14 00 00 00       	mov    $0x14,%eax
- 410:	cd 40                	int    $0x40
- 412:	c3                   	ret    
-
-00000413 <chdir>:
-SYSCALL(chdir)
- 413:	b8 09 00 00 00       	mov    $0x9,%eax
- 418:	cd 40                	int    $0x40
- 41a:	c3                   	ret    
-
-0000041b <dup>:
-SYSCALL(dup)
- 41b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 420:	cd 40                	int    $0x40
- 422:	c3                   	ret    
-
-00000423 <getpid>:
-SYSCALL(getpid)
- 423:	b8 0b 00 00 00       	mov    $0xb,%eax
- 428:	cd 40                	int    $0x40
- 42a:	c3                   	ret    
-
-0000042b <sbrk>:
-SYSCALL(sbrk)
- 42b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 430:	cd 40                	int    $0x40
- 432:	c3                   	ret    
-
-00000433 <sleep>:
-SYSCALL(sleep)
- 433:	b8 0d 00 00 00       	mov    $0xd,%eax
- 438:	cd 40                	int    $0x40
- 43a:	c3                   	ret    
-
-0000043b <uptime>:
-SYSCALL(uptime)
- 43b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 440:	cd 40                	int    $0x40
- 442:	c3                   	ret    
-
-00000443 <draw>:
-SYSCALL(draw)
- 443:	b8 16 00 00 00       	mov    $0x16,%eax
- 448:	cd 40                	int    $0x40
- 44a:	c3                   	ret    
-
-0000044b <thread_create>:
-SYSCALL(thread_create)
- 44b:	b8 18 00 00 00       	mov    $0x18,%eax
- 450:	cd 40                	int    $0x40
- 452:	c3                   	ret    
-
-00000453 <thread_join>:
-SYSCALL(thread_join)
- 453:	b8 19 00 00 00       	mov    $0x19,%eax
- 458:	cd 40                	int    $0x40
- 45a:	c3                   	ret    
-
-0000045b <thread_exit>:
-SYSCALL(thread_exit)
- 45b:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 460:	cd 40                	int    $0x40
- 462:	c3                   	ret    
- 463:	66 90                	xchg   %ax,%ax
- 465:	66 90                	xchg   %ax,%ax
- 467:	66 90                	xchg   %ax,%ax
- 469:	66 90                	xchg   %ax,%ax
- 46b:	66 90                	xchg   %ax,%ax
- 46d:	66 90                	xchg   %ax,%ax
- 46f:	90                   	nop
-
-00000470 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 470:	55                   	push   %ebp
- 471:	89 e5                	mov    %esp,%ebp
- 473:	57                   	push   %edi
- 474:	56                   	push   %esi
- 475:	53                   	push   %ebx
- 476:	83 ec 3c             	sub    $0x3c,%esp
- 479:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 47c:	89 d1                	mov    %edx,%ecx
-{
- 47e:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 481:	85 d2                	test   %edx,%edx
- 483:	0f 89 7f 00 00 00    	jns    508 <printint+0x98>
- 489:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 48d:	74 79                	je     508 <printint+0x98>
-    neg = 1;
- 48f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 496:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 498:	31 db                	xor    %ebx,%ebx
- 49a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 49d:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 4a0:	89 c8                	mov    %ecx,%eax
- 4a2:	31 d2                	xor    %edx,%edx
- 4a4:	89 cf                	mov    %ecx,%edi
- 4a6:	f7 75 c4             	divl   -0x3c(%ebp)
- 4a9:	0f b6 92 b4 08 00 00 	movzbl 0x8b4(%edx),%edx
- 4b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 4b3:	89 d8                	mov    %ebx,%eax
- 4b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 4b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 4bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 4be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 4c1:	76 dd                	jbe    4a0 <printint+0x30>
-  if(neg)
- 4c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 4c6:	85 c9                	test   %ecx,%ecx
- 4c8:	74 0c                	je     4d6 <printint+0x66>
-    buf[i++] = '-';
- 4ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 4cf:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 4d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 4d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 4d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 4dd:	eb 07                	jmp    4e6 <printint+0x76>
- 4df:	90                   	nop
- 4e0:	0f b6 13             	movzbl (%ebx),%edx
- 4e3:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 4e6:	83 ec 04             	sub    $0x4,%esp
- 4e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 4ec:	6a 01                	push   $0x1
- 4ee:	56                   	push   %esi
- 4ef:	57                   	push   %edi
- 4f0:	e8 ce fe ff ff       	call   3c3 <write>
-  while(--i >= 0)
- 4f5:	83 c4 10             	add    $0x10,%esp
- 4f8:	39 de                	cmp    %ebx,%esi
- 4fa:	75 e4                	jne    4e0 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 4fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4ff:	5b                   	pop    %ebx
- 500:	5e                   	pop    %esi
- 501:	5f                   	pop    %edi
- 502:	5d                   	pop    %ebp
- 503:	c3                   	ret    
- 504:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 508:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 50f:	eb 87                	jmp    498 <printint+0x28>
- 511:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 518:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 51f:	90                   	nop
-
-00000520 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 520:	f3 0f 1e fb          	endbr32 
- 524:	55                   	push   %ebp
- 525:	89 e5                	mov    %esp,%ebp
- 527:	57                   	push   %edi
- 528:	56                   	push   %esi
- 529:	53                   	push   %ebx
- 52a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 52d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 530:	0f b6 1e             	movzbl (%esi),%ebx
- 533:	84 db                	test   %bl,%bl
- 535:	0f 84 b4 00 00 00    	je     5ef <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 53b:	8d 45 10             	lea    0x10(%ebp),%eax
- 53e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 541:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 544:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 546:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 549:	eb 33                	jmp    57e <printf+0x5e>
- 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 54f:	90                   	nop
- 550:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 553:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 558:	83 f8 25             	cmp    $0x25,%eax
- 55b:	74 17                	je     574 <printf+0x54>
-  write(fd, &c, 1);
- 55d:	83 ec 04             	sub    $0x4,%esp
- 560:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 563:	6a 01                	push   $0x1
- 565:	57                   	push   %edi
- 566:	ff 75 08             	pushl  0x8(%ebp)
- 569:	e8 55 fe ff ff       	call   3c3 <write>
- 56e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 571:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 574:	0f b6 1e             	movzbl (%esi),%ebx
- 577:	83 c6 01             	add    $0x1,%esi
- 57a:	84 db                	test   %bl,%bl
- 57c:	74 71                	je     5ef <printf+0xcf>
-    c = fmt[i] & 0xff;
- 57e:	0f be cb             	movsbl %bl,%ecx
- 581:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 584:	85 d2                	test   %edx,%edx
- 586:	74 c8                	je     550 <printf+0x30>
-      }
-    } else if(state == '%'){
- 588:	83 fa 25             	cmp    $0x25,%edx
- 58b:	75 e7                	jne    574 <printf+0x54>
-      if(c == 'd'){
- 58d:	83 f8 64             	cmp    $0x64,%eax
- 590:	0f 84 9a 00 00 00    	je     630 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 596:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 59c:	83 f9 70             	cmp    $0x70,%ecx
- 59f:	74 5f                	je     600 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 5a1:	83 f8 73             	cmp    $0x73,%eax
- 5a4:	0f 84 d6 00 00 00    	je     680 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 5aa:	83 f8 63             	cmp    $0x63,%eax
- 5ad:	0f 84 8d 00 00 00    	je     640 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 5b3:	83 f8 25             	cmp    $0x25,%eax
- 5b6:	0f 84 b4 00 00 00    	je     670 <printf+0x150>
-  write(fd, &c, 1);
- 5bc:	83 ec 04             	sub    $0x4,%esp
- 5bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 5c3:	6a 01                	push   $0x1
- 5c5:	57                   	push   %edi
- 5c6:	ff 75 08             	pushl  0x8(%ebp)
- 5c9:	e8 f5 fd ff ff       	call   3c3 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 5ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 5d1:	83 c4 0c             	add    $0xc,%esp
- 5d4:	6a 01                	push   $0x1
- 5d6:	83 c6 01             	add    $0x1,%esi
- 5d9:	57                   	push   %edi
- 5da:	ff 75 08             	pushl  0x8(%ebp)
- 5dd:	e8 e1 fd ff ff       	call   3c3 <write>
-  for(i = 0; fmt[i]; i++){
- 5e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 5e6:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 5e9:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 5eb:	84 db                	test   %bl,%bl
- 5ed:	75 8f                	jne    57e <printf+0x5e>
-    }
-  }
-}
- 5ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 5f2:	5b                   	pop    %ebx
- 5f3:	5e                   	pop    %esi
- 5f4:	5f                   	pop    %edi
- 5f5:	5d                   	pop    %ebp
- 5f6:	c3                   	ret    
- 5f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5fe:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 600:	83 ec 0c             	sub    $0xc,%esp
- 603:	b9 10 00 00 00       	mov    $0x10,%ecx
- 608:	6a 00                	push   $0x0
- 60a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 60d:	8b 45 08             	mov    0x8(%ebp),%eax
- 610:	8b 13                	mov    (%ebx),%edx
- 612:	e8 59 fe ff ff       	call   470 <printint>
-        ap++;
- 617:	89 d8                	mov    %ebx,%eax
- 619:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 61c:	31 d2                	xor    %edx,%edx
-        ap++;
- 61e:	83 c0 04             	add    $0x4,%eax
- 621:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 624:	e9 4b ff ff ff       	jmp    574 <printf+0x54>
- 629:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 630:	83 ec 0c             	sub    $0xc,%esp
- 633:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 638:	6a 01                	push   $0x1
- 63a:	eb ce                	jmp    60a <printf+0xea>
- 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 640:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 643:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 646:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 648:	6a 01                	push   $0x1
-        ap++;
- 64a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 64d:	57                   	push   %edi
- 64e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 651:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 654:	e8 6a fd ff ff       	call   3c3 <write>
-        ap++;
- 659:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 65c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 65f:	31 d2                	xor    %edx,%edx
- 661:	e9 0e ff ff ff       	jmp    574 <printf+0x54>
- 666:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 66d:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 670:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 673:	83 ec 04             	sub    $0x4,%esp
- 676:	e9 59 ff ff ff       	jmp    5d4 <printf+0xb4>
- 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 67f:	90                   	nop
-        s = (char*)*ap;
- 680:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 683:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 685:	83 c0 04             	add    $0x4,%eax
- 688:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 68b:	85 db                	test   %ebx,%ebx
- 68d:	74 17                	je     6a6 <printf+0x186>
-        while(*s != 0){
- 68f:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 692:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 694:	84 c0                	test   %al,%al
- 696:	0f 84 d8 fe ff ff    	je     574 <printf+0x54>
- 69c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 69f:	89 de                	mov    %ebx,%esi
- 6a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6a4:	eb 1a                	jmp    6c0 <printf+0x1a0>
-          s = "(null)";
- 6a6:	bb ab 08 00 00       	mov    $0x8ab,%ebx
-        while(*s != 0){
- 6ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 6ae:	b8 28 00 00 00       	mov    $0x28,%eax
- 6b3:	89 de                	mov    %ebx,%esi
- 6b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6bf:	90                   	nop
-  write(fd, &c, 1);
- 6c0:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 6c3:	83 c6 01             	add    $0x1,%esi
- 6c6:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 6c9:	6a 01                	push   $0x1
- 6cb:	57                   	push   %edi
- 6cc:	53                   	push   %ebx
- 6cd:	e8 f1 fc ff ff       	call   3c3 <write>
-        while(*s != 0){
- 6d2:	0f b6 06             	movzbl (%esi),%eax
- 6d5:	83 c4 10             	add    $0x10,%esp
- 6d8:	84 c0                	test   %al,%al
- 6da:	75 e4                	jne    6c0 <printf+0x1a0>
- 6dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 6df:	31 d2                	xor    %edx,%edx
- 6e1:	e9 8e fe ff ff       	jmp    574 <printf+0x54>
- 6e6:	66 90                	xchg   %ax,%ax
- 6e8:	66 90                	xchg   %ax,%ax
- 6ea:	66 90                	xchg   %ax,%ax
- 6ec:	66 90                	xchg   %ax,%ax
- 6ee:	66 90                	xchg   %ax,%ax
-
-000006f0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 6f0:	f3 0f 1e fb          	endbr32 
- 6f4:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6f5:	a1 6c 0b 00 00       	mov    0xb6c,%eax
-{
- 6fa:	89 e5                	mov    %esp,%ebp
- 6fc:	57                   	push   %edi
- 6fd:	56                   	push   %esi
- 6fe:	53                   	push   %ebx
- 6ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 702:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 704:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 707:	39 c8                	cmp    %ecx,%eax
- 709:	73 15                	jae    720 <free+0x30>
- 70b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 70f:	90                   	nop
- 710:	39 d1                	cmp    %edx,%ecx
- 712:	72 14                	jb     728 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 714:	39 d0                	cmp    %edx,%eax
- 716:	73 10                	jae    728 <free+0x38>
-{
- 718:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 71a:	8b 10                	mov    (%eax),%edx
- 71c:	39 c8                	cmp    %ecx,%eax
- 71e:	72 f0                	jb     710 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 720:	39 d0                	cmp    %edx,%eax
- 722:	72 f4                	jb     718 <free+0x28>
- 724:	39 d1                	cmp    %edx,%ecx
- 726:	73 f0                	jae    718 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 728:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 72b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 72e:	39 fa                	cmp    %edi,%edx
- 730:	74 1e                	je     750 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 732:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 735:	8b 50 04             	mov    0x4(%eax),%edx
- 738:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 73b:	39 f1                	cmp    %esi,%ecx
- 73d:	74 28                	je     767 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 73f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 741:	5b                   	pop    %ebx
-  freep = p;
- 742:	a3 6c 0b 00 00       	mov    %eax,0xb6c
-}
- 747:	5e                   	pop    %esi
- 748:	5f                   	pop    %edi
- 749:	5d                   	pop    %ebp
- 74a:	c3                   	ret    
- 74b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 74f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 750:	03 72 04             	add    0x4(%edx),%esi
- 753:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 756:	8b 10                	mov    (%eax),%edx
- 758:	8b 12                	mov    (%edx),%edx
- 75a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 75d:	8b 50 04             	mov    0x4(%eax),%edx
- 760:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 763:	39 f1                	cmp    %esi,%ecx
- 765:	75 d8                	jne    73f <free+0x4f>
-    p->s.size += bp->s.size;
- 767:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 76a:	a3 6c 0b 00 00       	mov    %eax,0xb6c
-    p->s.size += bp->s.size;
- 76f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 772:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 775:	89 10                	mov    %edx,(%eax)
-}
- 777:	5b                   	pop    %ebx
- 778:	5e                   	pop    %esi
- 779:	5f                   	pop    %edi
- 77a:	5d                   	pop    %ebp
- 77b:	c3                   	ret    
- 77c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000780 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 780:	f3 0f 1e fb          	endbr32 
- 784:	55                   	push   %ebp
- 785:	89 e5                	mov    %esp,%ebp
- 787:	57                   	push   %edi
- 788:	56                   	push   %esi
- 789:	53                   	push   %ebx
- 78a:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 78d:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 790:	8b 3d 6c 0b 00 00    	mov    0xb6c,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 796:	8d 70 07             	lea    0x7(%eax),%esi
- 799:	c1 ee 03             	shr    $0x3,%esi
- 79c:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 79f:	85 ff                	test   %edi,%edi
- 7a1:	0f 84 a9 00 00 00    	je     850 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7a7:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 7a9:	8b 48 04             	mov    0x4(%eax),%ecx
- 7ac:	39 f1                	cmp    %esi,%ecx
- 7ae:	73 6d                	jae    81d <malloc+0x9d>
- 7b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 7b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 7bb:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 7be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 7c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 7c8:	eb 17                	jmp    7e1 <malloc+0x61>
- 7ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7d0:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 7d2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 7d5:	39 f1                	cmp    %esi,%ecx
- 7d7:	73 4f                	jae    828 <malloc+0xa8>
- 7d9:	8b 3d 6c 0b 00 00    	mov    0xb6c,%edi
- 7df:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 7e1:	39 c7                	cmp    %eax,%edi
- 7e3:	75 eb                	jne    7d0 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 7e5:	83 ec 0c             	sub    $0xc,%esp
- 7e8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 7eb:	e8 3b fc ff ff       	call   42b <sbrk>
-  if(p == (char*)-1)
- 7f0:	83 c4 10             	add    $0x10,%esp
- 7f3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 7f6:	74 1b                	je     813 <malloc+0x93>
-  hp->s.size = nu;
- 7f8:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 7fb:	83 ec 0c             	sub    $0xc,%esp
- 7fe:	83 c0 08             	add    $0x8,%eax
- 801:	50                   	push   %eax
- 802:	e8 e9 fe ff ff       	call   6f0 <free>
-  return freep;
- 807:	a1 6c 0b 00 00       	mov    0xb6c,%eax
-      if((p = morecore(nunits)) == 0)
- 80c:	83 c4 10             	add    $0x10,%esp
- 80f:	85 c0                	test   %eax,%eax
- 811:	75 bd                	jne    7d0 <malloc+0x50>
-        return 0;
-  }
-}
- 813:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 816:	31 c0                	xor    %eax,%eax
-}
- 818:	5b                   	pop    %ebx
- 819:	5e                   	pop    %esi
- 81a:	5f                   	pop    %edi
- 81b:	5d                   	pop    %ebp
- 81c:	c3                   	ret    
-    if(p->s.size >= nunits){
- 81d:	89 c2                	mov    %eax,%edx
- 81f:	89 f8                	mov    %edi,%eax
- 821:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- 828:	39 ce                	cmp    %ecx,%esi
- 82a:	74 54                	je     880 <malloc+0x100>
-        p->s.size -= nunits;
- 82c:	29 f1                	sub    %esi,%ecx
- 82e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- 831:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- 834:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- 837:	a3 6c 0b 00 00       	mov    %eax,0xb6c
-}
- 83c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 83f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- 842:	5b                   	pop    %ebx
- 843:	5e                   	pop    %esi
- 844:	5f                   	pop    %edi
- 845:	5d                   	pop    %ebp
- 846:	c3                   	ret    
- 847:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 84e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- 850:	c7 05 6c 0b 00 00 70 	movl   $0xb70,0xb6c
- 857:	0b 00 00 
-    base.s.size = 0;
- 85a:	bf 70 0b 00 00       	mov    $0xb70,%edi
-    base.s.ptr = freep = prevp = &base;
- 85f:	c7 05 70 0b 00 00 70 	movl   $0xb70,0xb70
- 866:	0b 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 869:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- 86b:	c7 05 74 0b 00 00 00 	movl   $0x0,0xb74
- 872:	00 00 00 
-    if(p->s.size >= nunits){
- 875:	e9 36 ff ff ff       	jmp    7b0 <malloc+0x30>
- 87a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- 880:	8b 0a                	mov    (%edx),%ecx
- 882:	89 08                	mov    %ecx,(%eax)
- 884:	eb b1                	jmp    837 <malloc+0xb7>
diff -ruN xv6-public/stressfs.c xv6-public-mynew/stressfs.c
--- xv6-public/stressfs.c	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/stressfs.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,49 +0,0 @@
-// Demonstrate that moving the "acquire" in iderw after the loop that
-// appends to the idequeue results in a race.
-
-// For this to work, you should also add a spin within iderw's
-// idequeue traversal loop.  Adding the following demonstrated a panic
-// after about 5 runs of stressfs in QEMU on a 2.1GHz CPU:
-//    for (i = 0; i < 40000; i++)
-//      asm volatile("");
-
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-#include "fs.h"
-#include "fcntl.h"
-
-int
-main(int argc, char *argv[])
-{
-  int fd, i;
-  char path[] = "stressfs0";
-  char data[512];
-
-  printf(1, "stressfs starting\n");
-  memset(data, 'a', sizeof(data));
-
-  for(i = 0; i < 4; i++)
-    if(fork() > 0)
-      break;
-
-  printf(1, "write %d\n", i);
-
-  path[8] += i;
-  fd = open(path, O_CREATE | O_RDWR);
-  for(i = 0; i < 20; i++)
-//    printf(fd, "%d\n", i);
-    write(fd, data, sizeof(data));
-  close(fd);
-
-  printf(1, "read\n");
-
-  fd = open(path, O_RDONLY);
-  for (i = 0; i < 20; i++)
-    read(fd, data, sizeof(data));
-  close(fd);
-
-  wait();
-
-  exit();
-}
diff -ruN xv6-public/stressfs.d xv6-public-mynew/stressfs.d
--- xv6-public/stressfs.d	2022-09-05 09:51:05.838999155 +0530
+++ xv6-public-mynew/stressfs.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-stressfs.o: stressfs.c /usr/include/stdc-predef.h types.h stat.h user.h \
- fs.h fcntl.h
Binary files xv6-public/stressfs.o and xv6-public-mynew/stressfs.o differ
diff -ruN xv6-public/stressfs.sym xv6-public-mynew/stressfs.sym
--- xv6-public/stressfs.sym	2022-09-05 09:51:05.870999156 +0530
+++ xv6-public-mynew/stressfs.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,61 +0,0 @@
-00000000 .text
-00000888 .rodata
-000008c8 .eh_frame
-00000b6c .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 stressfs.c
-00000000 ulib.c
-00000000 printf.c
-00000470 printint
-000008b4 digits.1097
-00000000 umalloc.c
-00000b6c freep
-00000b70 base
-00000140 strcpy
-00000520 printf
-0000045b thread_exit
-00000370 memmove
-000003eb mknod
-00000260 gets
-00000423 getpid
-00000780 malloc
-00000433 sleep
-000003b3 pipe
-000003c3 write
-000003fb fstat
-000003d3 kill
-00000413 chdir
-000003db exec
-000003ab wait
-000003bb read
-000003f3 unlink
-0000039b fork
-0000042b sbrk
-0000043b uptime
-00000b6c __bss_start
-00000200 memset
-00000000 main
-00000170 strcmp
-0000041b dup
-000002e0 stat
-00000b6c _edata
-00000b78 _end
-00000403 link
-000003a3 exit
-00000330 atoi
-00000443 draw
-000001c0 strlen
-000003e3 open
-00000220 strchr
-0000044b thread_create
-0000040b mkdir
-000003cb close
-00000453 thread_join
-000006f0 free
diff -ruN xv6-public/string.c xv6-public-mynew/string.c
--- xv6-public/string.c	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/string.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,105 +0,0 @@
-#include "types.h"
-#include "x86.h"
-
-void*
-memset(void *dst, int c, uint n)
-{
-  if ((int)dst%4 == 0 && n%4 == 0){
-    c &= 0xFF;
-    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-  } else
-    stosb(dst, c, n);
-  return dst;
-}
-
-int
-memcmp(const void *v1, const void *v2, uint n)
-{
-  const uchar *s1, *s2;
-
-  s1 = v1;
-  s2 = v2;
-  while(n-- > 0){
-    if(*s1 != *s2)
-      return *s1 - *s2;
-    s1++, s2++;
-  }
-
-  return 0;
-}
-
-void*
-memmove(void *dst, const void *src, uint n)
-{
-  const char *s;
-  char *d;
-
-  s = src;
-  d = dst;
-  if(s < d && s + n > d){
-    s += n;
-    d += n;
-    while(n-- > 0)
-      *--d = *--s;
-  } else
-    while(n-- > 0)
-      *d++ = *s++;
-
-  return dst;
-}
-
-// memcpy exists to placate GCC.  Use memmove.
-void*
-memcpy(void *dst, const void *src, uint n)
-{
-  return memmove(dst, src, n);
-}
-
-int
-strncmp(const char *p, const char *q, uint n)
-{
-  while(n > 0 && *p && *p == *q)
-    n--, p++, q++;
-  if(n == 0)
-    return 0;
-  return (uchar)*p - (uchar)*q;
-}
-
-char*
-strncpy(char *s, const char *t, int n)
-{
-  char *os;
-
-  os = s;
-  while(n-- > 0 && (*s++ = *t++) != 0)
-    ;
-  while(n-- > 0)
-    *s++ = 0;
-  return os;
-}
-
-// Like strncpy but guaranteed to NUL-terminate.
-char*
-safestrcpy(char *s, const char *t, int n)
-{
-  char *os;
-
-  os = s;
-  if(n <= 0)
-    return os;
-  while(--n > 0 && (*s++ = *t++) != 0)
-    ;
-  *s = 0;
-  return os;
-}
-
-int
-strlen(const char *s)
-{
-  int n;
-
-  for(n = 0; s[n]; n++)
-    ;
-  return n;
-}
-
diff -ruN xv6-public/string.d xv6-public-mynew/string.d
--- xv6-public/string.d	2022-09-05 09:51:08.386999228 +0530
+++ xv6-public-mynew/string.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-string.o: string.c /usr/include/stdc-predef.h types.h x86.h
Binary files xv6-public/string.o and xv6-public-mynew/string.o differ
Binary files xv6-public/swtch.o and xv6-public-mynew/swtch.o differ
diff -ruN xv6-public/swtch.S xv6-public-mynew/swtch.S
--- xv6-public/swtch.S	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/swtch.S	1970-01-01 05:30:00.000000000 +0530
@@ -1,29 +0,0 @@
-# Context switch
-#
-#   void swtch(struct context **old, struct context *new);
-# 
-# Save the current registers on the stack, creating
-# a struct context, and save its address in *old.
-# Switch stacks to new and pop previously-saved registers.
-
-.globl swtch
-swtch:
-  movl 4(%esp), %eax
-  movl 8(%esp), %edx
-
-  # Save old callee-saved registers
-  pushl %ebp
-  pushl %ebx
-  pushl %esi
-  pushl %edi
-
-  # Switch stacks
-  movl %esp, (%eax)
-  movl %edx, %esp
-
-  # Load new callee-saved registers
-  popl %edi
-  popl %esi
-  popl %ebx
-  popl %ebp
-  ret
diff -ruN xv6-public/syscall.c xv6-public-mynew/syscall.c
--- xv6-public/syscall.c	2022-08-31 17:18:28.383123083 +0530
+++ xv6-public-mynew/syscall.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,153 +0,0 @@
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-#include "syscall.h"
-
-// User code makes a system call with INT T_SYSCALL.
-// System call number in %eax.
-// Arguments on the stack, from the user call to the C
-// library system call function. The saved user %esp points
-// to a saved program counter, and then the first argument.
-
-// Fetch the int at addr from the current process.
-int
-fetchint(uint addr, int *ip)
-{
-  struct proc *curproc = myproc();
-
-  if(addr >= curproc->sz || addr+4 > curproc->sz)
-    return -1;
-  *ip = *(int*)(addr);
-  return 0;
-}
-
-// Fetch the nul-terminated string at addr from the current process.
-// Doesn't actually copy the string - just sets *pp to point at it.
-// Returns length of string, not including nul.
-int
-fetchstr(uint addr, char **pp)
-{
-  char *s, *ep;
-  struct proc *curproc = myproc();
-
-  if(addr >= curproc->sz)
-    return -1;
-  *pp = (char*)addr;
-  ep = (char*)curproc->sz;
-  for(s = *pp; s < ep; s++){
-    if(*s == 0)
-      return s - *pp;
-  }
-  return -1;
-}
-
-// Fetch the nth 32-bit system call argument.
-int
-argint(int n, int *ip)
-{
-  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-}
-
-// Fetch the nth word-sized system call argument as a pointer
-// to a block of memory of size bytes.  Check that the pointer
-// lies within the process address space.
-int
-argptr(int n, char **pp, int size)
-{
-  int i;
-  struct proc *curproc = myproc();
- 
-  if(argint(n, &i) < 0)
-    return -1;
-  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-    return -1;
-  *pp = (char*)i;
-  return 0;
-}
-
-// Fetch the nth word-sized system call argument as a string pointer.
-// Check that the pointer is valid and the string is nul-terminated.
-// (There is no shared writable memory, so the string can't change
-// between this check and being used by the kernel.)
-int
-argstr(int n, char **pp)
-{
-  int addr;
-  if(argint(n, &addr) < 0)
-    return -1;
-  return fetchstr(addr, pp);
-}
-
-extern int sys_chdir(void);
-extern int sys_close(void);
-extern int sys_dup(void);
-extern int sys_exec(void);
-extern int sys_exit(void);
-extern int sys_fork(void);
-extern int sys_fstat(void);
-extern int sys_getpid(void);
-extern int sys_kill(void);
-extern int sys_link(void);
-extern int sys_mkdir(void);
-extern int sys_mknod(void);
-extern int sys_open(void);
-extern int sys_pipe(void);
-extern int sys_read(void);
-extern int sys_sbrk(void);
-extern int sys_sleep(void);
-extern int sys_unlink(void);
-extern int sys_wait(void);
-extern int sys_write(void);
-extern int sys_uptime(void);
-extern int sys_draw(void);
-extern int sys_thread_create(void);
-extern int sys_thread_join(void);
-extern int sys_thread_exit(void);
-
-static int (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
-[SYS_draw]    sys_draw,
-[SYS_thread_create] sys_thread_create,
-[SYS_thread_join] sys_thread_join,
-[SYS_thread_exit] sys_thread_exit,
-};
-
-void
-syscall(void)
-{
-  int num;
-  struct proc *curproc = myproc();
-
-  num = curproc->tf->eax;
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    curproc->tf->eax = syscalls[num]();
-  } else {
-    cprintf("%d %s: unknown sys call %d\n",
-            curproc->pid, curproc->name, num);
-    curproc->tf->eax = -1;
-  }
-}
diff -ruN xv6-public/syscall.d xv6-public-mynew/syscall.d
--- xv6-public/syscall.d	2022-09-05 09:51:08.482999231 +0530
+++ xv6-public-mynew/syscall.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-syscall.o: syscall.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h proc.h x86.h syscall.h
diff -ruN xv6-public/syscall.h xv6-public-mynew/syscall.h
--- xv6-public/syscall.h	2022-08-31 17:19:03.131749001 +0530
+++ xv6-public-mynew/syscall.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,26 +0,0 @@
-// System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
-#define SYS_draw   22
-#define SYS_thread_create 24
-#define SYS_thread_join   25
-#define SYS_thread_exit   26
\ No newline at end of file
Binary files xv6-public/syscall.o and xv6-public-mynew/syscall.o differ
diff -ruN xv6-public/sysfile.c xv6-public-mynew/sysfile.c
--- xv6-public/sysfile.c	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/sysfile.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,444 +0,0 @@
-//
-// File-system system calls.
-// Mostly argument checking, since we don't trust
-// user code, and calls into file.c and fs.c.
-//
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "stat.h"
-#include "mmu.h"
-#include "proc.h"
-#include "fs.h"
-#include "spinlock.h"
-#include "sleeplock.h"
-#include "file.h"
-#include "fcntl.h"
-
-// Fetch the nth word-sized system call argument as a file descriptor
-// and return both the descriptor and the corresponding struct file.
-static int
-argfd(int n, int *pfd, struct file **pf)
-{
-  int fd;
-  struct file *f;
-
-  if(argint(n, &fd) < 0)
-    return -1;
-  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-    return -1;
-  if(pfd)
-    *pfd = fd;
-  if(pf)
-    *pf = f;
-  return 0;
-}
-
-// Allocate a file descriptor for the given file.
-// Takes over file reference from caller on success.
-static int
-fdalloc(struct file *f)
-{
-  int fd;
-  struct proc *curproc = myproc();
-
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd] == 0){
-      curproc->ofile[fd] = f;
-      return fd;
-    }
-  }
-  return -1;
-}
-
-int
-sys_dup(void)
-{
-  struct file *f;
-  int fd;
-
-  if(argfd(0, 0, &f) < 0)
-    return -1;
-  if((fd=fdalloc(f)) < 0)
-    return -1;
-  filedup(f);
-  return fd;
-}
-
-int
-sys_read(void)
-{
-  struct file *f;
-  int n;
-  char *p;
-
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-    return -1;
-  return fileread(f, p, n);
-}
-
-int
-sys_write(void)
-{
-  struct file *f;
-  int n;
-  char *p;
-
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-    return -1;
-  return filewrite(f, p, n);
-}
-
-int
-sys_close(void)
-{
-  int fd;
-  struct file *f;
-
-  if(argfd(0, &fd, &f) < 0)
-    return -1;
-  myproc()->ofile[fd] = 0;
-  fileclose(f);
-  return 0;
-}
-
-int
-sys_fstat(void)
-{
-  struct file *f;
-  struct stat *st;
-
-  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-    return -1;
-  return filestat(f, st);
-}
-
-// Create the path new as a link to the same inode as old.
-int
-sys_link(void)
-{
-  char name[DIRSIZ], *new, *old;
-  struct inode *dp, *ip;
-
-  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-    return -1;
-
-  begin_op();
-  if((ip = namei(old)) == 0){
-    end_op();
-    return -1;
-  }
-
-  ilock(ip);
-  if(ip->type == T_DIR){
-    iunlockput(ip);
-    end_op();
-    return -1;
-  }
-
-  ip->nlink++;
-  iupdate(ip);
-  iunlock(ip);
-
-  if((dp = nameiparent(new, name)) == 0)
-    goto bad;
-  ilock(dp);
-  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-    iunlockput(dp);
-    goto bad;
-  }
-  iunlockput(dp);
-  iput(ip);
-
-  end_op();
-
-  return 0;
-
-bad:
-  ilock(ip);
-  ip->nlink--;
-  iupdate(ip);
-  iunlockput(ip);
-  end_op();
-  return -1;
-}
-
-// Is the directory dp empty except for "." and ".." ?
-static int
-isdirempty(struct inode *dp)
-{
-  int off;
-  struct dirent de;
-
-  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-      panic("isdirempty: readi");
-    if(de.inum != 0)
-      return 0;
-  }
-  return 1;
-}
-
-//PAGEBREAK!
-int
-sys_unlink(void)
-{
-  struct inode *ip, *dp;
-  struct dirent de;
-  char name[DIRSIZ], *path;
-  uint off;
-
-  if(argstr(0, &path) < 0)
-    return -1;
-
-  begin_op();
-  if((dp = nameiparent(path, name)) == 0){
-    end_op();
-    return -1;
-  }
-
-  ilock(dp);
-
-  // Cannot unlink "." or "..".
-  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-    goto bad;
-
-  if((ip = dirlookup(dp, name, &off)) == 0)
-    goto bad;
-  ilock(ip);
-
-  if(ip->nlink < 1)
-    panic("unlink: nlink < 1");
-  if(ip->type == T_DIR && !isdirempty(ip)){
-    iunlockput(ip);
-    goto bad;
-  }
-
-  memset(&de, 0, sizeof(de));
-  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-    panic("unlink: writei");
-  if(ip->type == T_DIR){
-    dp->nlink--;
-    iupdate(dp);
-  }
-  iunlockput(dp);
-
-  ip->nlink--;
-  iupdate(ip);
-  iunlockput(ip);
-
-  end_op();
-
-  return 0;
-
-bad:
-  iunlockput(dp);
-  end_op();
-  return -1;
-}
-
-static struct inode*
-create(char *path, short type, short major, short minor)
-{
-  struct inode *ip, *dp;
-  char name[DIRSIZ];
-
-  if((dp = nameiparent(path, name)) == 0)
-    return 0;
-  ilock(dp);
-
-  if((ip = dirlookup(dp, name, 0)) != 0){
-    iunlockput(dp);
-    ilock(ip);
-    if(type == T_FILE && ip->type == T_FILE)
-      return ip;
-    iunlockput(ip);
-    return 0;
-  }
-
-  if((ip = ialloc(dp->dev, type)) == 0)
-    panic("create: ialloc");
-
-  ilock(ip);
-  ip->major = major;
-  ip->minor = minor;
-  ip->nlink = 1;
-  iupdate(ip);
-
-  if(type == T_DIR){  // Create . and .. entries.
-    dp->nlink++;  // for ".."
-    iupdate(dp);
-    // No ip->nlink++ for ".": avoid cyclic ref count.
-    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-      panic("create dots");
-  }
-
-  if(dirlink(dp, name, ip->inum) < 0)
-    panic("create: dirlink");
-
-  iunlockput(dp);
-
-  return ip;
-}
-
-int
-sys_open(void)
-{
-  char *path;
-  int fd, omode;
-  struct file *f;
-  struct inode *ip;
-
-  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-    return -1;
-
-  begin_op();
-
-  if(omode & O_CREATE){
-    ip = create(path, T_FILE, 0, 0);
-    if(ip == 0){
-      end_op();
-      return -1;
-    }
-  } else {
-    if((ip = namei(path)) == 0){
-      end_op();
-      return -1;
-    }
-    ilock(ip);
-    if(ip->type == T_DIR && omode != O_RDONLY){
-      iunlockput(ip);
-      end_op();
-      return -1;
-    }
-  }
-
-  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-    if(f)
-      fileclose(f);
-    iunlockput(ip);
-    end_op();
-    return -1;
-  }
-  iunlock(ip);
-  end_op();
-
-  f->type = FD_INODE;
-  f->ip = ip;
-  f->off = 0;
-  f->readable = !(omode & O_WRONLY);
-  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-  return fd;
-}
-
-int
-sys_mkdir(void)
-{
-  char *path;
-  struct inode *ip;
-
-  begin_op();
-  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-    end_op();
-    return -1;
-  }
-  iunlockput(ip);
-  end_op();
-  return 0;
-}
-
-int
-sys_mknod(void)
-{
-  struct inode *ip;
-  char *path;
-  int major, minor;
-
-  begin_op();
-  if((argstr(0, &path)) < 0 ||
-     argint(1, &major) < 0 ||
-     argint(2, &minor) < 0 ||
-     (ip = create(path, T_DEV, major, minor)) == 0){
-    end_op();
-    return -1;
-  }
-  iunlockput(ip);
-  end_op();
-  return 0;
-}
-
-int
-sys_chdir(void)
-{
-  char *path;
-  struct inode *ip;
-  struct proc *curproc = myproc();
-  
-  begin_op();
-  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-    end_op();
-    return -1;
-  }
-  ilock(ip);
-  if(ip->type != T_DIR){
-    iunlockput(ip);
-    end_op();
-    return -1;
-  }
-  iunlock(ip);
-  iput(curproc->cwd);
-  end_op();
-  curproc->cwd = ip;
-  return 0;
-}
-
-int
-sys_exec(void)
-{
-  char *path, *argv[MAXARG];
-  int i;
-  uint uargv, uarg;
-
-  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-    return -1;
-  }
-  memset(argv, 0, sizeof(argv));
-  for(i=0;; i++){
-    if(i >= NELEM(argv))
-      return -1;
-    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-      return -1;
-    if(uarg == 0){
-      argv[i] = 0;
-      break;
-    }
-    if(fetchstr(uarg, &argv[i]) < 0)
-      return -1;
-  }
-  return exec(path, argv);
-}
-
-int
-sys_pipe(void)
-{
-  int *fd;
-  struct file *rf, *wf;
-  int fd0, fd1;
-
-  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-    return -1;
-  if(pipealloc(&rf, &wf) < 0)
-    return -1;
-  fd0 = -1;
-  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-    if(fd0 >= 0)
-      myproc()->ofile[fd0] = 0;
-    fileclose(rf);
-    fileclose(wf);
-    return -1;
-  }
-  fd[0] = fd0;
-  fd[1] = fd1;
-  return 0;
-}
diff -ruN xv6-public/sysfile.d xv6-public-mynew/sysfile.d
--- xv6-public/sysfile.d	2022-09-05 09:51:08.638999236 +0530
+++ xv6-public-mynew/sysfile.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-sysfile.o: sysfile.c /usr/include/stdc-predef.h types.h defs.h param.h \
- stat.h mmu.h proc.h fs.h spinlock.h sleeplock.h file.h fcntl.h
Binary files xv6-public/sysfile.o and xv6-public-mynew/sysfile.o differ
diff -ruN xv6-public/sysproc.c xv6-public-mynew/sysproc.c
--- xv6-public/sysproc.c	2022-08-31 17:20:25.105190386 +0530
+++ xv6-public-mynew/sysproc.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,157 +0,0 @@
-#include "types.h"
-#include "x86.h"
-#include "defs.h"
-#include "date.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-
-int
-sys_fork(void)
-{
-  return fork();
-}
-
-int
-sys_exit(void)
-{
-  exit();
-  return 0;  // not reached
-}
-
-int
-sys_wait(void)
-{
-  return wait();
-}
-
-int
-sys_kill(void)
-{
-  int pid;
-
-  if(argint(0, &pid) < 0)
-    return -1;
-  return kill(pid);
-}
-
-int
-sys_getpid(void)
-{
-  return myproc()->pid;
-}
-
-int
-sys_sbrk(void)
-{
-  int addr;
-  int n;
-
-  if(argint(0, &n) < 0)
-    return -1;
-  addr = myproc()->sz;
-  if(growproc(n) < 0)
-    return -1;
-  return addr;
-}
-
-int
-sys_sleep(void)
-{
-  int n;
-  uint ticks0;
-
-  if(argint(0, &n) < 0)
-    return -1;
-  acquire(&tickslock);
-  ticks0 = ticks;
-  while(ticks - ticks0 < n){
-    if(myproc()->killed){
-      release(&tickslock);
-      return -1;
-    }
-    sleep(&ticks, &tickslock);
-  }
-  release(&tickslock);
-  return 0;
-}
-
-// return how many clock tick interrupts have occurred
-// since start.
-int
-sys_uptime(void)
-{
-  uint xticks;
-
-  acquire(&tickslock);
-  xticks = ticks;
-  release(&tickslock);
-  return xticks;
-}
-
-int sys_draw(void)
-{
-
-  char *buffer;
-  int size;
-
-  char *draw="            |.---.|\n\
-                          ||___||\n\
-                          |+  .'|\n\
-                          | _ _ |\n\
-    	                  |_____/\n\n";
-
-  // Fetch the 1st 32 bit call argument and assign it to the variable size i.e.the max-size of the buffer
-  // Return -1 if an invalid address is accessed
-  if (argint(1, &size) == -1)
-  {
-    return -1;
-  }
-
-  // Fetch the 0th word-sized system call argument as a pointer
-  // to a block of memory of size bytes.Check that the pointer
-  // lies within the process address space if it does not then return -1.
-  if (argptr(0, (char **)&buffer, size) == -1)
-  {
-    return -1;
-  }
-
-  //Find the size of the  picture;
-  int drawsize = 0;
-  while (draw[drawsize] != '\0')
-  {
-    drawsize++;
-  }
-
-  if (drawsize > size)
-  {
-    //If the size of picture is greater than max size of the buffer return -1
-    return -1;
-  }
-
-  //copy the picture to the buffer
-  for (int i = 0; i < drawsize; i++)
-  {
-    buffer[i] = draw[i];
-  }
-  //return the size of  pictue
-  return drawsize;
-}
-
-int sys_thread_create(void) {
-	void (*fcn)(void*), *arg, *stack;
-	argptr(0, (void*) &fcn, sizeof(void (*)(void *)));
-	argptr(1, (void*) &arg, sizeof(void *));
-	argptr(2, (void*) &stack, sizeof(void *));
-	return thread_create(fcn, arg, stack);
-}
-
-// sys_join
-int sys_thread_join(void) {
-	return thread_join();
-}
-
-int sys_thread_exit(void) {
-	return thread_exit();
-}
\ No newline at end of file
diff -ruN xv6-public/sysproc.d xv6-public-mynew/sysproc.d
--- xv6-public/sysproc.d	2022-09-05 09:51:08.718999238 +0530
+++ xv6-public-mynew/sysproc.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
- date.h param.h memlayout.h mmu.h proc.h
Binary files xv6-public/sysproc.o and xv6-public-mynew/sysproc.o differ
Binary files xv6-public/_thread and xv6-public-mynew/_thread differ
diff -ruN xv6-public/thread.asm xv6-public-mynew/thread.asm
--- xv6-public/thread.asm	2022-09-05 17:54:41.275626834 +0530
+++ xv6-public-mynew/thread.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1489 +0,0 @@
-
-_thread:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-
-	thread_exit();
-	return;
-}
-
-int main(int argc, char *argv[]) {
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	57                   	push   %edi
-  12:	56                   	push   %esi
-  13:	53                   	push   %ebx
-  14:	51                   	push   %ecx
-  15:	83 ec 64             	sub    $0x64,%esp
-
-	//   thread_spin_init(&lock);
-	//  thread_mutex_init(&ml);
-
-	struct balance b1 = { "b1", 3200 };
-  18:	c7 45 a0 62 31 00 00 	movl   $0x3162,-0x60(%ebp)
-	struct balance b2 = { "b2", 2800 };
-
-	void *s1, *s2;
-	int t1, t2, r1, r2;
-
-	s1 = malloc(4096);
-  1f:	68 00 10 00 00       	push   $0x1000
-	struct balance b1 = { "b1", 3200 };
-  24:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
-  2b:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
-  32:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
-  39:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
-  40:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
-  47:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
-  4e:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
-  55:	c7 45 c0 80 0c 00 00 	movl   $0xc80,-0x40(%ebp)
-	struct balance b2 = { "b2", 2800 };
-  5c:	c7 45 c4 62 32 00 00 	movl   $0x3262,-0x3c(%ebp)
-  63:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
-  6a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
-  71:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
-  78:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
-  7f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
-  86:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
-  8d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-  94:	c7 45 e4 f0 0a 00 00 	movl   $0xaf0,-0x1c(%ebp)
-	s1 = malloc(4096);
-  9b:	e8 40 08 00 00       	call   8e0 <malloc>
-	s2 = malloc(4096);
-  a0:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
-	s1 = malloc(4096);
-  a7:	89 c3                	mov    %eax,%ebx
-	s2 = malloc(4096);
-  a9:	e8 32 08 00 00       	call   8e0 <malloc>
-
-	t1 = thread_create(do_work, (void*) &b1, s1);
-  ae:	83 c4 0c             	add    $0xc,%esp
-	s2 = malloc(4096);
-  b1:	89 c6                	mov    %eax,%esi
-	t1 = thread_create(do_work, (void*) &b1, s1);
-  b3:	8d 45 a0             	lea    -0x60(%ebp),%eax
-  b6:	53                   	push   %ebx
-  b7:	50                   	push   %eax
-  b8:	68 10 01 00 00       	push   $0x110
-  bd:	e8 e9 04 00 00       	call   5ab <thread_create>
-	t2 = thread_create(do_work, (void*) &b2, s2);
-  c2:	83 c4 0c             	add    $0xc,%esp
-	t1 = thread_create(do_work, (void*) &b1, s1);
-  c5:	89 c3                	mov    %eax,%ebx
-	t2 = thread_create(do_work, (void*) &b2, s2);
-  c7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-  ca:	56                   	push   %esi
-  cb:	50                   	push   %eax
-  cc:	68 10 01 00 00       	push   $0x110
-  d1:	e8 d5 04 00 00       	call   5ab <thread_create>
-  d6:	89 c7                	mov    %eax,%edi
-
-	r1 = thread_join();
-  d8:	e8 d6 04 00 00       	call   5b3 <thread_join>
-  dd:	89 c6                	mov    %eax,%esi
-	r2 = thread_join();
-  df:	e8 cf 04 00 00       	call   5b3 <thread_join>
-
-	printf(1, "Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", t1, r1,
-  e4:	8b 15 14 0e 00 00    	mov    0xe14,%edx
-  ea:	83 c4 0c             	add    $0xc,%esp
-  ed:	52                   	push   %edx
-  ee:	50                   	push   %eax
-  ef:	57                   	push   %edi
-  f0:	56                   	push   %esi
-  f1:	53                   	push   %ebx
-  f2:	68 10 0a 00 00       	push   $0xa10
-  f7:	6a 01                	push   $0x1
-  f9:	e8 82 05 00 00       	call   680 <printf>
-			t2, r2, total_balance);
-
-	exit();
-  fe:	83 c4 20             	add    $0x20,%esp
- 101:	e8 fd 03 00 00       	call   503 <exit>
- 106:	66 90                	xchg   %ax,%ax
- 108:	66 90                	xchg   %ax,%ax
- 10a:	66 90                	xchg   %ax,%ax
- 10c:	66 90                	xchg   %ax,%ax
- 10e:	66 90                	xchg   %ax,%ax
-
-00000110 <do_work>:
-void do_work(void *arg) {
- 110:	f3 0f 1e fb          	endbr32 
- 114:	55                   	push   %ebp
- 115:	89 e5                	mov    %esp,%ebp
- 117:	56                   	push   %esi
- 118:	53                   	push   %ebx
- 119:	8b 75 08             	mov    0x8(%ebp),%esi
-	printf(1, "Starting do_work: s:%s\n", b->name);
- 11c:	83 ec 04             	sub    $0x4,%esp
- 11f:	56                   	push   %esi
- 120:	68 e8 09 00 00       	push   $0x9e8
- 125:	6a 01                	push   $0x1
- 127:	e8 54 05 00 00       	call   680 <printf>
-	for (i = 0; i < b->amount; i++) {
- 12c:	8b 5e 20             	mov    0x20(%esi),%ebx
- 12f:	83 c4 10             	add    $0x10,%esp
- 132:	85 db                	test   %ebx,%ebx
- 134:	7e 2f                	jle    165 <do_work+0x55>
- 136:	31 c9                	xor    %ecx,%ecx
- 138:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 13f:	90                   	nop
-		old = total_balance;
- 140:	8b 15 14 0e 00 00    	mov    0xe14,%edx
- 146:	b8 a0 86 01 00       	mov    $0x186a0,%eax
- 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 14f:	90                   	nop
-		__asm volatile( "nop" ::: );
- 150:	90                   	nop
-	for (i = 0; i < d; i++) {
- 151:	83 e8 01             	sub    $0x1,%eax
- 154:	75 fa                	jne    150 <do_work+0x40>
-		total_balance = old + 1;
- 156:	8d 42 01             	lea    0x1(%edx),%eax
-	for (i = 0; i < b->amount; i++) {
- 159:	83 c1 01             	add    $0x1,%ecx
-		total_balance = old + 1;
- 15c:	a3 14 0e 00 00       	mov    %eax,0xe14
-	for (i = 0; i < b->amount; i++) {
- 161:	39 d9                	cmp    %ebx,%ecx
- 163:	75 db                	jne    140 <do_work+0x30>
-	printf(1, "Done s:%x\n", b->name);
- 165:	83 ec 04             	sub    $0x4,%esp
- 168:	56                   	push   %esi
- 169:	68 00 0a 00 00       	push   $0xa00
- 16e:	6a 01                	push   $0x1
- 170:	e8 0b 05 00 00       	call   680 <printf>
-	thread_exit();
- 175:	83 c4 10             	add    $0x10,%esp
-}
- 178:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 17b:	5b                   	pop    %ebx
- 17c:	5e                   	pop    %esi
- 17d:	5d                   	pop    %ebp
-	thread_exit();
- 17e:	e9 38 04 00 00       	jmp    5bb <thread_exit>
- 183:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000190 <thread_spin_init>:
-			"1" (newval) :
-			"cc");
-	return result;
-};
-
-void thread_spin_init(struct thread_spinlock *lk) {
- 190:	f3 0f 1e fb          	endbr32 
- 194:	55                   	push   %ebp
- 195:	89 e5                	mov    %esp,%ebp
- 197:	8b 45 08             	mov    0x8(%ebp),%eax
-	lk->lock = 0;
- 19a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-	lk->name = "null";
- 1a0:	c7 40 04 0b 0a 00 00 	movl   $0xa0b,0x4(%eax)
-};
- 1a7:	5d                   	pop    %ebp
- 1a8:	c3                   	ret    
- 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-000001b0 <thread_spin_lock>:
-
-void thread_spin_lock(struct thread_spinlock *lk) {
- 1b0:	f3 0f 1e fb          	endbr32 
- 1b4:	55                   	push   %ebp
-	asm volatile("lock; xchgl %0, %1" :
- 1b5:	b9 01 00 00 00       	mov    $0x1,%ecx
-void thread_spin_lock(struct thread_spinlock *lk) {
- 1ba:	89 e5                	mov    %esp,%ebp
- 1bc:	8b 55 08             	mov    0x8(%ebp),%edx
- 1bf:	90                   	nop
-	asm volatile("lock; xchgl %0, %1" :
- 1c0:	89 c8                	mov    %ecx,%eax
- 1c2:	f0 87 02             	lock xchg %eax,(%edx)
-	while (xchg(&lk->lock, 1) != 0)
- 1c5:	85 c0                	test   %eax,%eax
- 1c7:	75 f7                	jne    1c0 <thread_spin_lock+0x10>
-		;
-	__sync_synchronize();
- 1c9:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-
-};
- 1ce:	5d                   	pop    %ebp
- 1cf:	c3                   	ret    
-
-000001d0 <thread_spin_unlock>:
-
-void thread_spin_unlock(struct thread_spinlock *lk) {
- 1d0:	f3 0f 1e fb          	endbr32 
- 1d4:	55                   	push   %ebp
- 1d5:	89 e5                	mov    %esp,%ebp
- 1d7:	8b 45 08             	mov    0x8(%ebp),%eax
-	__sync_synchronize();
- 1da:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-	asm volatile("movl $0, %0" : "+m" (lk->lock) : );
- 1df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-};
- 1e5:	5d                   	pop    %ebp
- 1e6:	c3                   	ret    
- 1e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1ee:	66 90                	xchg   %ax,%ax
-
-000001f0 <thread_mutex_init>:
-
-void thread_mutex_init(struct thread_mutex *m) {
- 1f0:	f3 0f 1e fb          	endbr32 
- 1f4:	55                   	push   %ebp
- 1f5:	89 e5                	mov    %esp,%ebp
- 1f7:	8b 45 08             	mov    0x8(%ebp),%eax
-	m->lock = 0;
- 1fa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-	m->name = "null";
- 200:	c7 40 04 0b 0a 00 00 	movl   $0xa0b,0x4(%eax)
-};
- 207:	5d                   	pop    %ebp
- 208:	c3                   	ret    
- 209:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000210 <thread_mutex_lock>:
-
-void thread_mutex_lock(struct thread_mutex *m) {
- 210:	f3 0f 1e fb          	endbr32 
- 214:	55                   	push   %ebp
-	asm volatile("lock; xchgl %0, %1" :
- 215:	b8 01 00 00 00       	mov    $0x1,%eax
-void thread_mutex_lock(struct thread_mutex *m) {
- 21a:	89 e5                	mov    %esp,%ebp
- 21c:	56                   	push   %esi
- 21d:	53                   	push   %ebx
- 21e:	8b 5d 08             	mov    0x8(%ebp),%ebx
-	asm volatile("lock; xchgl %0, %1" :
- 221:	f0 87 03             	lock xchg %eax,(%ebx)
-	return result;
- 224:	be 01 00 00 00       	mov    $0x1,%esi
-	while (xchg(&m->lock, 1) != 0)
- 229:	85 c0                	test   %eax,%eax
- 22b:	74 19                	je     246 <thread_mutex_lock+0x36>
- 22d:	8d 76 00             	lea    0x0(%esi),%esi
-		sleep(1);
- 230:	83 ec 0c             	sub    $0xc,%esp
- 233:	6a 01                	push   $0x1
- 235:	e8 59 03 00 00       	call   593 <sleep>
-	asm volatile("lock; xchgl %0, %1" :
- 23a:	89 f0                	mov    %esi,%eax
- 23c:	f0 87 03             	lock xchg %eax,(%ebx)
-	while (xchg(&m->lock, 1) != 0)
- 23f:	83 c4 10             	add    $0x10,%esp
- 242:	85 c0                	test   %eax,%eax
- 244:	75 ea                	jne    230 <thread_mutex_lock+0x20>
-	__sync_synchronize();
- 246:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-};
- 24b:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 24e:	5b                   	pop    %ebx
- 24f:	5e                   	pop    %esi
- 250:	5d                   	pop    %ebp
- 251:	c3                   	ret    
- 252:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 259:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000260 <thread_mutex_unlock>:
-
-void thread_mutex_unlock(struct thread_mutex *m) {
- 260:	f3 0f 1e fb          	endbr32 
- 264:	55                   	push   %ebp
- 265:	89 e5                	mov    %esp,%ebp
- 267:	8b 45 08             	mov    0x8(%ebp),%eax
-	__sync_synchronize();
- 26a:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-	asm volatile("movl $0, %0" : "+m" (m->lock) : );
- 26f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
- 275:	5d                   	pop    %ebp
- 276:	c3                   	ret    
- 277:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 27e:	66 90                	xchg   %ax,%ax
-
-00000280 <delay>:
-volatile unsigned int delay(unsigned int d) {
- 280:	f3 0f 1e fb          	endbr32 
- 284:	55                   	push   %ebp
- 285:	89 e5                	mov    %esp,%ebp
- 287:	8b 55 08             	mov    0x8(%ebp),%edx
-	for (i = 0; i < d; i++) {
- 28a:	85 d2                	test   %edx,%edx
- 28c:	74 0a                	je     298 <delay+0x18>
- 28e:	31 c0                	xor    %eax,%eax
-		__asm volatile( "nop" ::: );
- 290:	90                   	nop
-	for (i = 0; i < d; i++) {
- 291:	83 c0 01             	add    $0x1,%eax
- 294:	39 c2                	cmp    %eax,%edx
- 296:	75 f8                	jne    290 <delay+0x10>
-}
- 298:	89 d0                	mov    %edx,%eax
- 29a:	5d                   	pop    %ebp
- 29b:	c3                   	ret    
- 29c:	66 90                	xchg   %ax,%ax
- 29e:	66 90                	xchg   %ax,%ax
-
-000002a0 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 2a0:	f3 0f 1e fb          	endbr32 
- 2a4:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 2a5:	31 c0                	xor    %eax,%eax
-{
- 2a7:	89 e5                	mov    %esp,%ebp
- 2a9:	53                   	push   %ebx
- 2aa:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 2ad:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
- 2b0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 2b4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 2b7:	83 c0 01             	add    $0x1,%eax
- 2ba:	84 d2                	test   %dl,%dl
- 2bc:	75 f2                	jne    2b0 <strcpy+0x10>
-    ;
-  return os;
-}
- 2be:	89 c8                	mov    %ecx,%eax
- 2c0:	5b                   	pop    %ebx
- 2c1:	5d                   	pop    %ebp
- 2c2:	c3                   	ret    
- 2c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000002d0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 2d0:	f3 0f 1e fb          	endbr32 
- 2d4:	55                   	push   %ebp
- 2d5:	89 e5                	mov    %esp,%ebp
- 2d7:	53                   	push   %ebx
- 2d8:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 2db:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
- 2de:	0f b6 01             	movzbl (%ecx),%eax
- 2e1:	0f b6 1a             	movzbl (%edx),%ebx
- 2e4:	84 c0                	test   %al,%al
- 2e6:	75 19                	jne    301 <strcmp+0x31>
- 2e8:	eb 26                	jmp    310 <strcmp+0x40>
- 2ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 2f0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
- 2f4:	83 c1 01             	add    $0x1,%ecx
- 2f7:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
- 2fa:	0f b6 1a             	movzbl (%edx),%ebx
- 2fd:	84 c0                	test   %al,%al
- 2ff:	74 0f                	je     310 <strcmp+0x40>
- 301:	38 d8                	cmp    %bl,%al
- 303:	74 eb                	je     2f0 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
- 305:	29 d8                	sub    %ebx,%eax
-}
- 307:	5b                   	pop    %ebx
- 308:	5d                   	pop    %ebp
- 309:	c3                   	ret    
- 30a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 310:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
- 312:	29 d8                	sub    %ebx,%eax
-}
- 314:	5b                   	pop    %ebx
- 315:	5d                   	pop    %ebp
- 316:	c3                   	ret    
- 317:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 31e:	66 90                	xchg   %ax,%ax
-
-00000320 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 320:	f3 0f 1e fb          	endbr32 
- 324:	55                   	push   %ebp
- 325:	89 e5                	mov    %esp,%ebp
- 327:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 32a:	80 3a 00             	cmpb   $0x0,(%edx)
- 32d:	74 21                	je     350 <strlen+0x30>
- 32f:	31 c0                	xor    %eax,%eax
- 331:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 338:	83 c0 01             	add    $0x1,%eax
- 33b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 33f:	89 c1                	mov    %eax,%ecx
- 341:	75 f5                	jne    338 <strlen+0x18>
-    ;
-  return n;
-}
- 343:	89 c8                	mov    %ecx,%eax
- 345:	5d                   	pop    %ebp
- 346:	c3                   	ret    
- 347:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 34e:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 350:	31 c9                	xor    %ecx,%ecx
-}
- 352:	5d                   	pop    %ebp
- 353:	89 c8                	mov    %ecx,%eax
- 355:	c3                   	ret    
- 356:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 35d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000360 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 360:	f3 0f 1e fb          	endbr32 
- 364:	55                   	push   %ebp
- 365:	89 e5                	mov    %esp,%ebp
- 367:	57                   	push   %edi
- 368:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 36b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 36e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 371:	89 d7                	mov    %edx,%edi
- 373:	fc                   	cld    
- 374:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 376:	89 d0                	mov    %edx,%eax
- 378:	5f                   	pop    %edi
- 379:	5d                   	pop    %ebp
- 37a:	c3                   	ret    
- 37b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 37f:	90                   	nop
-
-00000380 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 380:	f3 0f 1e fb          	endbr32 
- 384:	55                   	push   %ebp
- 385:	89 e5                	mov    %esp,%ebp
- 387:	8b 45 08             	mov    0x8(%ebp),%eax
- 38a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 38e:	0f b6 10             	movzbl (%eax),%edx
- 391:	84 d2                	test   %dl,%dl
- 393:	75 16                	jne    3ab <strchr+0x2b>
- 395:	eb 21                	jmp    3b8 <strchr+0x38>
- 397:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 39e:	66 90                	xchg   %ax,%ax
- 3a0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 3a4:	83 c0 01             	add    $0x1,%eax
- 3a7:	84 d2                	test   %dl,%dl
- 3a9:	74 0d                	je     3b8 <strchr+0x38>
-    if(*s == c)
- 3ab:	38 d1                	cmp    %dl,%cl
- 3ad:	75 f1                	jne    3a0 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 3af:	5d                   	pop    %ebp
- 3b0:	c3                   	ret    
- 3b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 3b8:	31 c0                	xor    %eax,%eax
-}
- 3ba:	5d                   	pop    %ebp
- 3bb:	c3                   	ret    
- 3bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000003c0 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 3c0:	f3 0f 1e fb          	endbr32 
- 3c4:	55                   	push   %ebp
- 3c5:	89 e5                	mov    %esp,%ebp
- 3c7:	57                   	push   %edi
- 3c8:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 3c9:	31 f6                	xor    %esi,%esi
-{
- 3cb:	53                   	push   %ebx
- 3cc:	89 f3                	mov    %esi,%ebx
- 3ce:	83 ec 1c             	sub    $0x1c,%esp
- 3d1:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 3d4:	eb 33                	jmp    409 <gets+0x49>
- 3d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 3dd:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 3e0:	83 ec 04             	sub    $0x4,%esp
- 3e3:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 3e6:	6a 01                	push   $0x1
- 3e8:	50                   	push   %eax
- 3e9:	6a 00                	push   $0x0
- 3eb:	e8 2b 01 00 00       	call   51b <read>
-    if(cc < 1)
- 3f0:	83 c4 10             	add    $0x10,%esp
- 3f3:	85 c0                	test   %eax,%eax
- 3f5:	7e 1c                	jle    413 <gets+0x53>
-      break;
-    buf[i++] = c;
- 3f7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 3fb:	83 c7 01             	add    $0x1,%edi
- 3fe:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 401:	3c 0a                	cmp    $0xa,%al
- 403:	74 23                	je     428 <gets+0x68>
- 405:	3c 0d                	cmp    $0xd,%al
- 407:	74 1f                	je     428 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 409:	83 c3 01             	add    $0x1,%ebx
- 40c:	89 fe                	mov    %edi,%esi
- 40e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 411:	7c cd                	jl     3e0 <gets+0x20>
- 413:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 415:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 418:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 41b:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 41e:	5b                   	pop    %ebx
- 41f:	5e                   	pop    %esi
- 420:	5f                   	pop    %edi
- 421:	5d                   	pop    %ebp
- 422:	c3                   	ret    
- 423:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 427:	90                   	nop
- 428:	8b 75 08             	mov    0x8(%ebp),%esi
- 42b:	8b 45 08             	mov    0x8(%ebp),%eax
- 42e:	01 de                	add    %ebx,%esi
- 430:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 432:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 435:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 438:	5b                   	pop    %ebx
- 439:	5e                   	pop    %esi
- 43a:	5f                   	pop    %edi
- 43b:	5d                   	pop    %ebp
- 43c:	c3                   	ret    
- 43d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000440 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 440:	f3 0f 1e fb          	endbr32 
- 444:	55                   	push   %ebp
- 445:	89 e5                	mov    %esp,%ebp
- 447:	56                   	push   %esi
- 448:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 449:	83 ec 08             	sub    $0x8,%esp
- 44c:	6a 00                	push   $0x0
- 44e:	ff 75 08             	pushl  0x8(%ebp)
- 451:	e8 ed 00 00 00       	call   543 <open>
-  if(fd < 0)
- 456:	83 c4 10             	add    $0x10,%esp
- 459:	85 c0                	test   %eax,%eax
- 45b:	78 2b                	js     488 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 45d:	83 ec 08             	sub    $0x8,%esp
- 460:	ff 75 0c             	pushl  0xc(%ebp)
- 463:	89 c3                	mov    %eax,%ebx
- 465:	50                   	push   %eax
- 466:	e8 f0 00 00 00       	call   55b <fstat>
-  close(fd);
- 46b:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 46e:	89 c6                	mov    %eax,%esi
-  close(fd);
- 470:	e8 b6 00 00 00       	call   52b <close>
-  return r;
- 475:	83 c4 10             	add    $0x10,%esp
-}
- 478:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 47b:	89 f0                	mov    %esi,%eax
- 47d:	5b                   	pop    %ebx
- 47e:	5e                   	pop    %esi
- 47f:	5d                   	pop    %ebp
- 480:	c3                   	ret    
- 481:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 488:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 48d:	eb e9                	jmp    478 <stat+0x38>
- 48f:	90                   	nop
-
-00000490 <atoi>:
-
-int
-atoi(const char *s)
-{
- 490:	f3 0f 1e fb          	endbr32 
- 494:	55                   	push   %ebp
- 495:	89 e5                	mov    %esp,%ebp
- 497:	53                   	push   %ebx
- 498:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 49b:	0f be 02             	movsbl (%edx),%eax
- 49e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 4a1:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 4a4:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 4a9:	77 1a                	ja     4c5 <atoi+0x35>
- 4ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 4af:	90                   	nop
-    n = n*10 + *s++ - '0';
- 4b0:	83 c2 01             	add    $0x1,%edx
- 4b3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 4b6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 4ba:	0f be 02             	movsbl (%edx),%eax
- 4bd:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 4c0:	80 fb 09             	cmp    $0x9,%bl
- 4c3:	76 eb                	jbe    4b0 <atoi+0x20>
-  return n;
-}
- 4c5:	89 c8                	mov    %ecx,%eax
- 4c7:	5b                   	pop    %ebx
- 4c8:	5d                   	pop    %ebp
- 4c9:	c3                   	ret    
- 4ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000004d0 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 4d0:	f3 0f 1e fb          	endbr32 
- 4d4:	55                   	push   %ebp
- 4d5:	89 e5                	mov    %esp,%ebp
- 4d7:	57                   	push   %edi
- 4d8:	8b 45 10             	mov    0x10(%ebp),%eax
- 4db:	8b 55 08             	mov    0x8(%ebp),%edx
- 4de:	56                   	push   %esi
- 4df:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 4e2:	85 c0                	test   %eax,%eax
- 4e4:	7e 0f                	jle    4f5 <memmove+0x25>
- 4e6:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 4e8:	89 d7                	mov    %edx,%edi
- 4ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 4f0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 4f1:	39 f8                	cmp    %edi,%eax
- 4f3:	75 fb                	jne    4f0 <memmove+0x20>
-  return vdst;
-}
- 4f5:	5e                   	pop    %esi
- 4f6:	89 d0                	mov    %edx,%eax
- 4f8:	5f                   	pop    %edi
- 4f9:	5d                   	pop    %ebp
- 4fa:	c3                   	ret    
-
-000004fb <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 4fb:	b8 01 00 00 00       	mov    $0x1,%eax
- 500:	cd 40                	int    $0x40
- 502:	c3                   	ret    
-
-00000503 <exit>:
-SYSCALL(exit)
- 503:	b8 02 00 00 00       	mov    $0x2,%eax
- 508:	cd 40                	int    $0x40
- 50a:	c3                   	ret    
-
-0000050b <wait>:
-SYSCALL(wait)
- 50b:	b8 03 00 00 00       	mov    $0x3,%eax
- 510:	cd 40                	int    $0x40
- 512:	c3                   	ret    
-
-00000513 <pipe>:
-SYSCALL(pipe)
- 513:	b8 04 00 00 00       	mov    $0x4,%eax
- 518:	cd 40                	int    $0x40
- 51a:	c3                   	ret    
-
-0000051b <read>:
-SYSCALL(read)
- 51b:	b8 05 00 00 00       	mov    $0x5,%eax
- 520:	cd 40                	int    $0x40
- 522:	c3                   	ret    
-
-00000523 <write>:
-SYSCALL(write)
- 523:	b8 10 00 00 00       	mov    $0x10,%eax
- 528:	cd 40                	int    $0x40
- 52a:	c3                   	ret    
-
-0000052b <close>:
-SYSCALL(close)
- 52b:	b8 15 00 00 00       	mov    $0x15,%eax
- 530:	cd 40                	int    $0x40
- 532:	c3                   	ret    
-
-00000533 <kill>:
-SYSCALL(kill)
- 533:	b8 06 00 00 00       	mov    $0x6,%eax
- 538:	cd 40                	int    $0x40
- 53a:	c3                   	ret    
-
-0000053b <exec>:
-SYSCALL(exec)
- 53b:	b8 07 00 00 00       	mov    $0x7,%eax
- 540:	cd 40                	int    $0x40
- 542:	c3                   	ret    
-
-00000543 <open>:
-SYSCALL(open)
- 543:	b8 0f 00 00 00       	mov    $0xf,%eax
- 548:	cd 40                	int    $0x40
- 54a:	c3                   	ret    
-
-0000054b <mknod>:
-SYSCALL(mknod)
- 54b:	b8 11 00 00 00       	mov    $0x11,%eax
- 550:	cd 40                	int    $0x40
- 552:	c3                   	ret    
-
-00000553 <unlink>:
-SYSCALL(unlink)
- 553:	b8 12 00 00 00       	mov    $0x12,%eax
- 558:	cd 40                	int    $0x40
- 55a:	c3                   	ret    
-
-0000055b <fstat>:
-SYSCALL(fstat)
- 55b:	b8 08 00 00 00       	mov    $0x8,%eax
- 560:	cd 40                	int    $0x40
- 562:	c3                   	ret    
-
-00000563 <link>:
-SYSCALL(link)
- 563:	b8 13 00 00 00       	mov    $0x13,%eax
- 568:	cd 40                	int    $0x40
- 56a:	c3                   	ret    
-
-0000056b <mkdir>:
-SYSCALL(mkdir)
- 56b:	b8 14 00 00 00       	mov    $0x14,%eax
- 570:	cd 40                	int    $0x40
- 572:	c3                   	ret    
-
-00000573 <chdir>:
-SYSCALL(chdir)
- 573:	b8 09 00 00 00       	mov    $0x9,%eax
- 578:	cd 40                	int    $0x40
- 57a:	c3                   	ret    
-
-0000057b <dup>:
-SYSCALL(dup)
- 57b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 580:	cd 40                	int    $0x40
- 582:	c3                   	ret    
-
-00000583 <getpid>:
-SYSCALL(getpid)
- 583:	b8 0b 00 00 00       	mov    $0xb,%eax
- 588:	cd 40                	int    $0x40
- 58a:	c3                   	ret    
-
-0000058b <sbrk>:
-SYSCALL(sbrk)
- 58b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 590:	cd 40                	int    $0x40
- 592:	c3                   	ret    
-
-00000593 <sleep>:
-SYSCALL(sleep)
- 593:	b8 0d 00 00 00       	mov    $0xd,%eax
- 598:	cd 40                	int    $0x40
- 59a:	c3                   	ret    
-
-0000059b <uptime>:
-SYSCALL(uptime)
- 59b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 5a0:	cd 40                	int    $0x40
- 5a2:	c3                   	ret    
-
-000005a3 <draw>:
-SYSCALL(draw)
- 5a3:	b8 16 00 00 00       	mov    $0x16,%eax
- 5a8:	cd 40                	int    $0x40
- 5aa:	c3                   	ret    
-
-000005ab <thread_create>:
-SYSCALL(thread_create)
- 5ab:	b8 18 00 00 00       	mov    $0x18,%eax
- 5b0:	cd 40                	int    $0x40
- 5b2:	c3                   	ret    
-
-000005b3 <thread_join>:
-SYSCALL(thread_join)
- 5b3:	b8 19 00 00 00       	mov    $0x19,%eax
- 5b8:	cd 40                	int    $0x40
- 5ba:	c3                   	ret    
-
-000005bb <thread_exit>:
-SYSCALL(thread_exit)
- 5bb:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 5c0:	cd 40                	int    $0x40
- 5c2:	c3                   	ret    
- 5c3:	66 90                	xchg   %ax,%ax
- 5c5:	66 90                	xchg   %ax,%ax
- 5c7:	66 90                	xchg   %ax,%ax
- 5c9:	66 90                	xchg   %ax,%ax
- 5cb:	66 90                	xchg   %ax,%ax
- 5cd:	66 90                	xchg   %ax,%ax
- 5cf:	90                   	nop
-
-000005d0 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 5d0:	55                   	push   %ebp
- 5d1:	89 e5                	mov    %esp,%ebp
- 5d3:	57                   	push   %edi
- 5d4:	56                   	push   %esi
- 5d5:	53                   	push   %ebx
- 5d6:	83 ec 3c             	sub    $0x3c,%esp
- 5d9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 5dc:	89 d1                	mov    %edx,%ecx
-{
- 5de:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 5e1:	85 d2                	test   %edx,%edx
- 5e3:	0f 89 7f 00 00 00    	jns    668 <printint+0x98>
- 5e9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 5ed:	74 79                	je     668 <printint+0x98>
-    neg = 1;
- 5ef:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 5f6:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 5f8:	31 db                	xor    %ebx,%ebx
- 5fa:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 5fd:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 600:	89 c8                	mov    %ecx,%eax
- 602:	31 d2                	xor    %edx,%edx
- 604:	89 cf                	mov    %ecx,%edi
- 606:	f7 75 c4             	divl   -0x3c(%ebp)
- 609:	0f b6 92 50 0a 00 00 	movzbl 0xa50(%edx),%edx
- 610:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 613:	89 d8                	mov    %ebx,%eax
- 615:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 618:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 61b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 61e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 621:	76 dd                	jbe    600 <printint+0x30>
-  if(neg)
- 623:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 626:	85 c9                	test   %ecx,%ecx
- 628:	74 0c                	je     636 <printint+0x66>
-    buf[i++] = '-';
- 62a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 62f:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 631:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 636:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 639:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 63d:	eb 07                	jmp    646 <printint+0x76>
- 63f:	90                   	nop
- 640:	0f b6 13             	movzbl (%ebx),%edx
- 643:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 646:	83 ec 04             	sub    $0x4,%esp
- 649:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 64c:	6a 01                	push   $0x1
- 64e:	56                   	push   %esi
- 64f:	57                   	push   %edi
- 650:	e8 ce fe ff ff       	call   523 <write>
-  while(--i >= 0)
- 655:	83 c4 10             	add    $0x10,%esp
- 658:	39 de                	cmp    %ebx,%esi
- 65a:	75 e4                	jne    640 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 65c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 65f:	5b                   	pop    %ebx
- 660:	5e                   	pop    %esi
- 661:	5f                   	pop    %edi
- 662:	5d                   	pop    %ebp
- 663:	c3                   	ret    
- 664:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 668:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 66f:	eb 87                	jmp    5f8 <printint+0x28>
- 671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 678:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 67f:	90                   	nop
-
-00000680 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 680:	f3 0f 1e fb          	endbr32 
- 684:	55                   	push   %ebp
- 685:	89 e5                	mov    %esp,%ebp
- 687:	57                   	push   %edi
- 688:	56                   	push   %esi
- 689:	53                   	push   %ebx
- 68a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 68d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 690:	0f b6 1e             	movzbl (%esi),%ebx
- 693:	84 db                	test   %bl,%bl
- 695:	0f 84 b4 00 00 00    	je     74f <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 69b:	8d 45 10             	lea    0x10(%ebp),%eax
- 69e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 6a1:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 6a4:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 6a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 6a9:	eb 33                	jmp    6de <printf+0x5e>
- 6ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6af:	90                   	nop
- 6b0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 6b3:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 6b8:	83 f8 25             	cmp    $0x25,%eax
- 6bb:	74 17                	je     6d4 <printf+0x54>
-  write(fd, &c, 1);
- 6bd:	83 ec 04             	sub    $0x4,%esp
- 6c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 6c3:	6a 01                	push   $0x1
- 6c5:	57                   	push   %edi
- 6c6:	ff 75 08             	pushl  0x8(%ebp)
- 6c9:	e8 55 fe ff ff       	call   523 <write>
- 6ce:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 6d1:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 6d4:	0f b6 1e             	movzbl (%esi),%ebx
- 6d7:	83 c6 01             	add    $0x1,%esi
- 6da:	84 db                	test   %bl,%bl
- 6dc:	74 71                	je     74f <printf+0xcf>
-    c = fmt[i] & 0xff;
- 6de:	0f be cb             	movsbl %bl,%ecx
- 6e1:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 6e4:	85 d2                	test   %edx,%edx
- 6e6:	74 c8                	je     6b0 <printf+0x30>
-      }
-    } else if(state == '%'){
- 6e8:	83 fa 25             	cmp    $0x25,%edx
- 6eb:	75 e7                	jne    6d4 <printf+0x54>
-      if(c == 'd'){
- 6ed:	83 f8 64             	cmp    $0x64,%eax
- 6f0:	0f 84 9a 00 00 00    	je     790 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 6f6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 6fc:	83 f9 70             	cmp    $0x70,%ecx
- 6ff:	74 5f                	je     760 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 701:	83 f8 73             	cmp    $0x73,%eax
- 704:	0f 84 d6 00 00 00    	je     7e0 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 70a:	83 f8 63             	cmp    $0x63,%eax
- 70d:	0f 84 8d 00 00 00    	je     7a0 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 713:	83 f8 25             	cmp    $0x25,%eax
- 716:	0f 84 b4 00 00 00    	je     7d0 <printf+0x150>
-  write(fd, &c, 1);
- 71c:	83 ec 04             	sub    $0x4,%esp
- 71f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 723:	6a 01                	push   $0x1
- 725:	57                   	push   %edi
- 726:	ff 75 08             	pushl  0x8(%ebp)
- 729:	e8 f5 fd ff ff       	call   523 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 72e:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 731:	83 c4 0c             	add    $0xc,%esp
- 734:	6a 01                	push   $0x1
- 736:	83 c6 01             	add    $0x1,%esi
- 739:	57                   	push   %edi
- 73a:	ff 75 08             	pushl  0x8(%ebp)
- 73d:	e8 e1 fd ff ff       	call   523 <write>
-  for(i = 0; fmt[i]; i++){
- 742:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 746:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 749:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 74b:	84 db                	test   %bl,%bl
- 74d:	75 8f                	jne    6de <printf+0x5e>
-    }
-  }
-}
- 74f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 752:	5b                   	pop    %ebx
- 753:	5e                   	pop    %esi
- 754:	5f                   	pop    %edi
- 755:	5d                   	pop    %ebp
- 756:	c3                   	ret    
- 757:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 75e:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 760:	83 ec 0c             	sub    $0xc,%esp
- 763:	b9 10 00 00 00       	mov    $0x10,%ecx
- 768:	6a 00                	push   $0x0
- 76a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 76d:	8b 45 08             	mov    0x8(%ebp),%eax
- 770:	8b 13                	mov    (%ebx),%edx
- 772:	e8 59 fe ff ff       	call   5d0 <printint>
-        ap++;
- 777:	89 d8                	mov    %ebx,%eax
- 779:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 77c:	31 d2                	xor    %edx,%edx
-        ap++;
- 77e:	83 c0 04             	add    $0x4,%eax
- 781:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 784:	e9 4b ff ff ff       	jmp    6d4 <printf+0x54>
- 789:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 790:	83 ec 0c             	sub    $0xc,%esp
- 793:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 798:	6a 01                	push   $0x1
- 79a:	eb ce                	jmp    76a <printf+0xea>
- 79c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 7a0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 7a3:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 7a6:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 7a8:	6a 01                	push   $0x1
-        ap++;
- 7aa:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 7ad:	57                   	push   %edi
- 7ae:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 7b1:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 7b4:	e8 6a fd ff ff       	call   523 <write>
-        ap++;
- 7b9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 7bc:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 7bf:	31 d2                	xor    %edx,%edx
- 7c1:	e9 0e ff ff ff       	jmp    6d4 <printf+0x54>
- 7c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 7cd:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 7d0:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 7d3:	83 ec 04             	sub    $0x4,%esp
- 7d6:	e9 59 ff ff ff       	jmp    734 <printf+0xb4>
- 7db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 7df:	90                   	nop
-        s = (char*)*ap;
- 7e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 7e3:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 7e5:	83 c0 04             	add    $0x4,%eax
- 7e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 7eb:	85 db                	test   %ebx,%ebx
- 7ed:	74 17                	je     806 <printf+0x186>
-        while(*s != 0){
- 7ef:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 7f2:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 7f4:	84 c0                	test   %al,%al
- 7f6:	0f 84 d8 fe ff ff    	je     6d4 <printf+0x54>
- 7fc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 7ff:	89 de                	mov    %ebx,%esi
- 801:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 804:	eb 1a                	jmp    820 <printf+0x1a0>
-          s = "(null)";
- 806:	bb 47 0a 00 00       	mov    $0xa47,%ebx
-        while(*s != 0){
- 80b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 80e:	b8 28 00 00 00       	mov    $0x28,%eax
- 813:	89 de                	mov    %ebx,%esi
- 815:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 818:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 81f:	90                   	nop
-  write(fd, &c, 1);
- 820:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 823:	83 c6 01             	add    $0x1,%esi
- 826:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 829:	6a 01                	push   $0x1
- 82b:	57                   	push   %edi
- 82c:	53                   	push   %ebx
- 82d:	e8 f1 fc ff ff       	call   523 <write>
-        while(*s != 0){
- 832:	0f b6 06             	movzbl (%esi),%eax
- 835:	83 c4 10             	add    $0x10,%esp
- 838:	84 c0                	test   %al,%al
- 83a:	75 e4                	jne    820 <printf+0x1a0>
- 83c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 83f:	31 d2                	xor    %edx,%edx
- 841:	e9 8e fe ff ff       	jmp    6d4 <printf+0x54>
- 846:	66 90                	xchg   %ax,%ax
- 848:	66 90                	xchg   %ax,%ax
- 84a:	66 90                	xchg   %ax,%ax
- 84c:	66 90                	xchg   %ax,%ax
- 84e:	66 90                	xchg   %ax,%ax
-
-00000850 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 850:	f3 0f 1e fb          	endbr32 
- 854:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 855:	a1 18 0e 00 00       	mov    0xe18,%eax
-{
- 85a:	89 e5                	mov    %esp,%ebp
- 85c:	57                   	push   %edi
- 85d:	56                   	push   %esi
- 85e:	53                   	push   %ebx
- 85f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 862:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 864:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 867:	39 c8                	cmp    %ecx,%eax
- 869:	73 15                	jae    880 <free+0x30>
- 86b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 86f:	90                   	nop
- 870:	39 d1                	cmp    %edx,%ecx
- 872:	72 14                	jb     888 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 874:	39 d0                	cmp    %edx,%eax
- 876:	73 10                	jae    888 <free+0x38>
-{
- 878:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 87a:	8b 10                	mov    (%eax),%edx
- 87c:	39 c8                	cmp    %ecx,%eax
- 87e:	72 f0                	jb     870 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 880:	39 d0                	cmp    %edx,%eax
- 882:	72 f4                	jb     878 <free+0x28>
- 884:	39 d1                	cmp    %edx,%ecx
- 886:	73 f0                	jae    878 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 888:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 88b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 88e:	39 fa                	cmp    %edi,%edx
- 890:	74 1e                	je     8b0 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 892:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 895:	8b 50 04             	mov    0x4(%eax),%edx
- 898:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 89b:	39 f1                	cmp    %esi,%ecx
- 89d:	74 28                	je     8c7 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 89f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 8a1:	5b                   	pop    %ebx
-  freep = p;
- 8a2:	a3 18 0e 00 00       	mov    %eax,0xe18
-}
- 8a7:	5e                   	pop    %esi
- 8a8:	5f                   	pop    %edi
- 8a9:	5d                   	pop    %ebp
- 8aa:	c3                   	ret    
- 8ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 8af:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 8b0:	03 72 04             	add    0x4(%edx),%esi
- 8b3:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 8b6:	8b 10                	mov    (%eax),%edx
- 8b8:	8b 12                	mov    (%edx),%edx
- 8ba:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 8bd:	8b 50 04             	mov    0x4(%eax),%edx
- 8c0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 8c3:	39 f1                	cmp    %esi,%ecx
- 8c5:	75 d8                	jne    89f <free+0x4f>
-    p->s.size += bp->s.size;
- 8c7:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 8ca:	a3 18 0e 00 00       	mov    %eax,0xe18
-    p->s.size += bp->s.size;
- 8cf:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 8d2:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 8d5:	89 10                	mov    %edx,(%eax)
-}
- 8d7:	5b                   	pop    %ebx
- 8d8:	5e                   	pop    %esi
- 8d9:	5f                   	pop    %edi
- 8da:	5d                   	pop    %ebp
- 8db:	c3                   	ret    
- 8dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000008e0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 8e0:	f3 0f 1e fb          	endbr32 
- 8e4:	55                   	push   %ebp
- 8e5:	89 e5                	mov    %esp,%ebp
- 8e7:	57                   	push   %edi
- 8e8:	56                   	push   %esi
- 8e9:	53                   	push   %ebx
- 8ea:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 8ed:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 8f0:	8b 3d 18 0e 00 00    	mov    0xe18,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 8f6:	8d 70 07             	lea    0x7(%eax),%esi
- 8f9:	c1 ee 03             	shr    $0x3,%esi
- 8fc:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 8ff:	85 ff                	test   %edi,%edi
- 901:	0f 84 a9 00 00 00    	je     9b0 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 907:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 909:	8b 48 04             	mov    0x4(%eax),%ecx
- 90c:	39 f1                	cmp    %esi,%ecx
- 90e:	73 6d                	jae    97d <malloc+0x9d>
- 910:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 916:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 91b:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 91e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 925:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 928:	eb 17                	jmp    941 <malloc+0x61>
- 92a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 930:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 932:	8b 4a 04             	mov    0x4(%edx),%ecx
- 935:	39 f1                	cmp    %esi,%ecx
- 937:	73 4f                	jae    988 <malloc+0xa8>
- 939:	8b 3d 18 0e 00 00    	mov    0xe18,%edi
- 93f:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 941:	39 c7                	cmp    %eax,%edi
- 943:	75 eb                	jne    930 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 945:	83 ec 0c             	sub    $0xc,%esp
- 948:	ff 75 e4             	pushl  -0x1c(%ebp)
- 94b:	e8 3b fc ff ff       	call   58b <sbrk>
-  if(p == (char*)-1)
- 950:	83 c4 10             	add    $0x10,%esp
- 953:	83 f8 ff             	cmp    $0xffffffff,%eax
- 956:	74 1b                	je     973 <malloc+0x93>
-  hp->s.size = nu;
- 958:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 95b:	83 ec 0c             	sub    $0xc,%esp
- 95e:	83 c0 08             	add    $0x8,%eax
- 961:	50                   	push   %eax
- 962:	e8 e9 fe ff ff       	call   850 <free>
-  return freep;
- 967:	a1 18 0e 00 00       	mov    0xe18,%eax
-      if((p = morecore(nunits)) == 0)
- 96c:	83 c4 10             	add    $0x10,%esp
- 96f:	85 c0                	test   %eax,%eax
- 971:	75 bd                	jne    930 <malloc+0x50>
-        return 0;
-  }
-}
- 973:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 976:	31 c0                	xor    %eax,%eax
-}
- 978:	5b                   	pop    %ebx
- 979:	5e                   	pop    %esi
- 97a:	5f                   	pop    %edi
- 97b:	5d                   	pop    %ebp
- 97c:	c3                   	ret    
-    if(p->s.size >= nunits){
- 97d:	89 c2                	mov    %eax,%edx
- 97f:	89 f8                	mov    %edi,%eax
- 981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- 988:	39 ce                	cmp    %ecx,%esi
- 98a:	74 54                	je     9e0 <malloc+0x100>
-        p->s.size -= nunits;
- 98c:	29 f1                	sub    %esi,%ecx
- 98e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- 991:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- 994:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- 997:	a3 18 0e 00 00       	mov    %eax,0xe18
-}
- 99c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 99f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- 9a2:	5b                   	pop    %ebx
- 9a3:	5e                   	pop    %esi
- 9a4:	5f                   	pop    %edi
- 9a5:	5d                   	pop    %ebp
- 9a6:	c3                   	ret    
- 9a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 9ae:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- 9b0:	c7 05 18 0e 00 00 1c 	movl   $0xe1c,0xe18
- 9b7:	0e 00 00 
-    base.s.size = 0;
- 9ba:	bf 1c 0e 00 00       	mov    $0xe1c,%edi
-    base.s.ptr = freep = prevp = &base;
- 9bf:	c7 05 1c 0e 00 00 1c 	movl   $0xe1c,0xe1c
- 9c6:	0e 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 9c9:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- 9cb:	c7 05 20 0e 00 00 00 	movl   $0x0,0xe20
- 9d2:	00 00 00 
-    if(p->s.size >= nunits){
- 9d5:	e9 36 ff ff ff       	jmp    910 <malloc+0x30>
- 9da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- 9e0:	8b 0a                	mov    (%edx),%ecx
- 9e2:	89 08                	mov    %ecx,(%eax)
- 9e4:	eb b1                	jmp    997 <malloc+0xb7>
diff -ruN xv6-public/thread.c xv6-public-mynew/thread.c
--- xv6-public/thread.c	2022-09-05 17:54:04.014772944 +0530
+++ xv6-public-mynew/thread.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,74 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-#include "lockFunc.h"
-
-struct thread_spinlock lock;
-struct thread_mutex ml;
-
-struct balance {
-	char name[32];
-	int amount;
-};
-
-volatile int total_balance = 0;
-
-// Used to stall processor for say one cycle 
-volatile unsigned int delay(unsigned int d) {
-	unsigned int i;
-	for (i = 0; i < d; i++) {
-		__asm volatile( "nop" ::: );
-	}
-
-	return i;
-}
-
-void do_work(void *arg) {
-	int i;
-	int old;
-
-	struct balance *b = (struct balance*) arg;
-	printf(1, "Starting do_work: s:%s\n", b->name);
-
-	for (i = 0; i < b->amount; i++) {
-		// Usage: If we want to test lock please release these codes
-		// thread_spin_lock(&lock);
-		// thread_mutex_lock(&ml);
-		old = total_balance;
-		delay(100000);
-		total_balance = old + 1;
-		// thread_mutex_unlock(&ml);
-		// thread_spin_unlock(&lock);
-	}
-
-	printf(1, "Done s:%x\n", b->name);
-
-	thread_exit();
-	return;
-}
-
-int main(int argc, char *argv[]) {
-
-	//   thread_spin_init(&lock);
-	//  thread_mutex_init(&ml);
-
-	struct balance b1 = { "b1", 3200 };
-	struct balance b2 = { "b2", 2800 };
-
-	void *s1, *s2;
-	int t1, t2, r1, r2;
-
-	s1 = malloc(4096);
-	s2 = malloc(4096);
-
-	t1 = thread_create(do_work, (void*) &b1, s1);
-	t2 = thread_create(do_work, (void*) &b2, s2);
-
-	r1 = thread_join();
-	r2 = thread_join();
-
-	printf(1, "Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", t1, r1,
-			t2, r2, total_balance);
-
-	exit();
-}
\ No newline at end of file
diff -ruN xv6-public/thread.d xv6-public-mynew/thread.d
--- xv6-public/thread.d	2022-09-05 17:54:41.251626297 +0530
+++ xv6-public-mynew/thread.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-thread.o: thread.c /usr/include/stdc-predef.h types.h stat.h user.h \
- lockFunc.h lock.h
Binary files xv6-public/thread.o and xv6-public-mynew/thread.o differ
diff -ruN xv6-public/thread.sym xv6-public-mynew/thread.sym
--- xv6-public/thread.sym	2022-09-05 17:54:41.283627013 +0530
+++ xv6-public-mynew/thread.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,72 +0,0 @@
-00000000 .text
-000009e8 .rodata
-00000a64 .eh_frame
-00000e14 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 thread.c
-00000000 ulib.c
-00000000 printf.c
-000005d0 printint
-00000a50 digits.1097
-00000000 umalloc.c
-00000e18 freep
-00000e1c base
-00000260 thread_mutex_unlock
-000002a0 strcpy
-00000680 printf
-000005bb thread_exit
-000004d0 memmove
-0000054b mknod
-00000e24 lock
-000003c0 gets
-00000583 getpid
-000001f0 thread_mutex_init
-000008e0 malloc
-00000593 sleep
-00000190 thread_spin_init
-000001d0 thread_spin_unlock
-00000513 pipe
-00000523 write
-00000e2c ml
-000001b0 thread_spin_lock
-0000055b fstat
-00000533 kill
-00000573 chdir
-0000053b exec
-0000050b wait
-0000051b read
-00000553 unlink
-000004fb fork
-0000058b sbrk
-0000059b uptime
-00000e14 __bss_start
-00000110 do_work
-00000360 memset
-00000000 main
-00000e14 total_balance
-000002d0 strcmp
-0000057b dup
-00000280 delay
-00000440 stat
-00000e14 _edata
-00000e34 _end
-00000563 link
-00000503 exit
-00000490 atoi
-000005a3 draw
-00000320 strlen
-00000543 open
-00000380 strchr
-000005ab thread_create
-00000210 thread_mutex_lock
-0000056b mkdir
-0000052b close
-000005b3 thread_join
-00000850 free
diff -ruN xv6-public/toc.ftr xv6-public-mynew/toc.ftr
--- xv6-public/toc.ftr	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/toc.ftr	1970-01-01 05:30:00.000000000 +0530
@@ -1,13 +0,0 @@
-
-
-The source listing is preceded by a cross-reference that lists every defined 
-constant, struct, global variable, and function in xv6.  Each entry gives,
-on the same line as the name, the line number (or, in a few cases, numbers)
-where the name is defined.  Successive lines in an entry list the line
-numbers where the name is used.  For example, this entry:
-
-    swtch 2658
-        0374 2428 2466 2657 2658
-
-indicates that swtch is defined on line 2658 and is mentioned on five lines
-on sheets 03, 24, and 26.
diff -ruN xv6-public/toc.hdr xv6-public-mynew/toc.hdr
--- xv6-public/toc.hdr	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/toc.hdr	1970-01-01 05:30:00.000000000 +0530
@@ -1,6 +0,0 @@
-The numbers to the left of the file names in the table are sheet numbers.
-The source code has been printed in a double column format with fifty
-lines per column, giving one hundred lines per sheet (or page).
-Thus there is a convenient relationship between line numbers and sheet numbers.
-
-
Binary files xv6-public/trapasm.o and xv6-public-mynew/trapasm.o differ
diff -ruN xv6-public/trapasm.S xv6-public-mynew/trapasm.S
--- xv6-public/trapasm.S	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/trapasm.S	1970-01-01 05:30:00.000000000 +0530
@@ -1,32 +0,0 @@
-#include "mmu.h"
-
-  # vectors.S sends all traps here.
-.globl alltraps
-alltraps:
-  # Build trap frame.
-  pushl %ds
-  pushl %es
-  pushl %fs
-  pushl %gs
-  pushal
-  
-  # Set up data segments.
-  movw $(SEG_KDATA<<3), %ax
-  movw %ax, %ds
-  movw %ax, %es
-
-  # Call trap(tf), where tf=%esp
-  pushl %esp
-  call trap
-  addl $4, %esp
-
-  # Return falls through to trapret...
-.globl trapret
-trapret:
-  popal
-  popl %gs
-  popl %fs
-  popl %es
-  popl %ds
-  addl $0x8, %esp  # trapno and errcode
-  iret
diff -ruN xv6-public/trap.c xv6-public-mynew/trap.c
--- xv6-public/trap.c	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/trap.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,112 +0,0 @@
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-#include "traps.h"
-#include "spinlock.h"
-
-// Interrupt descriptor table (shared by all CPUs).
-struct gatedesc idt[256];
-extern uint vectors[];  // in vectors.S: array of 256 entry pointers
-struct spinlock tickslock;
-uint ticks;
-
-void
-tvinit(void)
-{
-  int i;
-
-  for(i = 0; i < 256; i++)
-    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-
-  initlock(&tickslock, "time");
-}
-
-void
-idtinit(void)
-{
-  lidt(idt, sizeof(idt));
-}
-
-//PAGEBREAK: 41
-void
-trap(struct trapframe *tf)
-{
-  if(tf->trapno == T_SYSCALL){
-    if(myproc()->killed)
-      exit();
-    myproc()->tf = tf;
-    syscall();
-    if(myproc()->killed)
-      exit();
-    return;
-  }
-
-  switch(tf->trapno){
-  case T_IRQ0 + IRQ_TIMER:
-    if(cpuid() == 0){
-      acquire(&tickslock);
-      ticks++;
-      wakeup(&ticks);
-      release(&tickslock);
-    }
-    lapiceoi();
-    break;
-  case T_IRQ0 + IRQ_IDE:
-    ideintr();
-    lapiceoi();
-    break;
-  case T_IRQ0 + IRQ_IDE+1:
-    // Bochs generates spurious IDE1 interrupts.
-    break;
-  case T_IRQ0 + IRQ_KBD:
-    kbdintr();
-    lapiceoi();
-    break;
-  case T_IRQ0 + IRQ_COM1:
-    uartintr();
-    lapiceoi();
-    break;
-  case T_IRQ0 + 7:
-  case T_IRQ0 + IRQ_SPURIOUS:
-    cprintf("cpu%d: spurious interrupt at %x:%x\n",
-            cpuid(), tf->cs, tf->eip);
-    lapiceoi();
-    break;
-
-  //PAGEBREAK: 13
-  default:
-    if(myproc() == 0 || (tf->cs&3) == 0){
-      // In kernel, it must be our mistake.
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-              tf->trapno, cpuid(), tf->eip, rcr2());
-      panic("trap");
-    }
-    // In user space, assume process misbehaved.
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-            "eip 0x%x addr 0x%x--kill proc\n",
-            myproc()->pid, myproc()->name, tf->trapno,
-            tf->err, cpuid(), tf->eip, rcr2());
-    myproc()->killed = 1;
-  }
-
-  // Force process exit if it has been killed and is in user space.
-  // (If it is still executing in the kernel, let it keep running
-  // until it gets to the regular system call return.)
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-    exit();
-
-  // Force process to give up CPU on clock tick.
-  // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
-
-  // Check if the process has been killed since we yielded
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-    exit();
-}
diff -ruN xv6-public/trap.d xv6-public-mynew/trap.d
--- xv6-public/trap.d	2022-09-05 09:51:08.794999240 +0530
+++ xv6-public-mynew/trap.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-trap.o: trap.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h proc.h x86.h traps.h spinlock.h
Binary files xv6-public/trap.o and xv6-public-mynew/trap.o differ
diff -ruN xv6-public/traps.h xv6-public-mynew/traps.h
--- xv6-public/traps.h	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/traps.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,38 +0,0 @@
-// x86 trap and interrupt constants.
-
-// Processor-defined:
-#define T_DIVIDE         0      // divide error
-#define T_DEBUG          1      // debug exception
-#define T_NMI            2      // non-maskable interrupt
-#define T_BRKPT          3      // breakpoint
-#define T_OFLOW          4      // overflow
-#define T_BOUND          5      // bounds check
-#define T_ILLOP          6      // illegal opcode
-#define T_DEVICE         7      // device not available
-#define T_DBLFLT         8      // double fault
-// #define T_COPROC      9      // reserved (not used since 486)
-#define T_TSS           10      // invalid task switch segment
-#define T_SEGNP         11      // segment not present
-#define T_STACK         12      // stack exception
-#define T_GPFLT         13      // general protection fault
-#define T_PGFLT         14      // page fault
-// #define T_RES        15      // reserved
-#define T_FPERR         16      // floating point error
-#define T_ALIGN         17      // aligment check
-#define T_MCHK          18      // machine check
-#define T_SIMDERR       19      // SIMD floating point error
-
-// These are arbitrarily chosen, but with care not to overlap
-// processor defined exceptions or interrupt vectors.
-#define T_SYSCALL       64      // system call
-#define T_DEFAULT      500      // catchall
-
-#define T_IRQ0          32      // IRQ 0 corresponds to int T_IRQ
-
-#define IRQ_TIMER        0
-#define IRQ_KBD          1
-#define IRQ_COM1         4
-#define IRQ_IDE         14
-#define IRQ_ERROR       19
-#define IRQ_SPURIOUS    31
-
diff -ruN xv6-public/TRICKS xv6-public-mynew/TRICKS
--- xv6-public/TRICKS	2022-08-12 16:28:04.261997041 +0530
+++ xv6-public-mynew/TRICKS	1970-01-01 05:30:00.000000000 +0530
@@ -1,140 +0,0 @@
-This file lists subtle things that might not be commented 
-as well as they should be in the source code and that
-might be worth pointing out in a longer explanation or in class.
-
----
-
-[2009/07/12: No longer relevant; forkret1 changed
-and this is now cleaner.]
-
-forkret1 in trapasm.S is called with a tf argument.
-In order to use it, forkret1 copies the tf pointer into
-%esp and then jumps to trapret, which pops the 
-register state out of the trap frame.  If an interrupt
-came in between the mov tf, %esp and the iret that
-goes back out to user space, the interrupt stack frame
-would end up scribbling over the tf and whatever memory
-lay under it.
-
-Why is this safe?  Because forkret1 is only called
-the first time a process returns to user space, and
-at that point, cp->tf is set to point to a trap frame
-constructed at the top of cp's kernel stack.  So tf 
-*is* a valid %esp that can hold interrupt state.
-
-If other tf's were used in forkret1, we could add
-a cli before the mov tf, %esp.
-
----
-
-In pushcli, must cli() no matter what.  It is not safe to do
-
-  if(cpus[cpu()].ncli == 0)
-    cli();
-  cpus[cpu()].ncli++;
-
-because if interrupts are off then we might call cpu(), get
-rescheduled to a different cpu, look at cpus[oldcpu].ncli,
-and wrongly decide not to disable interrupts on the new cpu.
-
-Instead do 
-
-  cli();
-  cpus[cpu()].ncli++;
-
-always.
-
----
-
-There is a (harmless) race in pushcli, which does
-
-	eflags = readeflags();
-	cli();
-	if(c->ncli++ == 0)
-		c->intena = eflags & FL_IF;
-
-Consider a bottom-level pushcli.  
-If interrupts are disabled already, then the right thing
-happens: read_eflags finds that FL_IF is not set,
-and intena = 0.  If interrupts are enabled, then
-it is less clear that the right thing happens:
-the readeflags can execute, then the process
-can get preempted and rescheduled on another cpu,
-and then once it starts running, perhaps with 
-interrupts disabled (can happen since the scheduler
-only enables interrupts once per scheduling loop,
-not every time it schedules a process), it will 
-incorrectly record that interrupts *were* enabled.
-This doesn't matter, because if it was safe to be
-running with interrupts enabled before the context
-switch, it is still safe (and arguably more correct)
-to run with them enabled after the context switch too.
-
-In fact it would be safe if scheduler always set
-	c->intena = 1;
-before calling swtch, and perhaps it should.
-
----
-
-The x86's processor-ordering memory model 
-matches spin locks well, so no explicit memory
-synchronization instructions are required in
-acquire and release.  
-
-Consider two sequences of code on different CPUs:
-
-CPU0
-A;
-release(lk);
-
-and
-
-CPU1
-acquire(lk);
-B;
-
-We want to make sure that:
-  - all reads in B see the effects of writes in A.
-  - all reads in A do *not* see the effects of writes in B.
- 
-The x86 guarantees that writes in A will go out
-to memory before the write of lk->locked = 0 in 
-release(lk).  It further guarantees that CPU1 
-will observe CPU0's write of lk->locked = 0 only
-after observing the earlier writes by CPU0.
-So any reads in B are guaranteed to observe the
-effects of writes in A.
-
-According to the Intel manual behavior spec, the
-second condition requires a serialization instruction
-in release, to avoid reads in A happening after giving
-up lk.  No Intel SMP processor in existence actually
-moves reads down after writes, but the language in
-the spec allows it.  There is no telling whether future
-processors will need it.
-
----
-
-The code in fork needs to read np->pid before
-setting np->state to RUNNABLE.  The following
-is not a correct way to do this:
-
-	int
-	fork(void)
-	{
-	  ...
-	  np->state = RUNNABLE;
-	  return np->pid; // oops
-	}
-
-After setting np->state to RUNNABLE, some other CPU
-might run the process, it might exit, and then it might
-get reused for a different process (with a new pid), all
-before the return statement.  So it's not safe to just
-"return np->pid". Even saving a copy of np->pid before
-setting np->state isn't safe, since the compiler is
-allowed to re-order statements.
-
-The real code saves a copy of np->pid, then acquires a lock
-around the write to np->state. The acquire() prevents the
-compiler from re-ordering.
diff -ruN xv6-public/types.h xv6-public-mynew/types.h
--- xv6-public/types.h	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/types.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,4 +0,0 @@
-typedef unsigned int   uint;
-typedef unsigned short ushort;
-typedef unsigned char  uchar;
-typedef uint pde_t;
diff -ruN xv6-public/uart.c xv6-public-mynew/uart.c
--- xv6-public/uart.c	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/uart.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,77 +0,0 @@
-// Intel 8250 serial port (UART).
-
-#include "types.h"
-#include "defs.h"
-#include "param.h"
-#include "traps.h"
-#include "spinlock.h"
-#include "sleeplock.h"
-#include "fs.h"
-#include "file.h"
-#include "mmu.h"
-#include "proc.h"
-#include "x86.h"
-
-#define COM1    0x3f8
-
-static int uart;    // is there a uart?
-
-void
-uartinit(void)
-{
-  char *p;
-
-  // Turn off the FIFO
-  outb(COM1+2, 0);
-
-  // 9600 baud, 8 data bits, 1 stop bit, parity off.
-  outb(COM1+3, 0x80);    // Unlock divisor
-  outb(COM1+0, 115200/9600);
-  outb(COM1+1, 0);
-  outb(COM1+3, 0x03);    // Lock divisor, 8 data bits.
-  outb(COM1+4, 0);
-  outb(COM1+1, 0x01);    // Enable receive interrupts.
-
-  // If status is 0xFF, no serial port.
-  if(inb(COM1+5) == 0xFF)
-    return;
-  uart = 1;
-
-  // Acknowledge pre-existing interrupt conditions;
-  // enable interrupts.
-  inb(COM1+2);
-  inb(COM1+0);
-  ioapicenable(IRQ_COM1, 0);
-
-  // Announce that we're here.
-  for(p="xv6...\n"; *p; p++)
-    uartputc(*p);
-}
-
-void
-uartputc(int c)
-{
-  int i;
-
-  if(!uart)
-    return;
-  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-    microdelay(10);
-  outb(COM1+0, c);
-}
-
-static int
-uartgetc(void)
-{
-  if(!uart)
-    return -1;
-  if(!(inb(COM1+5) & 0x01))
-    return -1;
-  return inb(COM1+0);
-}
-
-void
-uartintr(void)
-{
-  consoleintr(uartgetc);
-}
diff -ruN xv6-public/uart.d xv6-public-mynew/uart.d
--- xv6-public/uart.d	2022-09-05 09:51:08.850999242 +0530
+++ xv6-public-mynew/uart.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-uart.o: uart.c /usr/include/stdc-predef.h types.h defs.h param.h traps.h \
- spinlock.h sleeplock.h fs.h file.h mmu.h proc.h x86.h
Binary files xv6-public/uart.o and xv6-public-mynew/uart.o differ
diff -ruN xv6-public/ulib.c xv6-public-mynew/ulib.c
--- xv6-public/ulib.c	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/ulib.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,106 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "fcntl.h"
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-    ;
-  return os;
-}
-
-int
-strcmp(const char *p, const char *q)
-{
-  while(*p && *p == *q)
-    p++, q++;
-  return (uchar)*p - (uchar)*q;
-}
-
-uint
-strlen(const char *s)
-{
-  int n;
-
-  for(n = 0; s[n]; n++)
-    ;
-  return n;
-}
-
-void*
-memset(void *dst, int c, uint n)
-{
-  stosb(dst, c, n);
-  return dst;
-}
-
-char*
-strchr(const char *s, char c)
-{
-  for(; *s; s++)
-    if(*s == c)
-      return (char*)s;
-  return 0;
-}
-
-char*
-gets(char *buf, int max)
-{
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
-    if(cc < 1)
-      break;
-    buf[i++] = c;
-    if(c == '\n' || c == '\r')
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
-
-int
-stat(const char *n, struct stat *st)
-{
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
-  if(fd < 0)
-    return -1;
-  r = fstat(fd, st);
-  close(fd);
-  return r;
-}
-
-int
-atoi(const char *s)
-{
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
-    n = n*10 + *s++ - '0';
-  return n;
-}
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
-    *dst++ = *src++;
-  return vdst;
-}
diff -ruN xv6-public/ulib.d xv6-public-mynew/ulib.d
--- xv6-public/ulib.d	2022-09-05 09:51:04.646999121 +0530
+++ xv6-public-mynew/ulib.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-ulib.o: ulib.c /usr/include/stdc-predef.h types.h stat.h fcntl.h user.h \
- x86.h
Binary files xv6-public/ulib.o and xv6-public-mynew/ulib.o differ
diff -ruN xv6-public/umalloc.c xv6-public-mynew/umalloc.c
--- xv6-public/umalloc.c	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/umalloc.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,90 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-#include "param.h"
-
-// Memory allocator by Kernighan and Ritchie,
-// The C programming Language, 2nd ed.  Section 8.7.
-
-typedef long Align;
-
-union header {
-  struct {
-    union header *ptr;
-    uint size;
-  } s;
-  Align x;
-};
-
-typedef union header Header;
-
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
-  if(bp + bp->s.size == p->s.ptr){
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
-
-static Header*
-morecore(uint nu)
-{
-  char *p;
-  Header *hp;
-
-  if(nu < 4096)
-    nu = 4096;
-  p = sbrk(nu * sizeof(Header));
-  if(p == (char*)-1)
-    return 0;
-  hp = (Header*)p;
-  hp->s.size = nu;
-  free((void*)(hp + 1));
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-  if((prevp = freep) == 0){
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    if(p->s.size >= nunits){
-      if(p->s.size == nunits)
-        prevp->s.ptr = p->s.ptr;
-      else {
-        p->s.size -= nunits;
-        p += p->s.size;
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
-  }
-}
diff -ruN xv6-public/umalloc.d xv6-public-mynew/umalloc.d
--- xv6-public/umalloc.d	2022-09-05 09:51:04.810999125 +0530
+++ xv6-public-mynew/umalloc.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-umalloc.o: umalloc.c /usr/include/stdc-predef.h types.h stat.h user.h \
- param.h
Binary files xv6-public/umalloc.o and xv6-public-mynew/umalloc.o differ
diff -ruN xv6-public/user.h xv6-public-mynew/user.h
--- xv6-public/user.h	2022-08-31 17:21:33.366357203 +0530
+++ xv6-public-mynew/user.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,43 +0,0 @@
-struct stat;
-struct rtcdate;
-
-// system calls
-int fork(void);
-int exit(void) __attribute__((noreturn));
-int wait(void);
-int pipe(int*);
-int write(int, const void*, int);
-int read(int, void*, int);
-int close(int);
-int kill(int);
-int exec(char*, char**);
-int open(const char*, int);
-int mknod(const char*, short, short);
-int unlink(const char*);
-int fstat(int fd, struct stat*);
-int link(const char*, const char*);
-int mkdir(const char*);
-int chdir(const char*);
-int dup(int);
-int getpid(void);
-char* sbrk(int);
-int sleep(int);
-int uptime(void);
-int draw(void*, uint);
-int thread_create(void (*)(void*), void *, void *);
-int thread_join(void);
-int thread_exit(void);
-
-// ulib.c
-int stat(const char*, struct stat*);
-char* strcpy(char*, const char*);
-void *memmove(void*, const void*, int);
-char* strchr(const char*, char c);
-int strcmp(const char*, const char*);
-void printf(int, const char*, ...);
-char* gets(char*, int max);
-uint strlen(const char*);
-void* memset(void*, int, uint);
-void* malloc(uint);
-void free(void*);
-int atoi(const char*);
Binary files xv6-public/_usertests and xv6-public-mynew/_usertests differ
diff -ruN xv6-public/usertests.asm xv6-public-mynew/usertests.asm
--- xv6-public/usertests.asm	2022-09-05 09:51:06.394999171 +0530
+++ xv6-public-mynew/usertests.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,6712 +0,0 @@
-
-_usertests:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  return randstate;
-}
-
-int
-main(int argc, char *argv[])
-{
-       0:	f3 0f 1e fb          	endbr32 
-       4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-       8:	83 e4 f0             	and    $0xfffffff0,%esp
-       b:	ff 71 fc             	pushl  -0x4(%ecx)
-       e:	55                   	push   %ebp
-       f:	89 e5                	mov    %esp,%ebp
-      11:	51                   	push   %ecx
-      12:	83 ec 0c             	sub    $0xc,%esp
-  printf(1, "usertests starting\n");
-      15:	68 56 4e 00 00       	push   $0x4e56
-      1a:	6a 01                	push   $0x1
-      1c:	e8 df 3a 00 00       	call   3b00 <printf>
-
-  if(open("usertests.ran", 0) >= 0){
-      21:	59                   	pop    %ecx
-      22:	58                   	pop    %eax
-      23:	6a 00                	push   $0x0
-      25:	68 6a 4e 00 00       	push   $0x4e6a
-      2a:	e8 94 39 00 00       	call   39c3 <open>
-      2f:	83 c4 10             	add    $0x10,%esp
-      32:	85 c0                	test   %eax,%eax
-      34:	78 13                	js     49 <main+0x49>
-    printf(1, "already ran user tests -- rebuild fs.img\n");
-      36:	52                   	push   %edx
-      37:	52                   	push   %edx
-      38:	68 d4 55 00 00       	push   $0x55d4
-      3d:	6a 01                	push   $0x1
-      3f:	e8 bc 3a 00 00       	call   3b00 <printf>
-    exit();
-      44:	e8 3a 39 00 00       	call   3983 <exit>
-  }
-  close(open("usertests.ran", O_CREATE));
-      49:	50                   	push   %eax
-      4a:	50                   	push   %eax
-      4b:	68 00 02 00 00       	push   $0x200
-      50:	68 6a 4e 00 00       	push   $0x4e6a
-      55:	e8 69 39 00 00       	call   39c3 <open>
-      5a:	89 04 24             	mov    %eax,(%esp)
-      5d:	e8 49 39 00 00       	call   39ab <close>
-
-  argptest();
-      62:	e8 29 36 00 00       	call   3690 <argptest>
-  createdelete();
-      67:	e8 04 12 00 00       	call   1270 <createdelete>
-  linkunlink();
-      6c:	e8 df 1a 00 00       	call   1b50 <linkunlink>
-  concreate();
-      71:	e8 da 17 00 00       	call   1850 <concreate>
-  fourfiles();
-      76:	e8 f5 0f 00 00       	call   1070 <fourfiles>
-  sharedfd();
-      7b:	e8 30 0e 00 00       	call   eb0 <sharedfd>
-
-  bigargtest();
-      80:	e8 ab 32 00 00       	call   3330 <bigargtest>
-  bigwrite();
-      85:	e8 06 24 00 00       	call   2490 <bigwrite>
-  bigargtest();
-      8a:	e8 a1 32 00 00       	call   3330 <bigargtest>
-  bsstest();
-      8f:	e8 2c 32 00 00       	call   32c0 <bsstest>
-  sbrktest();
-      94:	e8 37 2d 00 00       	call   2dd0 <sbrktest>
-  validatetest();
-      99:	e8 62 31 00 00       	call   3200 <validatetest>
-
-  opentest();
-      9e:	e8 6d 03 00 00       	call   410 <opentest>
-  writetest();
-      a3:	e8 08 04 00 00       	call   4b0 <writetest>
-  writetest1();
-      a8:	e8 e3 05 00 00       	call   690 <writetest1>
-  createtest();
-      ad:	e8 ae 07 00 00       	call   860 <createtest>
-
-  openiputtest();
-      b2:	e8 59 02 00 00       	call   310 <openiputtest>
-  exitiputtest();
-      b7:	e8 54 01 00 00       	call   210 <exitiputtest>
-  iputtest();
-      bc:	e8 5f 00 00 00       	call   120 <iputtest>
-
-  mem();
-      c1:	e8 1a 0d 00 00       	call   de0 <mem>
-  pipe1();
-      c6:	e8 95 09 00 00       	call   a60 <pipe1>
-  preempt();
-      cb:	e8 30 0b 00 00       	call   c00 <preempt>
-  exitwait();
-      d0:	e8 8b 0c 00 00       	call   d60 <exitwait>
-
-  rmdot();
-      d5:	e8 a6 27 00 00       	call   2880 <rmdot>
-  fourteen();
-      da:	e8 61 26 00 00       	call   2740 <fourteen>
-  bigfile();
-      df:	e8 8c 24 00 00       	call   2570 <bigfile>
-  subdir();
-      e4:	e8 b7 1c 00 00       	call   1da0 <subdir>
-  linktest();
-      e9:	e8 42 15 00 00       	call   1630 <linktest>
-  unlinkread();
-      ee:	e8 ad 13 00 00       	call   14a0 <unlinkread>
-  dirfile();
-      f3:	e8 08 29 00 00       	call   2a00 <dirfile>
-  iref();
-      f8:	e8 03 2b 00 00       	call   2c00 <iref>
-  forktest();
-      fd:	e8 1e 2c 00 00       	call   2d20 <forktest>
-  bigdir(); // slow
-     102:	e8 59 1b 00 00       	call   1c60 <bigdir>
-
-  uio();
-     107:	e8 04 35 00 00       	call   3610 <uio>
-
-  exectest();
-     10c:	e8 ff 08 00 00       	call   a10 <exectest>
-
-  exit();
-     111:	e8 6d 38 00 00       	call   3983 <exit>
-     116:	66 90                	xchg   %ax,%ax
-     118:	66 90                	xchg   %ax,%ax
-     11a:	66 90                	xchg   %ax,%ax
-     11c:	66 90                	xchg   %ax,%ax
-     11e:	66 90                	xchg   %ax,%ax
-
-00000120 <iputtest>:
-{
-     120:	f3 0f 1e fb          	endbr32 
-     124:	55                   	push   %ebp
-     125:	89 e5                	mov    %esp,%ebp
-     127:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "iput test\n");
-     12a:	68 fc 3e 00 00       	push   $0x3efc
-     12f:	ff 35 00 5f 00 00    	pushl  0x5f00
-     135:	e8 c6 39 00 00       	call   3b00 <printf>
-  if(mkdir("iputdir") < 0){
-     13a:	c7 04 24 8f 3e 00 00 	movl   $0x3e8f,(%esp)
-     141:	e8 a5 38 00 00       	call   39eb <mkdir>
-     146:	83 c4 10             	add    $0x10,%esp
-     149:	85 c0                	test   %eax,%eax
-     14b:	78 58                	js     1a5 <iputtest+0x85>
-  if(chdir("iputdir") < 0){
-     14d:	83 ec 0c             	sub    $0xc,%esp
-     150:	68 8f 3e 00 00       	push   $0x3e8f
-     155:	e8 99 38 00 00       	call   39f3 <chdir>
-     15a:	83 c4 10             	add    $0x10,%esp
-     15d:	85 c0                	test   %eax,%eax
-     15f:	0f 88 85 00 00 00    	js     1ea <iputtest+0xca>
-  if(unlink("../iputdir") < 0){
-     165:	83 ec 0c             	sub    $0xc,%esp
-     168:	68 8c 3e 00 00       	push   $0x3e8c
-     16d:	e8 61 38 00 00       	call   39d3 <unlink>
-     172:	83 c4 10             	add    $0x10,%esp
-     175:	85 c0                	test   %eax,%eax
-     177:	78 5a                	js     1d3 <iputtest+0xb3>
-  if(chdir("/") < 0){
-     179:	83 ec 0c             	sub    $0xc,%esp
-     17c:	68 b1 3e 00 00       	push   $0x3eb1
-     181:	e8 6d 38 00 00       	call   39f3 <chdir>
-     186:	83 c4 10             	add    $0x10,%esp
-     189:	85 c0                	test   %eax,%eax
-     18b:	78 2f                	js     1bc <iputtest+0x9c>
-  printf(stdout, "iput test ok\n");
-     18d:	83 ec 08             	sub    $0x8,%esp
-     190:	68 34 3f 00 00       	push   $0x3f34
-     195:	ff 35 00 5f 00 00    	pushl  0x5f00
-     19b:	e8 60 39 00 00       	call   3b00 <printf>
-}
-     1a0:	83 c4 10             	add    $0x10,%esp
-     1a3:	c9                   	leave  
-     1a4:	c3                   	ret    
-    printf(stdout, "mkdir failed\n");
-     1a5:	50                   	push   %eax
-     1a6:	50                   	push   %eax
-     1a7:	68 68 3e 00 00       	push   $0x3e68
-     1ac:	ff 35 00 5f 00 00    	pushl  0x5f00
-     1b2:	e8 49 39 00 00       	call   3b00 <printf>
-    exit();
-     1b7:	e8 c7 37 00 00       	call   3983 <exit>
-    printf(stdout, "chdir / failed\n");
-     1bc:	50                   	push   %eax
-     1bd:	50                   	push   %eax
-     1be:	68 b3 3e 00 00       	push   $0x3eb3
-     1c3:	ff 35 00 5f 00 00    	pushl  0x5f00
-     1c9:	e8 32 39 00 00       	call   3b00 <printf>
-    exit();
-     1ce:	e8 b0 37 00 00       	call   3983 <exit>
-    printf(stdout, "unlink ../iputdir failed\n");
-     1d3:	52                   	push   %edx
-     1d4:	52                   	push   %edx
-     1d5:	68 97 3e 00 00       	push   $0x3e97
-     1da:	ff 35 00 5f 00 00    	pushl  0x5f00
-     1e0:	e8 1b 39 00 00       	call   3b00 <printf>
-    exit();
-     1e5:	e8 99 37 00 00       	call   3983 <exit>
-    printf(stdout, "chdir iputdir failed\n");
-     1ea:	51                   	push   %ecx
-     1eb:	51                   	push   %ecx
-     1ec:	68 76 3e 00 00       	push   $0x3e76
-     1f1:	ff 35 00 5f 00 00    	pushl  0x5f00
-     1f7:	e8 04 39 00 00       	call   3b00 <printf>
-    exit();
-     1fc:	e8 82 37 00 00       	call   3983 <exit>
-     201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     208:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     20f:	90                   	nop
-
-00000210 <exitiputtest>:
-{
-     210:	f3 0f 1e fb          	endbr32 
-     214:	55                   	push   %ebp
-     215:	89 e5                	mov    %esp,%ebp
-     217:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "exitiput test\n");
-     21a:	68 c3 3e 00 00       	push   $0x3ec3
-     21f:	ff 35 00 5f 00 00    	pushl  0x5f00
-     225:	e8 d6 38 00 00       	call   3b00 <printf>
-  pid = fork();
-     22a:	e8 4c 37 00 00       	call   397b <fork>
-  if(pid < 0){
-     22f:	83 c4 10             	add    $0x10,%esp
-     232:	85 c0                	test   %eax,%eax
-     234:	0f 88 86 00 00 00    	js     2c0 <exitiputtest+0xb0>
-  if(pid == 0){
-     23a:	75 4c                	jne    288 <exitiputtest+0x78>
-    if(mkdir("iputdir") < 0){
-     23c:	83 ec 0c             	sub    $0xc,%esp
-     23f:	68 8f 3e 00 00       	push   $0x3e8f
-     244:	e8 a2 37 00 00       	call   39eb <mkdir>
-     249:	83 c4 10             	add    $0x10,%esp
-     24c:	85 c0                	test   %eax,%eax
-     24e:	0f 88 83 00 00 00    	js     2d7 <exitiputtest+0xc7>
-    if(chdir("iputdir") < 0){
-     254:	83 ec 0c             	sub    $0xc,%esp
-     257:	68 8f 3e 00 00       	push   $0x3e8f
-     25c:	e8 92 37 00 00       	call   39f3 <chdir>
-     261:	83 c4 10             	add    $0x10,%esp
-     264:	85 c0                	test   %eax,%eax
-     266:	0f 88 82 00 00 00    	js     2ee <exitiputtest+0xde>
-    if(unlink("../iputdir") < 0){
-     26c:	83 ec 0c             	sub    $0xc,%esp
-     26f:	68 8c 3e 00 00       	push   $0x3e8c
-     274:	e8 5a 37 00 00       	call   39d3 <unlink>
-     279:	83 c4 10             	add    $0x10,%esp
-     27c:	85 c0                	test   %eax,%eax
-     27e:	78 28                	js     2a8 <exitiputtest+0x98>
-    exit();
-     280:	e8 fe 36 00 00       	call   3983 <exit>
-     285:	8d 76 00             	lea    0x0(%esi),%esi
-  wait();
-     288:	e8 fe 36 00 00       	call   398b <wait>
-  printf(stdout, "exitiput test ok\n");
-     28d:	83 ec 08             	sub    $0x8,%esp
-     290:	68 e6 3e 00 00       	push   $0x3ee6
-     295:	ff 35 00 5f 00 00    	pushl  0x5f00
-     29b:	e8 60 38 00 00       	call   3b00 <printf>
-}
-     2a0:	83 c4 10             	add    $0x10,%esp
-     2a3:	c9                   	leave  
-     2a4:	c3                   	ret    
-     2a5:	8d 76 00             	lea    0x0(%esi),%esi
-      printf(stdout, "unlink ../iputdir failed\n");
-     2a8:	83 ec 08             	sub    $0x8,%esp
-     2ab:	68 97 3e 00 00       	push   $0x3e97
-     2b0:	ff 35 00 5f 00 00    	pushl  0x5f00
-     2b6:	e8 45 38 00 00       	call   3b00 <printf>
-      exit();
-     2bb:	e8 c3 36 00 00       	call   3983 <exit>
-    printf(stdout, "fork failed\n");
-     2c0:	51                   	push   %ecx
-     2c1:	51                   	push   %ecx
-     2c2:	68 a9 4d 00 00       	push   $0x4da9
-     2c7:	ff 35 00 5f 00 00    	pushl  0x5f00
-     2cd:	e8 2e 38 00 00       	call   3b00 <printf>
-    exit();
-     2d2:	e8 ac 36 00 00       	call   3983 <exit>
-      printf(stdout, "mkdir failed\n");
-     2d7:	52                   	push   %edx
-     2d8:	52                   	push   %edx
-     2d9:	68 68 3e 00 00       	push   $0x3e68
-     2de:	ff 35 00 5f 00 00    	pushl  0x5f00
-     2e4:	e8 17 38 00 00       	call   3b00 <printf>
-      exit();
-     2e9:	e8 95 36 00 00       	call   3983 <exit>
-      printf(stdout, "child chdir failed\n");
-     2ee:	50                   	push   %eax
-     2ef:	50                   	push   %eax
-     2f0:	68 d2 3e 00 00       	push   $0x3ed2
-     2f5:	ff 35 00 5f 00 00    	pushl  0x5f00
-     2fb:	e8 00 38 00 00       	call   3b00 <printf>
-      exit();
-     300:	e8 7e 36 00 00       	call   3983 <exit>
-     305:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     30c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000310 <openiputtest>:
-{
-     310:	f3 0f 1e fb          	endbr32 
-     314:	55                   	push   %ebp
-     315:	89 e5                	mov    %esp,%ebp
-     317:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "openiput test\n");
-     31a:	68 f8 3e 00 00       	push   $0x3ef8
-     31f:	ff 35 00 5f 00 00    	pushl  0x5f00
-     325:	e8 d6 37 00 00       	call   3b00 <printf>
-  if(mkdir("oidir") < 0){
-     32a:	c7 04 24 07 3f 00 00 	movl   $0x3f07,(%esp)
-     331:	e8 b5 36 00 00       	call   39eb <mkdir>
-     336:	83 c4 10             	add    $0x10,%esp
-     339:	85 c0                	test   %eax,%eax
-     33b:	0f 88 9b 00 00 00    	js     3dc <openiputtest+0xcc>
-  pid = fork();
-     341:	e8 35 36 00 00       	call   397b <fork>
-  if(pid < 0){
-     346:	85 c0                	test   %eax,%eax
-     348:	78 7b                	js     3c5 <openiputtest+0xb5>
-  if(pid == 0){
-     34a:	75 34                	jne    380 <openiputtest+0x70>
-    int fd = open("oidir", O_RDWR);
-     34c:	83 ec 08             	sub    $0x8,%esp
-     34f:	6a 02                	push   $0x2
-     351:	68 07 3f 00 00       	push   $0x3f07
-     356:	e8 68 36 00 00       	call   39c3 <open>
-    if(fd >= 0){
-     35b:	83 c4 10             	add    $0x10,%esp
-     35e:	85 c0                	test   %eax,%eax
-     360:	78 5e                	js     3c0 <openiputtest+0xb0>
-      printf(stdout, "open directory for write succeeded\n");
-     362:	83 ec 08             	sub    $0x8,%esp
-     365:	68 8c 4e 00 00       	push   $0x4e8c
-     36a:	ff 35 00 5f 00 00    	pushl  0x5f00
-     370:	e8 8b 37 00 00       	call   3b00 <printf>
-      exit();
-     375:	e8 09 36 00 00       	call   3983 <exit>
-     37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  sleep(1);
-     380:	83 ec 0c             	sub    $0xc,%esp
-     383:	6a 01                	push   $0x1
-     385:	e8 89 36 00 00       	call   3a13 <sleep>
-  if(unlink("oidir") != 0){
-     38a:	c7 04 24 07 3f 00 00 	movl   $0x3f07,(%esp)
-     391:	e8 3d 36 00 00       	call   39d3 <unlink>
-     396:	83 c4 10             	add    $0x10,%esp
-     399:	85 c0                	test   %eax,%eax
-     39b:	75 56                	jne    3f3 <openiputtest+0xe3>
-  wait();
-     39d:	e8 e9 35 00 00       	call   398b <wait>
-  printf(stdout, "openiput test ok\n");
-     3a2:	83 ec 08             	sub    $0x8,%esp
-     3a5:	68 30 3f 00 00       	push   $0x3f30
-     3aa:	ff 35 00 5f 00 00    	pushl  0x5f00
-     3b0:	e8 4b 37 00 00       	call   3b00 <printf>
-     3b5:	83 c4 10             	add    $0x10,%esp
-}
-     3b8:	c9                   	leave  
-     3b9:	c3                   	ret    
-     3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    exit();
-     3c0:	e8 be 35 00 00       	call   3983 <exit>
-    printf(stdout, "fork failed\n");
-     3c5:	52                   	push   %edx
-     3c6:	52                   	push   %edx
-     3c7:	68 a9 4d 00 00       	push   $0x4da9
-     3cc:	ff 35 00 5f 00 00    	pushl  0x5f00
-     3d2:	e8 29 37 00 00       	call   3b00 <printf>
-    exit();
-     3d7:	e8 a7 35 00 00       	call   3983 <exit>
-    printf(stdout, "mkdir oidir failed\n");
-     3dc:	51                   	push   %ecx
-     3dd:	51                   	push   %ecx
-     3de:	68 0d 3f 00 00       	push   $0x3f0d
-     3e3:	ff 35 00 5f 00 00    	pushl  0x5f00
-     3e9:	e8 12 37 00 00       	call   3b00 <printf>
-    exit();
-     3ee:	e8 90 35 00 00       	call   3983 <exit>
-    printf(stdout, "unlink failed\n");
-     3f3:	50                   	push   %eax
-     3f4:	50                   	push   %eax
-     3f5:	68 21 3f 00 00       	push   $0x3f21
-     3fa:	ff 35 00 5f 00 00    	pushl  0x5f00
-     400:	e8 fb 36 00 00       	call   3b00 <printf>
-    exit();
-     405:	e8 79 35 00 00       	call   3983 <exit>
-     40a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000410 <opentest>:
-{
-     410:	f3 0f 1e fb          	endbr32 
-     414:	55                   	push   %ebp
-     415:	89 e5                	mov    %esp,%ebp
-     417:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "open test\n");
-     41a:	68 42 3f 00 00       	push   $0x3f42
-     41f:	ff 35 00 5f 00 00    	pushl  0x5f00
-     425:	e8 d6 36 00 00       	call   3b00 <printf>
-  fd = open("echo", 0);
-     42a:	58                   	pop    %eax
-     42b:	5a                   	pop    %edx
-     42c:	6a 00                	push   $0x0
-     42e:	68 4d 3f 00 00       	push   $0x3f4d
-     433:	e8 8b 35 00 00       	call   39c3 <open>
-  if(fd < 0){
-     438:	83 c4 10             	add    $0x10,%esp
-     43b:	85 c0                	test   %eax,%eax
-     43d:	78 36                	js     475 <opentest+0x65>
-  close(fd);
-     43f:	83 ec 0c             	sub    $0xc,%esp
-     442:	50                   	push   %eax
-     443:	e8 63 35 00 00       	call   39ab <close>
-  fd = open("doesnotexist", 0);
-     448:	5a                   	pop    %edx
-     449:	59                   	pop    %ecx
-     44a:	6a 00                	push   $0x0
-     44c:	68 65 3f 00 00       	push   $0x3f65
-     451:	e8 6d 35 00 00       	call   39c3 <open>
-  if(fd >= 0){
-     456:	83 c4 10             	add    $0x10,%esp
-     459:	85 c0                	test   %eax,%eax
-     45b:	79 2f                	jns    48c <opentest+0x7c>
-  printf(stdout, "open test ok\n");
-     45d:	83 ec 08             	sub    $0x8,%esp
-     460:	68 90 3f 00 00       	push   $0x3f90
-     465:	ff 35 00 5f 00 00    	pushl  0x5f00
-     46b:	e8 90 36 00 00       	call   3b00 <printf>
-}
-     470:	83 c4 10             	add    $0x10,%esp
-     473:	c9                   	leave  
-     474:	c3                   	ret    
-    printf(stdout, "open echo failed!\n");
-     475:	50                   	push   %eax
-     476:	50                   	push   %eax
-     477:	68 52 3f 00 00       	push   $0x3f52
-     47c:	ff 35 00 5f 00 00    	pushl  0x5f00
-     482:	e8 79 36 00 00       	call   3b00 <printf>
-    exit();
-     487:	e8 f7 34 00 00       	call   3983 <exit>
-    printf(stdout, "open doesnotexist succeeded!\n");
-     48c:	50                   	push   %eax
-     48d:	50                   	push   %eax
-     48e:	68 72 3f 00 00       	push   $0x3f72
-     493:	ff 35 00 5f 00 00    	pushl  0x5f00
-     499:	e8 62 36 00 00       	call   3b00 <printf>
-    exit();
-     49e:	e8 e0 34 00 00       	call   3983 <exit>
-     4a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     4aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000004b0 <writetest>:
-{
-     4b0:	f3 0f 1e fb          	endbr32 
-     4b4:	55                   	push   %ebp
-     4b5:	89 e5                	mov    %esp,%ebp
-     4b7:	56                   	push   %esi
-     4b8:	53                   	push   %ebx
-  printf(stdout, "small file test\n");
-     4b9:	83 ec 08             	sub    $0x8,%esp
-     4bc:	68 9e 3f 00 00       	push   $0x3f9e
-     4c1:	ff 35 00 5f 00 00    	pushl  0x5f00
-     4c7:	e8 34 36 00 00       	call   3b00 <printf>
-  fd = open("small", O_CREATE|O_RDWR);
-     4cc:	58                   	pop    %eax
-     4cd:	5a                   	pop    %edx
-     4ce:	68 02 02 00 00       	push   $0x202
-     4d3:	68 af 3f 00 00       	push   $0x3faf
-     4d8:	e8 e6 34 00 00       	call   39c3 <open>
-  if(fd >= 0){
-     4dd:	83 c4 10             	add    $0x10,%esp
-     4e0:	85 c0                	test   %eax,%eax
-     4e2:	0f 88 8c 01 00 00    	js     674 <writetest+0x1c4>
-    printf(stdout, "creat small succeeded; ok\n");
-     4e8:	83 ec 08             	sub    $0x8,%esp
-     4eb:	89 c6                	mov    %eax,%esi
-  for(i = 0; i < 100; i++){
-     4ed:	31 db                	xor    %ebx,%ebx
-    printf(stdout, "creat small succeeded; ok\n");
-     4ef:	68 b5 3f 00 00       	push   $0x3fb5
-     4f4:	ff 35 00 5f 00 00    	pushl  0x5f00
-     4fa:	e8 01 36 00 00       	call   3b00 <printf>
-     4ff:	83 c4 10             	add    $0x10,%esp
-     502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(write(fd, "aaaaaaaaaa", 10) != 10){
-     508:	83 ec 04             	sub    $0x4,%esp
-     50b:	6a 0a                	push   $0xa
-     50d:	68 ec 3f 00 00       	push   $0x3fec
-     512:	56                   	push   %esi
-     513:	e8 8b 34 00 00       	call   39a3 <write>
-     518:	83 c4 10             	add    $0x10,%esp
-     51b:	83 f8 0a             	cmp    $0xa,%eax
-     51e:	0f 85 d9 00 00 00    	jne    5fd <writetest+0x14d>
-    if(write(fd, "bbbbbbbbbb", 10) != 10){
-     524:	83 ec 04             	sub    $0x4,%esp
-     527:	6a 0a                	push   $0xa
-     529:	68 f7 3f 00 00       	push   $0x3ff7
-     52e:	56                   	push   %esi
-     52f:	e8 6f 34 00 00       	call   39a3 <write>
-     534:	83 c4 10             	add    $0x10,%esp
-     537:	83 f8 0a             	cmp    $0xa,%eax
-     53a:	0f 85 d6 00 00 00    	jne    616 <writetest+0x166>
-  for(i = 0; i < 100; i++){
-     540:	83 c3 01             	add    $0x1,%ebx
-     543:	83 fb 64             	cmp    $0x64,%ebx
-     546:	75 c0                	jne    508 <writetest+0x58>
-  printf(stdout, "writes ok\n");
-     548:	83 ec 08             	sub    $0x8,%esp
-     54b:	68 02 40 00 00       	push   $0x4002
-     550:	ff 35 00 5f 00 00    	pushl  0x5f00
-     556:	e8 a5 35 00 00       	call   3b00 <printf>
-  close(fd);
-     55b:	89 34 24             	mov    %esi,(%esp)
-     55e:	e8 48 34 00 00       	call   39ab <close>
-  fd = open("small", O_RDONLY);
-     563:	5b                   	pop    %ebx
-     564:	5e                   	pop    %esi
-     565:	6a 00                	push   $0x0
-     567:	68 af 3f 00 00       	push   $0x3faf
-     56c:	e8 52 34 00 00       	call   39c3 <open>
-  if(fd >= 0){
-     571:	83 c4 10             	add    $0x10,%esp
-  fd = open("small", O_RDONLY);
-     574:	89 c3                	mov    %eax,%ebx
-  if(fd >= 0){
-     576:	85 c0                	test   %eax,%eax
-     578:	0f 88 b1 00 00 00    	js     62f <writetest+0x17f>
-    printf(stdout, "open small succeeded ok\n");
-     57e:	83 ec 08             	sub    $0x8,%esp
-     581:	68 0d 40 00 00       	push   $0x400d
-     586:	ff 35 00 5f 00 00    	pushl  0x5f00
-     58c:	e8 6f 35 00 00       	call   3b00 <printf>
-  i = read(fd, buf, 2000);
-     591:	83 c4 0c             	add    $0xc,%esp
-     594:	68 d0 07 00 00       	push   $0x7d0
-     599:	68 e0 86 00 00       	push   $0x86e0
-     59e:	53                   	push   %ebx
-     59f:	e8 f7 33 00 00       	call   399b <read>
-  if(i == 2000){
-     5a4:	83 c4 10             	add    $0x10,%esp
-     5a7:	3d d0 07 00 00       	cmp    $0x7d0,%eax
-     5ac:	0f 85 94 00 00 00    	jne    646 <writetest+0x196>
-    printf(stdout, "read succeeded ok\n");
-     5b2:	83 ec 08             	sub    $0x8,%esp
-     5b5:	68 41 40 00 00       	push   $0x4041
-     5ba:	ff 35 00 5f 00 00    	pushl  0x5f00
-     5c0:	e8 3b 35 00 00       	call   3b00 <printf>
-  close(fd);
-     5c5:	89 1c 24             	mov    %ebx,(%esp)
-     5c8:	e8 de 33 00 00       	call   39ab <close>
-  if(unlink("small") < 0){
-     5cd:	c7 04 24 af 3f 00 00 	movl   $0x3faf,(%esp)
-     5d4:	e8 fa 33 00 00       	call   39d3 <unlink>
-     5d9:	83 c4 10             	add    $0x10,%esp
-     5dc:	85 c0                	test   %eax,%eax
-     5de:	78 7d                	js     65d <writetest+0x1ad>
-  printf(stdout, "small file test ok\n");
-     5e0:	83 ec 08             	sub    $0x8,%esp
-     5e3:	68 69 40 00 00       	push   $0x4069
-     5e8:	ff 35 00 5f 00 00    	pushl  0x5f00
-     5ee:	e8 0d 35 00 00       	call   3b00 <printf>
-}
-     5f3:	83 c4 10             	add    $0x10,%esp
-     5f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     5f9:	5b                   	pop    %ebx
-     5fa:	5e                   	pop    %esi
-     5fb:	5d                   	pop    %ebp
-     5fc:	c3                   	ret    
-      printf(stdout, "error: write aa %d new file failed\n", i);
-     5fd:	83 ec 04             	sub    $0x4,%esp
-     600:	53                   	push   %ebx
-     601:	68 b0 4e 00 00       	push   $0x4eb0
-     606:	ff 35 00 5f 00 00    	pushl  0x5f00
-     60c:	e8 ef 34 00 00       	call   3b00 <printf>
-      exit();
-     611:	e8 6d 33 00 00       	call   3983 <exit>
-      printf(stdout, "error: write bb %d new file failed\n", i);
-     616:	83 ec 04             	sub    $0x4,%esp
-     619:	53                   	push   %ebx
-     61a:	68 d4 4e 00 00       	push   $0x4ed4
-     61f:	ff 35 00 5f 00 00    	pushl  0x5f00
-     625:	e8 d6 34 00 00       	call   3b00 <printf>
-      exit();
-     62a:	e8 54 33 00 00       	call   3983 <exit>
-    printf(stdout, "error: open small failed!\n");
-     62f:	51                   	push   %ecx
-     630:	51                   	push   %ecx
-     631:	68 26 40 00 00       	push   $0x4026
-     636:	ff 35 00 5f 00 00    	pushl  0x5f00
-     63c:	e8 bf 34 00 00       	call   3b00 <printf>
-    exit();
-     641:	e8 3d 33 00 00       	call   3983 <exit>
-    printf(stdout, "read failed\n");
-     646:	52                   	push   %edx
-     647:	52                   	push   %edx
-     648:	68 6d 43 00 00       	push   $0x436d
-     64d:	ff 35 00 5f 00 00    	pushl  0x5f00
-     653:	e8 a8 34 00 00       	call   3b00 <printf>
-    exit();
-     658:	e8 26 33 00 00       	call   3983 <exit>
-    printf(stdout, "unlink small failed\n");
-     65d:	50                   	push   %eax
-     65e:	50                   	push   %eax
-     65f:	68 54 40 00 00       	push   $0x4054
-     664:	ff 35 00 5f 00 00    	pushl  0x5f00
-     66a:	e8 91 34 00 00       	call   3b00 <printf>
-    exit();
-     66f:	e8 0f 33 00 00       	call   3983 <exit>
-    printf(stdout, "error: creat small failed!\n");
-     674:	50                   	push   %eax
-     675:	50                   	push   %eax
-     676:	68 d0 3f 00 00       	push   $0x3fd0
-     67b:	ff 35 00 5f 00 00    	pushl  0x5f00
-     681:	e8 7a 34 00 00       	call   3b00 <printf>
-    exit();
-     686:	e8 f8 32 00 00       	call   3983 <exit>
-     68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     68f:	90                   	nop
-
-00000690 <writetest1>:
-{
-     690:	f3 0f 1e fb          	endbr32 
-     694:	55                   	push   %ebp
-     695:	89 e5                	mov    %esp,%ebp
-     697:	56                   	push   %esi
-     698:	53                   	push   %ebx
-  printf(stdout, "big files test\n");
-     699:	83 ec 08             	sub    $0x8,%esp
-     69c:	68 7d 40 00 00       	push   $0x407d
-     6a1:	ff 35 00 5f 00 00    	pushl  0x5f00
-     6a7:	e8 54 34 00 00       	call   3b00 <printf>
-  fd = open("big", O_CREATE|O_RDWR);
-     6ac:	58                   	pop    %eax
-     6ad:	5a                   	pop    %edx
-     6ae:	68 02 02 00 00       	push   $0x202
-     6b3:	68 f7 40 00 00       	push   $0x40f7
-     6b8:	e8 06 33 00 00       	call   39c3 <open>
-  if(fd < 0){
-     6bd:	83 c4 10             	add    $0x10,%esp
-     6c0:	85 c0                	test   %eax,%eax
-     6c2:	0f 88 5d 01 00 00    	js     825 <writetest1+0x195>
-     6c8:	89 c6                	mov    %eax,%esi
-  for(i = 0; i < MAXFILE; i++){
-     6ca:	31 db                	xor    %ebx,%ebx
-     6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(write(fd, buf, 512) != 512){
-     6d0:	83 ec 04             	sub    $0x4,%esp
-    ((int*)buf)[0] = i;
-     6d3:	89 1d e0 86 00 00    	mov    %ebx,0x86e0
-    if(write(fd, buf, 512) != 512){
-     6d9:	68 00 02 00 00       	push   $0x200
-     6de:	68 e0 86 00 00       	push   $0x86e0
-     6e3:	56                   	push   %esi
-     6e4:	e8 ba 32 00 00       	call   39a3 <write>
-     6e9:	83 c4 10             	add    $0x10,%esp
-     6ec:	3d 00 02 00 00       	cmp    $0x200,%eax
-     6f1:	0f 85 b3 00 00 00    	jne    7aa <writetest1+0x11a>
-  for(i = 0; i < MAXFILE; i++){
-     6f7:	83 c3 01             	add    $0x1,%ebx
-     6fa:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
-     700:	75 ce                	jne    6d0 <writetest1+0x40>
-  close(fd);
-     702:	83 ec 0c             	sub    $0xc,%esp
-     705:	56                   	push   %esi
-     706:	e8 a0 32 00 00       	call   39ab <close>
-  fd = open("big", O_RDONLY);
-     70b:	5b                   	pop    %ebx
-     70c:	5e                   	pop    %esi
-     70d:	6a 00                	push   $0x0
-     70f:	68 f7 40 00 00       	push   $0x40f7
-     714:	e8 aa 32 00 00       	call   39c3 <open>
-  if(fd < 0){
-     719:	83 c4 10             	add    $0x10,%esp
-  fd = open("big", O_RDONLY);
-     71c:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-     71e:	85 c0                	test   %eax,%eax
-     720:	0f 88 e8 00 00 00    	js     80e <writetest1+0x17e>
-  n = 0;
-     726:	31 f6                	xor    %esi,%esi
-     728:	eb 1d                	jmp    747 <writetest1+0xb7>
-     72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    } else if(i != 512){
-     730:	3d 00 02 00 00       	cmp    $0x200,%eax
-     735:	0f 85 9f 00 00 00    	jne    7da <writetest1+0x14a>
-    if(((int*)buf)[0] != n){
-     73b:	a1 e0 86 00 00       	mov    0x86e0,%eax
-     740:	39 f0                	cmp    %esi,%eax
-     742:	75 7f                	jne    7c3 <writetest1+0x133>
-    n++;
-     744:	83 c6 01             	add    $0x1,%esi
-    i = read(fd, buf, 512);
-     747:	83 ec 04             	sub    $0x4,%esp
-     74a:	68 00 02 00 00       	push   $0x200
-     74f:	68 e0 86 00 00       	push   $0x86e0
-     754:	53                   	push   %ebx
-     755:	e8 41 32 00 00       	call   399b <read>
-    if(i == 0){
-     75a:	83 c4 10             	add    $0x10,%esp
-     75d:	85 c0                	test   %eax,%eax
-     75f:	75 cf                	jne    730 <writetest1+0xa0>
-      if(n == MAXFILE - 1){
-     761:	81 fe 8b 00 00 00    	cmp    $0x8b,%esi
-     767:	0f 84 86 00 00 00    	je     7f3 <writetest1+0x163>
-  close(fd);
-     76d:	83 ec 0c             	sub    $0xc,%esp
-     770:	53                   	push   %ebx
-     771:	e8 35 32 00 00       	call   39ab <close>
-  if(unlink("big") < 0){
-     776:	c7 04 24 f7 40 00 00 	movl   $0x40f7,(%esp)
-     77d:	e8 51 32 00 00       	call   39d3 <unlink>
-     782:	83 c4 10             	add    $0x10,%esp
-     785:	85 c0                	test   %eax,%eax
-     787:	0f 88 af 00 00 00    	js     83c <writetest1+0x1ac>
-  printf(stdout, "big files ok\n");
-     78d:	83 ec 08             	sub    $0x8,%esp
-     790:	68 1e 41 00 00       	push   $0x411e
-     795:	ff 35 00 5f 00 00    	pushl  0x5f00
-     79b:	e8 60 33 00 00       	call   3b00 <printf>
-}
-     7a0:	83 c4 10             	add    $0x10,%esp
-     7a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     7a6:	5b                   	pop    %ebx
-     7a7:	5e                   	pop    %esi
-     7a8:	5d                   	pop    %ebp
-     7a9:	c3                   	ret    
-      printf(stdout, "error: write big file failed\n", i);
-     7aa:	83 ec 04             	sub    $0x4,%esp
-     7ad:	53                   	push   %ebx
-     7ae:	68 a7 40 00 00       	push   $0x40a7
-     7b3:	ff 35 00 5f 00 00    	pushl  0x5f00
-     7b9:	e8 42 33 00 00       	call   3b00 <printf>
-      exit();
-     7be:	e8 c0 31 00 00       	call   3983 <exit>
-      printf(stdout, "read content of block %d is %d\n",
-     7c3:	50                   	push   %eax
-     7c4:	56                   	push   %esi
-     7c5:	68 f8 4e 00 00       	push   $0x4ef8
-     7ca:	ff 35 00 5f 00 00    	pushl  0x5f00
-     7d0:	e8 2b 33 00 00       	call   3b00 <printf>
-      exit();
-     7d5:	e8 a9 31 00 00       	call   3983 <exit>
-      printf(stdout, "read failed %d\n", i);
-     7da:	83 ec 04             	sub    $0x4,%esp
-     7dd:	50                   	push   %eax
-     7de:	68 fb 40 00 00       	push   $0x40fb
-     7e3:	ff 35 00 5f 00 00    	pushl  0x5f00
-     7e9:	e8 12 33 00 00       	call   3b00 <printf>
-      exit();
-     7ee:	e8 90 31 00 00       	call   3983 <exit>
-        printf(stdout, "read only %d blocks from big", n);
-     7f3:	52                   	push   %edx
-     7f4:	68 8b 00 00 00       	push   $0x8b
-     7f9:	68 de 40 00 00       	push   $0x40de
-     7fe:	ff 35 00 5f 00 00    	pushl  0x5f00
-     804:	e8 f7 32 00 00       	call   3b00 <printf>
-        exit();
-     809:	e8 75 31 00 00       	call   3983 <exit>
-    printf(stdout, "error: open big failed!\n");
-     80e:	51                   	push   %ecx
-     80f:	51                   	push   %ecx
-     810:	68 c5 40 00 00       	push   $0x40c5
-     815:	ff 35 00 5f 00 00    	pushl  0x5f00
-     81b:	e8 e0 32 00 00       	call   3b00 <printf>
-    exit();
-     820:	e8 5e 31 00 00       	call   3983 <exit>
-    printf(stdout, "error: creat big failed!\n");
-     825:	50                   	push   %eax
-     826:	50                   	push   %eax
-     827:	68 8d 40 00 00       	push   $0x408d
-     82c:	ff 35 00 5f 00 00    	pushl  0x5f00
-     832:	e8 c9 32 00 00       	call   3b00 <printf>
-    exit();
-     837:	e8 47 31 00 00       	call   3983 <exit>
-    printf(stdout, "unlink big failed\n");
-     83c:	50                   	push   %eax
-     83d:	50                   	push   %eax
-     83e:	68 0b 41 00 00       	push   $0x410b
-     843:	ff 35 00 5f 00 00    	pushl  0x5f00
-     849:	e8 b2 32 00 00       	call   3b00 <printf>
-    exit();
-     84e:	e8 30 31 00 00       	call   3983 <exit>
-     853:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000860 <createtest>:
-{
-     860:	f3 0f 1e fb          	endbr32 
-     864:	55                   	push   %ebp
-     865:	89 e5                	mov    %esp,%ebp
-     867:	53                   	push   %ebx
-  name[2] = '\0';
-     868:	bb 30 00 00 00       	mov    $0x30,%ebx
-{
-     86d:	83 ec 0c             	sub    $0xc,%esp
-  printf(stdout, "many creates, followed by unlink test\n");
-     870:	68 18 4f 00 00       	push   $0x4f18
-     875:	ff 35 00 5f 00 00    	pushl  0x5f00
-     87b:	e8 80 32 00 00       	call   3b00 <printf>
-  name[0] = 'a';
-     880:	c6 05 e0 a6 00 00 61 	movb   $0x61,0xa6e0
-  name[2] = '\0';
-     887:	83 c4 10             	add    $0x10,%esp
-     88a:	c6 05 e2 a6 00 00 00 	movb   $0x0,0xa6e2
-  for(i = 0; i < 52; i++){
-     891:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    fd = open(name, O_CREATE|O_RDWR);
-     898:	83 ec 08             	sub    $0x8,%esp
-    name[1] = '0' + i;
-     89b:	88 1d e1 a6 00 00    	mov    %bl,0xa6e1
-    fd = open(name, O_CREATE|O_RDWR);
-     8a1:	83 c3 01             	add    $0x1,%ebx
-     8a4:	68 02 02 00 00       	push   $0x202
-     8a9:	68 e0 a6 00 00       	push   $0xa6e0
-     8ae:	e8 10 31 00 00       	call   39c3 <open>
-    close(fd);
-     8b3:	89 04 24             	mov    %eax,(%esp)
-     8b6:	e8 f0 30 00 00       	call   39ab <close>
-  for(i = 0; i < 52; i++){
-     8bb:	83 c4 10             	add    $0x10,%esp
-     8be:	80 fb 64             	cmp    $0x64,%bl
-     8c1:	75 d5                	jne    898 <createtest+0x38>
-  name[0] = 'a';
-     8c3:	c6 05 e0 a6 00 00 61 	movb   $0x61,0xa6e0
-  name[2] = '\0';
-     8ca:	bb 30 00 00 00       	mov    $0x30,%ebx
-     8cf:	c6 05 e2 a6 00 00 00 	movb   $0x0,0xa6e2
-  for(i = 0; i < 52; i++){
-     8d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     8dd:	8d 76 00             	lea    0x0(%esi),%esi
-    unlink(name);
-     8e0:	83 ec 0c             	sub    $0xc,%esp
-    name[1] = '0' + i;
-     8e3:	88 1d e1 a6 00 00    	mov    %bl,0xa6e1
-    unlink(name);
-     8e9:	83 c3 01             	add    $0x1,%ebx
-     8ec:	68 e0 a6 00 00       	push   $0xa6e0
-     8f1:	e8 dd 30 00 00       	call   39d3 <unlink>
-  for(i = 0; i < 52; i++){
-     8f6:	83 c4 10             	add    $0x10,%esp
-     8f9:	80 fb 64             	cmp    $0x64,%bl
-     8fc:	75 e2                	jne    8e0 <createtest+0x80>
-  printf(stdout, "many creates, followed by unlink; ok\n");
-     8fe:	83 ec 08             	sub    $0x8,%esp
-     901:	68 40 4f 00 00       	push   $0x4f40
-     906:	ff 35 00 5f 00 00    	pushl  0x5f00
-     90c:	e8 ef 31 00 00       	call   3b00 <printf>
-}
-     911:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     914:	83 c4 10             	add    $0x10,%esp
-     917:	c9                   	leave  
-     918:	c3                   	ret    
-     919:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000920 <dirtest>:
-{
-     920:	f3 0f 1e fb          	endbr32 
-     924:	55                   	push   %ebp
-     925:	89 e5                	mov    %esp,%ebp
-     927:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "mkdir test\n");
-     92a:	68 2c 41 00 00       	push   $0x412c
-     92f:	ff 35 00 5f 00 00    	pushl  0x5f00
-     935:	e8 c6 31 00 00       	call   3b00 <printf>
-  if(mkdir("dir0") < 0){
-     93a:	c7 04 24 38 41 00 00 	movl   $0x4138,(%esp)
-     941:	e8 a5 30 00 00       	call   39eb <mkdir>
-     946:	83 c4 10             	add    $0x10,%esp
-     949:	85 c0                	test   %eax,%eax
-     94b:	78 58                	js     9a5 <dirtest+0x85>
-  if(chdir("dir0") < 0){
-     94d:	83 ec 0c             	sub    $0xc,%esp
-     950:	68 38 41 00 00       	push   $0x4138
-     955:	e8 99 30 00 00       	call   39f3 <chdir>
-     95a:	83 c4 10             	add    $0x10,%esp
-     95d:	85 c0                	test   %eax,%eax
-     95f:	0f 88 85 00 00 00    	js     9ea <dirtest+0xca>
-  if(chdir("..") < 0){
-     965:	83 ec 0c             	sub    $0xc,%esp
-     968:	68 dd 46 00 00       	push   $0x46dd
-     96d:	e8 81 30 00 00       	call   39f3 <chdir>
-     972:	83 c4 10             	add    $0x10,%esp
-     975:	85 c0                	test   %eax,%eax
-     977:	78 5a                	js     9d3 <dirtest+0xb3>
-  if(unlink("dir0") < 0){
-     979:	83 ec 0c             	sub    $0xc,%esp
-     97c:	68 38 41 00 00       	push   $0x4138
-     981:	e8 4d 30 00 00       	call   39d3 <unlink>
-     986:	83 c4 10             	add    $0x10,%esp
-     989:	85 c0                	test   %eax,%eax
-     98b:	78 2f                	js     9bc <dirtest+0x9c>
-  printf(stdout, "mkdir test ok\n");
-     98d:	83 ec 08             	sub    $0x8,%esp
-     990:	68 75 41 00 00       	push   $0x4175
-     995:	ff 35 00 5f 00 00    	pushl  0x5f00
-     99b:	e8 60 31 00 00       	call   3b00 <printf>
-}
-     9a0:	83 c4 10             	add    $0x10,%esp
-     9a3:	c9                   	leave  
-     9a4:	c3                   	ret    
-    printf(stdout, "mkdir failed\n");
-     9a5:	50                   	push   %eax
-     9a6:	50                   	push   %eax
-     9a7:	68 68 3e 00 00       	push   $0x3e68
-     9ac:	ff 35 00 5f 00 00    	pushl  0x5f00
-     9b2:	e8 49 31 00 00       	call   3b00 <printf>
-    exit();
-     9b7:	e8 c7 2f 00 00       	call   3983 <exit>
-    printf(stdout, "unlink dir0 failed\n");
-     9bc:	50                   	push   %eax
-     9bd:	50                   	push   %eax
-     9be:	68 61 41 00 00       	push   $0x4161
-     9c3:	ff 35 00 5f 00 00    	pushl  0x5f00
-     9c9:	e8 32 31 00 00       	call   3b00 <printf>
-    exit();
-     9ce:	e8 b0 2f 00 00       	call   3983 <exit>
-    printf(stdout, "chdir .. failed\n");
-     9d3:	52                   	push   %edx
-     9d4:	52                   	push   %edx
-     9d5:	68 50 41 00 00       	push   $0x4150
-     9da:	ff 35 00 5f 00 00    	pushl  0x5f00
-     9e0:	e8 1b 31 00 00       	call   3b00 <printf>
-    exit();
-     9e5:	e8 99 2f 00 00       	call   3983 <exit>
-    printf(stdout, "chdir dir0 failed\n");
-     9ea:	51                   	push   %ecx
-     9eb:	51                   	push   %ecx
-     9ec:	68 3d 41 00 00       	push   $0x413d
-     9f1:	ff 35 00 5f 00 00    	pushl  0x5f00
-     9f7:	e8 04 31 00 00       	call   3b00 <printf>
-    exit();
-     9fc:	e8 82 2f 00 00       	call   3983 <exit>
-     a01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     a08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     a0f:	90                   	nop
-
-00000a10 <exectest>:
-{
-     a10:	f3 0f 1e fb          	endbr32 
-     a14:	55                   	push   %ebp
-     a15:	89 e5                	mov    %esp,%ebp
-     a17:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "exec test\n");
-     a1a:	68 84 41 00 00       	push   $0x4184
-     a1f:	ff 35 00 5f 00 00    	pushl  0x5f00
-     a25:	e8 d6 30 00 00       	call   3b00 <printf>
-  if(exec("echo", echoargv) < 0){
-     a2a:	5a                   	pop    %edx
-     a2b:	59                   	pop    %ecx
-     a2c:	68 04 5f 00 00       	push   $0x5f04
-     a31:	68 4d 3f 00 00       	push   $0x3f4d
-     a36:	e8 80 2f 00 00       	call   39bb <exec>
-     a3b:	83 c4 10             	add    $0x10,%esp
-     a3e:	85 c0                	test   %eax,%eax
-     a40:	78 02                	js     a44 <exectest+0x34>
-}
-     a42:	c9                   	leave  
-     a43:	c3                   	ret    
-    printf(stdout, "exec echo failed\n");
-     a44:	50                   	push   %eax
-     a45:	50                   	push   %eax
-     a46:	68 8f 41 00 00       	push   $0x418f
-     a4b:	ff 35 00 5f 00 00    	pushl  0x5f00
-     a51:	e8 aa 30 00 00       	call   3b00 <printf>
-    exit();
-     a56:	e8 28 2f 00 00       	call   3983 <exit>
-     a5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     a5f:	90                   	nop
-
-00000a60 <pipe1>:
-{
-     a60:	f3 0f 1e fb          	endbr32 
-     a64:	55                   	push   %ebp
-     a65:	89 e5                	mov    %esp,%ebp
-     a67:	57                   	push   %edi
-     a68:	56                   	push   %esi
-  if(pipe(fds) != 0){
-     a69:	8d 45 e0             	lea    -0x20(%ebp),%eax
-{
-     a6c:	53                   	push   %ebx
-     a6d:	83 ec 38             	sub    $0x38,%esp
-  if(pipe(fds) != 0){
-     a70:	50                   	push   %eax
-     a71:	e8 1d 2f 00 00       	call   3993 <pipe>
-     a76:	83 c4 10             	add    $0x10,%esp
-     a79:	85 c0                	test   %eax,%eax
-     a7b:	0f 85 38 01 00 00    	jne    bb9 <pipe1+0x159>
-  pid = fork();
-     a81:	e8 f5 2e 00 00       	call   397b <fork>
-  if(pid == 0){
-     a86:	85 c0                	test   %eax,%eax
-     a88:	0f 84 8d 00 00 00    	je     b1b <pipe1+0xbb>
-  } else if(pid > 0){
-     a8e:	0f 8e 38 01 00 00    	jle    bcc <pipe1+0x16c>
-    close(fds[1]);
-     a94:	83 ec 0c             	sub    $0xc,%esp
-     a97:	ff 75 e4             	pushl  -0x1c(%ebp)
-  seq = 0;
-     a9a:	31 db                	xor    %ebx,%ebx
-    cc = 1;
-     a9c:	be 01 00 00 00       	mov    $0x1,%esi
-    close(fds[1]);
-     aa1:	e8 05 2f 00 00       	call   39ab <close>
-    total = 0;
-     aa6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
-    while((n = read(fds[0], buf, cc)) > 0){
-     aad:	83 c4 10             	add    $0x10,%esp
-     ab0:	83 ec 04             	sub    $0x4,%esp
-     ab3:	56                   	push   %esi
-     ab4:	68 e0 86 00 00       	push   $0x86e0
-     ab9:	ff 75 e0             	pushl  -0x20(%ebp)
-     abc:	e8 da 2e 00 00       	call   399b <read>
-     ac1:	83 c4 10             	add    $0x10,%esp
-     ac4:	89 c7                	mov    %eax,%edi
-     ac6:	85 c0                	test   %eax,%eax
-     ac8:	0f 8e a7 00 00 00    	jle    b75 <pipe1+0x115>
-     ace:	8d 0c 3b             	lea    (%ebx,%edi,1),%ecx
-      for(i = 0; i < n; i++){
-     ad1:	31 c0                	xor    %eax,%eax
-     ad3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     ad7:	90                   	nop
-        if((buf[i] & 0xff) != (seq++ & 0xff)){
-     ad8:	89 da                	mov    %ebx,%edx
-     ada:	83 c3 01             	add    $0x1,%ebx
-     add:	38 90 e0 86 00 00    	cmp    %dl,0x86e0(%eax)
-     ae3:	75 1c                	jne    b01 <pipe1+0xa1>
-      for(i = 0; i < n; i++){
-     ae5:	83 c0 01             	add    $0x1,%eax
-     ae8:	39 d9                	cmp    %ebx,%ecx
-     aea:	75 ec                	jne    ad8 <pipe1+0x78>
-      cc = cc * 2;
-     aec:	01 f6                	add    %esi,%esi
-      total += n;
-     aee:	01 7d d4             	add    %edi,-0x2c(%ebp)
-     af1:	b8 00 20 00 00       	mov    $0x2000,%eax
-     af6:	81 fe 00 20 00 00    	cmp    $0x2000,%esi
-     afc:	0f 4f f0             	cmovg  %eax,%esi
-     aff:	eb af                	jmp    ab0 <pipe1+0x50>
-          printf(1, "pipe1 oops 2\n");
-     b01:	83 ec 08             	sub    $0x8,%esp
-     b04:	68 be 41 00 00       	push   $0x41be
-     b09:	6a 01                	push   $0x1
-     b0b:	e8 f0 2f 00 00       	call   3b00 <printf>
-          return;
-     b10:	83 c4 10             	add    $0x10,%esp
-}
-     b13:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     b16:	5b                   	pop    %ebx
-     b17:	5e                   	pop    %esi
-     b18:	5f                   	pop    %edi
-     b19:	5d                   	pop    %ebp
-     b1a:	c3                   	ret    
-    close(fds[0]);
-     b1b:	83 ec 0c             	sub    $0xc,%esp
-     b1e:	ff 75 e0             	pushl  -0x20(%ebp)
-  seq = 0;
-     b21:	31 db                	xor    %ebx,%ebx
-    close(fds[0]);
-     b23:	e8 83 2e 00 00       	call   39ab <close>
-     b28:	83 c4 10             	add    $0x10,%esp
-      for(i = 0; i < 1033; i++)
-     b2b:	31 c0                	xor    %eax,%eax
-     b2d:	8d 76 00             	lea    0x0(%esi),%esi
-        buf[i] = seq++;
-     b30:	8d 14 18             	lea    (%eax,%ebx,1),%edx
-      for(i = 0; i < 1033; i++)
-     b33:	83 c0 01             	add    $0x1,%eax
-        buf[i] = seq++;
-     b36:	88 90 df 86 00 00    	mov    %dl,0x86df(%eax)
-      for(i = 0; i < 1033; i++)
-     b3c:	3d 09 04 00 00       	cmp    $0x409,%eax
-     b41:	75 ed                	jne    b30 <pipe1+0xd0>
-      if(write(fds[1], buf, 1033) != 1033){
-     b43:	83 ec 04             	sub    $0x4,%esp
-     b46:	81 c3 09 04 00 00    	add    $0x409,%ebx
-     b4c:	68 09 04 00 00       	push   $0x409
-     b51:	68 e0 86 00 00       	push   $0x86e0
-     b56:	ff 75 e4             	pushl  -0x1c(%ebp)
-     b59:	e8 45 2e 00 00       	call   39a3 <write>
-     b5e:	83 c4 10             	add    $0x10,%esp
-     b61:	3d 09 04 00 00       	cmp    $0x409,%eax
-     b66:	75 77                	jne    bdf <pipe1+0x17f>
-    for(n = 0; n < 5; n++){
-     b68:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx
-     b6e:	75 bb                	jne    b2b <pipe1+0xcb>
-    exit();
-     b70:	e8 0e 2e 00 00       	call   3983 <exit>
-    if(total != 5 * 1033){
-     b75:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
-     b7c:	75 26                	jne    ba4 <pipe1+0x144>
-    close(fds[0]);
-     b7e:	83 ec 0c             	sub    $0xc,%esp
-     b81:	ff 75 e0             	pushl  -0x20(%ebp)
-     b84:	e8 22 2e 00 00       	call   39ab <close>
-    wait();
-     b89:	e8 fd 2d 00 00       	call   398b <wait>
-  printf(1, "pipe1 ok\n");
-     b8e:	5a                   	pop    %edx
-     b8f:	59                   	pop    %ecx
-     b90:	68 e3 41 00 00       	push   $0x41e3
-     b95:	6a 01                	push   $0x1
-     b97:	e8 64 2f 00 00       	call   3b00 <printf>
-     b9c:	83 c4 10             	add    $0x10,%esp
-     b9f:	e9 6f ff ff ff       	jmp    b13 <pipe1+0xb3>
-      printf(1, "pipe1 oops 3 total %d\n", total);
-     ba4:	53                   	push   %ebx
-     ba5:	ff 75 d4             	pushl  -0x2c(%ebp)
-     ba8:	68 cc 41 00 00       	push   $0x41cc
-     bad:	6a 01                	push   $0x1
-     baf:	e8 4c 2f 00 00       	call   3b00 <printf>
-      exit();
-     bb4:	e8 ca 2d 00 00       	call   3983 <exit>
-    printf(1, "pipe() failed\n");
-     bb9:	57                   	push   %edi
-     bba:	57                   	push   %edi
-     bbb:	68 a1 41 00 00       	push   $0x41a1
-     bc0:	6a 01                	push   $0x1
-     bc2:	e8 39 2f 00 00       	call   3b00 <printf>
-    exit();
-     bc7:	e8 b7 2d 00 00       	call   3983 <exit>
-    printf(1, "fork() failed\n");
-     bcc:	50                   	push   %eax
-     bcd:	50                   	push   %eax
-     bce:	68 ed 41 00 00       	push   $0x41ed
-     bd3:	6a 01                	push   $0x1
-     bd5:	e8 26 2f 00 00       	call   3b00 <printf>
-    exit();
-     bda:	e8 a4 2d 00 00       	call   3983 <exit>
-        printf(1, "pipe1 oops 1\n");
-     bdf:	56                   	push   %esi
-     be0:	56                   	push   %esi
-     be1:	68 b0 41 00 00       	push   $0x41b0
-     be6:	6a 01                	push   $0x1
-     be8:	e8 13 2f 00 00       	call   3b00 <printf>
-        exit();
-     bed:	e8 91 2d 00 00       	call   3983 <exit>
-     bf2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     bf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000c00 <preempt>:
-{
-     c00:	f3 0f 1e fb          	endbr32 
-     c04:	55                   	push   %ebp
-     c05:	89 e5                	mov    %esp,%ebp
-     c07:	57                   	push   %edi
-     c08:	56                   	push   %esi
-     c09:	53                   	push   %ebx
-     c0a:	83 ec 24             	sub    $0x24,%esp
-  printf(1, "preempt: ");
-     c0d:	68 fc 41 00 00       	push   $0x41fc
-     c12:	6a 01                	push   $0x1
-     c14:	e8 e7 2e 00 00       	call   3b00 <printf>
-  pid1 = fork();
-     c19:	e8 5d 2d 00 00       	call   397b <fork>
-  if(pid1 == 0)
-     c1e:	83 c4 10             	add    $0x10,%esp
-     c21:	85 c0                	test   %eax,%eax
-     c23:	75 0b                	jne    c30 <preempt+0x30>
-    for(;;)
-     c25:	eb fe                	jmp    c25 <preempt+0x25>
-     c27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     c2e:	66 90                	xchg   %ax,%ax
-     c30:	89 c7                	mov    %eax,%edi
-  pid2 = fork();
-     c32:	e8 44 2d 00 00       	call   397b <fork>
-     c37:	89 c6                	mov    %eax,%esi
-  if(pid2 == 0)
-     c39:	85 c0                	test   %eax,%eax
-     c3b:	75 03                	jne    c40 <preempt+0x40>
-    for(;;)
-     c3d:	eb fe                	jmp    c3d <preempt+0x3d>
-     c3f:	90                   	nop
-  pipe(pfds);
-     c40:	83 ec 0c             	sub    $0xc,%esp
-     c43:	8d 45 e0             	lea    -0x20(%ebp),%eax
-     c46:	50                   	push   %eax
-     c47:	e8 47 2d 00 00       	call   3993 <pipe>
-  pid3 = fork();
-     c4c:	e8 2a 2d 00 00       	call   397b <fork>
-  if(pid3 == 0){
-     c51:	83 c4 10             	add    $0x10,%esp
-  pid3 = fork();
-     c54:	89 c3                	mov    %eax,%ebx
-  if(pid3 == 0){
-     c56:	85 c0                	test   %eax,%eax
-     c58:	75 3e                	jne    c98 <preempt+0x98>
-    close(pfds[0]);
-     c5a:	83 ec 0c             	sub    $0xc,%esp
-     c5d:	ff 75 e0             	pushl  -0x20(%ebp)
-     c60:	e8 46 2d 00 00       	call   39ab <close>
-    if(write(pfds[1], "x", 1) != 1)
-     c65:	83 c4 0c             	add    $0xc,%esp
-     c68:	6a 01                	push   $0x1
-     c6a:	68 c1 47 00 00       	push   $0x47c1
-     c6f:	ff 75 e4             	pushl  -0x1c(%ebp)
-     c72:	e8 2c 2d 00 00       	call   39a3 <write>
-     c77:	83 c4 10             	add    $0x10,%esp
-     c7a:	83 f8 01             	cmp    $0x1,%eax
-     c7d:	0f 85 a4 00 00 00    	jne    d27 <preempt+0x127>
-    close(pfds[1]);
-     c83:	83 ec 0c             	sub    $0xc,%esp
-     c86:	ff 75 e4             	pushl  -0x1c(%ebp)
-     c89:	e8 1d 2d 00 00       	call   39ab <close>
-     c8e:	83 c4 10             	add    $0x10,%esp
-    for(;;)
-     c91:	eb fe                	jmp    c91 <preempt+0x91>
-     c93:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     c97:	90                   	nop
-  close(pfds[1]);
-     c98:	83 ec 0c             	sub    $0xc,%esp
-     c9b:	ff 75 e4             	pushl  -0x1c(%ebp)
-     c9e:	e8 08 2d 00 00       	call   39ab <close>
-  if(read(pfds[0], buf, sizeof(buf)) != 1){
-     ca3:	83 c4 0c             	add    $0xc,%esp
-     ca6:	68 00 20 00 00       	push   $0x2000
-     cab:	68 e0 86 00 00       	push   $0x86e0
-     cb0:	ff 75 e0             	pushl  -0x20(%ebp)
-     cb3:	e8 e3 2c 00 00       	call   399b <read>
-     cb8:	83 c4 10             	add    $0x10,%esp
-     cbb:	83 f8 01             	cmp    $0x1,%eax
-     cbe:	75 7e                	jne    d3e <preempt+0x13e>
-  close(pfds[0]);
-     cc0:	83 ec 0c             	sub    $0xc,%esp
-     cc3:	ff 75 e0             	pushl  -0x20(%ebp)
-     cc6:	e8 e0 2c 00 00       	call   39ab <close>
-  printf(1, "kill... ");
-     ccb:	58                   	pop    %eax
-     ccc:	5a                   	pop    %edx
-     ccd:	68 2d 42 00 00       	push   $0x422d
-     cd2:	6a 01                	push   $0x1
-     cd4:	e8 27 2e 00 00       	call   3b00 <printf>
-  kill(pid1);
-     cd9:	89 3c 24             	mov    %edi,(%esp)
-     cdc:	e8 d2 2c 00 00       	call   39b3 <kill>
-  kill(pid2);
-     ce1:	89 34 24             	mov    %esi,(%esp)
-     ce4:	e8 ca 2c 00 00       	call   39b3 <kill>
-  kill(pid3);
-     ce9:	89 1c 24             	mov    %ebx,(%esp)
-     cec:	e8 c2 2c 00 00       	call   39b3 <kill>
-  printf(1, "wait... ");
-     cf1:	59                   	pop    %ecx
-     cf2:	5b                   	pop    %ebx
-     cf3:	68 36 42 00 00       	push   $0x4236
-     cf8:	6a 01                	push   $0x1
-     cfa:	e8 01 2e 00 00       	call   3b00 <printf>
-  wait();
-     cff:	e8 87 2c 00 00       	call   398b <wait>
-  wait();
-     d04:	e8 82 2c 00 00       	call   398b <wait>
-  wait();
-     d09:	e8 7d 2c 00 00       	call   398b <wait>
-  printf(1, "preempt ok\n");
-     d0e:	5e                   	pop    %esi
-     d0f:	5f                   	pop    %edi
-     d10:	68 3f 42 00 00       	push   $0x423f
-     d15:	6a 01                	push   $0x1
-     d17:	e8 e4 2d 00 00       	call   3b00 <printf>
-     d1c:	83 c4 10             	add    $0x10,%esp
-}
-     d1f:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     d22:	5b                   	pop    %ebx
-     d23:	5e                   	pop    %esi
-     d24:	5f                   	pop    %edi
-     d25:	5d                   	pop    %ebp
-     d26:	c3                   	ret    
-      printf(1, "preempt write error");
-     d27:	83 ec 08             	sub    $0x8,%esp
-     d2a:	68 06 42 00 00       	push   $0x4206
-     d2f:	6a 01                	push   $0x1
-     d31:	e8 ca 2d 00 00       	call   3b00 <printf>
-     d36:	83 c4 10             	add    $0x10,%esp
-     d39:	e9 45 ff ff ff       	jmp    c83 <preempt+0x83>
-    printf(1, "preempt read error");
-     d3e:	83 ec 08             	sub    $0x8,%esp
-     d41:	68 1a 42 00 00       	push   $0x421a
-     d46:	6a 01                	push   $0x1
-     d48:	e8 b3 2d 00 00       	call   3b00 <printf>
-    return;
-     d4d:	83 c4 10             	add    $0x10,%esp
-     d50:	eb cd                	jmp    d1f <preempt+0x11f>
-     d52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     d59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000d60 <exitwait>:
-{
-     d60:	f3 0f 1e fb          	endbr32 
-     d64:	55                   	push   %ebp
-     d65:	89 e5                	mov    %esp,%ebp
-     d67:	56                   	push   %esi
-     d68:	be 64 00 00 00       	mov    $0x64,%esi
-     d6d:	53                   	push   %ebx
-     d6e:	eb 10                	jmp    d80 <exitwait+0x20>
-    if(pid){
-     d70:	74 68                	je     dda <exitwait+0x7a>
-      if(wait() != pid){
-     d72:	e8 14 2c 00 00       	call   398b <wait>
-     d77:	39 d8                	cmp    %ebx,%eax
-     d79:	75 2d                	jne    da8 <exitwait+0x48>
-  for(i = 0; i < 100; i++){
-     d7b:	83 ee 01             	sub    $0x1,%esi
-     d7e:	74 41                	je     dc1 <exitwait+0x61>
-    pid = fork();
-     d80:	e8 f6 2b 00 00       	call   397b <fork>
-     d85:	89 c3                	mov    %eax,%ebx
-    if(pid < 0){
-     d87:	85 c0                	test   %eax,%eax
-     d89:	79 e5                	jns    d70 <exitwait+0x10>
-      printf(1, "fork failed\n");
-     d8b:	83 ec 08             	sub    $0x8,%esp
-     d8e:	68 a9 4d 00 00       	push   $0x4da9
-     d93:	6a 01                	push   $0x1
-     d95:	e8 66 2d 00 00       	call   3b00 <printf>
-      return;
-     d9a:	83 c4 10             	add    $0x10,%esp
-}
-     d9d:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     da0:	5b                   	pop    %ebx
-     da1:	5e                   	pop    %esi
-     da2:	5d                   	pop    %ebp
-     da3:	c3                   	ret    
-     da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        printf(1, "wait wrong pid\n");
-     da8:	83 ec 08             	sub    $0x8,%esp
-     dab:	68 4b 42 00 00       	push   $0x424b
-     db0:	6a 01                	push   $0x1
-     db2:	e8 49 2d 00 00       	call   3b00 <printf>
-        return;
-     db7:	83 c4 10             	add    $0x10,%esp
-}
-     dba:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     dbd:	5b                   	pop    %ebx
-     dbe:	5e                   	pop    %esi
-     dbf:	5d                   	pop    %ebp
-     dc0:	c3                   	ret    
-  printf(1, "exitwait ok\n");
-     dc1:	83 ec 08             	sub    $0x8,%esp
-     dc4:	68 5b 42 00 00       	push   $0x425b
-     dc9:	6a 01                	push   $0x1
-     dcb:	e8 30 2d 00 00       	call   3b00 <printf>
-     dd0:	83 c4 10             	add    $0x10,%esp
-}
-     dd3:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     dd6:	5b                   	pop    %ebx
-     dd7:	5e                   	pop    %esi
-     dd8:	5d                   	pop    %ebp
-     dd9:	c3                   	ret    
-      exit();
-     dda:	e8 a4 2b 00 00       	call   3983 <exit>
-     ddf:	90                   	nop
-
-00000de0 <mem>:
-{
-     de0:	f3 0f 1e fb          	endbr32 
-     de4:	55                   	push   %ebp
-     de5:	89 e5                	mov    %esp,%ebp
-     de7:	56                   	push   %esi
-     de8:	31 f6                	xor    %esi,%esi
-     dea:	53                   	push   %ebx
-  printf(1, "mem test\n");
-     deb:	83 ec 08             	sub    $0x8,%esp
-     dee:	68 68 42 00 00       	push   $0x4268
-     df3:	6a 01                	push   $0x1
-     df5:	e8 06 2d 00 00       	call   3b00 <printf>
-  ppid = getpid();
-     dfa:	e8 04 2c 00 00       	call   3a03 <getpid>
-     dff:	89 c3                	mov    %eax,%ebx
-  if((pid = fork()) == 0){
-     e01:	e8 75 2b 00 00       	call   397b <fork>
-     e06:	83 c4 10             	add    $0x10,%esp
-     e09:	85 c0                	test   %eax,%eax
-     e0b:	74 0f                	je     e1c <mem+0x3c>
-     e0d:	e9 8e 00 00 00       	jmp    ea0 <mem+0xc0>
-     e12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      *(char**)m2 = m1;
-     e18:	89 30                	mov    %esi,(%eax)
-     e1a:	89 c6                	mov    %eax,%esi
-    while((m2 = malloc(10001)) != 0){
-     e1c:	83 ec 0c             	sub    $0xc,%esp
-     e1f:	68 11 27 00 00       	push   $0x2711
-     e24:	e8 37 2f 00 00       	call   3d60 <malloc>
-     e29:	83 c4 10             	add    $0x10,%esp
-     e2c:	85 c0                	test   %eax,%eax
-     e2e:	75 e8                	jne    e18 <mem+0x38>
-    while(m1){
-     e30:	85 f6                	test   %esi,%esi
-     e32:	74 18                	je     e4c <mem+0x6c>
-     e34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-      m2 = *(char**)m1;
-     e38:	89 f0                	mov    %esi,%eax
-      free(m1);
-     e3a:	83 ec 0c             	sub    $0xc,%esp
-      m2 = *(char**)m1;
-     e3d:	8b 36                	mov    (%esi),%esi
-      free(m1);
-     e3f:	50                   	push   %eax
-     e40:	e8 8b 2e 00 00       	call   3cd0 <free>
-    while(m1){
-     e45:	83 c4 10             	add    $0x10,%esp
-     e48:	85 f6                	test   %esi,%esi
-     e4a:	75 ec                	jne    e38 <mem+0x58>
-    m1 = malloc(1024*20);
-     e4c:	83 ec 0c             	sub    $0xc,%esp
-     e4f:	68 00 50 00 00       	push   $0x5000
-     e54:	e8 07 2f 00 00       	call   3d60 <malloc>
-    if(m1 == 0){
-     e59:	83 c4 10             	add    $0x10,%esp
-     e5c:	85 c0                	test   %eax,%eax
-     e5e:	74 20                	je     e80 <mem+0xa0>
-    free(m1);
-     e60:	83 ec 0c             	sub    $0xc,%esp
-     e63:	50                   	push   %eax
-     e64:	e8 67 2e 00 00       	call   3cd0 <free>
-    printf(1, "mem ok\n");
-     e69:	58                   	pop    %eax
-     e6a:	5a                   	pop    %edx
-     e6b:	68 8c 42 00 00       	push   $0x428c
-     e70:	6a 01                	push   $0x1
-     e72:	e8 89 2c 00 00       	call   3b00 <printf>
-    exit();
-     e77:	e8 07 2b 00 00       	call   3983 <exit>
-     e7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-      printf(1, "couldn't allocate mem?!!\n");
-     e80:	83 ec 08             	sub    $0x8,%esp
-     e83:	68 72 42 00 00       	push   $0x4272
-     e88:	6a 01                	push   $0x1
-     e8a:	e8 71 2c 00 00       	call   3b00 <printf>
-      kill(ppid);
-     e8f:	89 1c 24             	mov    %ebx,(%esp)
-     e92:	e8 1c 2b 00 00       	call   39b3 <kill>
-      exit();
-     e97:	e8 e7 2a 00 00       	call   3983 <exit>
-     e9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-}
-     ea0:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     ea3:	5b                   	pop    %ebx
-     ea4:	5e                   	pop    %esi
-     ea5:	5d                   	pop    %ebp
-    wait();
-     ea6:	e9 e0 2a 00 00       	jmp    398b <wait>
-     eab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     eaf:	90                   	nop
-
-00000eb0 <sharedfd>:
-{
-     eb0:	f3 0f 1e fb          	endbr32 
-     eb4:	55                   	push   %ebp
-     eb5:	89 e5                	mov    %esp,%ebp
-     eb7:	57                   	push   %edi
-     eb8:	56                   	push   %esi
-     eb9:	53                   	push   %ebx
-     eba:	83 ec 34             	sub    $0x34,%esp
-  printf(1, "sharedfd test\n");
-     ebd:	68 94 42 00 00       	push   $0x4294
-     ec2:	6a 01                	push   $0x1
-     ec4:	e8 37 2c 00 00       	call   3b00 <printf>
-  unlink("sharedfd");
-     ec9:	c7 04 24 a3 42 00 00 	movl   $0x42a3,(%esp)
-     ed0:	e8 fe 2a 00 00       	call   39d3 <unlink>
-  fd = open("sharedfd", O_CREATE|O_RDWR);
-     ed5:	5b                   	pop    %ebx
-     ed6:	5e                   	pop    %esi
-     ed7:	68 02 02 00 00       	push   $0x202
-     edc:	68 a3 42 00 00       	push   $0x42a3
-     ee1:	e8 dd 2a 00 00       	call   39c3 <open>
-  if(fd < 0){
-     ee6:	83 c4 10             	add    $0x10,%esp
-     ee9:	85 c0                	test   %eax,%eax
-     eeb:	0f 88 26 01 00 00    	js     1017 <sharedfd+0x167>
-     ef1:	89 c7                	mov    %eax,%edi
-  memset(buf, pid==0?'c':'p', sizeof(buf));
-     ef3:	8d 75 de             	lea    -0x22(%ebp),%esi
-     ef6:	bb e8 03 00 00       	mov    $0x3e8,%ebx
-  pid = fork();
-     efb:	e8 7b 2a 00 00       	call   397b <fork>
-  memset(buf, pid==0?'c':'p', sizeof(buf));
-     f00:	83 f8 01             	cmp    $0x1,%eax
-  pid = fork();
-     f03:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-  memset(buf, pid==0?'c':'p', sizeof(buf));
-     f06:	19 c0                	sbb    %eax,%eax
-     f08:	83 ec 04             	sub    $0x4,%esp
-     f0b:	83 e0 f3             	and    $0xfffffff3,%eax
-     f0e:	6a 0a                	push   $0xa
-     f10:	83 c0 70             	add    $0x70,%eax
-     f13:	50                   	push   %eax
-     f14:	56                   	push   %esi
-     f15:	e8 c6 28 00 00       	call   37e0 <memset>
-     f1a:	83 c4 10             	add    $0x10,%esp
-     f1d:	eb 06                	jmp    f25 <sharedfd+0x75>
-     f1f:	90                   	nop
-  for(i = 0; i < 1000; i++){
-     f20:	83 eb 01             	sub    $0x1,%ebx
-     f23:	74 26                	je     f4b <sharedfd+0x9b>
-    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
-     f25:	83 ec 04             	sub    $0x4,%esp
-     f28:	6a 0a                	push   $0xa
-     f2a:	56                   	push   %esi
-     f2b:	57                   	push   %edi
-     f2c:	e8 72 2a 00 00       	call   39a3 <write>
-     f31:	83 c4 10             	add    $0x10,%esp
-     f34:	83 f8 0a             	cmp    $0xa,%eax
-     f37:	74 e7                	je     f20 <sharedfd+0x70>
-      printf(1, "fstests: write sharedfd failed\n");
-     f39:	83 ec 08             	sub    $0x8,%esp
-     f3c:	68 94 4f 00 00       	push   $0x4f94
-     f41:	6a 01                	push   $0x1
-     f43:	e8 b8 2b 00 00       	call   3b00 <printf>
-      break;
-     f48:	83 c4 10             	add    $0x10,%esp
-  if(pid == 0)
-     f4b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
-     f4e:	85 c9                	test   %ecx,%ecx
-     f50:	0f 84 f5 00 00 00    	je     104b <sharedfd+0x19b>
-    wait();
-     f56:	e8 30 2a 00 00       	call   398b <wait>
-  close(fd);
-     f5b:	83 ec 0c             	sub    $0xc,%esp
-  nc = np = 0;
-     f5e:	31 db                	xor    %ebx,%ebx
-  close(fd);
-     f60:	57                   	push   %edi
-     f61:	8d 7d e8             	lea    -0x18(%ebp),%edi
-     f64:	e8 42 2a 00 00       	call   39ab <close>
-  fd = open("sharedfd", 0);
-     f69:	58                   	pop    %eax
-     f6a:	5a                   	pop    %edx
-     f6b:	6a 00                	push   $0x0
-     f6d:	68 a3 42 00 00       	push   $0x42a3
-     f72:	e8 4c 2a 00 00       	call   39c3 <open>
-  if(fd < 0){
-     f77:	83 c4 10             	add    $0x10,%esp
-  nc = np = 0;
-     f7a:	31 d2                	xor    %edx,%edx
-  fd = open("sharedfd", 0);
-     f7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
-  if(fd < 0){
-     f7f:	85 c0                	test   %eax,%eax
-     f81:	0f 88 aa 00 00 00    	js     1031 <sharedfd+0x181>
-     f87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     f8e:	66 90                	xchg   %ax,%ax
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-     f90:	83 ec 04             	sub    $0x4,%esp
-     f93:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-     f96:	6a 0a                	push   $0xa
-     f98:	56                   	push   %esi
-     f99:	ff 75 d0             	pushl  -0x30(%ebp)
-     f9c:	e8 fa 29 00 00       	call   399b <read>
-     fa1:	83 c4 10             	add    $0x10,%esp
-     fa4:	85 c0                	test   %eax,%eax
-     fa6:	7e 28                	jle    fd0 <sharedfd+0x120>
-    for(i = 0; i < sizeof(buf); i++){
-     fa8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-     fab:	89 f0                	mov    %esi,%eax
-     fad:	eb 13                	jmp    fc2 <sharedfd+0x112>
-     faf:	90                   	nop
-        np++;
-     fb0:	80 f9 70             	cmp    $0x70,%cl
-     fb3:	0f 94 c1             	sete   %cl
-     fb6:	0f b6 c9             	movzbl %cl,%ecx
-     fb9:	01 cb                	add    %ecx,%ebx
-    for(i = 0; i < sizeof(buf); i++){
-     fbb:	83 c0 01             	add    $0x1,%eax
-     fbe:	39 c7                	cmp    %eax,%edi
-     fc0:	74 ce                	je     f90 <sharedfd+0xe0>
-      if(buf[i] == 'c')
-     fc2:	0f b6 08             	movzbl (%eax),%ecx
-     fc5:	80 f9 63             	cmp    $0x63,%cl
-     fc8:	75 e6                	jne    fb0 <sharedfd+0x100>
-        nc++;
-     fca:	83 c2 01             	add    $0x1,%edx
-      if(buf[i] == 'p')
-     fcd:	eb ec                	jmp    fbb <sharedfd+0x10b>
-     fcf:	90                   	nop
-  close(fd);
-     fd0:	83 ec 0c             	sub    $0xc,%esp
-     fd3:	ff 75 d0             	pushl  -0x30(%ebp)
-     fd6:	e8 d0 29 00 00       	call   39ab <close>
-  unlink("sharedfd");
-     fdb:	c7 04 24 a3 42 00 00 	movl   $0x42a3,(%esp)
-     fe2:	e8 ec 29 00 00       	call   39d3 <unlink>
-  if(nc == 10000 && np == 10000){
-     fe7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-     fea:	83 c4 10             	add    $0x10,%esp
-     fed:	81 fa 10 27 00 00    	cmp    $0x2710,%edx
-     ff3:	75 5b                	jne    1050 <sharedfd+0x1a0>
-     ff5:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
-     ffb:	75 53                	jne    1050 <sharedfd+0x1a0>
-    printf(1, "sharedfd ok\n");
-     ffd:	83 ec 08             	sub    $0x8,%esp
-    1000:	68 ac 42 00 00       	push   $0x42ac
-    1005:	6a 01                	push   $0x1
-    1007:	e8 f4 2a 00 00       	call   3b00 <printf>
-    100c:	83 c4 10             	add    $0x10,%esp
-}
-    100f:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1012:	5b                   	pop    %ebx
-    1013:	5e                   	pop    %esi
-    1014:	5f                   	pop    %edi
-    1015:	5d                   	pop    %ebp
-    1016:	c3                   	ret    
-    printf(1, "fstests: cannot open sharedfd for writing");
-    1017:	83 ec 08             	sub    $0x8,%esp
-    101a:	68 68 4f 00 00       	push   $0x4f68
-    101f:	6a 01                	push   $0x1
-    1021:	e8 da 2a 00 00       	call   3b00 <printf>
-    return;
-    1026:	83 c4 10             	add    $0x10,%esp
-}
-    1029:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    102c:	5b                   	pop    %ebx
-    102d:	5e                   	pop    %esi
-    102e:	5f                   	pop    %edi
-    102f:	5d                   	pop    %ebp
-    1030:	c3                   	ret    
-    printf(1, "fstests: cannot open sharedfd for reading\n");
-    1031:	83 ec 08             	sub    $0x8,%esp
-    1034:	68 b4 4f 00 00       	push   $0x4fb4
-    1039:	6a 01                	push   $0x1
-    103b:	e8 c0 2a 00 00       	call   3b00 <printf>
-    return;
-    1040:	83 c4 10             	add    $0x10,%esp
-}
-    1043:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1046:	5b                   	pop    %ebx
-    1047:	5e                   	pop    %esi
-    1048:	5f                   	pop    %edi
-    1049:	5d                   	pop    %ebp
-    104a:	c3                   	ret    
-    exit();
-    104b:	e8 33 29 00 00       	call   3983 <exit>
-    printf(1, "sharedfd oops %d %d\n", nc, np);
-    1050:	53                   	push   %ebx
-    1051:	52                   	push   %edx
-    1052:	68 b9 42 00 00       	push   $0x42b9
-    1057:	6a 01                	push   $0x1
-    1059:	e8 a2 2a 00 00       	call   3b00 <printf>
-    exit();
-    105e:	e8 20 29 00 00       	call   3983 <exit>
-    1063:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    106a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00001070 <fourfiles>:
-{
-    1070:	f3 0f 1e fb          	endbr32 
-    1074:	55                   	push   %ebp
-    1075:	89 e5                	mov    %esp,%ebp
-    1077:	57                   	push   %edi
-    1078:	56                   	push   %esi
-  printf(1, "fourfiles test\n");
-    1079:	be ce 42 00 00       	mov    $0x42ce,%esi
-{
-    107e:	53                   	push   %ebx
-  for(pi = 0; pi < 4; pi++){
-    107f:	31 db                	xor    %ebx,%ebx
-{
-    1081:	83 ec 34             	sub    $0x34,%esp
-  char *names[] = { "f0", "f1", "f2", "f3" };
-    1084:	c7 45 d8 ce 42 00 00 	movl   $0x42ce,-0x28(%ebp)
-  printf(1, "fourfiles test\n");
-    108b:	68 d4 42 00 00       	push   $0x42d4
-    1090:	6a 01                	push   $0x1
-  char *names[] = { "f0", "f1", "f2", "f3" };
-    1092:	c7 45 dc 17 44 00 00 	movl   $0x4417,-0x24(%ebp)
-    1099:	c7 45 e0 1b 44 00 00 	movl   $0x441b,-0x20(%ebp)
-    10a0:	c7 45 e4 d1 42 00 00 	movl   $0x42d1,-0x1c(%ebp)
-  printf(1, "fourfiles test\n");
-    10a7:	e8 54 2a 00 00       	call   3b00 <printf>
-    10ac:	83 c4 10             	add    $0x10,%esp
-    unlink(fname);
-    10af:	83 ec 0c             	sub    $0xc,%esp
-    10b2:	56                   	push   %esi
-    10b3:	e8 1b 29 00 00       	call   39d3 <unlink>
-    pid = fork();
-    10b8:	e8 be 28 00 00       	call   397b <fork>
-    if(pid < 0){
-    10bd:	83 c4 10             	add    $0x10,%esp
-    10c0:	85 c0                	test   %eax,%eax
-    10c2:	0f 88 60 01 00 00    	js     1228 <fourfiles+0x1b8>
-    if(pid == 0){
-    10c8:	0f 84 e5 00 00 00    	je     11b3 <fourfiles+0x143>
-  for(pi = 0; pi < 4; pi++){
-    10ce:	83 c3 01             	add    $0x1,%ebx
-    10d1:	83 fb 04             	cmp    $0x4,%ebx
-    10d4:	74 06                	je     10dc <fourfiles+0x6c>
-    10d6:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
-    10da:	eb d3                	jmp    10af <fourfiles+0x3f>
-    wait();
-    10dc:	e8 aa 28 00 00       	call   398b <wait>
-  for(i = 0; i < 2; i++){
-    10e1:	31 f6                	xor    %esi,%esi
-    wait();
-    10e3:	e8 a3 28 00 00       	call   398b <wait>
-    10e8:	e8 9e 28 00 00       	call   398b <wait>
-    10ed:	e8 99 28 00 00       	call   398b <wait>
-    fname = names[i];
-    10f2:	8b 44 b5 d8          	mov    -0x28(%ebp,%esi,4),%eax
-    fd = open(fname, 0);
-    10f6:	83 ec 08             	sub    $0x8,%esp
-    total = 0;
-    10f9:	31 db                	xor    %ebx,%ebx
-    fd = open(fname, 0);
-    10fb:	6a 00                	push   $0x0
-    10fd:	50                   	push   %eax
-    fname = names[i];
-    10fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
-    fd = open(fname, 0);
-    1101:	e8 bd 28 00 00       	call   39c3 <open>
-    while((n = read(fd, buf, sizeof(buf))) > 0){
-    1106:	83 c4 10             	add    $0x10,%esp
-    fd = open(fname, 0);
-    1109:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-    while((n = read(fd, buf, sizeof(buf))) > 0){
-    110c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    1110:	83 ec 04             	sub    $0x4,%esp
-    1113:	68 00 20 00 00       	push   $0x2000
-    1118:	68 e0 86 00 00       	push   $0x86e0
-    111d:	ff 75 d4             	pushl  -0x2c(%ebp)
-    1120:	e8 76 28 00 00       	call   399b <read>
-    1125:	83 c4 10             	add    $0x10,%esp
-    1128:	85 c0                	test   %eax,%eax
-    112a:	7e 22                	jle    114e <fourfiles+0xde>
-      for(j = 0; j < n; j++){
-    112c:	31 d2                	xor    %edx,%edx
-    112e:	66 90                	xchg   %ax,%ax
-        if(buf[j] != '0'+i){
-    1130:	83 fe 01             	cmp    $0x1,%esi
-    1133:	0f be ba e0 86 00 00 	movsbl 0x86e0(%edx),%edi
-    113a:	19 c9                	sbb    %ecx,%ecx
-    113c:	83 c1 31             	add    $0x31,%ecx
-    113f:	39 cf                	cmp    %ecx,%edi
-    1141:	75 5c                	jne    119f <fourfiles+0x12f>
-      for(j = 0; j < n; j++){
-    1143:	83 c2 01             	add    $0x1,%edx
-    1146:	39 d0                	cmp    %edx,%eax
-    1148:	75 e6                	jne    1130 <fourfiles+0xc0>
-      total += n;
-    114a:	01 c3                	add    %eax,%ebx
-    114c:	eb c2                	jmp    1110 <fourfiles+0xa0>
-    close(fd);
-    114e:	83 ec 0c             	sub    $0xc,%esp
-    1151:	ff 75 d4             	pushl  -0x2c(%ebp)
-    1154:	e8 52 28 00 00       	call   39ab <close>
-    if(total != 12*500){
-    1159:	83 c4 10             	add    $0x10,%esp
-    115c:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
-    1162:	0f 85 d4 00 00 00    	jne    123c <fourfiles+0x1cc>
-    unlink(fname);
-    1168:	83 ec 0c             	sub    $0xc,%esp
-    116b:	ff 75 d0             	pushl  -0x30(%ebp)
-    116e:	e8 60 28 00 00       	call   39d3 <unlink>
-  for(i = 0; i < 2; i++){
-    1173:	83 c4 10             	add    $0x10,%esp
-    1176:	83 fe 01             	cmp    $0x1,%esi
-    1179:	75 1a                	jne    1195 <fourfiles+0x125>
-  printf(1, "fourfiles ok\n");
-    117b:	83 ec 08             	sub    $0x8,%esp
-    117e:	68 12 43 00 00       	push   $0x4312
-    1183:	6a 01                	push   $0x1
-    1185:	e8 76 29 00 00       	call   3b00 <printf>
-}
-    118a:	83 c4 10             	add    $0x10,%esp
-    118d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1190:	5b                   	pop    %ebx
-    1191:	5e                   	pop    %esi
-    1192:	5f                   	pop    %edi
-    1193:	5d                   	pop    %ebp
-    1194:	c3                   	ret    
-    1195:	be 01 00 00 00       	mov    $0x1,%esi
-    119a:	e9 53 ff ff ff       	jmp    10f2 <fourfiles+0x82>
-          printf(1, "wrong char\n");
-    119f:	83 ec 08             	sub    $0x8,%esp
-    11a2:	68 f5 42 00 00       	push   $0x42f5
-    11a7:	6a 01                	push   $0x1
-    11a9:	e8 52 29 00 00       	call   3b00 <printf>
-          exit();
-    11ae:	e8 d0 27 00 00       	call   3983 <exit>
-      fd = open(fname, O_CREATE | O_RDWR);
-    11b3:	83 ec 08             	sub    $0x8,%esp
-    11b6:	68 02 02 00 00       	push   $0x202
-    11bb:	56                   	push   %esi
-    11bc:	e8 02 28 00 00       	call   39c3 <open>
-      if(fd < 0){
-    11c1:	83 c4 10             	add    $0x10,%esp
-      fd = open(fname, O_CREATE | O_RDWR);
-    11c4:	89 c6                	mov    %eax,%esi
-      if(fd < 0){
-    11c6:	85 c0                	test   %eax,%eax
-    11c8:	78 45                	js     120f <fourfiles+0x19f>
-      memset(buf, '0'+pi, 512);
-    11ca:	83 ec 04             	sub    $0x4,%esp
-    11cd:	83 c3 30             	add    $0x30,%ebx
-    11d0:	68 00 02 00 00       	push   $0x200
-    11d5:	53                   	push   %ebx
-    11d6:	bb 0c 00 00 00       	mov    $0xc,%ebx
-    11db:	68 e0 86 00 00       	push   $0x86e0
-    11e0:	e8 fb 25 00 00       	call   37e0 <memset>
-    11e5:	83 c4 10             	add    $0x10,%esp
-        if((n = write(fd, buf, 500)) != 500){
-    11e8:	83 ec 04             	sub    $0x4,%esp
-    11eb:	68 f4 01 00 00       	push   $0x1f4
-    11f0:	68 e0 86 00 00       	push   $0x86e0
-    11f5:	56                   	push   %esi
-    11f6:	e8 a8 27 00 00       	call   39a3 <write>
-    11fb:	83 c4 10             	add    $0x10,%esp
-    11fe:	3d f4 01 00 00       	cmp    $0x1f4,%eax
-    1203:	75 4a                	jne    124f <fourfiles+0x1df>
-      for(i = 0; i < 12; i++){
-    1205:	83 eb 01             	sub    $0x1,%ebx
-    1208:	75 de                	jne    11e8 <fourfiles+0x178>
-      exit();
-    120a:	e8 74 27 00 00       	call   3983 <exit>
-        printf(1, "create failed\n");
-    120f:	51                   	push   %ecx
-    1210:	51                   	push   %ecx
-    1211:	68 6f 45 00 00       	push   $0x456f
-    1216:	6a 01                	push   $0x1
-    1218:	e8 e3 28 00 00       	call   3b00 <printf>
-        exit();
-    121d:	e8 61 27 00 00       	call   3983 <exit>
-    1222:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      printf(1, "fork failed\n");
-    1228:	83 ec 08             	sub    $0x8,%esp
-    122b:	68 a9 4d 00 00       	push   $0x4da9
-    1230:	6a 01                	push   $0x1
-    1232:	e8 c9 28 00 00       	call   3b00 <printf>
-      exit();
-    1237:	e8 47 27 00 00       	call   3983 <exit>
-      printf(1, "wrong length %d\n", total);
-    123c:	50                   	push   %eax
-    123d:	53                   	push   %ebx
-    123e:	68 01 43 00 00       	push   $0x4301
-    1243:	6a 01                	push   $0x1
-    1245:	e8 b6 28 00 00       	call   3b00 <printf>
-      exit();
-    124a:	e8 34 27 00 00       	call   3983 <exit>
-          printf(1, "write failed %d\n", n);
-    124f:	52                   	push   %edx
-    1250:	50                   	push   %eax
-    1251:	68 e4 42 00 00       	push   $0x42e4
-    1256:	6a 01                	push   $0x1
-    1258:	e8 a3 28 00 00       	call   3b00 <printf>
-          exit();
-    125d:	e8 21 27 00 00       	call   3983 <exit>
-    1262:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    1269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00001270 <createdelete>:
-{
-    1270:	f3 0f 1e fb          	endbr32 
-    1274:	55                   	push   %ebp
-    1275:	89 e5                	mov    %esp,%ebp
-    1277:	57                   	push   %edi
-    1278:	56                   	push   %esi
-    1279:	53                   	push   %ebx
-  for(pi = 0; pi < 4; pi++){
-    127a:	31 db                	xor    %ebx,%ebx
-{
-    127c:	83 ec 44             	sub    $0x44,%esp
-  printf(1, "createdelete test\n");
-    127f:	68 20 43 00 00       	push   $0x4320
-    1284:	6a 01                	push   $0x1
-    1286:	e8 75 28 00 00       	call   3b00 <printf>
-    128b:	83 c4 10             	add    $0x10,%esp
-    pid = fork();
-    128e:	e8 e8 26 00 00       	call   397b <fork>
-    if(pid < 0){
-    1293:	85 c0                	test   %eax,%eax
-    1295:	0f 88 ce 01 00 00    	js     1469 <createdelete+0x1f9>
-    if(pid == 0){
-    129b:	0f 84 17 01 00 00    	je     13b8 <createdelete+0x148>
-  for(pi = 0; pi < 4; pi++){
-    12a1:	83 c3 01             	add    $0x1,%ebx
-    12a4:	83 fb 04             	cmp    $0x4,%ebx
-    12a7:	75 e5                	jne    128e <createdelete+0x1e>
-    wait();
-    12a9:	e8 dd 26 00 00       	call   398b <wait>
-    12ae:	8d 7d c8             	lea    -0x38(%ebp),%edi
-  name[0] = name[1] = name[2] = 0;
-    12b1:	be ff ff ff ff       	mov    $0xffffffff,%esi
-    wait();
-    12b6:	e8 d0 26 00 00       	call   398b <wait>
-    12bb:	e8 cb 26 00 00       	call   398b <wait>
-    12c0:	e8 c6 26 00 00       	call   398b <wait>
-  name[0] = name[1] = name[2] = 0;
-    12c5:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
-  for(i = 0; i < N; i++){
-    12c9:	89 7d c0             	mov    %edi,-0x40(%ebp)
-    12cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    for(pi = 0; pi < 4; pi++){
-    12d0:	8d 46 31             	lea    0x31(%esi),%eax
-    12d3:	89 f7                	mov    %esi,%edi
-    12d5:	83 c6 01             	add    $0x1,%esi
-    12d8:	83 fe 09             	cmp    $0x9,%esi
-    12db:	88 45 c7             	mov    %al,-0x39(%ebp)
-    12de:	0f 9f c3             	setg   %bl
-    12e1:	85 f6                	test   %esi,%esi
-    12e3:	0f 94 c0             	sete   %al
-    12e6:	09 c3                	or     %eax,%ebx
-    12e8:	88 5d c6             	mov    %bl,-0x3a(%ebp)
-      name[2] = '\0';
-    12eb:	bb 70 00 00 00       	mov    $0x70,%ebx
-      fd = open(name, 0);
-    12f0:	83 ec 08             	sub    $0x8,%esp
-      name[1] = '0' + i;
-    12f3:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
-      name[0] = 'p' + pi;
-    12f7:	88 5d c8             	mov    %bl,-0x38(%ebp)
-      fd = open(name, 0);
-    12fa:	6a 00                	push   $0x0
-    12fc:	ff 75 c0             	pushl  -0x40(%ebp)
-      name[1] = '0' + i;
-    12ff:	88 45 c9             	mov    %al,-0x37(%ebp)
-      fd = open(name, 0);
-    1302:	e8 bc 26 00 00       	call   39c3 <open>
-      if((i == 0 || i >= N/2) && fd < 0){
-    1307:	83 c4 10             	add    $0x10,%esp
-    130a:	80 7d c6 00          	cmpb   $0x0,-0x3a(%ebp)
-    130e:	0f 84 8c 00 00 00    	je     13a0 <createdelete+0x130>
-    1314:	85 c0                	test   %eax,%eax
-    1316:	0f 88 21 01 00 00    	js     143d <createdelete+0x1cd>
-      } else if((i >= 1 && i < N/2) && fd >= 0){
-    131c:	83 ff 08             	cmp    $0x8,%edi
-    131f:	0f 86 60 01 00 00    	jbe    1485 <createdelete+0x215>
-        close(fd);
-    1325:	83 ec 0c             	sub    $0xc,%esp
-    1328:	50                   	push   %eax
-    1329:	e8 7d 26 00 00       	call   39ab <close>
-    132e:	83 c4 10             	add    $0x10,%esp
-    for(pi = 0; pi < 4; pi++){
-    1331:	83 c3 01             	add    $0x1,%ebx
-    1334:	80 fb 74             	cmp    $0x74,%bl
-    1337:	75 b7                	jne    12f0 <createdelete+0x80>
-  for(i = 0; i < N; i++){
-    1339:	83 fe 13             	cmp    $0x13,%esi
-    133c:	75 92                	jne    12d0 <createdelete+0x60>
-    133e:	8b 7d c0             	mov    -0x40(%ebp),%edi
-    1341:	be 70 00 00 00       	mov    $0x70,%esi
-    1346:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    134d:	8d 76 00             	lea    0x0(%esi),%esi
-    for(pi = 0; pi < 4; pi++){
-    1350:	8d 46 c0             	lea    -0x40(%esi),%eax
-  name[0] = name[1] = name[2] = 0;
-    1353:	bb 04 00 00 00       	mov    $0x4,%ebx
-    1358:	88 45 c7             	mov    %al,-0x39(%ebp)
-      unlink(name);
-    135b:	83 ec 0c             	sub    $0xc,%esp
-      name[0] = 'p' + i;
-    135e:	89 f0                	mov    %esi,%eax
-      unlink(name);
-    1360:	57                   	push   %edi
-      name[0] = 'p' + i;
-    1361:	88 45 c8             	mov    %al,-0x38(%ebp)
-      name[1] = '0' + i;
-    1364:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
-    1368:	88 45 c9             	mov    %al,-0x37(%ebp)
-      unlink(name);
-    136b:	e8 63 26 00 00       	call   39d3 <unlink>
-    for(pi = 0; pi < 4; pi++){
-    1370:	83 c4 10             	add    $0x10,%esp
-    1373:	83 eb 01             	sub    $0x1,%ebx
-    1376:	75 e3                	jne    135b <createdelete+0xeb>
-  for(i = 0; i < N; i++){
-    1378:	83 c6 01             	add    $0x1,%esi
-    137b:	89 f0                	mov    %esi,%eax
-    137d:	3c 84                	cmp    $0x84,%al
-    137f:	75 cf                	jne    1350 <createdelete+0xe0>
-  printf(1, "createdelete ok\n");
-    1381:	83 ec 08             	sub    $0x8,%esp
-    1384:	68 33 43 00 00       	push   $0x4333
-    1389:	6a 01                	push   $0x1
-    138b:	e8 70 27 00 00       	call   3b00 <printf>
-}
-    1390:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1393:	5b                   	pop    %ebx
-    1394:	5e                   	pop    %esi
-    1395:	5f                   	pop    %edi
-    1396:	5d                   	pop    %ebp
-    1397:	c3                   	ret    
-    1398:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    139f:	90                   	nop
-      } else if((i >= 1 && i < N/2) && fd >= 0){
-    13a0:	83 ff 08             	cmp    $0x8,%edi
-    13a3:	0f 86 d4 00 00 00    	jbe    147d <createdelete+0x20d>
-      if(fd >= 0)
-    13a9:	85 c0                	test   %eax,%eax
-    13ab:	78 84                	js     1331 <createdelete+0xc1>
-    13ad:	e9 73 ff ff ff       	jmp    1325 <createdelete+0xb5>
-    13b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      name[0] = 'p' + pi;
-    13b8:	83 c3 70             	add    $0x70,%ebx
-      name[2] = '\0';
-    13bb:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
-    13bf:	8d 7d c8             	lea    -0x38(%ebp),%edi
-      name[0] = 'p' + pi;
-    13c2:	88 5d c8             	mov    %bl,-0x38(%ebp)
-      name[2] = '\0';
-    13c5:	31 db                	xor    %ebx,%ebx
-    13c7:	eb 0f                	jmp    13d8 <createdelete+0x168>
-    13c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      for(i = 0; i < N; i++){
-    13d0:	83 fb 13             	cmp    $0x13,%ebx
-    13d3:	74 63                	je     1438 <createdelete+0x1c8>
-    13d5:	83 c3 01             	add    $0x1,%ebx
-        fd = open(name, O_CREATE | O_RDWR);
-    13d8:	83 ec 08             	sub    $0x8,%esp
-        name[1] = '0' + i;
-    13db:	8d 43 30             	lea    0x30(%ebx),%eax
-        fd = open(name, O_CREATE | O_RDWR);
-    13de:	68 02 02 00 00       	push   $0x202
-    13e3:	57                   	push   %edi
-        name[1] = '0' + i;
-    13e4:	88 45 c9             	mov    %al,-0x37(%ebp)
-        fd = open(name, O_CREATE | O_RDWR);
-    13e7:	e8 d7 25 00 00       	call   39c3 <open>
-        if(fd < 0){
-    13ec:	83 c4 10             	add    $0x10,%esp
-    13ef:	85 c0                	test   %eax,%eax
-    13f1:	78 62                	js     1455 <createdelete+0x1e5>
-        close(fd);
-    13f3:	83 ec 0c             	sub    $0xc,%esp
-    13f6:	50                   	push   %eax
-    13f7:	e8 af 25 00 00       	call   39ab <close>
-        if(i > 0 && (i % 2 ) == 0){
-    13fc:	83 c4 10             	add    $0x10,%esp
-    13ff:	85 db                	test   %ebx,%ebx
-    1401:	74 d2                	je     13d5 <createdelete+0x165>
-    1403:	f6 c3 01             	test   $0x1,%bl
-    1406:	75 c8                	jne    13d0 <createdelete+0x160>
-          if(unlink(name) < 0){
-    1408:	83 ec 0c             	sub    $0xc,%esp
-          name[1] = '0' + (i / 2);
-    140b:	89 d8                	mov    %ebx,%eax
-          if(unlink(name) < 0){
-    140d:	57                   	push   %edi
-          name[1] = '0' + (i / 2);
-    140e:	d1 f8                	sar    %eax
-    1410:	83 c0 30             	add    $0x30,%eax
-    1413:	88 45 c9             	mov    %al,-0x37(%ebp)
-          if(unlink(name) < 0){
-    1416:	e8 b8 25 00 00       	call   39d3 <unlink>
-    141b:	83 c4 10             	add    $0x10,%esp
-    141e:	85 c0                	test   %eax,%eax
-    1420:	79 ae                	jns    13d0 <createdelete+0x160>
-            printf(1, "unlink failed\n");
-    1422:	52                   	push   %edx
-    1423:	52                   	push   %edx
-    1424:	68 21 3f 00 00       	push   $0x3f21
-    1429:	6a 01                	push   $0x1
-    142b:	e8 d0 26 00 00       	call   3b00 <printf>
-            exit();
-    1430:	e8 4e 25 00 00       	call   3983 <exit>
-    1435:	8d 76 00             	lea    0x0(%esi),%esi
-      exit();
-    1438:	e8 46 25 00 00       	call   3983 <exit>
-    143d:	8b 7d c0             	mov    -0x40(%ebp),%edi
-        printf(1, "oops createdelete %s didn't exist\n", name);
-    1440:	83 ec 04             	sub    $0x4,%esp
-    1443:	57                   	push   %edi
-    1444:	68 e0 4f 00 00       	push   $0x4fe0
-    1449:	6a 01                	push   $0x1
-    144b:	e8 b0 26 00 00       	call   3b00 <printf>
-        exit();
-    1450:	e8 2e 25 00 00       	call   3983 <exit>
-          printf(1, "create failed\n");
-    1455:	83 ec 08             	sub    $0x8,%esp
-    1458:	68 6f 45 00 00       	push   $0x456f
-    145d:	6a 01                	push   $0x1
-    145f:	e8 9c 26 00 00       	call   3b00 <printf>
-          exit();
-    1464:	e8 1a 25 00 00       	call   3983 <exit>
-      printf(1, "fork failed\n");
-    1469:	83 ec 08             	sub    $0x8,%esp
-    146c:	68 a9 4d 00 00       	push   $0x4da9
-    1471:	6a 01                	push   $0x1
-    1473:	e8 88 26 00 00       	call   3b00 <printf>
-      exit();
-    1478:	e8 06 25 00 00       	call   3983 <exit>
-      } else if((i >= 1 && i < N/2) && fd >= 0){
-    147d:	85 c0                	test   %eax,%eax
-    147f:	0f 88 ac fe ff ff    	js     1331 <createdelete+0xc1>
-    1485:	8b 7d c0             	mov    -0x40(%ebp),%edi
-        printf(1, "oops createdelete %s did exist\n", name);
-    1488:	50                   	push   %eax
-    1489:	57                   	push   %edi
-    148a:	68 04 50 00 00       	push   $0x5004
-    148f:	6a 01                	push   $0x1
-    1491:	e8 6a 26 00 00       	call   3b00 <printf>
-        exit();
-    1496:	e8 e8 24 00 00       	call   3983 <exit>
-    149b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    149f:	90                   	nop
-
-000014a0 <unlinkread>:
-{
-    14a0:	f3 0f 1e fb          	endbr32 
-    14a4:	55                   	push   %ebp
-    14a5:	89 e5                	mov    %esp,%ebp
-    14a7:	56                   	push   %esi
-    14a8:	53                   	push   %ebx
-  printf(1, "unlinkread test\n");
-    14a9:	83 ec 08             	sub    $0x8,%esp
-    14ac:	68 44 43 00 00       	push   $0x4344
-    14b1:	6a 01                	push   $0x1
-    14b3:	e8 48 26 00 00       	call   3b00 <printf>
-  fd = open("unlinkread", O_CREATE | O_RDWR);
-    14b8:	5b                   	pop    %ebx
-    14b9:	5e                   	pop    %esi
-    14ba:	68 02 02 00 00       	push   $0x202
-    14bf:	68 55 43 00 00       	push   $0x4355
-    14c4:	e8 fa 24 00 00       	call   39c3 <open>
-  if(fd < 0){
-    14c9:	83 c4 10             	add    $0x10,%esp
-    14cc:	85 c0                	test   %eax,%eax
-    14ce:	0f 88 e6 00 00 00    	js     15ba <unlinkread+0x11a>
-  write(fd, "hello", 5);
-    14d4:	83 ec 04             	sub    $0x4,%esp
-    14d7:	89 c3                	mov    %eax,%ebx
-    14d9:	6a 05                	push   $0x5
-    14db:	68 7a 43 00 00       	push   $0x437a
-    14e0:	50                   	push   %eax
-    14e1:	e8 bd 24 00 00       	call   39a3 <write>
-  close(fd);
-    14e6:	89 1c 24             	mov    %ebx,(%esp)
-    14e9:	e8 bd 24 00 00       	call   39ab <close>
-  fd = open("unlinkread", O_RDWR);
-    14ee:	58                   	pop    %eax
-    14ef:	5a                   	pop    %edx
-    14f0:	6a 02                	push   $0x2
-    14f2:	68 55 43 00 00       	push   $0x4355
-    14f7:	e8 c7 24 00 00       	call   39c3 <open>
-  if(fd < 0){
-    14fc:	83 c4 10             	add    $0x10,%esp
-  fd = open("unlinkread", O_RDWR);
-    14ff:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1501:	85 c0                	test   %eax,%eax
-    1503:	0f 88 10 01 00 00    	js     1619 <unlinkread+0x179>
-  if(unlink("unlinkread") != 0){
-    1509:	83 ec 0c             	sub    $0xc,%esp
-    150c:	68 55 43 00 00       	push   $0x4355
-    1511:	e8 bd 24 00 00       	call   39d3 <unlink>
-    1516:	83 c4 10             	add    $0x10,%esp
-    1519:	85 c0                	test   %eax,%eax
-    151b:	0f 85 e5 00 00 00    	jne    1606 <unlinkread+0x166>
-  fd1 = open("unlinkread", O_CREATE | O_RDWR);
-    1521:	83 ec 08             	sub    $0x8,%esp
-    1524:	68 02 02 00 00       	push   $0x202
-    1529:	68 55 43 00 00       	push   $0x4355
-    152e:	e8 90 24 00 00       	call   39c3 <open>
-  write(fd1, "yyy", 3);
-    1533:	83 c4 0c             	add    $0xc,%esp
-    1536:	6a 03                	push   $0x3
-  fd1 = open("unlinkread", O_CREATE | O_RDWR);
-    1538:	89 c6                	mov    %eax,%esi
-  write(fd1, "yyy", 3);
-    153a:	68 b2 43 00 00       	push   $0x43b2
-    153f:	50                   	push   %eax
-    1540:	e8 5e 24 00 00       	call   39a3 <write>
-  close(fd1);
-    1545:	89 34 24             	mov    %esi,(%esp)
-    1548:	e8 5e 24 00 00       	call   39ab <close>
-  if(read(fd, buf, sizeof(buf)) != 5){
-    154d:	83 c4 0c             	add    $0xc,%esp
-    1550:	68 00 20 00 00       	push   $0x2000
-    1555:	68 e0 86 00 00       	push   $0x86e0
-    155a:	53                   	push   %ebx
-    155b:	e8 3b 24 00 00       	call   399b <read>
-    1560:	83 c4 10             	add    $0x10,%esp
-    1563:	83 f8 05             	cmp    $0x5,%eax
-    1566:	0f 85 87 00 00 00    	jne    15f3 <unlinkread+0x153>
-  if(buf[0] != 'h'){
-    156c:	80 3d e0 86 00 00 68 	cmpb   $0x68,0x86e0
-    1573:	75 6b                	jne    15e0 <unlinkread+0x140>
-  if(write(fd, buf, 10) != 10){
-    1575:	83 ec 04             	sub    $0x4,%esp
-    1578:	6a 0a                	push   $0xa
-    157a:	68 e0 86 00 00       	push   $0x86e0
-    157f:	53                   	push   %ebx
-    1580:	e8 1e 24 00 00       	call   39a3 <write>
-    1585:	83 c4 10             	add    $0x10,%esp
-    1588:	83 f8 0a             	cmp    $0xa,%eax
-    158b:	75 40                	jne    15cd <unlinkread+0x12d>
-  close(fd);
-    158d:	83 ec 0c             	sub    $0xc,%esp
-    1590:	53                   	push   %ebx
-    1591:	e8 15 24 00 00       	call   39ab <close>
-  unlink("unlinkread");
-    1596:	c7 04 24 55 43 00 00 	movl   $0x4355,(%esp)
-    159d:	e8 31 24 00 00       	call   39d3 <unlink>
-  printf(1, "unlinkread ok\n");
-    15a2:	58                   	pop    %eax
-    15a3:	5a                   	pop    %edx
-    15a4:	68 fd 43 00 00       	push   $0x43fd
-    15a9:	6a 01                	push   $0x1
-    15ab:	e8 50 25 00 00       	call   3b00 <printf>
-}
-    15b0:	83 c4 10             	add    $0x10,%esp
-    15b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    15b6:	5b                   	pop    %ebx
-    15b7:	5e                   	pop    %esi
-    15b8:	5d                   	pop    %ebp
-    15b9:	c3                   	ret    
-    printf(1, "create unlinkread failed\n");
-    15ba:	51                   	push   %ecx
-    15bb:	51                   	push   %ecx
-    15bc:	68 60 43 00 00       	push   $0x4360
-    15c1:	6a 01                	push   $0x1
-    15c3:	e8 38 25 00 00       	call   3b00 <printf>
-    exit();
-    15c8:	e8 b6 23 00 00       	call   3983 <exit>
-    printf(1, "unlinkread write failed\n");
-    15cd:	51                   	push   %ecx
-    15ce:	51                   	push   %ecx
-    15cf:	68 e4 43 00 00       	push   $0x43e4
-    15d4:	6a 01                	push   $0x1
-    15d6:	e8 25 25 00 00       	call   3b00 <printf>
-    exit();
-    15db:	e8 a3 23 00 00       	call   3983 <exit>
-    printf(1, "unlinkread wrong data\n");
-    15e0:	53                   	push   %ebx
-    15e1:	53                   	push   %ebx
-    15e2:	68 cd 43 00 00       	push   $0x43cd
-    15e7:	6a 01                	push   $0x1
-    15e9:	e8 12 25 00 00       	call   3b00 <printf>
-    exit();
-    15ee:	e8 90 23 00 00       	call   3983 <exit>
-    printf(1, "unlinkread read failed");
-    15f3:	56                   	push   %esi
-    15f4:	56                   	push   %esi
-    15f5:	68 b6 43 00 00       	push   $0x43b6
-    15fa:	6a 01                	push   $0x1
-    15fc:	e8 ff 24 00 00       	call   3b00 <printf>
-    exit();
-    1601:	e8 7d 23 00 00       	call   3983 <exit>
-    printf(1, "unlink unlinkread failed\n");
-    1606:	50                   	push   %eax
-    1607:	50                   	push   %eax
-    1608:	68 98 43 00 00       	push   $0x4398
-    160d:	6a 01                	push   $0x1
-    160f:	e8 ec 24 00 00       	call   3b00 <printf>
-    exit();
-    1614:	e8 6a 23 00 00       	call   3983 <exit>
-    printf(1, "open unlinkread failed\n");
-    1619:	50                   	push   %eax
-    161a:	50                   	push   %eax
-    161b:	68 80 43 00 00       	push   $0x4380
-    1620:	6a 01                	push   $0x1
-    1622:	e8 d9 24 00 00       	call   3b00 <printf>
-    exit();
-    1627:	e8 57 23 00 00       	call   3983 <exit>
-    162c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00001630 <linktest>:
-{
-    1630:	f3 0f 1e fb          	endbr32 
-    1634:	55                   	push   %ebp
-    1635:	89 e5                	mov    %esp,%ebp
-    1637:	53                   	push   %ebx
-    1638:	83 ec 0c             	sub    $0xc,%esp
-  printf(1, "linktest\n");
-    163b:	68 0c 44 00 00       	push   $0x440c
-    1640:	6a 01                	push   $0x1
-    1642:	e8 b9 24 00 00       	call   3b00 <printf>
-  unlink("lf1");
-    1647:	c7 04 24 16 44 00 00 	movl   $0x4416,(%esp)
-    164e:	e8 80 23 00 00       	call   39d3 <unlink>
-  unlink("lf2");
-    1653:	c7 04 24 1a 44 00 00 	movl   $0x441a,(%esp)
-    165a:	e8 74 23 00 00       	call   39d3 <unlink>
-  fd = open("lf1", O_CREATE|O_RDWR);
-    165f:	58                   	pop    %eax
-    1660:	5a                   	pop    %edx
-    1661:	68 02 02 00 00       	push   $0x202
-    1666:	68 16 44 00 00       	push   $0x4416
-    166b:	e8 53 23 00 00       	call   39c3 <open>
-  if(fd < 0){
-    1670:	83 c4 10             	add    $0x10,%esp
-    1673:	85 c0                	test   %eax,%eax
-    1675:	0f 88 1e 01 00 00    	js     1799 <linktest+0x169>
-  if(write(fd, "hello", 5) != 5){
-    167b:	83 ec 04             	sub    $0x4,%esp
-    167e:	89 c3                	mov    %eax,%ebx
-    1680:	6a 05                	push   $0x5
-    1682:	68 7a 43 00 00       	push   $0x437a
-    1687:	50                   	push   %eax
-    1688:	e8 16 23 00 00       	call   39a3 <write>
-    168d:	83 c4 10             	add    $0x10,%esp
-    1690:	83 f8 05             	cmp    $0x5,%eax
-    1693:	0f 85 98 01 00 00    	jne    1831 <linktest+0x201>
-  close(fd);
-    1699:	83 ec 0c             	sub    $0xc,%esp
-    169c:	53                   	push   %ebx
-    169d:	e8 09 23 00 00       	call   39ab <close>
-  if(link("lf1", "lf2") < 0){
-    16a2:	5b                   	pop    %ebx
-    16a3:	58                   	pop    %eax
-    16a4:	68 1a 44 00 00       	push   $0x441a
-    16a9:	68 16 44 00 00       	push   $0x4416
-    16ae:	e8 30 23 00 00       	call   39e3 <link>
-    16b3:	83 c4 10             	add    $0x10,%esp
-    16b6:	85 c0                	test   %eax,%eax
-    16b8:	0f 88 60 01 00 00    	js     181e <linktest+0x1ee>
-  unlink("lf1");
-    16be:	83 ec 0c             	sub    $0xc,%esp
-    16c1:	68 16 44 00 00       	push   $0x4416
-    16c6:	e8 08 23 00 00       	call   39d3 <unlink>
-  if(open("lf1", 0) >= 0){
-    16cb:	58                   	pop    %eax
-    16cc:	5a                   	pop    %edx
-    16cd:	6a 00                	push   $0x0
-    16cf:	68 16 44 00 00       	push   $0x4416
-    16d4:	e8 ea 22 00 00       	call   39c3 <open>
-    16d9:	83 c4 10             	add    $0x10,%esp
-    16dc:	85 c0                	test   %eax,%eax
-    16de:	0f 89 27 01 00 00    	jns    180b <linktest+0x1db>
-  fd = open("lf2", 0);
-    16e4:	83 ec 08             	sub    $0x8,%esp
-    16e7:	6a 00                	push   $0x0
-    16e9:	68 1a 44 00 00       	push   $0x441a
-    16ee:	e8 d0 22 00 00       	call   39c3 <open>
-  if(fd < 0){
-    16f3:	83 c4 10             	add    $0x10,%esp
-  fd = open("lf2", 0);
-    16f6:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    16f8:	85 c0                	test   %eax,%eax
-    16fa:	0f 88 f8 00 00 00    	js     17f8 <linktest+0x1c8>
-  if(read(fd, buf, sizeof(buf)) != 5){
-    1700:	83 ec 04             	sub    $0x4,%esp
-    1703:	68 00 20 00 00       	push   $0x2000
-    1708:	68 e0 86 00 00       	push   $0x86e0
-    170d:	50                   	push   %eax
-    170e:	e8 88 22 00 00       	call   399b <read>
-    1713:	83 c4 10             	add    $0x10,%esp
-    1716:	83 f8 05             	cmp    $0x5,%eax
-    1719:	0f 85 c6 00 00 00    	jne    17e5 <linktest+0x1b5>
-  close(fd);
-    171f:	83 ec 0c             	sub    $0xc,%esp
-    1722:	53                   	push   %ebx
-    1723:	e8 83 22 00 00       	call   39ab <close>
-  if(link("lf2", "lf2") >= 0){
-    1728:	58                   	pop    %eax
-    1729:	5a                   	pop    %edx
-    172a:	68 1a 44 00 00       	push   $0x441a
-    172f:	68 1a 44 00 00       	push   $0x441a
-    1734:	e8 aa 22 00 00       	call   39e3 <link>
-    1739:	83 c4 10             	add    $0x10,%esp
-    173c:	85 c0                	test   %eax,%eax
-    173e:	0f 89 8e 00 00 00    	jns    17d2 <linktest+0x1a2>
-  unlink("lf2");
-    1744:	83 ec 0c             	sub    $0xc,%esp
-    1747:	68 1a 44 00 00       	push   $0x441a
-    174c:	e8 82 22 00 00       	call   39d3 <unlink>
-  if(link("lf2", "lf1") >= 0){
-    1751:	59                   	pop    %ecx
-    1752:	5b                   	pop    %ebx
-    1753:	68 16 44 00 00       	push   $0x4416
-    1758:	68 1a 44 00 00       	push   $0x441a
-    175d:	e8 81 22 00 00       	call   39e3 <link>
-    1762:	83 c4 10             	add    $0x10,%esp
-    1765:	85 c0                	test   %eax,%eax
-    1767:	79 56                	jns    17bf <linktest+0x18f>
-  if(link(".", "lf1") >= 0){
-    1769:	83 ec 08             	sub    $0x8,%esp
-    176c:	68 16 44 00 00       	push   $0x4416
-    1771:	68 de 46 00 00       	push   $0x46de
-    1776:	e8 68 22 00 00       	call   39e3 <link>
-    177b:	83 c4 10             	add    $0x10,%esp
-    177e:	85 c0                	test   %eax,%eax
-    1780:	79 2a                	jns    17ac <linktest+0x17c>
-  printf(1, "linktest ok\n");
-    1782:	83 ec 08             	sub    $0x8,%esp
-    1785:	68 b4 44 00 00       	push   $0x44b4
-    178a:	6a 01                	push   $0x1
-    178c:	e8 6f 23 00 00       	call   3b00 <printf>
-}
-    1791:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    1794:	83 c4 10             	add    $0x10,%esp
-    1797:	c9                   	leave  
-    1798:	c3                   	ret    
-    printf(1, "create lf1 failed\n");
-    1799:	50                   	push   %eax
-    179a:	50                   	push   %eax
-    179b:	68 1e 44 00 00       	push   $0x441e
-    17a0:	6a 01                	push   $0x1
-    17a2:	e8 59 23 00 00       	call   3b00 <printf>
-    exit();
-    17a7:	e8 d7 21 00 00       	call   3983 <exit>
-    printf(1, "link . lf1 succeeded! oops\n");
-    17ac:	50                   	push   %eax
-    17ad:	50                   	push   %eax
-    17ae:	68 98 44 00 00       	push   $0x4498
-    17b3:	6a 01                	push   $0x1
-    17b5:	e8 46 23 00 00       	call   3b00 <printf>
-    exit();
-    17ba:	e8 c4 21 00 00       	call   3983 <exit>
-    printf(1, "link non-existant succeeded! oops\n");
-    17bf:	52                   	push   %edx
-    17c0:	52                   	push   %edx
-    17c1:	68 4c 50 00 00       	push   $0x504c
-    17c6:	6a 01                	push   $0x1
-    17c8:	e8 33 23 00 00       	call   3b00 <printf>
-    exit();
-    17cd:	e8 b1 21 00 00       	call   3983 <exit>
-    printf(1, "link lf2 lf2 succeeded! oops\n");
-    17d2:	50                   	push   %eax
-    17d3:	50                   	push   %eax
-    17d4:	68 7a 44 00 00       	push   $0x447a
-    17d9:	6a 01                	push   $0x1
-    17db:	e8 20 23 00 00       	call   3b00 <printf>
-    exit();
-    17e0:	e8 9e 21 00 00       	call   3983 <exit>
-    printf(1, "read lf2 failed\n");
-    17e5:	51                   	push   %ecx
-    17e6:	51                   	push   %ecx
-    17e7:	68 69 44 00 00       	push   $0x4469
-    17ec:	6a 01                	push   $0x1
-    17ee:	e8 0d 23 00 00       	call   3b00 <printf>
-    exit();
-    17f3:	e8 8b 21 00 00       	call   3983 <exit>
-    printf(1, "open lf2 failed\n");
-    17f8:	53                   	push   %ebx
-    17f9:	53                   	push   %ebx
-    17fa:	68 58 44 00 00       	push   $0x4458
-    17ff:	6a 01                	push   $0x1
-    1801:	e8 fa 22 00 00       	call   3b00 <printf>
-    exit();
-    1806:	e8 78 21 00 00       	call   3983 <exit>
-    printf(1, "unlinked lf1 but it is still there!\n");
-    180b:	50                   	push   %eax
-    180c:	50                   	push   %eax
-    180d:	68 24 50 00 00       	push   $0x5024
-    1812:	6a 01                	push   $0x1
-    1814:	e8 e7 22 00 00       	call   3b00 <printf>
-    exit();
-    1819:	e8 65 21 00 00       	call   3983 <exit>
-    printf(1, "link lf1 lf2 failed\n");
-    181e:	51                   	push   %ecx
-    181f:	51                   	push   %ecx
-    1820:	68 43 44 00 00       	push   $0x4443
-    1825:	6a 01                	push   $0x1
-    1827:	e8 d4 22 00 00       	call   3b00 <printf>
-    exit();
-    182c:	e8 52 21 00 00       	call   3983 <exit>
-    printf(1, "write lf1 failed\n");
-    1831:	50                   	push   %eax
-    1832:	50                   	push   %eax
-    1833:	68 31 44 00 00       	push   $0x4431
-    1838:	6a 01                	push   $0x1
-    183a:	e8 c1 22 00 00       	call   3b00 <printf>
-    exit();
-    183f:	e8 3f 21 00 00       	call   3983 <exit>
-    1844:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    184b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    184f:	90                   	nop
-
-00001850 <concreate>:
-{
-    1850:	f3 0f 1e fb          	endbr32 
-    1854:	55                   	push   %ebp
-    1855:	89 e5                	mov    %esp,%ebp
-    1857:	57                   	push   %edi
-    1858:	56                   	push   %esi
-  for(i = 0; i < 40; i++){
-    1859:	31 f6                	xor    %esi,%esi
-{
-    185b:	53                   	push   %ebx
-    185c:	8d 5d ad             	lea    -0x53(%ebp),%ebx
-    185f:	83 ec 64             	sub    $0x64,%esp
-  printf(1, "concreate test\n");
-    1862:	68 c1 44 00 00       	push   $0x44c1
-    1867:	6a 01                	push   $0x1
-    1869:	e8 92 22 00 00       	call   3b00 <printf>
-  file[0] = 'C';
-    186e:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
-  file[2] = '\0';
-    1872:	83 c4 10             	add    $0x10,%esp
-    1875:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
-  for(i = 0; i < 40; i++){
-    1879:	eb 48                	jmp    18c3 <concreate+0x73>
-    187b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    187f:	90                   	nop
-    1880:	69 c6 ab aa aa aa    	imul   $0xaaaaaaab,%esi,%eax
-    if(pid && (i % 3) == 1){
-    1886:	3d ab aa aa aa       	cmp    $0xaaaaaaab,%eax
-    188b:	0f 83 af 00 00 00    	jae    1940 <concreate+0xf0>
-      fd = open(file, O_CREATE | O_RDWR);
-    1891:	83 ec 08             	sub    $0x8,%esp
-    1894:	68 02 02 00 00       	push   $0x202
-    1899:	53                   	push   %ebx
-    189a:	e8 24 21 00 00       	call   39c3 <open>
-      if(fd < 0){
-    189f:	83 c4 10             	add    $0x10,%esp
-    18a2:	85 c0                	test   %eax,%eax
-    18a4:	78 5f                	js     1905 <concreate+0xb5>
-      close(fd);
-    18a6:	83 ec 0c             	sub    $0xc,%esp
-  for(i = 0; i < 40; i++){
-    18a9:	83 c6 01             	add    $0x1,%esi
-      close(fd);
-    18ac:	50                   	push   %eax
-    18ad:	e8 f9 20 00 00       	call   39ab <close>
-    18b2:	83 c4 10             	add    $0x10,%esp
-      wait();
-    18b5:	e8 d1 20 00 00       	call   398b <wait>
-  for(i = 0; i < 40; i++){
-    18ba:	83 fe 28             	cmp    $0x28,%esi
-    18bd:	0f 84 9f 00 00 00    	je     1962 <concreate+0x112>
-    unlink(file);
-    18c3:	83 ec 0c             	sub    $0xc,%esp
-    file[1] = '0' + i;
-    18c6:	8d 46 30             	lea    0x30(%esi),%eax
-    unlink(file);
-    18c9:	53                   	push   %ebx
-    file[1] = '0' + i;
-    18ca:	88 45 ae             	mov    %al,-0x52(%ebp)
-    unlink(file);
-    18cd:	e8 01 21 00 00       	call   39d3 <unlink>
-    pid = fork();
-    18d2:	e8 a4 20 00 00       	call   397b <fork>
-    if(pid && (i % 3) == 1){
-    18d7:	83 c4 10             	add    $0x10,%esp
-    18da:	85 c0                	test   %eax,%eax
-    18dc:	75 a2                	jne    1880 <concreate+0x30>
-      link("C0", file);
-    18de:	69 f6 cd cc cc cc    	imul   $0xcccccccd,%esi,%esi
-    } else if(pid == 0 && (i % 5) == 1){
-    18e4:	81 fe cd cc cc cc    	cmp    $0xcccccccd,%esi
-    18ea:	73 34                	jae    1920 <concreate+0xd0>
-      fd = open(file, O_CREATE | O_RDWR);
-    18ec:	83 ec 08             	sub    $0x8,%esp
-    18ef:	68 02 02 00 00       	push   $0x202
-    18f4:	53                   	push   %ebx
-    18f5:	e8 c9 20 00 00       	call   39c3 <open>
-      if(fd < 0){
-    18fa:	83 c4 10             	add    $0x10,%esp
-    18fd:	85 c0                	test   %eax,%eax
-    18ff:	0f 89 39 02 00 00    	jns    1b3e <concreate+0x2ee>
-        printf(1, "concreate create %s failed\n", file);
-    1905:	83 ec 04             	sub    $0x4,%esp
-    1908:	53                   	push   %ebx
-    1909:	68 d4 44 00 00       	push   $0x44d4
-    190e:	6a 01                	push   $0x1
-    1910:	e8 eb 21 00 00       	call   3b00 <printf>
-        exit();
-    1915:	e8 69 20 00 00       	call   3983 <exit>
-    191a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      link("C0", file);
-    1920:	83 ec 08             	sub    $0x8,%esp
-    1923:	53                   	push   %ebx
-    1924:	68 d1 44 00 00       	push   $0x44d1
-    1929:	e8 b5 20 00 00       	call   39e3 <link>
-    192e:	83 c4 10             	add    $0x10,%esp
-      exit();
-    1931:	e8 4d 20 00 00       	call   3983 <exit>
-    1936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    193d:	8d 76 00             	lea    0x0(%esi),%esi
-      link("C0", file);
-    1940:	83 ec 08             	sub    $0x8,%esp
-  for(i = 0; i < 40; i++){
-    1943:	83 c6 01             	add    $0x1,%esi
-      link("C0", file);
-    1946:	53                   	push   %ebx
-    1947:	68 d1 44 00 00       	push   $0x44d1
-    194c:	e8 92 20 00 00       	call   39e3 <link>
-    1951:	83 c4 10             	add    $0x10,%esp
-      wait();
-    1954:	e8 32 20 00 00       	call   398b <wait>
-  for(i = 0; i < 40; i++){
-    1959:	83 fe 28             	cmp    $0x28,%esi
-    195c:	0f 85 61 ff ff ff    	jne    18c3 <concreate+0x73>
-  memset(fa, 0, sizeof(fa));
-    1962:	83 ec 04             	sub    $0x4,%esp
-    1965:	8d 45 c0             	lea    -0x40(%ebp),%eax
-    1968:	6a 28                	push   $0x28
-    196a:	6a 00                	push   $0x0
-    196c:	50                   	push   %eax
-    196d:	e8 6e 1e 00 00       	call   37e0 <memset>
-  fd = open(".", 0);
-    1972:	5e                   	pop    %esi
-    1973:	5f                   	pop    %edi
-    1974:	6a 00                	push   $0x0
-    1976:	68 de 46 00 00       	push   $0x46de
-    197b:	8d 7d b0             	lea    -0x50(%ebp),%edi
-    197e:	e8 40 20 00 00       	call   39c3 <open>
-  n = 0;
-    1983:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
-  while(read(fd, &de, sizeof(de)) > 0){
-    198a:	83 c4 10             	add    $0x10,%esp
-  fd = open(".", 0);
-    198d:	89 c6                	mov    %eax,%esi
-  while(read(fd, &de, sizeof(de)) > 0){
-    198f:	90                   	nop
-    1990:	83 ec 04             	sub    $0x4,%esp
-    1993:	6a 10                	push   $0x10
-    1995:	57                   	push   %edi
-    1996:	56                   	push   %esi
-    1997:	e8 ff 1f 00 00       	call   399b <read>
-    199c:	83 c4 10             	add    $0x10,%esp
-    199f:	85 c0                	test   %eax,%eax
-    19a1:	7e 3d                	jle    19e0 <concreate+0x190>
-    if(de.inum == 0)
-    19a3:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
-    19a8:	74 e6                	je     1990 <concreate+0x140>
-    if(de.name[0] == 'C' && de.name[2] == '\0'){
-    19aa:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
-    19ae:	75 e0                	jne    1990 <concreate+0x140>
-    19b0:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
-    19b4:	75 da                	jne    1990 <concreate+0x140>
-      i = de.name[1] - '0';
-    19b6:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
-    19ba:	83 e8 30             	sub    $0x30,%eax
-      if(i < 0 || i >= sizeof(fa)){
-    19bd:	83 f8 27             	cmp    $0x27,%eax
-    19c0:	0f 87 60 01 00 00    	ja     1b26 <concreate+0x2d6>
-      if(fa[i]){
-    19c6:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
-    19cb:	0f 85 3d 01 00 00    	jne    1b0e <concreate+0x2be>
-      n++;
-    19d1:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
-      fa[i] = 1;
-    19d5:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
-      n++;
-    19da:	eb b4                	jmp    1990 <concreate+0x140>
-    19dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  close(fd);
-    19e0:	83 ec 0c             	sub    $0xc,%esp
-    19e3:	56                   	push   %esi
-    19e4:	e8 c2 1f 00 00       	call   39ab <close>
-  if(n != 40){
-    19e9:	83 c4 10             	add    $0x10,%esp
-    19ec:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
-    19f0:	0f 85 05 01 00 00    	jne    1afb <concreate+0x2ab>
-  for(i = 0; i < 40; i++){
-    19f6:	31 f6                	xor    %esi,%esi
-    19f8:	eb 4c                	jmp    1a46 <concreate+0x1f6>
-    19fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-       ((i % 3) == 1 && pid != 0)){
-    1a00:	85 ff                	test   %edi,%edi
-    1a02:	74 05                	je     1a09 <concreate+0x1b9>
-    1a04:	83 f8 01             	cmp    $0x1,%eax
-    1a07:	74 6c                	je     1a75 <concreate+0x225>
-      unlink(file);
-    1a09:	83 ec 0c             	sub    $0xc,%esp
-    1a0c:	53                   	push   %ebx
-    1a0d:	e8 c1 1f 00 00       	call   39d3 <unlink>
-      unlink(file);
-    1a12:	89 1c 24             	mov    %ebx,(%esp)
-    1a15:	e8 b9 1f 00 00       	call   39d3 <unlink>
-      unlink(file);
-    1a1a:	89 1c 24             	mov    %ebx,(%esp)
-    1a1d:	e8 b1 1f 00 00       	call   39d3 <unlink>
-      unlink(file);
-    1a22:	89 1c 24             	mov    %ebx,(%esp)
-    1a25:	e8 a9 1f 00 00       	call   39d3 <unlink>
-    1a2a:	83 c4 10             	add    $0x10,%esp
-    if(pid == 0)
-    1a2d:	85 ff                	test   %edi,%edi
-    1a2f:	0f 84 fc fe ff ff    	je     1931 <concreate+0xe1>
-      wait();
-    1a35:	e8 51 1f 00 00       	call   398b <wait>
-  for(i = 0; i < 40; i++){
-    1a3a:	83 c6 01             	add    $0x1,%esi
-    1a3d:	83 fe 28             	cmp    $0x28,%esi
-    1a40:	0f 84 8a 00 00 00    	je     1ad0 <concreate+0x280>
-    file[1] = '0' + i;
-    1a46:	8d 46 30             	lea    0x30(%esi),%eax
-    1a49:	88 45 ae             	mov    %al,-0x52(%ebp)
-    pid = fork();
-    1a4c:	e8 2a 1f 00 00       	call   397b <fork>
-    1a51:	89 c7                	mov    %eax,%edi
-    if(pid < 0){
-    1a53:	85 c0                	test   %eax,%eax
-    1a55:	0f 88 8c 00 00 00    	js     1ae7 <concreate+0x297>
-    if(((i % 3) == 0 && pid == 0) ||
-    1a5b:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
-    1a60:	f7 e6                	mul    %esi
-    1a62:	89 d0                	mov    %edx,%eax
-    1a64:	83 e2 fe             	and    $0xfffffffe,%edx
-    1a67:	d1 e8                	shr    %eax
-    1a69:	01 c2                	add    %eax,%edx
-    1a6b:	89 f0                	mov    %esi,%eax
-    1a6d:	29 d0                	sub    %edx,%eax
-    1a6f:	89 c1                	mov    %eax,%ecx
-    1a71:	09 f9                	or     %edi,%ecx
-    1a73:	75 8b                	jne    1a00 <concreate+0x1b0>
-      close(open(file, 0));
-    1a75:	83 ec 08             	sub    $0x8,%esp
-    1a78:	6a 00                	push   $0x0
-    1a7a:	53                   	push   %ebx
-    1a7b:	e8 43 1f 00 00       	call   39c3 <open>
-    1a80:	89 04 24             	mov    %eax,(%esp)
-    1a83:	e8 23 1f 00 00       	call   39ab <close>
-      close(open(file, 0));
-    1a88:	58                   	pop    %eax
-    1a89:	5a                   	pop    %edx
-    1a8a:	6a 00                	push   $0x0
-    1a8c:	53                   	push   %ebx
-    1a8d:	e8 31 1f 00 00       	call   39c3 <open>
-    1a92:	89 04 24             	mov    %eax,(%esp)
-    1a95:	e8 11 1f 00 00       	call   39ab <close>
-      close(open(file, 0));
-    1a9a:	59                   	pop    %ecx
-    1a9b:	58                   	pop    %eax
-    1a9c:	6a 00                	push   $0x0
-    1a9e:	53                   	push   %ebx
-    1a9f:	e8 1f 1f 00 00       	call   39c3 <open>
-    1aa4:	89 04 24             	mov    %eax,(%esp)
-    1aa7:	e8 ff 1e 00 00       	call   39ab <close>
-      close(open(file, 0));
-    1aac:	58                   	pop    %eax
-    1aad:	5a                   	pop    %edx
-    1aae:	6a 00                	push   $0x0
-    1ab0:	53                   	push   %ebx
-    1ab1:	e8 0d 1f 00 00       	call   39c3 <open>
-    1ab6:	89 04 24             	mov    %eax,(%esp)
-    1ab9:	e8 ed 1e 00 00       	call   39ab <close>
-    1abe:	83 c4 10             	add    $0x10,%esp
-    1ac1:	e9 67 ff ff ff       	jmp    1a2d <concreate+0x1dd>
-    1ac6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    1acd:	8d 76 00             	lea    0x0(%esi),%esi
-  printf(1, "concreate ok\n");
-    1ad0:	83 ec 08             	sub    $0x8,%esp
-    1ad3:	68 26 45 00 00       	push   $0x4526
-    1ad8:	6a 01                	push   $0x1
-    1ada:	e8 21 20 00 00       	call   3b00 <printf>
-}
-    1adf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1ae2:	5b                   	pop    %ebx
-    1ae3:	5e                   	pop    %esi
-    1ae4:	5f                   	pop    %edi
-    1ae5:	5d                   	pop    %ebp
-    1ae6:	c3                   	ret    
-      printf(1, "fork failed\n");
-    1ae7:	83 ec 08             	sub    $0x8,%esp
-    1aea:	68 a9 4d 00 00       	push   $0x4da9
-    1aef:	6a 01                	push   $0x1
-    1af1:	e8 0a 20 00 00       	call   3b00 <printf>
-      exit();
-    1af6:	e8 88 1e 00 00       	call   3983 <exit>
-    printf(1, "concreate not enough files in directory listing\n");
-    1afb:	51                   	push   %ecx
-    1afc:	51                   	push   %ecx
-    1afd:	68 70 50 00 00       	push   $0x5070
-    1b02:	6a 01                	push   $0x1
-    1b04:	e8 f7 1f 00 00       	call   3b00 <printf>
-    exit();
-    1b09:	e8 75 1e 00 00       	call   3983 <exit>
-        printf(1, "concreate duplicate file %s\n", de.name);
-    1b0e:	83 ec 04             	sub    $0x4,%esp
-    1b11:	8d 45 b2             	lea    -0x4e(%ebp),%eax
-    1b14:	50                   	push   %eax
-    1b15:	68 09 45 00 00       	push   $0x4509
-    1b1a:	6a 01                	push   $0x1
-    1b1c:	e8 df 1f 00 00       	call   3b00 <printf>
-        exit();
-    1b21:	e8 5d 1e 00 00       	call   3983 <exit>
-        printf(1, "concreate weird file %s\n", de.name);
-    1b26:	83 ec 04             	sub    $0x4,%esp
-    1b29:	8d 45 b2             	lea    -0x4e(%ebp),%eax
-    1b2c:	50                   	push   %eax
-    1b2d:	68 f0 44 00 00       	push   $0x44f0
-    1b32:	6a 01                	push   $0x1
-    1b34:	e8 c7 1f 00 00       	call   3b00 <printf>
-        exit();
-    1b39:	e8 45 1e 00 00       	call   3983 <exit>
-      close(fd);
-    1b3e:	83 ec 0c             	sub    $0xc,%esp
-    1b41:	50                   	push   %eax
-    1b42:	e8 64 1e 00 00       	call   39ab <close>
-    1b47:	83 c4 10             	add    $0x10,%esp
-    1b4a:	e9 e2 fd ff ff       	jmp    1931 <concreate+0xe1>
-    1b4f:	90                   	nop
-
-00001b50 <linkunlink>:
-{
-    1b50:	f3 0f 1e fb          	endbr32 
-    1b54:	55                   	push   %ebp
-    1b55:	89 e5                	mov    %esp,%ebp
-    1b57:	57                   	push   %edi
-    1b58:	56                   	push   %esi
-    1b59:	53                   	push   %ebx
-    1b5a:	83 ec 24             	sub    $0x24,%esp
-  printf(1, "linkunlink test\n");
-    1b5d:	68 34 45 00 00       	push   $0x4534
-    1b62:	6a 01                	push   $0x1
-    1b64:	e8 97 1f 00 00       	call   3b00 <printf>
-  unlink("x");
-    1b69:	c7 04 24 c1 47 00 00 	movl   $0x47c1,(%esp)
-    1b70:	e8 5e 1e 00 00       	call   39d3 <unlink>
-  pid = fork();
-    1b75:	e8 01 1e 00 00       	call   397b <fork>
-  if(pid < 0){
-    1b7a:	83 c4 10             	add    $0x10,%esp
-  pid = fork();
-    1b7d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  if(pid < 0){
-    1b80:	85 c0                	test   %eax,%eax
-    1b82:	0f 88 b2 00 00 00    	js     1c3a <linkunlink+0xea>
-  unsigned int x = (pid ? 1 : 97);
-    1b88:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
-    1b8c:	bb 64 00 00 00       	mov    $0x64,%ebx
-    if((x % 3) == 0){
-    1b91:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
-  unsigned int x = (pid ? 1 : 97);
-    1b96:	19 ff                	sbb    %edi,%edi
-    1b98:	83 e7 60             	and    $0x60,%edi
-    1b9b:	83 c7 01             	add    $0x1,%edi
-    1b9e:	eb 1a                	jmp    1bba <linkunlink+0x6a>
-    } else if((x % 3) == 1){
-    1ba0:	83 f8 01             	cmp    $0x1,%eax
-    1ba3:	74 7b                	je     1c20 <linkunlink+0xd0>
-      unlink("x");
-    1ba5:	83 ec 0c             	sub    $0xc,%esp
-    1ba8:	68 c1 47 00 00       	push   $0x47c1
-    1bad:	e8 21 1e 00 00       	call   39d3 <unlink>
-    1bb2:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; i < 100; i++){
-    1bb5:	83 eb 01             	sub    $0x1,%ebx
-    1bb8:	74 41                	je     1bfb <linkunlink+0xab>
-    x = x * 1103515245 + 12345;
-    1bba:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
-    1bc0:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
-    if((x % 3) == 0){
-    1bc6:	89 f8                	mov    %edi,%eax
-    1bc8:	f7 e6                	mul    %esi
-    1bca:	89 d0                	mov    %edx,%eax
-    1bcc:	83 e2 fe             	and    $0xfffffffe,%edx
-    1bcf:	d1 e8                	shr    %eax
-    1bd1:	01 c2                	add    %eax,%edx
-    1bd3:	89 f8                	mov    %edi,%eax
-    1bd5:	29 d0                	sub    %edx,%eax
-    1bd7:	75 c7                	jne    1ba0 <linkunlink+0x50>
-      close(open("x", O_RDWR | O_CREATE));
-    1bd9:	83 ec 08             	sub    $0x8,%esp
-    1bdc:	68 02 02 00 00       	push   $0x202
-    1be1:	68 c1 47 00 00       	push   $0x47c1
-    1be6:	e8 d8 1d 00 00       	call   39c3 <open>
-    1beb:	89 04 24             	mov    %eax,(%esp)
-    1bee:	e8 b8 1d 00 00       	call   39ab <close>
-    1bf3:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; i < 100; i++){
-    1bf6:	83 eb 01             	sub    $0x1,%ebx
-    1bf9:	75 bf                	jne    1bba <linkunlink+0x6a>
-  if(pid)
-    1bfb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    1bfe:	85 c0                	test   %eax,%eax
-    1c00:	74 4b                	je     1c4d <linkunlink+0xfd>
-    wait();
-    1c02:	e8 84 1d 00 00       	call   398b <wait>
-  printf(1, "linkunlink ok\n");
-    1c07:	83 ec 08             	sub    $0x8,%esp
-    1c0a:	68 49 45 00 00       	push   $0x4549
-    1c0f:	6a 01                	push   $0x1
-    1c11:	e8 ea 1e 00 00       	call   3b00 <printf>
-}
-    1c16:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1c19:	5b                   	pop    %ebx
-    1c1a:	5e                   	pop    %esi
-    1c1b:	5f                   	pop    %edi
-    1c1c:	5d                   	pop    %ebp
-    1c1d:	c3                   	ret    
-    1c1e:	66 90                	xchg   %ax,%ax
-      link("cat", "x");
-    1c20:	83 ec 08             	sub    $0x8,%esp
-    1c23:	68 c1 47 00 00       	push   $0x47c1
-    1c28:	68 45 45 00 00       	push   $0x4545
-    1c2d:	e8 b1 1d 00 00       	call   39e3 <link>
-    1c32:	83 c4 10             	add    $0x10,%esp
-    1c35:	e9 7b ff ff ff       	jmp    1bb5 <linkunlink+0x65>
-    printf(1, "fork failed\n");
-    1c3a:	52                   	push   %edx
-    1c3b:	52                   	push   %edx
-    1c3c:	68 a9 4d 00 00       	push   $0x4da9
-    1c41:	6a 01                	push   $0x1
-    1c43:	e8 b8 1e 00 00       	call   3b00 <printf>
-    exit();
-    1c48:	e8 36 1d 00 00       	call   3983 <exit>
-    exit();
-    1c4d:	e8 31 1d 00 00       	call   3983 <exit>
-    1c52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    1c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00001c60 <bigdir>:
-{
-    1c60:	f3 0f 1e fb          	endbr32 
-    1c64:	55                   	push   %ebp
-    1c65:	89 e5                	mov    %esp,%ebp
-    1c67:	57                   	push   %edi
-    1c68:	56                   	push   %esi
-    1c69:	53                   	push   %ebx
-    1c6a:	83 ec 24             	sub    $0x24,%esp
-  printf(1, "bigdir test\n");
-    1c6d:	68 58 45 00 00       	push   $0x4558
-    1c72:	6a 01                	push   $0x1
-    1c74:	e8 87 1e 00 00       	call   3b00 <printf>
-  unlink("bd");
-    1c79:	c7 04 24 65 45 00 00 	movl   $0x4565,(%esp)
-    1c80:	e8 4e 1d 00 00       	call   39d3 <unlink>
-  fd = open("bd", O_CREATE);
-    1c85:	5a                   	pop    %edx
-    1c86:	59                   	pop    %ecx
-    1c87:	68 00 02 00 00       	push   $0x200
-    1c8c:	68 65 45 00 00       	push   $0x4565
-    1c91:	e8 2d 1d 00 00       	call   39c3 <open>
-  if(fd < 0){
-    1c96:	83 c4 10             	add    $0x10,%esp
-    1c99:	85 c0                	test   %eax,%eax
-    1c9b:	0f 88 ea 00 00 00    	js     1d8b <bigdir+0x12b>
-  close(fd);
-    1ca1:	83 ec 0c             	sub    $0xc,%esp
-  for(i = 0; i < 500; i++){
-    1ca4:	31 f6                	xor    %esi,%esi
-    1ca6:	8d 7d de             	lea    -0x22(%ebp),%edi
-  close(fd);
-    1ca9:	50                   	push   %eax
-    1caa:	e8 fc 1c 00 00       	call   39ab <close>
-    1caf:	83 c4 10             	add    $0x10,%esp
-    1cb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    name[1] = '0' + (i / 64);
-    1cb8:	89 f0                	mov    %esi,%eax
-    if(link("bd", name) != 0){
-    1cba:	83 ec 08             	sub    $0x8,%esp
-    name[0] = 'x';
-    1cbd:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
-    name[1] = '0' + (i / 64);
-    1cc1:	c1 f8 06             	sar    $0x6,%eax
-    if(link("bd", name) != 0){
-    1cc4:	57                   	push   %edi
-    name[1] = '0' + (i / 64);
-    1cc5:	83 c0 30             	add    $0x30,%eax
-    if(link("bd", name) != 0){
-    1cc8:	68 65 45 00 00       	push   $0x4565
-    name[1] = '0' + (i / 64);
-    1ccd:	88 45 df             	mov    %al,-0x21(%ebp)
-    name[2] = '0' + (i % 64);
-    1cd0:	89 f0                	mov    %esi,%eax
-    1cd2:	83 e0 3f             	and    $0x3f,%eax
-    name[3] = '\0';
-    1cd5:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
-    name[2] = '0' + (i % 64);
-    1cd9:	83 c0 30             	add    $0x30,%eax
-    1cdc:	88 45 e0             	mov    %al,-0x20(%ebp)
-    if(link("bd", name) != 0){
-    1cdf:	e8 ff 1c 00 00       	call   39e3 <link>
-    1ce4:	83 c4 10             	add    $0x10,%esp
-    1ce7:	89 c3                	mov    %eax,%ebx
-    1ce9:	85 c0                	test   %eax,%eax
-    1ceb:	75 76                	jne    1d63 <bigdir+0x103>
-  for(i = 0; i < 500; i++){
-    1ced:	83 c6 01             	add    $0x1,%esi
-    1cf0:	81 fe f4 01 00 00    	cmp    $0x1f4,%esi
-    1cf6:	75 c0                	jne    1cb8 <bigdir+0x58>
-  unlink("bd");
-    1cf8:	83 ec 0c             	sub    $0xc,%esp
-    1cfb:	68 65 45 00 00       	push   $0x4565
-    1d00:	e8 ce 1c 00 00       	call   39d3 <unlink>
-    1d05:	83 c4 10             	add    $0x10,%esp
-    1d08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    1d0f:	90                   	nop
-    name[1] = '0' + (i / 64);
-    1d10:	89 d8                	mov    %ebx,%eax
-    if(unlink(name) != 0){
-    1d12:	83 ec 0c             	sub    $0xc,%esp
-    name[0] = 'x';
-    1d15:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
-    name[1] = '0' + (i / 64);
-    1d19:	c1 f8 06             	sar    $0x6,%eax
-    if(unlink(name) != 0){
-    1d1c:	57                   	push   %edi
-    name[1] = '0' + (i / 64);
-    1d1d:	83 c0 30             	add    $0x30,%eax
-    name[3] = '\0';
-    1d20:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
-    name[1] = '0' + (i / 64);
-    1d24:	88 45 df             	mov    %al,-0x21(%ebp)
-    name[2] = '0' + (i % 64);
-    1d27:	89 d8                	mov    %ebx,%eax
-    1d29:	83 e0 3f             	and    $0x3f,%eax
-    1d2c:	83 c0 30             	add    $0x30,%eax
-    1d2f:	88 45 e0             	mov    %al,-0x20(%ebp)
-    if(unlink(name) != 0){
-    1d32:	e8 9c 1c 00 00       	call   39d3 <unlink>
-    1d37:	83 c4 10             	add    $0x10,%esp
-    1d3a:	85 c0                	test   %eax,%eax
-    1d3c:	75 39                	jne    1d77 <bigdir+0x117>
-  for(i = 0; i < 500; i++){
-    1d3e:	83 c3 01             	add    $0x1,%ebx
-    1d41:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
-    1d47:	75 c7                	jne    1d10 <bigdir+0xb0>
-  printf(1, "bigdir ok\n");
-    1d49:	83 ec 08             	sub    $0x8,%esp
-    1d4c:	68 a7 45 00 00       	push   $0x45a7
-    1d51:	6a 01                	push   $0x1
-    1d53:	e8 a8 1d 00 00       	call   3b00 <printf>
-    1d58:	83 c4 10             	add    $0x10,%esp
-}
-    1d5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1d5e:	5b                   	pop    %ebx
-    1d5f:	5e                   	pop    %esi
-    1d60:	5f                   	pop    %edi
-    1d61:	5d                   	pop    %ebp
-    1d62:	c3                   	ret    
-      printf(1, "bigdir link failed\n");
-    1d63:	83 ec 08             	sub    $0x8,%esp
-    1d66:	68 7e 45 00 00       	push   $0x457e
-    1d6b:	6a 01                	push   $0x1
-    1d6d:	e8 8e 1d 00 00       	call   3b00 <printf>
-      exit();
-    1d72:	e8 0c 1c 00 00       	call   3983 <exit>
-      printf(1, "bigdir unlink failed");
-    1d77:	83 ec 08             	sub    $0x8,%esp
-    1d7a:	68 92 45 00 00       	push   $0x4592
-    1d7f:	6a 01                	push   $0x1
-    1d81:	e8 7a 1d 00 00       	call   3b00 <printf>
-      exit();
-    1d86:	e8 f8 1b 00 00       	call   3983 <exit>
-    printf(1, "bigdir create failed\n");
-    1d8b:	50                   	push   %eax
-    1d8c:	50                   	push   %eax
-    1d8d:	68 68 45 00 00       	push   $0x4568
-    1d92:	6a 01                	push   $0x1
-    1d94:	e8 67 1d 00 00       	call   3b00 <printf>
-    exit();
-    1d99:	e8 e5 1b 00 00       	call   3983 <exit>
-    1d9e:	66 90                	xchg   %ax,%ax
-
-00001da0 <subdir>:
-{
-    1da0:	f3 0f 1e fb          	endbr32 
-    1da4:	55                   	push   %ebp
-    1da5:	89 e5                	mov    %esp,%ebp
-    1da7:	53                   	push   %ebx
-    1da8:	83 ec 0c             	sub    $0xc,%esp
-  printf(1, "subdir test\n");
-    1dab:	68 b2 45 00 00       	push   $0x45b2
-    1db0:	6a 01                	push   $0x1
-    1db2:	e8 49 1d 00 00       	call   3b00 <printf>
-  unlink("ff");
-    1db7:	c7 04 24 3b 46 00 00 	movl   $0x463b,(%esp)
-    1dbe:	e8 10 1c 00 00       	call   39d3 <unlink>
-  if(mkdir("dd") != 0){
-    1dc3:	c7 04 24 d8 46 00 00 	movl   $0x46d8,(%esp)
-    1dca:	e8 1c 1c 00 00       	call   39eb <mkdir>
-    1dcf:	83 c4 10             	add    $0x10,%esp
-    1dd2:	85 c0                	test   %eax,%eax
-    1dd4:	0f 85 b3 05 00 00    	jne    238d <subdir+0x5ed>
-  fd = open("dd/ff", O_CREATE | O_RDWR);
-    1dda:	83 ec 08             	sub    $0x8,%esp
-    1ddd:	68 02 02 00 00       	push   $0x202
-    1de2:	68 11 46 00 00       	push   $0x4611
-    1de7:	e8 d7 1b 00 00       	call   39c3 <open>
-  if(fd < 0){
-    1dec:	83 c4 10             	add    $0x10,%esp
-  fd = open("dd/ff", O_CREATE | O_RDWR);
-    1def:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1df1:	85 c0                	test   %eax,%eax
-    1df3:	0f 88 81 05 00 00    	js     237a <subdir+0x5da>
-  write(fd, "ff", 2);
-    1df9:	83 ec 04             	sub    $0x4,%esp
-    1dfc:	6a 02                	push   $0x2
-    1dfe:	68 3b 46 00 00       	push   $0x463b
-    1e03:	50                   	push   %eax
-    1e04:	e8 9a 1b 00 00       	call   39a3 <write>
-  close(fd);
-    1e09:	89 1c 24             	mov    %ebx,(%esp)
-    1e0c:	e8 9a 1b 00 00       	call   39ab <close>
-  if(unlink("dd") >= 0){
-    1e11:	c7 04 24 d8 46 00 00 	movl   $0x46d8,(%esp)
-    1e18:	e8 b6 1b 00 00       	call   39d3 <unlink>
-    1e1d:	83 c4 10             	add    $0x10,%esp
-    1e20:	85 c0                	test   %eax,%eax
-    1e22:	0f 89 3f 05 00 00    	jns    2367 <subdir+0x5c7>
-  if(mkdir("/dd/dd") != 0){
-    1e28:	83 ec 0c             	sub    $0xc,%esp
-    1e2b:	68 ec 45 00 00       	push   $0x45ec
-    1e30:	e8 b6 1b 00 00       	call   39eb <mkdir>
-    1e35:	83 c4 10             	add    $0x10,%esp
-    1e38:	85 c0                	test   %eax,%eax
-    1e3a:	0f 85 14 05 00 00    	jne    2354 <subdir+0x5b4>
-  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
-    1e40:	83 ec 08             	sub    $0x8,%esp
-    1e43:	68 02 02 00 00       	push   $0x202
-    1e48:	68 0e 46 00 00       	push   $0x460e
-    1e4d:	e8 71 1b 00 00       	call   39c3 <open>
-  if(fd < 0){
-    1e52:	83 c4 10             	add    $0x10,%esp
-  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
-    1e55:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1e57:	85 c0                	test   %eax,%eax
-    1e59:	0f 88 24 04 00 00    	js     2283 <subdir+0x4e3>
-  write(fd, "FF", 2);
-    1e5f:	83 ec 04             	sub    $0x4,%esp
-    1e62:	6a 02                	push   $0x2
-    1e64:	68 2f 46 00 00       	push   $0x462f
-    1e69:	50                   	push   %eax
-    1e6a:	e8 34 1b 00 00       	call   39a3 <write>
-  close(fd);
-    1e6f:	89 1c 24             	mov    %ebx,(%esp)
-    1e72:	e8 34 1b 00 00       	call   39ab <close>
-  fd = open("dd/dd/../ff", 0);
-    1e77:	58                   	pop    %eax
-    1e78:	5a                   	pop    %edx
-    1e79:	6a 00                	push   $0x0
-    1e7b:	68 32 46 00 00       	push   $0x4632
-    1e80:	e8 3e 1b 00 00       	call   39c3 <open>
-  if(fd < 0){
-    1e85:	83 c4 10             	add    $0x10,%esp
-  fd = open("dd/dd/../ff", 0);
-    1e88:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1e8a:	85 c0                	test   %eax,%eax
-    1e8c:	0f 88 de 03 00 00    	js     2270 <subdir+0x4d0>
-  cc = read(fd, buf, sizeof(buf));
-    1e92:	83 ec 04             	sub    $0x4,%esp
-    1e95:	68 00 20 00 00       	push   $0x2000
-    1e9a:	68 e0 86 00 00       	push   $0x86e0
-    1e9f:	50                   	push   %eax
-    1ea0:	e8 f6 1a 00 00       	call   399b <read>
-  if(cc != 2 || buf[0] != 'f'){
-    1ea5:	83 c4 10             	add    $0x10,%esp
-    1ea8:	83 f8 02             	cmp    $0x2,%eax
-    1eab:	0f 85 3a 03 00 00    	jne    21eb <subdir+0x44b>
-    1eb1:	80 3d e0 86 00 00 66 	cmpb   $0x66,0x86e0
-    1eb8:	0f 85 2d 03 00 00    	jne    21eb <subdir+0x44b>
-  close(fd);
-    1ebe:	83 ec 0c             	sub    $0xc,%esp
-    1ec1:	53                   	push   %ebx
-    1ec2:	e8 e4 1a 00 00       	call   39ab <close>
-  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
-    1ec7:	59                   	pop    %ecx
-    1ec8:	5b                   	pop    %ebx
-    1ec9:	68 72 46 00 00       	push   $0x4672
-    1ece:	68 0e 46 00 00       	push   $0x460e
-    1ed3:	e8 0b 1b 00 00       	call   39e3 <link>
-    1ed8:	83 c4 10             	add    $0x10,%esp
-    1edb:	85 c0                	test   %eax,%eax
-    1edd:	0f 85 c6 03 00 00    	jne    22a9 <subdir+0x509>
-  if(unlink("dd/dd/ff") != 0){
-    1ee3:	83 ec 0c             	sub    $0xc,%esp
-    1ee6:	68 0e 46 00 00       	push   $0x460e
-    1eeb:	e8 e3 1a 00 00       	call   39d3 <unlink>
-    1ef0:	83 c4 10             	add    $0x10,%esp
-    1ef3:	85 c0                	test   %eax,%eax
-    1ef5:	0f 85 16 03 00 00    	jne    2211 <subdir+0x471>
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
-    1efb:	83 ec 08             	sub    $0x8,%esp
-    1efe:	6a 00                	push   $0x0
-    1f00:	68 0e 46 00 00       	push   $0x460e
-    1f05:	e8 b9 1a 00 00       	call   39c3 <open>
-    1f0a:	83 c4 10             	add    $0x10,%esp
-    1f0d:	85 c0                	test   %eax,%eax
-    1f0f:	0f 89 2c 04 00 00    	jns    2341 <subdir+0x5a1>
-  if(chdir("dd") != 0){
-    1f15:	83 ec 0c             	sub    $0xc,%esp
-    1f18:	68 d8 46 00 00       	push   $0x46d8
-    1f1d:	e8 d1 1a 00 00       	call   39f3 <chdir>
-    1f22:	83 c4 10             	add    $0x10,%esp
-    1f25:	85 c0                	test   %eax,%eax
-    1f27:	0f 85 01 04 00 00    	jne    232e <subdir+0x58e>
-  if(chdir("dd/../../dd") != 0){
-    1f2d:	83 ec 0c             	sub    $0xc,%esp
-    1f30:	68 a6 46 00 00       	push   $0x46a6
-    1f35:	e8 b9 1a 00 00       	call   39f3 <chdir>
-    1f3a:	83 c4 10             	add    $0x10,%esp
-    1f3d:	85 c0                	test   %eax,%eax
-    1f3f:	0f 85 b9 02 00 00    	jne    21fe <subdir+0x45e>
-  if(chdir("dd/../../../dd") != 0){
-    1f45:	83 ec 0c             	sub    $0xc,%esp
-    1f48:	68 cc 46 00 00       	push   $0x46cc
-    1f4d:	e8 a1 1a 00 00       	call   39f3 <chdir>
-    1f52:	83 c4 10             	add    $0x10,%esp
-    1f55:	85 c0                	test   %eax,%eax
-    1f57:	0f 85 a1 02 00 00    	jne    21fe <subdir+0x45e>
-  if(chdir("./..") != 0){
-    1f5d:	83 ec 0c             	sub    $0xc,%esp
-    1f60:	68 db 46 00 00       	push   $0x46db
-    1f65:	e8 89 1a 00 00       	call   39f3 <chdir>
-    1f6a:	83 c4 10             	add    $0x10,%esp
-    1f6d:	85 c0                	test   %eax,%eax
-    1f6f:	0f 85 21 03 00 00    	jne    2296 <subdir+0x4f6>
-  fd = open("dd/dd/ffff", 0);
-    1f75:	83 ec 08             	sub    $0x8,%esp
-    1f78:	6a 00                	push   $0x0
-    1f7a:	68 72 46 00 00       	push   $0x4672
-    1f7f:	e8 3f 1a 00 00       	call   39c3 <open>
-  if(fd < 0){
-    1f84:	83 c4 10             	add    $0x10,%esp
-  fd = open("dd/dd/ffff", 0);
-    1f87:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1f89:	85 c0                	test   %eax,%eax
-    1f8b:	0f 88 e0 04 00 00    	js     2471 <subdir+0x6d1>
-  if(read(fd, buf, sizeof(buf)) != 2){
-    1f91:	83 ec 04             	sub    $0x4,%esp
-    1f94:	68 00 20 00 00       	push   $0x2000
-    1f99:	68 e0 86 00 00       	push   $0x86e0
-    1f9e:	50                   	push   %eax
-    1f9f:	e8 f7 19 00 00       	call   399b <read>
-    1fa4:	83 c4 10             	add    $0x10,%esp
-    1fa7:	83 f8 02             	cmp    $0x2,%eax
-    1faa:	0f 85 ae 04 00 00    	jne    245e <subdir+0x6be>
-  close(fd);
-    1fb0:	83 ec 0c             	sub    $0xc,%esp
-    1fb3:	53                   	push   %ebx
-    1fb4:	e8 f2 19 00 00       	call   39ab <close>
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
-    1fb9:	58                   	pop    %eax
-    1fba:	5a                   	pop    %edx
-    1fbb:	6a 00                	push   $0x0
-    1fbd:	68 0e 46 00 00       	push   $0x460e
-    1fc2:	e8 fc 19 00 00       	call   39c3 <open>
-    1fc7:	83 c4 10             	add    $0x10,%esp
-    1fca:	85 c0                	test   %eax,%eax
-    1fcc:	0f 89 65 02 00 00    	jns    2237 <subdir+0x497>
-  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
-    1fd2:	83 ec 08             	sub    $0x8,%esp
-    1fd5:	68 02 02 00 00       	push   $0x202
-    1fda:	68 26 47 00 00       	push   $0x4726
-    1fdf:	e8 df 19 00 00       	call   39c3 <open>
-    1fe4:	83 c4 10             	add    $0x10,%esp
-    1fe7:	85 c0                	test   %eax,%eax
-    1fe9:	0f 89 35 02 00 00    	jns    2224 <subdir+0x484>
-  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
-    1fef:	83 ec 08             	sub    $0x8,%esp
-    1ff2:	68 02 02 00 00       	push   $0x202
-    1ff7:	68 4b 47 00 00       	push   $0x474b
-    1ffc:	e8 c2 19 00 00       	call   39c3 <open>
-    2001:	83 c4 10             	add    $0x10,%esp
-    2004:	85 c0                	test   %eax,%eax
-    2006:	0f 89 0f 03 00 00    	jns    231b <subdir+0x57b>
-  if(open("dd", O_CREATE) >= 0){
-    200c:	83 ec 08             	sub    $0x8,%esp
-    200f:	68 00 02 00 00       	push   $0x200
-    2014:	68 d8 46 00 00       	push   $0x46d8
-    2019:	e8 a5 19 00 00       	call   39c3 <open>
-    201e:	83 c4 10             	add    $0x10,%esp
-    2021:	85 c0                	test   %eax,%eax
-    2023:	0f 89 df 02 00 00    	jns    2308 <subdir+0x568>
-  if(open("dd", O_RDWR) >= 0){
-    2029:	83 ec 08             	sub    $0x8,%esp
-    202c:	6a 02                	push   $0x2
-    202e:	68 d8 46 00 00       	push   $0x46d8
-    2033:	e8 8b 19 00 00       	call   39c3 <open>
-    2038:	83 c4 10             	add    $0x10,%esp
-    203b:	85 c0                	test   %eax,%eax
-    203d:	0f 89 b2 02 00 00    	jns    22f5 <subdir+0x555>
-  if(open("dd", O_WRONLY) >= 0){
-    2043:	83 ec 08             	sub    $0x8,%esp
-    2046:	6a 01                	push   $0x1
-    2048:	68 d8 46 00 00       	push   $0x46d8
-    204d:	e8 71 19 00 00       	call   39c3 <open>
-    2052:	83 c4 10             	add    $0x10,%esp
-    2055:	85 c0                	test   %eax,%eax
-    2057:	0f 89 85 02 00 00    	jns    22e2 <subdir+0x542>
-  if(link("dd/ff/ff", "dd/dd/xx") == 0){
-    205d:	83 ec 08             	sub    $0x8,%esp
-    2060:	68 ba 47 00 00       	push   $0x47ba
-    2065:	68 26 47 00 00       	push   $0x4726
-    206a:	e8 74 19 00 00       	call   39e3 <link>
-    206f:	83 c4 10             	add    $0x10,%esp
-    2072:	85 c0                	test   %eax,%eax
-    2074:	0f 84 55 02 00 00    	je     22cf <subdir+0x52f>
-  if(link("dd/xx/ff", "dd/dd/xx") == 0){
-    207a:	83 ec 08             	sub    $0x8,%esp
-    207d:	68 ba 47 00 00       	push   $0x47ba
-    2082:	68 4b 47 00 00       	push   $0x474b
-    2087:	e8 57 19 00 00       	call   39e3 <link>
-    208c:	83 c4 10             	add    $0x10,%esp
-    208f:	85 c0                	test   %eax,%eax
-    2091:	0f 84 25 02 00 00    	je     22bc <subdir+0x51c>
-  if(link("dd/ff", "dd/dd/ffff") == 0){
-    2097:	83 ec 08             	sub    $0x8,%esp
-    209a:	68 72 46 00 00       	push   $0x4672
-    209f:	68 11 46 00 00       	push   $0x4611
-    20a4:	e8 3a 19 00 00       	call   39e3 <link>
-    20a9:	83 c4 10             	add    $0x10,%esp
-    20ac:	85 c0                	test   %eax,%eax
-    20ae:	0f 84 a9 01 00 00    	je     225d <subdir+0x4bd>
-  if(mkdir("dd/ff/ff") == 0){
-    20b4:	83 ec 0c             	sub    $0xc,%esp
-    20b7:	68 26 47 00 00       	push   $0x4726
-    20bc:	e8 2a 19 00 00       	call   39eb <mkdir>
-    20c1:	83 c4 10             	add    $0x10,%esp
-    20c4:	85 c0                	test   %eax,%eax
-    20c6:	0f 84 7e 01 00 00    	je     224a <subdir+0x4aa>
-  if(mkdir("dd/xx/ff") == 0){
-    20cc:	83 ec 0c             	sub    $0xc,%esp
-    20cf:	68 4b 47 00 00       	push   $0x474b
-    20d4:	e8 12 19 00 00       	call   39eb <mkdir>
-    20d9:	83 c4 10             	add    $0x10,%esp
-    20dc:	85 c0                	test   %eax,%eax
-    20de:	0f 84 67 03 00 00    	je     244b <subdir+0x6ab>
-  if(mkdir("dd/dd/ffff") == 0){
-    20e4:	83 ec 0c             	sub    $0xc,%esp
-    20e7:	68 72 46 00 00       	push   $0x4672
-    20ec:	e8 fa 18 00 00       	call   39eb <mkdir>
-    20f1:	83 c4 10             	add    $0x10,%esp
-    20f4:	85 c0                	test   %eax,%eax
-    20f6:	0f 84 3c 03 00 00    	je     2438 <subdir+0x698>
-  if(unlink("dd/xx/ff") == 0){
-    20fc:	83 ec 0c             	sub    $0xc,%esp
-    20ff:	68 4b 47 00 00       	push   $0x474b
-    2104:	e8 ca 18 00 00       	call   39d3 <unlink>
-    2109:	83 c4 10             	add    $0x10,%esp
-    210c:	85 c0                	test   %eax,%eax
-    210e:	0f 84 11 03 00 00    	je     2425 <subdir+0x685>
-  if(unlink("dd/ff/ff") == 0){
-    2114:	83 ec 0c             	sub    $0xc,%esp
-    2117:	68 26 47 00 00       	push   $0x4726
-    211c:	e8 b2 18 00 00       	call   39d3 <unlink>
-    2121:	83 c4 10             	add    $0x10,%esp
-    2124:	85 c0                	test   %eax,%eax
-    2126:	0f 84 e6 02 00 00    	je     2412 <subdir+0x672>
-  if(chdir("dd/ff") == 0){
-    212c:	83 ec 0c             	sub    $0xc,%esp
-    212f:	68 11 46 00 00       	push   $0x4611
-    2134:	e8 ba 18 00 00       	call   39f3 <chdir>
-    2139:	83 c4 10             	add    $0x10,%esp
-    213c:	85 c0                	test   %eax,%eax
-    213e:	0f 84 bb 02 00 00    	je     23ff <subdir+0x65f>
-  if(chdir("dd/xx") == 0){
-    2144:	83 ec 0c             	sub    $0xc,%esp
-    2147:	68 bd 47 00 00       	push   $0x47bd
-    214c:	e8 a2 18 00 00       	call   39f3 <chdir>
-    2151:	83 c4 10             	add    $0x10,%esp
-    2154:	85 c0                	test   %eax,%eax
-    2156:	0f 84 90 02 00 00    	je     23ec <subdir+0x64c>
-  if(unlink("dd/dd/ffff") != 0){
-    215c:	83 ec 0c             	sub    $0xc,%esp
-    215f:	68 72 46 00 00       	push   $0x4672
-    2164:	e8 6a 18 00 00       	call   39d3 <unlink>
-    2169:	83 c4 10             	add    $0x10,%esp
-    216c:	85 c0                	test   %eax,%eax
-    216e:	0f 85 9d 00 00 00    	jne    2211 <subdir+0x471>
-  if(unlink("dd/ff") != 0){
-    2174:	83 ec 0c             	sub    $0xc,%esp
-    2177:	68 11 46 00 00       	push   $0x4611
-    217c:	e8 52 18 00 00       	call   39d3 <unlink>
-    2181:	83 c4 10             	add    $0x10,%esp
-    2184:	85 c0                	test   %eax,%eax
-    2186:	0f 85 4d 02 00 00    	jne    23d9 <subdir+0x639>
-  if(unlink("dd") == 0){
-    218c:	83 ec 0c             	sub    $0xc,%esp
-    218f:	68 d8 46 00 00       	push   $0x46d8
-    2194:	e8 3a 18 00 00       	call   39d3 <unlink>
-    2199:	83 c4 10             	add    $0x10,%esp
-    219c:	85 c0                	test   %eax,%eax
-    219e:	0f 84 22 02 00 00    	je     23c6 <subdir+0x626>
-  if(unlink("dd/dd") < 0){
-    21a4:	83 ec 0c             	sub    $0xc,%esp
-    21a7:	68 ed 45 00 00       	push   $0x45ed
-    21ac:	e8 22 18 00 00       	call   39d3 <unlink>
-    21b1:	83 c4 10             	add    $0x10,%esp
-    21b4:	85 c0                	test   %eax,%eax
-    21b6:	0f 88 f7 01 00 00    	js     23b3 <subdir+0x613>
-  if(unlink("dd") < 0){
-    21bc:	83 ec 0c             	sub    $0xc,%esp
-    21bf:	68 d8 46 00 00       	push   $0x46d8
-    21c4:	e8 0a 18 00 00       	call   39d3 <unlink>
-    21c9:	83 c4 10             	add    $0x10,%esp
-    21cc:	85 c0                	test   %eax,%eax
-    21ce:	0f 88 cc 01 00 00    	js     23a0 <subdir+0x600>
-  printf(1, "subdir ok\n");
-    21d4:	83 ec 08             	sub    $0x8,%esp
-    21d7:	68 ba 48 00 00       	push   $0x48ba
-    21dc:	6a 01                	push   $0x1
-    21de:	e8 1d 19 00 00       	call   3b00 <printf>
-}
-    21e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    21e6:	83 c4 10             	add    $0x10,%esp
-    21e9:	c9                   	leave  
-    21ea:	c3                   	ret    
-    printf(1, "dd/dd/../ff wrong content\n");
-    21eb:	50                   	push   %eax
-    21ec:	50                   	push   %eax
-    21ed:	68 57 46 00 00       	push   $0x4657
-    21f2:	6a 01                	push   $0x1
-    21f4:	e8 07 19 00 00       	call   3b00 <printf>
-    exit();
-    21f9:	e8 85 17 00 00       	call   3983 <exit>
-    printf(1, "chdir dd/../../dd failed\n");
-    21fe:	50                   	push   %eax
-    21ff:	50                   	push   %eax
-    2200:	68 b2 46 00 00       	push   $0x46b2
-    2205:	6a 01                	push   $0x1
-    2207:	e8 f4 18 00 00       	call   3b00 <printf>
-    exit();
-    220c:	e8 72 17 00 00       	call   3983 <exit>
-    printf(1, "unlink dd/dd/ff failed\n");
-    2211:	50                   	push   %eax
-    2212:	50                   	push   %eax
-    2213:	68 7d 46 00 00       	push   $0x467d
-    2218:	6a 01                	push   $0x1
-    221a:	e8 e1 18 00 00       	call   3b00 <printf>
-    exit();
-    221f:	e8 5f 17 00 00       	call   3983 <exit>
-    printf(1, "create dd/ff/ff succeeded!\n");
-    2224:	51                   	push   %ecx
-    2225:	51                   	push   %ecx
-    2226:	68 2f 47 00 00       	push   $0x472f
-    222b:	6a 01                	push   $0x1
-    222d:	e8 ce 18 00 00       	call   3b00 <printf>
-    exit();
-    2232:	e8 4c 17 00 00       	call   3983 <exit>
-    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
-    2237:	53                   	push   %ebx
-    2238:	53                   	push   %ebx
-    2239:	68 14 51 00 00       	push   $0x5114
-    223e:	6a 01                	push   $0x1
-    2240:	e8 bb 18 00 00       	call   3b00 <printf>
-    exit();
-    2245:	e8 39 17 00 00       	call   3983 <exit>
-    printf(1, "mkdir dd/ff/ff succeeded!\n");
-    224a:	51                   	push   %ecx
-    224b:	51                   	push   %ecx
-    224c:	68 c3 47 00 00       	push   $0x47c3
-    2251:	6a 01                	push   $0x1
-    2253:	e8 a8 18 00 00       	call   3b00 <printf>
-    exit();
-    2258:	e8 26 17 00 00       	call   3983 <exit>
-    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
-    225d:	53                   	push   %ebx
-    225e:	53                   	push   %ebx
-    225f:	68 84 51 00 00       	push   $0x5184
-    2264:	6a 01                	push   $0x1
-    2266:	e8 95 18 00 00       	call   3b00 <printf>
-    exit();
-    226b:	e8 13 17 00 00       	call   3983 <exit>
-    printf(1, "open dd/dd/../ff failed\n");
-    2270:	50                   	push   %eax
-    2271:	50                   	push   %eax
-    2272:	68 3e 46 00 00       	push   $0x463e
-    2277:	6a 01                	push   $0x1
-    2279:	e8 82 18 00 00       	call   3b00 <printf>
-    exit();
-    227e:	e8 00 17 00 00       	call   3983 <exit>
-    printf(1, "create dd/dd/ff failed\n");
-    2283:	51                   	push   %ecx
-    2284:	51                   	push   %ecx
-    2285:	68 17 46 00 00       	push   $0x4617
-    228a:	6a 01                	push   $0x1
-    228c:	e8 6f 18 00 00       	call   3b00 <printf>
-    exit();
-    2291:	e8 ed 16 00 00       	call   3983 <exit>
-    printf(1, "chdir ./.. failed\n");
-    2296:	50                   	push   %eax
-    2297:	50                   	push   %eax
-    2298:	68 e0 46 00 00       	push   $0x46e0
-    229d:	6a 01                	push   $0x1
-    229f:	e8 5c 18 00 00       	call   3b00 <printf>
-    exit();
-    22a4:	e8 da 16 00 00       	call   3983 <exit>
-    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
-    22a9:	52                   	push   %edx
-    22aa:	52                   	push   %edx
-    22ab:	68 cc 50 00 00       	push   $0x50cc
-    22b0:	6a 01                	push   $0x1
-    22b2:	e8 49 18 00 00       	call   3b00 <printf>
-    exit();
-    22b7:	e8 c7 16 00 00       	call   3983 <exit>
-    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
-    22bc:	50                   	push   %eax
-    22bd:	50                   	push   %eax
-    22be:	68 60 51 00 00       	push   $0x5160
-    22c3:	6a 01                	push   $0x1
-    22c5:	e8 36 18 00 00       	call   3b00 <printf>
-    exit();
-    22ca:	e8 b4 16 00 00       	call   3983 <exit>
-    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
-    22cf:	50                   	push   %eax
-    22d0:	50                   	push   %eax
-    22d1:	68 3c 51 00 00       	push   $0x513c
-    22d6:	6a 01                	push   $0x1
-    22d8:	e8 23 18 00 00       	call   3b00 <printf>
-    exit();
-    22dd:	e8 a1 16 00 00       	call   3983 <exit>
-    printf(1, "open dd wronly succeeded!\n");
-    22e2:	50                   	push   %eax
-    22e3:	50                   	push   %eax
-    22e4:	68 9f 47 00 00       	push   $0x479f
-    22e9:	6a 01                	push   $0x1
-    22eb:	e8 10 18 00 00       	call   3b00 <printf>
-    exit();
-    22f0:	e8 8e 16 00 00       	call   3983 <exit>
-    printf(1, "open dd rdwr succeeded!\n");
-    22f5:	50                   	push   %eax
-    22f6:	50                   	push   %eax
-    22f7:	68 86 47 00 00       	push   $0x4786
-    22fc:	6a 01                	push   $0x1
-    22fe:	e8 fd 17 00 00       	call   3b00 <printf>
-    exit();
-    2303:	e8 7b 16 00 00       	call   3983 <exit>
-    printf(1, "create dd succeeded!\n");
-    2308:	50                   	push   %eax
-    2309:	50                   	push   %eax
-    230a:	68 70 47 00 00       	push   $0x4770
-    230f:	6a 01                	push   $0x1
-    2311:	e8 ea 17 00 00       	call   3b00 <printf>
-    exit();
-    2316:	e8 68 16 00 00       	call   3983 <exit>
-    printf(1, "create dd/xx/ff succeeded!\n");
-    231b:	52                   	push   %edx
-    231c:	52                   	push   %edx
-    231d:	68 54 47 00 00       	push   $0x4754
-    2322:	6a 01                	push   $0x1
-    2324:	e8 d7 17 00 00       	call   3b00 <printf>
-    exit();
-    2329:	e8 55 16 00 00       	call   3983 <exit>
-    printf(1, "chdir dd failed\n");
-    232e:	50                   	push   %eax
-    232f:	50                   	push   %eax
-    2330:	68 95 46 00 00       	push   $0x4695
-    2335:	6a 01                	push   $0x1
-    2337:	e8 c4 17 00 00       	call   3b00 <printf>
-    exit();
-    233c:	e8 42 16 00 00       	call   3983 <exit>
-    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
-    2341:	50                   	push   %eax
-    2342:	50                   	push   %eax
-    2343:	68 f0 50 00 00       	push   $0x50f0
-    2348:	6a 01                	push   $0x1
-    234a:	e8 b1 17 00 00       	call   3b00 <printf>
-    exit();
-    234f:	e8 2f 16 00 00       	call   3983 <exit>
-    printf(1, "subdir mkdir dd/dd failed\n");
-    2354:	53                   	push   %ebx
-    2355:	53                   	push   %ebx
-    2356:	68 f3 45 00 00       	push   $0x45f3
-    235b:	6a 01                	push   $0x1
-    235d:	e8 9e 17 00 00       	call   3b00 <printf>
-    exit();
-    2362:	e8 1c 16 00 00       	call   3983 <exit>
-    printf(1, "unlink dd (non-empty dir) succeeded!\n");
-    2367:	50                   	push   %eax
-    2368:	50                   	push   %eax
-    2369:	68 a4 50 00 00       	push   $0x50a4
-    236e:	6a 01                	push   $0x1
-    2370:	e8 8b 17 00 00       	call   3b00 <printf>
-    exit();
-    2375:	e8 09 16 00 00       	call   3983 <exit>
-    printf(1, "create dd/ff failed\n");
-    237a:	50                   	push   %eax
-    237b:	50                   	push   %eax
-    237c:	68 d7 45 00 00       	push   $0x45d7
-    2381:	6a 01                	push   $0x1
-    2383:	e8 78 17 00 00       	call   3b00 <printf>
-    exit();
-    2388:	e8 f6 15 00 00       	call   3983 <exit>
-    printf(1, "subdir mkdir dd failed\n");
-    238d:	50                   	push   %eax
-    238e:	50                   	push   %eax
-    238f:	68 bf 45 00 00       	push   $0x45bf
-    2394:	6a 01                	push   $0x1
-    2396:	e8 65 17 00 00       	call   3b00 <printf>
-    exit();
-    239b:	e8 e3 15 00 00       	call   3983 <exit>
-    printf(1, "unlink dd failed\n");
-    23a0:	50                   	push   %eax
-    23a1:	50                   	push   %eax
-    23a2:	68 a8 48 00 00       	push   $0x48a8
-    23a7:	6a 01                	push   $0x1
-    23a9:	e8 52 17 00 00       	call   3b00 <printf>
-    exit();
-    23ae:	e8 d0 15 00 00       	call   3983 <exit>
-    printf(1, "unlink dd/dd failed\n");
-    23b3:	52                   	push   %edx
-    23b4:	52                   	push   %edx
-    23b5:	68 93 48 00 00       	push   $0x4893
-    23ba:	6a 01                	push   $0x1
-    23bc:	e8 3f 17 00 00       	call   3b00 <printf>
-    exit();
-    23c1:	e8 bd 15 00 00       	call   3983 <exit>
-    printf(1, "unlink non-empty dd succeeded!\n");
-    23c6:	51                   	push   %ecx
-    23c7:	51                   	push   %ecx
-    23c8:	68 a8 51 00 00       	push   $0x51a8
-    23cd:	6a 01                	push   $0x1
-    23cf:	e8 2c 17 00 00       	call   3b00 <printf>
-    exit();
-    23d4:	e8 aa 15 00 00       	call   3983 <exit>
-    printf(1, "unlink dd/ff failed\n");
-    23d9:	53                   	push   %ebx
-    23da:	53                   	push   %ebx
-    23db:	68 7e 48 00 00       	push   $0x487e
-    23e0:	6a 01                	push   $0x1
-    23e2:	e8 19 17 00 00       	call   3b00 <printf>
-    exit();
-    23e7:	e8 97 15 00 00       	call   3983 <exit>
-    printf(1, "chdir dd/xx succeeded!\n");
-    23ec:	50                   	push   %eax
-    23ed:	50                   	push   %eax
-    23ee:	68 66 48 00 00       	push   $0x4866
-    23f3:	6a 01                	push   $0x1
-    23f5:	e8 06 17 00 00       	call   3b00 <printf>
-    exit();
-    23fa:	e8 84 15 00 00       	call   3983 <exit>
-    printf(1, "chdir dd/ff succeeded!\n");
-    23ff:	50                   	push   %eax
-    2400:	50                   	push   %eax
-    2401:	68 4e 48 00 00       	push   $0x484e
-    2406:	6a 01                	push   $0x1
-    2408:	e8 f3 16 00 00       	call   3b00 <printf>
-    exit();
-    240d:	e8 71 15 00 00       	call   3983 <exit>
-    printf(1, "unlink dd/ff/ff succeeded!\n");
-    2412:	50                   	push   %eax
-    2413:	50                   	push   %eax
-    2414:	68 32 48 00 00       	push   $0x4832
-    2419:	6a 01                	push   $0x1
-    241b:	e8 e0 16 00 00       	call   3b00 <printf>
-    exit();
-    2420:	e8 5e 15 00 00       	call   3983 <exit>
-    printf(1, "unlink dd/xx/ff succeeded!\n");
-    2425:	50                   	push   %eax
-    2426:	50                   	push   %eax
-    2427:	68 16 48 00 00       	push   $0x4816
-    242c:	6a 01                	push   $0x1
-    242e:	e8 cd 16 00 00       	call   3b00 <printf>
-    exit();
-    2433:	e8 4b 15 00 00       	call   3983 <exit>
-    printf(1, "mkdir dd/dd/ffff succeeded!\n");
-    2438:	50                   	push   %eax
-    2439:	50                   	push   %eax
-    243a:	68 f9 47 00 00       	push   $0x47f9
-    243f:	6a 01                	push   $0x1
-    2441:	e8 ba 16 00 00       	call   3b00 <printf>
-    exit();
-    2446:	e8 38 15 00 00       	call   3983 <exit>
-    printf(1, "mkdir dd/xx/ff succeeded!\n");
-    244b:	52                   	push   %edx
-    244c:	52                   	push   %edx
-    244d:	68 de 47 00 00       	push   $0x47de
-    2452:	6a 01                	push   $0x1
-    2454:	e8 a7 16 00 00       	call   3b00 <printf>
-    exit();
-    2459:	e8 25 15 00 00       	call   3983 <exit>
-    printf(1, "read dd/dd/ffff wrong len\n");
-    245e:	51                   	push   %ecx
-    245f:	51                   	push   %ecx
-    2460:	68 0b 47 00 00       	push   $0x470b
-    2465:	6a 01                	push   $0x1
-    2467:	e8 94 16 00 00       	call   3b00 <printf>
-    exit();
-    246c:	e8 12 15 00 00       	call   3983 <exit>
-    printf(1, "open dd/dd/ffff failed\n");
-    2471:	53                   	push   %ebx
-    2472:	53                   	push   %ebx
-    2473:	68 f3 46 00 00       	push   $0x46f3
-    2478:	6a 01                	push   $0x1
-    247a:	e8 81 16 00 00       	call   3b00 <printf>
-    exit();
-    247f:	e8 ff 14 00 00       	call   3983 <exit>
-    2484:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    248b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    248f:	90                   	nop
-
-00002490 <bigwrite>:
-{
-    2490:	f3 0f 1e fb          	endbr32 
-    2494:	55                   	push   %ebp
-    2495:	89 e5                	mov    %esp,%ebp
-    2497:	56                   	push   %esi
-    2498:	53                   	push   %ebx
-  for(sz = 499; sz < 12*512; sz += 471){
-    2499:	bb f3 01 00 00       	mov    $0x1f3,%ebx
-  printf(1, "bigwrite test\n");
-    249e:	83 ec 08             	sub    $0x8,%esp
-    24a1:	68 c5 48 00 00       	push   $0x48c5
-    24a6:	6a 01                	push   $0x1
-    24a8:	e8 53 16 00 00       	call   3b00 <printf>
-  unlink("bigwrite");
-    24ad:	c7 04 24 d4 48 00 00 	movl   $0x48d4,(%esp)
-    24b4:	e8 1a 15 00 00       	call   39d3 <unlink>
-    24b9:	83 c4 10             	add    $0x10,%esp
-    24bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    fd = open("bigwrite", O_CREATE | O_RDWR);
-    24c0:	83 ec 08             	sub    $0x8,%esp
-    24c3:	68 02 02 00 00       	push   $0x202
-    24c8:	68 d4 48 00 00       	push   $0x48d4
-    24cd:	e8 f1 14 00 00       	call   39c3 <open>
-    if(fd < 0){
-    24d2:	83 c4 10             	add    $0x10,%esp
-    fd = open("bigwrite", O_CREATE | O_RDWR);
-    24d5:	89 c6                	mov    %eax,%esi
-    if(fd < 0){
-    24d7:	85 c0                	test   %eax,%eax
-    24d9:	78 7e                	js     2559 <bigwrite+0xc9>
-      int cc = write(fd, buf, sz);
-    24db:	83 ec 04             	sub    $0x4,%esp
-    24de:	53                   	push   %ebx
-    24df:	68 e0 86 00 00       	push   $0x86e0
-    24e4:	50                   	push   %eax
-    24e5:	e8 b9 14 00 00       	call   39a3 <write>
-      if(cc != sz){
-    24ea:	83 c4 10             	add    $0x10,%esp
-    24ed:	39 d8                	cmp    %ebx,%eax
-    24ef:	75 55                	jne    2546 <bigwrite+0xb6>
-      int cc = write(fd, buf, sz);
-    24f1:	83 ec 04             	sub    $0x4,%esp
-    24f4:	53                   	push   %ebx
-    24f5:	68 e0 86 00 00       	push   $0x86e0
-    24fa:	56                   	push   %esi
-    24fb:	e8 a3 14 00 00       	call   39a3 <write>
-      if(cc != sz){
-    2500:	83 c4 10             	add    $0x10,%esp
-    2503:	39 d8                	cmp    %ebx,%eax
-    2505:	75 3f                	jne    2546 <bigwrite+0xb6>
-    close(fd);
-    2507:	83 ec 0c             	sub    $0xc,%esp
-  for(sz = 499; sz < 12*512; sz += 471){
-    250a:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
-    close(fd);
-    2510:	56                   	push   %esi
-    2511:	e8 95 14 00 00       	call   39ab <close>
-    unlink("bigwrite");
-    2516:	c7 04 24 d4 48 00 00 	movl   $0x48d4,(%esp)
-    251d:	e8 b1 14 00 00       	call   39d3 <unlink>
-  for(sz = 499; sz < 12*512; sz += 471){
-    2522:	83 c4 10             	add    $0x10,%esp
-    2525:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
-    252b:	75 93                	jne    24c0 <bigwrite+0x30>
-  printf(1, "bigwrite ok\n");
-    252d:	83 ec 08             	sub    $0x8,%esp
-    2530:	68 07 49 00 00       	push   $0x4907
-    2535:	6a 01                	push   $0x1
-    2537:	e8 c4 15 00 00       	call   3b00 <printf>
-}
-    253c:	83 c4 10             	add    $0x10,%esp
-    253f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    2542:	5b                   	pop    %ebx
-    2543:	5e                   	pop    %esi
-    2544:	5d                   	pop    %ebp
-    2545:	c3                   	ret    
-        printf(1, "write(%d) ret %d\n", sz, cc);
-    2546:	50                   	push   %eax
-    2547:	53                   	push   %ebx
-    2548:	68 f5 48 00 00       	push   $0x48f5
-    254d:	6a 01                	push   $0x1
-    254f:	e8 ac 15 00 00       	call   3b00 <printf>
-        exit();
-    2554:	e8 2a 14 00 00       	call   3983 <exit>
-      printf(1, "cannot create bigwrite\n");
-    2559:	83 ec 08             	sub    $0x8,%esp
-    255c:	68 dd 48 00 00       	push   $0x48dd
-    2561:	6a 01                	push   $0x1
-    2563:	e8 98 15 00 00       	call   3b00 <printf>
-      exit();
-    2568:	e8 16 14 00 00       	call   3983 <exit>
-    256d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00002570 <bigfile>:
-{
-    2570:	f3 0f 1e fb          	endbr32 
-    2574:	55                   	push   %ebp
-    2575:	89 e5                	mov    %esp,%ebp
-    2577:	57                   	push   %edi
-    2578:	56                   	push   %esi
-    2579:	53                   	push   %ebx
-    257a:	83 ec 14             	sub    $0x14,%esp
-  printf(1, "bigfile test\n");
-    257d:	68 14 49 00 00       	push   $0x4914
-    2582:	6a 01                	push   $0x1
-    2584:	e8 77 15 00 00       	call   3b00 <printf>
-  unlink("bigfile");
-    2589:	c7 04 24 30 49 00 00 	movl   $0x4930,(%esp)
-    2590:	e8 3e 14 00 00       	call   39d3 <unlink>
-  fd = open("bigfile", O_CREATE | O_RDWR);
-    2595:	58                   	pop    %eax
-    2596:	5a                   	pop    %edx
-    2597:	68 02 02 00 00       	push   $0x202
-    259c:	68 30 49 00 00       	push   $0x4930
-    25a1:	e8 1d 14 00 00       	call   39c3 <open>
-  if(fd < 0){
-    25a6:	83 c4 10             	add    $0x10,%esp
-    25a9:	85 c0                	test   %eax,%eax
-    25ab:	0f 88 5a 01 00 00    	js     270b <bigfile+0x19b>
-    25b1:	89 c6                	mov    %eax,%esi
-  for(i = 0; i < 20; i++){
-    25b3:	31 db                	xor    %ebx,%ebx
-    25b5:	8d 76 00             	lea    0x0(%esi),%esi
-    memset(buf, i, 600);
-    25b8:	83 ec 04             	sub    $0x4,%esp
-    25bb:	68 58 02 00 00       	push   $0x258
-    25c0:	53                   	push   %ebx
-    25c1:	68 e0 86 00 00       	push   $0x86e0
-    25c6:	e8 15 12 00 00       	call   37e0 <memset>
-    if(write(fd, buf, 600) != 600){
-    25cb:	83 c4 0c             	add    $0xc,%esp
-    25ce:	68 58 02 00 00       	push   $0x258
-    25d3:	68 e0 86 00 00       	push   $0x86e0
-    25d8:	56                   	push   %esi
-    25d9:	e8 c5 13 00 00       	call   39a3 <write>
-    25de:	83 c4 10             	add    $0x10,%esp
-    25e1:	3d 58 02 00 00       	cmp    $0x258,%eax
-    25e6:	0f 85 f8 00 00 00    	jne    26e4 <bigfile+0x174>
-  for(i = 0; i < 20; i++){
-    25ec:	83 c3 01             	add    $0x1,%ebx
-    25ef:	83 fb 14             	cmp    $0x14,%ebx
-    25f2:	75 c4                	jne    25b8 <bigfile+0x48>
-  close(fd);
-    25f4:	83 ec 0c             	sub    $0xc,%esp
-    25f7:	56                   	push   %esi
-    25f8:	e8 ae 13 00 00       	call   39ab <close>
-  fd = open("bigfile", 0);
-    25fd:	5e                   	pop    %esi
-    25fe:	5f                   	pop    %edi
-    25ff:	6a 00                	push   $0x0
-    2601:	68 30 49 00 00       	push   $0x4930
-    2606:	e8 b8 13 00 00       	call   39c3 <open>
-  if(fd < 0){
-    260b:	83 c4 10             	add    $0x10,%esp
-  fd = open("bigfile", 0);
-    260e:	89 c6                	mov    %eax,%esi
-  if(fd < 0){
-    2610:	85 c0                	test   %eax,%eax
-    2612:	0f 88 e0 00 00 00    	js     26f8 <bigfile+0x188>
-  total = 0;
-    2618:	31 db                	xor    %ebx,%ebx
-  for(i = 0; ; i++){
-    261a:	31 ff                	xor    %edi,%edi
-    261c:	eb 30                	jmp    264e <bigfile+0xde>
-    261e:	66 90                	xchg   %ax,%ax
-    if(cc != 300){
-    2620:	3d 2c 01 00 00       	cmp    $0x12c,%eax
-    2625:	0f 85 91 00 00 00    	jne    26bc <bigfile+0x14c>
-    if(buf[0] != i/2 || buf[299] != i/2){
-    262b:	89 fa                	mov    %edi,%edx
-    262d:	0f be 05 e0 86 00 00 	movsbl 0x86e0,%eax
-    2634:	d1 fa                	sar    %edx
-    2636:	39 d0                	cmp    %edx,%eax
-    2638:	75 6e                	jne    26a8 <bigfile+0x138>
-    263a:	0f be 15 0b 88 00 00 	movsbl 0x880b,%edx
-    2641:	39 d0                	cmp    %edx,%eax
-    2643:	75 63                	jne    26a8 <bigfile+0x138>
-    total += cc;
-    2645:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
-  for(i = 0; ; i++){
-    264b:	83 c7 01             	add    $0x1,%edi
-    cc = read(fd, buf, 300);
-    264e:	83 ec 04             	sub    $0x4,%esp
-    2651:	68 2c 01 00 00       	push   $0x12c
-    2656:	68 e0 86 00 00       	push   $0x86e0
-    265b:	56                   	push   %esi
-    265c:	e8 3a 13 00 00       	call   399b <read>
-    if(cc < 0){
-    2661:	83 c4 10             	add    $0x10,%esp
-    2664:	85 c0                	test   %eax,%eax
-    2666:	78 68                	js     26d0 <bigfile+0x160>
-    if(cc == 0)
-    2668:	75 b6                	jne    2620 <bigfile+0xb0>
-  close(fd);
-    266a:	83 ec 0c             	sub    $0xc,%esp
-    266d:	56                   	push   %esi
-    266e:	e8 38 13 00 00       	call   39ab <close>
-  if(total != 20*600){
-    2673:	83 c4 10             	add    $0x10,%esp
-    2676:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
-    267c:	0f 85 9c 00 00 00    	jne    271e <bigfile+0x1ae>
-  unlink("bigfile");
-    2682:	83 ec 0c             	sub    $0xc,%esp
-    2685:	68 30 49 00 00       	push   $0x4930
-    268a:	e8 44 13 00 00       	call   39d3 <unlink>
-  printf(1, "bigfile test ok\n");
-    268f:	58                   	pop    %eax
-    2690:	5a                   	pop    %edx
-    2691:	68 bf 49 00 00       	push   $0x49bf
-    2696:	6a 01                	push   $0x1
-    2698:	e8 63 14 00 00       	call   3b00 <printf>
-}
-    269d:	83 c4 10             	add    $0x10,%esp
-    26a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    26a3:	5b                   	pop    %ebx
-    26a4:	5e                   	pop    %esi
-    26a5:	5f                   	pop    %edi
-    26a6:	5d                   	pop    %ebp
-    26a7:	c3                   	ret    
-      printf(1, "read bigfile wrong data\n");
-    26a8:	83 ec 08             	sub    $0x8,%esp
-    26ab:	68 8c 49 00 00       	push   $0x498c
-    26b0:	6a 01                	push   $0x1
-    26b2:	e8 49 14 00 00       	call   3b00 <printf>
-      exit();
-    26b7:	e8 c7 12 00 00       	call   3983 <exit>
-      printf(1, "short read bigfile\n");
-    26bc:	83 ec 08             	sub    $0x8,%esp
-    26bf:	68 78 49 00 00       	push   $0x4978
-    26c4:	6a 01                	push   $0x1
-    26c6:	e8 35 14 00 00       	call   3b00 <printf>
-      exit();
-    26cb:	e8 b3 12 00 00       	call   3983 <exit>
-      printf(1, "read bigfile failed\n");
-    26d0:	83 ec 08             	sub    $0x8,%esp
-    26d3:	68 63 49 00 00       	push   $0x4963
-    26d8:	6a 01                	push   $0x1
-    26da:	e8 21 14 00 00       	call   3b00 <printf>
-      exit();
-    26df:	e8 9f 12 00 00       	call   3983 <exit>
-      printf(1, "write bigfile failed\n");
-    26e4:	83 ec 08             	sub    $0x8,%esp
-    26e7:	68 38 49 00 00       	push   $0x4938
-    26ec:	6a 01                	push   $0x1
-    26ee:	e8 0d 14 00 00       	call   3b00 <printf>
-      exit();
-    26f3:	e8 8b 12 00 00       	call   3983 <exit>
-    printf(1, "cannot open bigfile\n");
-    26f8:	53                   	push   %ebx
-    26f9:	53                   	push   %ebx
-    26fa:	68 4e 49 00 00       	push   $0x494e
-    26ff:	6a 01                	push   $0x1
-    2701:	e8 fa 13 00 00       	call   3b00 <printf>
-    exit();
-    2706:	e8 78 12 00 00       	call   3983 <exit>
-    printf(1, "cannot create bigfile");
-    270b:	50                   	push   %eax
-    270c:	50                   	push   %eax
-    270d:	68 22 49 00 00       	push   $0x4922
-    2712:	6a 01                	push   $0x1
-    2714:	e8 e7 13 00 00       	call   3b00 <printf>
-    exit();
-    2719:	e8 65 12 00 00       	call   3983 <exit>
-    printf(1, "read bigfile wrong total\n");
-    271e:	51                   	push   %ecx
-    271f:	51                   	push   %ecx
-    2720:	68 a5 49 00 00       	push   $0x49a5
-    2725:	6a 01                	push   $0x1
-    2727:	e8 d4 13 00 00       	call   3b00 <printf>
-    exit();
-    272c:	e8 52 12 00 00       	call   3983 <exit>
-    2731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    2738:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    273f:	90                   	nop
-
-00002740 <fourteen>:
-{
-    2740:	f3 0f 1e fb          	endbr32 
-    2744:	55                   	push   %ebp
-    2745:	89 e5                	mov    %esp,%ebp
-    2747:	83 ec 10             	sub    $0x10,%esp
-  printf(1, "fourteen test\n");
-    274a:	68 d0 49 00 00       	push   $0x49d0
-    274f:	6a 01                	push   $0x1
-    2751:	e8 aa 13 00 00       	call   3b00 <printf>
-  if(mkdir("12345678901234") != 0){
-    2756:	c7 04 24 0b 4a 00 00 	movl   $0x4a0b,(%esp)
-    275d:	e8 89 12 00 00       	call   39eb <mkdir>
-    2762:	83 c4 10             	add    $0x10,%esp
-    2765:	85 c0                	test   %eax,%eax
-    2767:	0f 85 97 00 00 00    	jne    2804 <fourteen+0xc4>
-  if(mkdir("12345678901234/123456789012345") != 0){
-    276d:	83 ec 0c             	sub    $0xc,%esp
-    2770:	68 c8 51 00 00       	push   $0x51c8
-    2775:	e8 71 12 00 00       	call   39eb <mkdir>
-    277a:	83 c4 10             	add    $0x10,%esp
-    277d:	85 c0                	test   %eax,%eax
-    277f:	0f 85 de 00 00 00    	jne    2863 <fourteen+0x123>
-  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
-    2785:	83 ec 08             	sub    $0x8,%esp
-    2788:	68 00 02 00 00       	push   $0x200
-    278d:	68 18 52 00 00       	push   $0x5218
-    2792:	e8 2c 12 00 00       	call   39c3 <open>
-  if(fd < 0){
-    2797:	83 c4 10             	add    $0x10,%esp
-    279a:	85 c0                	test   %eax,%eax
-    279c:	0f 88 ae 00 00 00    	js     2850 <fourteen+0x110>
-  close(fd);
-    27a2:	83 ec 0c             	sub    $0xc,%esp
-    27a5:	50                   	push   %eax
-    27a6:	e8 00 12 00 00       	call   39ab <close>
-  fd = open("12345678901234/12345678901234/12345678901234", 0);
-    27ab:	58                   	pop    %eax
-    27ac:	5a                   	pop    %edx
-    27ad:	6a 00                	push   $0x0
-    27af:	68 88 52 00 00       	push   $0x5288
-    27b4:	e8 0a 12 00 00       	call   39c3 <open>
-  if(fd < 0){
-    27b9:	83 c4 10             	add    $0x10,%esp
-    27bc:	85 c0                	test   %eax,%eax
-    27be:	78 7d                	js     283d <fourteen+0xfd>
-  close(fd);
-    27c0:	83 ec 0c             	sub    $0xc,%esp
-    27c3:	50                   	push   %eax
-    27c4:	e8 e2 11 00 00       	call   39ab <close>
-  if(mkdir("12345678901234/12345678901234") == 0){
-    27c9:	c7 04 24 fc 49 00 00 	movl   $0x49fc,(%esp)
-    27d0:	e8 16 12 00 00       	call   39eb <mkdir>
-    27d5:	83 c4 10             	add    $0x10,%esp
-    27d8:	85 c0                	test   %eax,%eax
-    27da:	74 4e                	je     282a <fourteen+0xea>
-  if(mkdir("123456789012345/12345678901234") == 0){
-    27dc:	83 ec 0c             	sub    $0xc,%esp
-    27df:	68 24 53 00 00       	push   $0x5324
-    27e4:	e8 02 12 00 00       	call   39eb <mkdir>
-    27e9:	83 c4 10             	add    $0x10,%esp
-    27ec:	85 c0                	test   %eax,%eax
-    27ee:	74 27                	je     2817 <fourteen+0xd7>
-  printf(1, "fourteen ok\n");
-    27f0:	83 ec 08             	sub    $0x8,%esp
-    27f3:	68 1a 4a 00 00       	push   $0x4a1a
-    27f8:	6a 01                	push   $0x1
-    27fa:	e8 01 13 00 00       	call   3b00 <printf>
-}
-    27ff:	83 c4 10             	add    $0x10,%esp
-    2802:	c9                   	leave  
-    2803:	c3                   	ret    
-    printf(1, "mkdir 12345678901234 failed\n");
-    2804:	50                   	push   %eax
-    2805:	50                   	push   %eax
-    2806:	68 df 49 00 00       	push   $0x49df
-    280b:	6a 01                	push   $0x1
-    280d:	e8 ee 12 00 00       	call   3b00 <printf>
-    exit();
-    2812:	e8 6c 11 00 00       	call   3983 <exit>
-    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
-    2817:	50                   	push   %eax
-    2818:	50                   	push   %eax
-    2819:	68 44 53 00 00       	push   $0x5344
-    281e:	6a 01                	push   $0x1
-    2820:	e8 db 12 00 00       	call   3b00 <printf>
-    exit();
-    2825:	e8 59 11 00 00       	call   3983 <exit>
-    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
-    282a:	52                   	push   %edx
-    282b:	52                   	push   %edx
-    282c:	68 f4 52 00 00       	push   $0x52f4
-    2831:	6a 01                	push   $0x1
-    2833:	e8 c8 12 00 00       	call   3b00 <printf>
-    exit();
-    2838:	e8 46 11 00 00       	call   3983 <exit>
-    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
-    283d:	51                   	push   %ecx
-    283e:	51                   	push   %ecx
-    283f:	68 b8 52 00 00       	push   $0x52b8
-    2844:	6a 01                	push   $0x1
-    2846:	e8 b5 12 00 00       	call   3b00 <printf>
-    exit();
-    284b:	e8 33 11 00 00       	call   3983 <exit>
-    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
-    2850:	51                   	push   %ecx
-    2851:	51                   	push   %ecx
-    2852:	68 48 52 00 00       	push   $0x5248
-    2857:	6a 01                	push   $0x1
-    2859:	e8 a2 12 00 00       	call   3b00 <printf>
-    exit();
-    285e:	e8 20 11 00 00       	call   3983 <exit>
-    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
-    2863:	50                   	push   %eax
-    2864:	50                   	push   %eax
-    2865:	68 e8 51 00 00       	push   $0x51e8
-    286a:	6a 01                	push   $0x1
-    286c:	e8 8f 12 00 00       	call   3b00 <printf>
-    exit();
-    2871:	e8 0d 11 00 00       	call   3983 <exit>
-    2876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    287d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00002880 <rmdot>:
-{
-    2880:	f3 0f 1e fb          	endbr32 
-    2884:	55                   	push   %ebp
-    2885:	89 e5                	mov    %esp,%ebp
-    2887:	83 ec 10             	sub    $0x10,%esp
-  printf(1, "rmdot test\n");
-    288a:	68 27 4a 00 00       	push   $0x4a27
-    288f:	6a 01                	push   $0x1
-    2891:	e8 6a 12 00 00       	call   3b00 <printf>
-  if(mkdir("dots") != 0){
-    2896:	c7 04 24 33 4a 00 00 	movl   $0x4a33,(%esp)
-    289d:	e8 49 11 00 00       	call   39eb <mkdir>
-    28a2:	83 c4 10             	add    $0x10,%esp
-    28a5:	85 c0                	test   %eax,%eax
-    28a7:	0f 85 b0 00 00 00    	jne    295d <rmdot+0xdd>
-  if(chdir("dots") != 0){
-    28ad:	83 ec 0c             	sub    $0xc,%esp
-    28b0:	68 33 4a 00 00       	push   $0x4a33
-    28b5:	e8 39 11 00 00       	call   39f3 <chdir>
-    28ba:	83 c4 10             	add    $0x10,%esp
-    28bd:	85 c0                	test   %eax,%eax
-    28bf:	0f 85 1d 01 00 00    	jne    29e2 <rmdot+0x162>
-  if(unlink(".") == 0){
-    28c5:	83 ec 0c             	sub    $0xc,%esp
-    28c8:	68 de 46 00 00       	push   $0x46de
-    28cd:	e8 01 11 00 00       	call   39d3 <unlink>
-    28d2:	83 c4 10             	add    $0x10,%esp
-    28d5:	85 c0                	test   %eax,%eax
-    28d7:	0f 84 f2 00 00 00    	je     29cf <rmdot+0x14f>
-  if(unlink("..") == 0){
-    28dd:	83 ec 0c             	sub    $0xc,%esp
-    28e0:	68 dd 46 00 00       	push   $0x46dd
-    28e5:	e8 e9 10 00 00       	call   39d3 <unlink>
-    28ea:	83 c4 10             	add    $0x10,%esp
-    28ed:	85 c0                	test   %eax,%eax
-    28ef:	0f 84 c7 00 00 00    	je     29bc <rmdot+0x13c>
-  if(chdir("/") != 0){
-    28f5:	83 ec 0c             	sub    $0xc,%esp
-    28f8:	68 b1 3e 00 00       	push   $0x3eb1
-    28fd:	e8 f1 10 00 00       	call   39f3 <chdir>
-    2902:	83 c4 10             	add    $0x10,%esp
-    2905:	85 c0                	test   %eax,%eax
-    2907:	0f 85 9c 00 00 00    	jne    29a9 <rmdot+0x129>
-  if(unlink("dots/.") == 0){
-    290d:	83 ec 0c             	sub    $0xc,%esp
-    2910:	68 7b 4a 00 00       	push   $0x4a7b
-    2915:	e8 b9 10 00 00       	call   39d3 <unlink>
-    291a:	83 c4 10             	add    $0x10,%esp
-    291d:	85 c0                	test   %eax,%eax
-    291f:	74 75                	je     2996 <rmdot+0x116>
-  if(unlink("dots/..") == 0){
-    2921:	83 ec 0c             	sub    $0xc,%esp
-    2924:	68 99 4a 00 00       	push   $0x4a99
-    2929:	e8 a5 10 00 00       	call   39d3 <unlink>
-    292e:	83 c4 10             	add    $0x10,%esp
-    2931:	85 c0                	test   %eax,%eax
-    2933:	74 4e                	je     2983 <rmdot+0x103>
-  if(unlink("dots") != 0){
-    2935:	83 ec 0c             	sub    $0xc,%esp
-    2938:	68 33 4a 00 00       	push   $0x4a33
-    293d:	e8 91 10 00 00       	call   39d3 <unlink>
-    2942:	83 c4 10             	add    $0x10,%esp
-    2945:	85 c0                	test   %eax,%eax
-    2947:	75 27                	jne    2970 <rmdot+0xf0>
-  printf(1, "rmdot ok\n");
-    2949:	83 ec 08             	sub    $0x8,%esp
-    294c:	68 ce 4a 00 00       	push   $0x4ace
-    2951:	6a 01                	push   $0x1
-    2953:	e8 a8 11 00 00       	call   3b00 <printf>
-}
-    2958:	83 c4 10             	add    $0x10,%esp
-    295b:	c9                   	leave  
-    295c:	c3                   	ret    
-    printf(1, "mkdir dots failed\n");
-    295d:	50                   	push   %eax
-    295e:	50                   	push   %eax
-    295f:	68 38 4a 00 00       	push   $0x4a38
-    2964:	6a 01                	push   $0x1
-    2966:	e8 95 11 00 00       	call   3b00 <printf>
-    exit();
-    296b:	e8 13 10 00 00       	call   3983 <exit>
-    printf(1, "unlink dots failed!\n");
-    2970:	50                   	push   %eax
-    2971:	50                   	push   %eax
-    2972:	68 b9 4a 00 00       	push   $0x4ab9
-    2977:	6a 01                	push   $0x1
-    2979:	e8 82 11 00 00       	call   3b00 <printf>
-    exit();
-    297e:	e8 00 10 00 00       	call   3983 <exit>
-    printf(1, "unlink dots/.. worked!\n");
-    2983:	52                   	push   %edx
-    2984:	52                   	push   %edx
-    2985:	68 a1 4a 00 00       	push   $0x4aa1
-    298a:	6a 01                	push   $0x1
-    298c:	e8 6f 11 00 00       	call   3b00 <printf>
-    exit();
-    2991:	e8 ed 0f 00 00       	call   3983 <exit>
-    printf(1, "unlink dots/. worked!\n");
-    2996:	51                   	push   %ecx
-    2997:	51                   	push   %ecx
-    2998:	68 82 4a 00 00       	push   $0x4a82
-    299d:	6a 01                	push   $0x1
-    299f:	e8 5c 11 00 00       	call   3b00 <printf>
-    exit();
-    29a4:	e8 da 0f 00 00       	call   3983 <exit>
-    printf(1, "chdir / failed\n");
-    29a9:	50                   	push   %eax
-    29aa:	50                   	push   %eax
-    29ab:	68 b3 3e 00 00       	push   $0x3eb3
-    29b0:	6a 01                	push   $0x1
-    29b2:	e8 49 11 00 00       	call   3b00 <printf>
-    exit();
-    29b7:	e8 c7 0f 00 00       	call   3983 <exit>
-    printf(1, "rm .. worked!\n");
-    29bc:	50                   	push   %eax
-    29bd:	50                   	push   %eax
-    29be:	68 6c 4a 00 00       	push   $0x4a6c
-    29c3:	6a 01                	push   $0x1
-    29c5:	e8 36 11 00 00       	call   3b00 <printf>
-    exit();
-    29ca:	e8 b4 0f 00 00       	call   3983 <exit>
-    printf(1, "rm . worked!\n");
-    29cf:	50                   	push   %eax
-    29d0:	50                   	push   %eax
-    29d1:	68 5e 4a 00 00       	push   $0x4a5e
-    29d6:	6a 01                	push   $0x1
-    29d8:	e8 23 11 00 00       	call   3b00 <printf>
-    exit();
-    29dd:	e8 a1 0f 00 00       	call   3983 <exit>
-    printf(1, "chdir dots failed\n");
-    29e2:	50                   	push   %eax
-    29e3:	50                   	push   %eax
-    29e4:	68 4b 4a 00 00       	push   $0x4a4b
-    29e9:	6a 01                	push   $0x1
-    29eb:	e8 10 11 00 00       	call   3b00 <printf>
-    exit();
-    29f0:	e8 8e 0f 00 00       	call   3983 <exit>
-    29f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    29fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00002a00 <dirfile>:
-{
-    2a00:	f3 0f 1e fb          	endbr32 
-    2a04:	55                   	push   %ebp
-    2a05:	89 e5                	mov    %esp,%ebp
-    2a07:	53                   	push   %ebx
-    2a08:	83 ec 0c             	sub    $0xc,%esp
-  printf(1, "dir vs file\n");
-    2a0b:	68 d8 4a 00 00       	push   $0x4ad8
-    2a10:	6a 01                	push   $0x1
-    2a12:	e8 e9 10 00 00       	call   3b00 <printf>
-  fd = open("dirfile", O_CREATE);
-    2a17:	5b                   	pop    %ebx
-    2a18:	58                   	pop    %eax
-    2a19:	68 00 02 00 00       	push   $0x200
-    2a1e:	68 e5 4a 00 00       	push   $0x4ae5
-    2a23:	e8 9b 0f 00 00       	call   39c3 <open>
-  if(fd < 0){
-    2a28:	83 c4 10             	add    $0x10,%esp
-    2a2b:	85 c0                	test   %eax,%eax
-    2a2d:	0f 88 43 01 00 00    	js     2b76 <dirfile+0x176>
-  close(fd);
-    2a33:	83 ec 0c             	sub    $0xc,%esp
-    2a36:	50                   	push   %eax
-    2a37:	e8 6f 0f 00 00       	call   39ab <close>
-  if(chdir("dirfile") == 0){
-    2a3c:	c7 04 24 e5 4a 00 00 	movl   $0x4ae5,(%esp)
-    2a43:	e8 ab 0f 00 00       	call   39f3 <chdir>
-    2a48:	83 c4 10             	add    $0x10,%esp
-    2a4b:	85 c0                	test   %eax,%eax
-    2a4d:	0f 84 10 01 00 00    	je     2b63 <dirfile+0x163>
-  fd = open("dirfile/xx", 0);
-    2a53:	83 ec 08             	sub    $0x8,%esp
-    2a56:	6a 00                	push   $0x0
-    2a58:	68 1e 4b 00 00       	push   $0x4b1e
-    2a5d:	e8 61 0f 00 00       	call   39c3 <open>
-  if(fd >= 0){
-    2a62:	83 c4 10             	add    $0x10,%esp
-    2a65:	85 c0                	test   %eax,%eax
-    2a67:	0f 89 e3 00 00 00    	jns    2b50 <dirfile+0x150>
-  fd = open("dirfile/xx", O_CREATE);
-    2a6d:	83 ec 08             	sub    $0x8,%esp
-    2a70:	68 00 02 00 00       	push   $0x200
-    2a75:	68 1e 4b 00 00       	push   $0x4b1e
-    2a7a:	e8 44 0f 00 00       	call   39c3 <open>
-  if(fd >= 0){
-    2a7f:	83 c4 10             	add    $0x10,%esp
-    2a82:	85 c0                	test   %eax,%eax
-    2a84:	0f 89 c6 00 00 00    	jns    2b50 <dirfile+0x150>
-  if(mkdir("dirfile/xx") == 0){
-    2a8a:	83 ec 0c             	sub    $0xc,%esp
-    2a8d:	68 1e 4b 00 00       	push   $0x4b1e
-    2a92:	e8 54 0f 00 00       	call   39eb <mkdir>
-    2a97:	83 c4 10             	add    $0x10,%esp
-    2a9a:	85 c0                	test   %eax,%eax
-    2a9c:	0f 84 46 01 00 00    	je     2be8 <dirfile+0x1e8>
-  if(unlink("dirfile/xx") == 0){
-    2aa2:	83 ec 0c             	sub    $0xc,%esp
-    2aa5:	68 1e 4b 00 00       	push   $0x4b1e
-    2aaa:	e8 24 0f 00 00       	call   39d3 <unlink>
-    2aaf:	83 c4 10             	add    $0x10,%esp
-    2ab2:	85 c0                	test   %eax,%eax
-    2ab4:	0f 84 1b 01 00 00    	je     2bd5 <dirfile+0x1d5>
-  if(link("README", "dirfile/xx") == 0){
-    2aba:	83 ec 08             	sub    $0x8,%esp
-    2abd:	68 1e 4b 00 00       	push   $0x4b1e
-    2ac2:	68 82 4b 00 00       	push   $0x4b82
-    2ac7:	e8 17 0f 00 00       	call   39e3 <link>
-    2acc:	83 c4 10             	add    $0x10,%esp
-    2acf:	85 c0                	test   %eax,%eax
-    2ad1:	0f 84 eb 00 00 00    	je     2bc2 <dirfile+0x1c2>
-  if(unlink("dirfile") != 0){
-    2ad7:	83 ec 0c             	sub    $0xc,%esp
-    2ada:	68 e5 4a 00 00       	push   $0x4ae5
-    2adf:	e8 ef 0e 00 00       	call   39d3 <unlink>
-    2ae4:	83 c4 10             	add    $0x10,%esp
-    2ae7:	85 c0                	test   %eax,%eax
-    2ae9:	0f 85 c0 00 00 00    	jne    2baf <dirfile+0x1af>
-  fd = open(".", O_RDWR);
-    2aef:	83 ec 08             	sub    $0x8,%esp
-    2af2:	6a 02                	push   $0x2
-    2af4:	68 de 46 00 00       	push   $0x46de
-    2af9:	e8 c5 0e 00 00       	call   39c3 <open>
-  if(fd >= 0){
-    2afe:	83 c4 10             	add    $0x10,%esp
-    2b01:	85 c0                	test   %eax,%eax
-    2b03:	0f 89 93 00 00 00    	jns    2b9c <dirfile+0x19c>
-  fd = open(".", 0);
-    2b09:	83 ec 08             	sub    $0x8,%esp
-    2b0c:	6a 00                	push   $0x0
-    2b0e:	68 de 46 00 00       	push   $0x46de
-    2b13:	e8 ab 0e 00 00       	call   39c3 <open>
-  if(write(fd, "x", 1) > 0){
-    2b18:	83 c4 0c             	add    $0xc,%esp
-    2b1b:	6a 01                	push   $0x1
-  fd = open(".", 0);
-    2b1d:	89 c3                	mov    %eax,%ebx
-  if(write(fd, "x", 1) > 0){
-    2b1f:	68 c1 47 00 00       	push   $0x47c1
-    2b24:	50                   	push   %eax
-    2b25:	e8 79 0e 00 00       	call   39a3 <write>
-    2b2a:	83 c4 10             	add    $0x10,%esp
-    2b2d:	85 c0                	test   %eax,%eax
-    2b2f:	7f 58                	jg     2b89 <dirfile+0x189>
-  close(fd);
-    2b31:	83 ec 0c             	sub    $0xc,%esp
-    2b34:	53                   	push   %ebx
-    2b35:	e8 71 0e 00 00       	call   39ab <close>
-  printf(1, "dir vs file OK\n");
-    2b3a:	58                   	pop    %eax
-    2b3b:	5a                   	pop    %edx
-    2b3c:	68 b5 4b 00 00       	push   $0x4bb5
-    2b41:	6a 01                	push   $0x1
-    2b43:	e8 b8 0f 00 00       	call   3b00 <printf>
-}
-    2b48:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    2b4b:	83 c4 10             	add    $0x10,%esp
-    2b4e:	c9                   	leave  
-    2b4f:	c3                   	ret    
-    printf(1, "create dirfile/xx succeeded!\n");
-    2b50:	50                   	push   %eax
-    2b51:	50                   	push   %eax
-    2b52:	68 29 4b 00 00       	push   $0x4b29
-    2b57:	6a 01                	push   $0x1
-    2b59:	e8 a2 0f 00 00       	call   3b00 <printf>
-    exit();
-    2b5e:	e8 20 0e 00 00       	call   3983 <exit>
-    printf(1, "chdir dirfile succeeded!\n");
-    2b63:	52                   	push   %edx
-    2b64:	52                   	push   %edx
-    2b65:	68 04 4b 00 00       	push   $0x4b04
-    2b6a:	6a 01                	push   $0x1
-    2b6c:	e8 8f 0f 00 00       	call   3b00 <printf>
-    exit();
-    2b71:	e8 0d 0e 00 00       	call   3983 <exit>
-    printf(1, "create dirfile failed\n");
-    2b76:	51                   	push   %ecx
-    2b77:	51                   	push   %ecx
-    2b78:	68 ed 4a 00 00       	push   $0x4aed
-    2b7d:	6a 01                	push   $0x1
-    2b7f:	e8 7c 0f 00 00       	call   3b00 <printf>
-    exit();
-    2b84:	e8 fa 0d 00 00       	call   3983 <exit>
-    printf(1, "write . succeeded!\n");
-    2b89:	51                   	push   %ecx
-    2b8a:	51                   	push   %ecx
-    2b8b:	68 a1 4b 00 00       	push   $0x4ba1
-    2b90:	6a 01                	push   $0x1
-    2b92:	e8 69 0f 00 00       	call   3b00 <printf>
-    exit();
-    2b97:	e8 e7 0d 00 00       	call   3983 <exit>
-    printf(1, "open . for writing succeeded!\n");
-    2b9c:	53                   	push   %ebx
-    2b9d:	53                   	push   %ebx
-    2b9e:	68 98 53 00 00       	push   $0x5398
-    2ba3:	6a 01                	push   $0x1
-    2ba5:	e8 56 0f 00 00       	call   3b00 <printf>
-    exit();
-    2baa:	e8 d4 0d 00 00       	call   3983 <exit>
-    printf(1, "unlink dirfile failed!\n");
-    2baf:	50                   	push   %eax
-    2bb0:	50                   	push   %eax
-    2bb1:	68 89 4b 00 00       	push   $0x4b89
-    2bb6:	6a 01                	push   $0x1
-    2bb8:	e8 43 0f 00 00       	call   3b00 <printf>
-    exit();
-    2bbd:	e8 c1 0d 00 00       	call   3983 <exit>
-    printf(1, "link to dirfile/xx succeeded!\n");
-    2bc2:	50                   	push   %eax
-    2bc3:	50                   	push   %eax
-    2bc4:	68 78 53 00 00       	push   $0x5378
-    2bc9:	6a 01                	push   $0x1
-    2bcb:	e8 30 0f 00 00       	call   3b00 <printf>
-    exit();
-    2bd0:	e8 ae 0d 00 00       	call   3983 <exit>
-    printf(1, "unlink dirfile/xx succeeded!\n");
-    2bd5:	50                   	push   %eax
-    2bd6:	50                   	push   %eax
-    2bd7:	68 64 4b 00 00       	push   $0x4b64
-    2bdc:	6a 01                	push   $0x1
-    2bde:	e8 1d 0f 00 00       	call   3b00 <printf>
-    exit();
-    2be3:	e8 9b 0d 00 00       	call   3983 <exit>
-    printf(1, "mkdir dirfile/xx succeeded!\n");
-    2be8:	50                   	push   %eax
-    2be9:	50                   	push   %eax
-    2bea:	68 47 4b 00 00       	push   $0x4b47
-    2bef:	6a 01                	push   $0x1
-    2bf1:	e8 0a 0f 00 00       	call   3b00 <printf>
-    exit();
-    2bf6:	e8 88 0d 00 00       	call   3983 <exit>
-    2bfb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    2bff:	90                   	nop
-
-00002c00 <iref>:
-{
-    2c00:	f3 0f 1e fb          	endbr32 
-    2c04:	55                   	push   %ebp
-    2c05:	89 e5                	mov    %esp,%ebp
-    2c07:	53                   	push   %ebx
-  printf(1, "empty file name\n");
-    2c08:	bb 33 00 00 00       	mov    $0x33,%ebx
-{
-    2c0d:	83 ec 0c             	sub    $0xc,%esp
-  printf(1, "empty file name\n");
-    2c10:	68 c5 4b 00 00       	push   $0x4bc5
-    2c15:	6a 01                	push   $0x1
-    2c17:	e8 e4 0e 00 00       	call   3b00 <printf>
-    2c1c:	83 c4 10             	add    $0x10,%esp
-    2c1f:	90                   	nop
-    if(mkdir("irefd") != 0){
-    2c20:	83 ec 0c             	sub    $0xc,%esp
-    2c23:	68 d6 4b 00 00       	push   $0x4bd6
-    2c28:	e8 be 0d 00 00       	call   39eb <mkdir>
-    2c2d:	83 c4 10             	add    $0x10,%esp
-    2c30:	85 c0                	test   %eax,%eax
-    2c32:	0f 85 bb 00 00 00    	jne    2cf3 <iref+0xf3>
-    if(chdir("irefd") != 0){
-    2c38:	83 ec 0c             	sub    $0xc,%esp
-    2c3b:	68 d6 4b 00 00       	push   $0x4bd6
-    2c40:	e8 ae 0d 00 00       	call   39f3 <chdir>
-    2c45:	83 c4 10             	add    $0x10,%esp
-    2c48:	85 c0                	test   %eax,%eax
-    2c4a:	0f 85 b7 00 00 00    	jne    2d07 <iref+0x107>
-    mkdir("");
-    2c50:	83 ec 0c             	sub    $0xc,%esp
-    2c53:	68 8b 42 00 00       	push   $0x428b
-    2c58:	e8 8e 0d 00 00       	call   39eb <mkdir>
-    link("README", "");
-    2c5d:	59                   	pop    %ecx
-    2c5e:	58                   	pop    %eax
-    2c5f:	68 8b 42 00 00       	push   $0x428b
-    2c64:	68 82 4b 00 00       	push   $0x4b82
-    2c69:	e8 75 0d 00 00       	call   39e3 <link>
-    fd = open("", O_CREATE);
-    2c6e:	58                   	pop    %eax
-    2c6f:	5a                   	pop    %edx
-    2c70:	68 00 02 00 00       	push   $0x200
-    2c75:	68 8b 42 00 00       	push   $0x428b
-    2c7a:	e8 44 0d 00 00       	call   39c3 <open>
-    if(fd >= 0)
-    2c7f:	83 c4 10             	add    $0x10,%esp
-    2c82:	85 c0                	test   %eax,%eax
-    2c84:	78 0c                	js     2c92 <iref+0x92>
-      close(fd);
-    2c86:	83 ec 0c             	sub    $0xc,%esp
-    2c89:	50                   	push   %eax
-    2c8a:	e8 1c 0d 00 00       	call   39ab <close>
-    2c8f:	83 c4 10             	add    $0x10,%esp
-    fd = open("xx", O_CREATE);
-    2c92:	83 ec 08             	sub    $0x8,%esp
-    2c95:	68 00 02 00 00       	push   $0x200
-    2c9a:	68 c0 47 00 00       	push   $0x47c0
-    2c9f:	e8 1f 0d 00 00       	call   39c3 <open>
-    if(fd >= 0)
-    2ca4:	83 c4 10             	add    $0x10,%esp
-    2ca7:	85 c0                	test   %eax,%eax
-    2ca9:	78 0c                	js     2cb7 <iref+0xb7>
-      close(fd);
-    2cab:	83 ec 0c             	sub    $0xc,%esp
-    2cae:	50                   	push   %eax
-    2caf:	e8 f7 0c 00 00       	call   39ab <close>
-    2cb4:	83 c4 10             	add    $0x10,%esp
-    unlink("xx");
-    2cb7:	83 ec 0c             	sub    $0xc,%esp
-    2cba:	68 c0 47 00 00       	push   $0x47c0
-    2cbf:	e8 0f 0d 00 00       	call   39d3 <unlink>
-  for(i = 0; i < 50 + 1; i++){
-    2cc4:	83 c4 10             	add    $0x10,%esp
-    2cc7:	83 eb 01             	sub    $0x1,%ebx
-    2cca:	0f 85 50 ff ff ff    	jne    2c20 <iref+0x20>
-  chdir("/");
-    2cd0:	83 ec 0c             	sub    $0xc,%esp
-    2cd3:	68 b1 3e 00 00       	push   $0x3eb1
-    2cd8:	e8 16 0d 00 00       	call   39f3 <chdir>
-  printf(1, "empty file name OK\n");
-    2cdd:	58                   	pop    %eax
-    2cde:	5a                   	pop    %edx
-    2cdf:	68 04 4c 00 00       	push   $0x4c04
-    2ce4:	6a 01                	push   $0x1
-    2ce6:	e8 15 0e 00 00       	call   3b00 <printf>
-}
-    2ceb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    2cee:	83 c4 10             	add    $0x10,%esp
-    2cf1:	c9                   	leave  
-    2cf2:	c3                   	ret    
-      printf(1, "mkdir irefd failed\n");
-    2cf3:	83 ec 08             	sub    $0x8,%esp
-    2cf6:	68 dc 4b 00 00       	push   $0x4bdc
-    2cfb:	6a 01                	push   $0x1
-    2cfd:	e8 fe 0d 00 00       	call   3b00 <printf>
-      exit();
-    2d02:	e8 7c 0c 00 00       	call   3983 <exit>
-      printf(1, "chdir irefd failed\n");
-    2d07:	83 ec 08             	sub    $0x8,%esp
-    2d0a:	68 f0 4b 00 00       	push   $0x4bf0
-    2d0f:	6a 01                	push   $0x1
-    2d11:	e8 ea 0d 00 00       	call   3b00 <printf>
-      exit();
-    2d16:	e8 68 0c 00 00       	call   3983 <exit>
-    2d1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    2d1f:	90                   	nop
-
-00002d20 <forktest>:
-{
-    2d20:	f3 0f 1e fb          	endbr32 
-    2d24:	55                   	push   %ebp
-    2d25:	89 e5                	mov    %esp,%ebp
-    2d27:	53                   	push   %ebx
-  for(n=0; n<1000; n++){
-    2d28:	31 db                	xor    %ebx,%ebx
-{
-    2d2a:	83 ec 0c             	sub    $0xc,%esp
-  printf(1, "fork test\n");
-    2d2d:	68 18 4c 00 00       	push   $0x4c18
-    2d32:	6a 01                	push   $0x1
-    2d34:	e8 c7 0d 00 00       	call   3b00 <printf>
-    2d39:	83 c4 10             	add    $0x10,%esp
-    2d3c:	eb 0f                	jmp    2d4d <forktest+0x2d>
-    2d3e:	66 90                	xchg   %ax,%ax
-    if(pid == 0)
-    2d40:	74 4a                	je     2d8c <forktest+0x6c>
-  for(n=0; n<1000; n++){
-    2d42:	83 c3 01             	add    $0x1,%ebx
-    2d45:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
-    2d4b:	74 6b                	je     2db8 <forktest+0x98>
-    pid = fork();
-    2d4d:	e8 29 0c 00 00       	call   397b <fork>
-    if(pid < 0)
-    2d52:	85 c0                	test   %eax,%eax
-    2d54:	79 ea                	jns    2d40 <forktest+0x20>
-  for(; n > 0; n--){
-    2d56:	85 db                	test   %ebx,%ebx
-    2d58:	74 14                	je     2d6e <forktest+0x4e>
-    2d5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(wait() < 0){
-    2d60:	e8 26 0c 00 00       	call   398b <wait>
-    2d65:	85 c0                	test   %eax,%eax
-    2d67:	78 28                	js     2d91 <forktest+0x71>
-  for(; n > 0; n--){
-    2d69:	83 eb 01             	sub    $0x1,%ebx
-    2d6c:	75 f2                	jne    2d60 <forktest+0x40>
-  if(wait() != -1){
-    2d6e:	e8 18 0c 00 00       	call   398b <wait>
-    2d73:	83 f8 ff             	cmp    $0xffffffff,%eax
-    2d76:	75 2d                	jne    2da5 <forktest+0x85>
-  printf(1, "fork test OK\n");
-    2d78:	83 ec 08             	sub    $0x8,%esp
-    2d7b:	68 4a 4c 00 00       	push   $0x4c4a
-    2d80:	6a 01                	push   $0x1
-    2d82:	e8 79 0d 00 00       	call   3b00 <printf>
-}
-    2d87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    2d8a:	c9                   	leave  
-    2d8b:	c3                   	ret    
-      exit();
-    2d8c:	e8 f2 0b 00 00       	call   3983 <exit>
-      printf(1, "wait stopped early\n");
-    2d91:	83 ec 08             	sub    $0x8,%esp
-    2d94:	68 23 4c 00 00       	push   $0x4c23
-    2d99:	6a 01                	push   $0x1
-    2d9b:	e8 60 0d 00 00       	call   3b00 <printf>
-      exit();
-    2da0:	e8 de 0b 00 00       	call   3983 <exit>
-    printf(1, "wait got too many\n");
-    2da5:	52                   	push   %edx
-    2da6:	52                   	push   %edx
-    2da7:	68 37 4c 00 00       	push   $0x4c37
-    2dac:	6a 01                	push   $0x1
-    2dae:	e8 4d 0d 00 00       	call   3b00 <printf>
-    exit();
-    2db3:	e8 cb 0b 00 00       	call   3983 <exit>
-    printf(1, "fork claimed to work 1000 times!\n");
-    2db8:	50                   	push   %eax
-    2db9:	50                   	push   %eax
-    2dba:	68 b8 53 00 00       	push   $0x53b8
-    2dbf:	6a 01                	push   $0x1
-    2dc1:	e8 3a 0d 00 00       	call   3b00 <printf>
-    exit();
-    2dc6:	e8 b8 0b 00 00       	call   3983 <exit>
-    2dcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    2dcf:	90                   	nop
-
-00002dd0 <sbrktest>:
-{
-    2dd0:	f3 0f 1e fb          	endbr32 
-    2dd4:	55                   	push   %ebp
-    2dd5:	89 e5                	mov    %esp,%ebp
-    2dd7:	57                   	push   %edi
-  for(i = 0; i < 5000; i++){
-    2dd8:	31 ff                	xor    %edi,%edi
-{
-    2dda:	56                   	push   %esi
-    2ddb:	53                   	push   %ebx
-    2ddc:	83 ec 54             	sub    $0x54,%esp
-  printf(stdout, "sbrk test\n");
-    2ddf:	68 58 4c 00 00       	push   $0x4c58
-    2de4:	ff 35 00 5f 00 00    	pushl  0x5f00
-    2dea:	e8 11 0d 00 00       	call   3b00 <printf>
-  oldbrk = sbrk(0);
-    2def:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2df6:	e8 10 0c 00 00       	call   3a0b <sbrk>
-  a = sbrk(0);
-    2dfb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  oldbrk = sbrk(0);
-    2e02:	89 c3                	mov    %eax,%ebx
-  a = sbrk(0);
-    2e04:	e8 02 0c 00 00       	call   3a0b <sbrk>
-    2e09:	83 c4 10             	add    $0x10,%esp
-    2e0c:	89 c6                	mov    %eax,%esi
-  for(i = 0; i < 5000; i++){
-    2e0e:	eb 02                	jmp    2e12 <sbrktest+0x42>
-    a = b + 1;
-    2e10:	89 c6                	mov    %eax,%esi
-    b = sbrk(1);
-    2e12:	83 ec 0c             	sub    $0xc,%esp
-    2e15:	6a 01                	push   $0x1
-    2e17:	e8 ef 0b 00 00       	call   3a0b <sbrk>
-    if(b != a){
-    2e1c:	83 c4 10             	add    $0x10,%esp
-    2e1f:	39 f0                	cmp    %esi,%eax
-    2e21:	0f 85 84 02 00 00    	jne    30ab <sbrktest+0x2db>
-  for(i = 0; i < 5000; i++){
-    2e27:	83 c7 01             	add    $0x1,%edi
-    *b = 1;
-    2e2a:	c6 06 01             	movb   $0x1,(%esi)
-    a = b + 1;
-    2e2d:	8d 46 01             	lea    0x1(%esi),%eax
-  for(i = 0; i < 5000; i++){
-    2e30:	81 ff 88 13 00 00    	cmp    $0x1388,%edi
-    2e36:	75 d8                	jne    2e10 <sbrktest+0x40>
-  pid = fork();
-    2e38:	e8 3e 0b 00 00       	call   397b <fork>
-    2e3d:	89 c7                	mov    %eax,%edi
-  if(pid < 0){
-    2e3f:	85 c0                	test   %eax,%eax
-    2e41:	0f 88 91 03 00 00    	js     31d8 <sbrktest+0x408>
-  c = sbrk(1);
-    2e47:	83 ec 0c             	sub    $0xc,%esp
-  if(c != a + 1){
-    2e4a:	83 c6 02             	add    $0x2,%esi
-  c = sbrk(1);
-    2e4d:	6a 01                	push   $0x1
-    2e4f:	e8 b7 0b 00 00       	call   3a0b <sbrk>
-  c = sbrk(1);
-    2e54:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2e5b:	e8 ab 0b 00 00       	call   3a0b <sbrk>
-  if(c != a + 1){
-    2e60:	83 c4 10             	add    $0x10,%esp
-    2e63:	39 c6                	cmp    %eax,%esi
-    2e65:	0f 85 56 03 00 00    	jne    31c1 <sbrktest+0x3f1>
-  if(pid == 0)
-    2e6b:	85 ff                	test   %edi,%edi
-    2e6d:	0f 84 49 03 00 00    	je     31bc <sbrktest+0x3ec>
-  wait();
-    2e73:	e8 13 0b 00 00       	call   398b <wait>
-  a = sbrk(0);
-    2e78:	83 ec 0c             	sub    $0xc,%esp
-    2e7b:	6a 00                	push   $0x0
-    2e7d:	e8 89 0b 00 00       	call   3a0b <sbrk>
-    2e82:	89 c6                	mov    %eax,%esi
-  amt = (BIG) - (uint)a;
-    2e84:	b8 00 00 40 06       	mov    $0x6400000,%eax
-    2e89:	29 f0                	sub    %esi,%eax
-  p = sbrk(amt);
-    2e8b:	89 04 24             	mov    %eax,(%esp)
-    2e8e:	e8 78 0b 00 00       	call   3a0b <sbrk>
-  if (p != a) {
-    2e93:	83 c4 10             	add    $0x10,%esp
-    2e96:	39 c6                	cmp    %eax,%esi
-    2e98:	0f 85 07 03 00 00    	jne    31a5 <sbrktest+0x3d5>
-  a = sbrk(0);
-    2e9e:	83 ec 0c             	sub    $0xc,%esp
-  *lastaddr = 99;
-    2ea1:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
-  a = sbrk(0);
-    2ea8:	6a 00                	push   $0x0
-    2eaa:	e8 5c 0b 00 00       	call   3a0b <sbrk>
-  c = sbrk(-4096);
-    2eaf:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
-  a = sbrk(0);
-    2eb6:	89 c6                	mov    %eax,%esi
-  c = sbrk(-4096);
-    2eb8:	e8 4e 0b 00 00       	call   3a0b <sbrk>
-  if(c == (char*)0xffffffff){
-    2ebd:	83 c4 10             	add    $0x10,%esp
-    2ec0:	83 f8 ff             	cmp    $0xffffffff,%eax
-    2ec3:	0f 84 c5 02 00 00    	je     318e <sbrktest+0x3be>
-  c = sbrk(0);
-    2ec9:	83 ec 0c             	sub    $0xc,%esp
-    2ecc:	6a 00                	push   $0x0
-    2ece:	e8 38 0b 00 00       	call   3a0b <sbrk>
-  if(c != a - 4096){
-    2ed3:	8d 96 00 f0 ff ff    	lea    -0x1000(%esi),%edx
-    2ed9:	83 c4 10             	add    $0x10,%esp
-    2edc:	39 d0                	cmp    %edx,%eax
-    2ede:	0f 85 93 02 00 00    	jne    3177 <sbrktest+0x3a7>
-  a = sbrk(0);
-    2ee4:	83 ec 0c             	sub    $0xc,%esp
-    2ee7:	6a 00                	push   $0x0
-    2ee9:	e8 1d 0b 00 00       	call   3a0b <sbrk>
-  c = sbrk(4096);
-    2eee:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
-  a = sbrk(0);
-    2ef5:	89 c6                	mov    %eax,%esi
-  c = sbrk(4096);
-    2ef7:	e8 0f 0b 00 00       	call   3a0b <sbrk>
-  if(c != a || sbrk(0) != a + 4096){
-    2efc:	83 c4 10             	add    $0x10,%esp
-  c = sbrk(4096);
-    2eff:	89 c7                	mov    %eax,%edi
-  if(c != a || sbrk(0) != a + 4096){
-    2f01:	39 c6                	cmp    %eax,%esi
-    2f03:	0f 85 57 02 00 00    	jne    3160 <sbrktest+0x390>
-    2f09:	83 ec 0c             	sub    $0xc,%esp
-    2f0c:	6a 00                	push   $0x0
-    2f0e:	e8 f8 0a 00 00       	call   3a0b <sbrk>
-    2f13:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
-    2f19:	83 c4 10             	add    $0x10,%esp
-    2f1c:	39 c2                	cmp    %eax,%edx
-    2f1e:	0f 85 3c 02 00 00    	jne    3160 <sbrktest+0x390>
-  if(*lastaddr == 99){
-    2f24:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
-    2f2b:	0f 84 18 02 00 00    	je     3149 <sbrktest+0x379>
-  a = sbrk(0);
-    2f31:	83 ec 0c             	sub    $0xc,%esp
-    2f34:	6a 00                	push   $0x0
-    2f36:	e8 d0 0a 00 00       	call   3a0b <sbrk>
-  c = sbrk(-(sbrk(0) - oldbrk));
-    2f3b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  a = sbrk(0);
-    2f42:	89 c6                	mov    %eax,%esi
-  c = sbrk(-(sbrk(0) - oldbrk));
-    2f44:	e8 c2 0a 00 00       	call   3a0b <sbrk>
-    2f49:	89 d9                	mov    %ebx,%ecx
-    2f4b:	29 c1                	sub    %eax,%ecx
-    2f4d:	89 0c 24             	mov    %ecx,(%esp)
-    2f50:	e8 b6 0a 00 00       	call   3a0b <sbrk>
-  if(c != a){
-    2f55:	83 c4 10             	add    $0x10,%esp
-    2f58:	39 c6                	cmp    %eax,%esi
-    2f5a:	0f 85 d2 01 00 00    	jne    3132 <sbrktest+0x362>
-  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
-    2f60:	be 00 00 00 80       	mov    $0x80000000,%esi
-    2f65:	8d 76 00             	lea    0x0(%esi),%esi
-    ppid = getpid();
-    2f68:	e8 96 0a 00 00       	call   3a03 <getpid>
-    2f6d:	89 c7                	mov    %eax,%edi
-    pid = fork();
-    2f6f:	e8 07 0a 00 00       	call   397b <fork>
-    if(pid < 0){
-    2f74:	85 c0                	test   %eax,%eax
-    2f76:	0f 88 9e 01 00 00    	js     311a <sbrktest+0x34a>
-    if(pid == 0){
-    2f7c:	0f 84 76 01 00 00    	je     30f8 <sbrktest+0x328>
-    wait();
-    2f82:	e8 04 0a 00 00       	call   398b <wait>
-  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
-    2f87:	81 c6 50 c3 00 00    	add    $0xc350,%esi
-    2f8d:	81 fe 80 84 1e 80    	cmp    $0x801e8480,%esi
-    2f93:	75 d3                	jne    2f68 <sbrktest+0x198>
-  if(pipe(fds) != 0){
-    2f95:	83 ec 0c             	sub    $0xc,%esp
-    2f98:	8d 45 b8             	lea    -0x48(%ebp),%eax
-    2f9b:	50                   	push   %eax
-    2f9c:	e8 f2 09 00 00       	call   3993 <pipe>
-    2fa1:	83 c4 10             	add    $0x10,%esp
-    2fa4:	85 c0                	test   %eax,%eax
-    2fa6:	0f 85 34 01 00 00    	jne    30e0 <sbrktest+0x310>
-    2fac:	8d 75 c0             	lea    -0x40(%ebp),%esi
-    2faf:	89 f7                	mov    %esi,%edi
-    if((pids[i] = fork()) == 0){
-    2fb1:	e8 c5 09 00 00       	call   397b <fork>
-    2fb6:	89 07                	mov    %eax,(%edi)
-    2fb8:	85 c0                	test   %eax,%eax
-    2fba:	0f 84 8f 00 00 00    	je     304f <sbrktest+0x27f>
-    if(pids[i] != -1)
-    2fc0:	83 f8 ff             	cmp    $0xffffffff,%eax
-    2fc3:	74 14                	je     2fd9 <sbrktest+0x209>
-      read(fds[0], &scratch, 1);
-    2fc5:	83 ec 04             	sub    $0x4,%esp
-    2fc8:	8d 45 b7             	lea    -0x49(%ebp),%eax
-    2fcb:	6a 01                	push   $0x1
-    2fcd:	50                   	push   %eax
-    2fce:	ff 75 b8             	pushl  -0x48(%ebp)
-    2fd1:	e8 c5 09 00 00       	call   399b <read>
-    2fd6:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    2fd9:	83 c7 04             	add    $0x4,%edi
-    2fdc:	8d 45 e8             	lea    -0x18(%ebp),%eax
-    2fdf:	39 c7                	cmp    %eax,%edi
-    2fe1:	75 ce                	jne    2fb1 <sbrktest+0x1e1>
-  c = sbrk(4096);
-    2fe3:	83 ec 0c             	sub    $0xc,%esp
-    2fe6:	68 00 10 00 00       	push   $0x1000
-    2feb:	e8 1b 0a 00 00       	call   3a0b <sbrk>
-    2ff0:	83 c4 10             	add    $0x10,%esp
-    2ff3:	89 c7                	mov    %eax,%edi
-    if(pids[i] == -1)
-    2ff5:	8b 06                	mov    (%esi),%eax
-    2ff7:	83 f8 ff             	cmp    $0xffffffff,%eax
-    2ffa:	74 11                	je     300d <sbrktest+0x23d>
-    kill(pids[i]);
-    2ffc:	83 ec 0c             	sub    $0xc,%esp
-    2fff:	50                   	push   %eax
-    3000:	e8 ae 09 00 00       	call   39b3 <kill>
-    wait();
-    3005:	e8 81 09 00 00       	call   398b <wait>
-    300a:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    300d:	83 c6 04             	add    $0x4,%esi
-    3010:	8d 45 e8             	lea    -0x18(%ebp),%eax
-    3013:	39 f0                	cmp    %esi,%eax
-    3015:	75 de                	jne    2ff5 <sbrktest+0x225>
-  if(c == (char*)0xffffffff){
-    3017:	83 ff ff             	cmp    $0xffffffff,%edi
-    301a:	0f 84 a9 00 00 00    	je     30c9 <sbrktest+0x2f9>
-  if(sbrk(0) > oldbrk)
-    3020:	83 ec 0c             	sub    $0xc,%esp
-    3023:	6a 00                	push   $0x0
-    3025:	e8 e1 09 00 00       	call   3a0b <sbrk>
-    302a:	83 c4 10             	add    $0x10,%esp
-    302d:	39 c3                	cmp    %eax,%ebx
-    302f:	72 61                	jb     3092 <sbrktest+0x2c2>
-  printf(stdout, "sbrk test OK\n");
-    3031:	83 ec 08             	sub    $0x8,%esp
-    3034:	68 00 4d 00 00       	push   $0x4d00
-    3039:	ff 35 00 5f 00 00    	pushl  0x5f00
-    303f:	e8 bc 0a 00 00       	call   3b00 <printf>
-}
-    3044:	83 c4 10             	add    $0x10,%esp
-    3047:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    304a:	5b                   	pop    %ebx
-    304b:	5e                   	pop    %esi
-    304c:	5f                   	pop    %edi
-    304d:	5d                   	pop    %ebp
-    304e:	c3                   	ret    
-      sbrk(BIG - (uint)sbrk(0));
-    304f:	83 ec 0c             	sub    $0xc,%esp
-    3052:	6a 00                	push   $0x0
-    3054:	e8 b2 09 00 00       	call   3a0b <sbrk>
-    3059:	89 c2                	mov    %eax,%edx
-    305b:	b8 00 00 40 06       	mov    $0x6400000,%eax
-    3060:	29 d0                	sub    %edx,%eax
-    3062:	89 04 24             	mov    %eax,(%esp)
-    3065:	e8 a1 09 00 00       	call   3a0b <sbrk>
-      write(fds[1], "x", 1);
-    306a:	83 c4 0c             	add    $0xc,%esp
-    306d:	6a 01                	push   $0x1
-    306f:	68 c1 47 00 00       	push   $0x47c1
-    3074:	ff 75 bc             	pushl  -0x44(%ebp)
-    3077:	e8 27 09 00 00       	call   39a3 <write>
-    307c:	83 c4 10             	add    $0x10,%esp
-    307f:	90                   	nop
-      for(;;) sleep(1000);
-    3080:	83 ec 0c             	sub    $0xc,%esp
-    3083:	68 e8 03 00 00       	push   $0x3e8
-    3088:	e8 86 09 00 00       	call   3a13 <sleep>
-    308d:	83 c4 10             	add    $0x10,%esp
-    3090:	eb ee                	jmp    3080 <sbrktest+0x2b0>
-    sbrk(-(sbrk(0) - oldbrk));
-    3092:	83 ec 0c             	sub    $0xc,%esp
-    3095:	6a 00                	push   $0x0
-    3097:	e8 6f 09 00 00       	call   3a0b <sbrk>
-    309c:	29 c3                	sub    %eax,%ebx
-    309e:	89 1c 24             	mov    %ebx,(%esp)
-    30a1:	e8 65 09 00 00       	call   3a0b <sbrk>
-    30a6:	83 c4 10             	add    $0x10,%esp
-    30a9:	eb 86                	jmp    3031 <sbrktest+0x261>
-      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
-    30ab:	83 ec 0c             	sub    $0xc,%esp
-    30ae:	50                   	push   %eax
-    30af:	56                   	push   %esi
-    30b0:	57                   	push   %edi
-    30b1:	68 63 4c 00 00       	push   $0x4c63
-    30b6:	ff 35 00 5f 00 00    	pushl  0x5f00
-    30bc:	e8 3f 0a 00 00       	call   3b00 <printf>
-      exit();
-    30c1:	83 c4 20             	add    $0x20,%esp
-    30c4:	e8 ba 08 00 00       	call   3983 <exit>
-    printf(stdout, "failed sbrk leaked memory\n");
-    30c9:	50                   	push   %eax
-    30ca:	50                   	push   %eax
-    30cb:	68 e5 4c 00 00       	push   $0x4ce5
-    30d0:	ff 35 00 5f 00 00    	pushl  0x5f00
-    30d6:	e8 25 0a 00 00       	call   3b00 <printf>
-    exit();
-    30db:	e8 a3 08 00 00       	call   3983 <exit>
-    printf(1, "pipe() failed\n");
-    30e0:	52                   	push   %edx
-    30e1:	52                   	push   %edx
-    30e2:	68 a1 41 00 00       	push   $0x41a1
-    30e7:	6a 01                	push   $0x1
-    30e9:	e8 12 0a 00 00       	call   3b00 <printf>
-    exit();
-    30ee:	e8 90 08 00 00       	call   3983 <exit>
-    30f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    30f7:	90                   	nop
-      printf(stdout, "oops could read %x = %x\n", a, *a);
-    30f8:	0f be 06             	movsbl (%esi),%eax
-    30fb:	50                   	push   %eax
-    30fc:	56                   	push   %esi
-    30fd:	68 cc 4c 00 00       	push   $0x4ccc
-    3102:	ff 35 00 5f 00 00    	pushl  0x5f00
-    3108:	e8 f3 09 00 00       	call   3b00 <printf>
-      kill(ppid);
-    310d:	89 3c 24             	mov    %edi,(%esp)
-    3110:	e8 9e 08 00 00       	call   39b3 <kill>
-      exit();
-    3115:	e8 69 08 00 00       	call   3983 <exit>
-      printf(stdout, "fork failed\n");
-    311a:	83 ec 08             	sub    $0x8,%esp
-    311d:	68 a9 4d 00 00       	push   $0x4da9
-    3122:	ff 35 00 5f 00 00    	pushl  0x5f00
-    3128:	e8 d3 09 00 00       	call   3b00 <printf>
-      exit();
-    312d:	e8 51 08 00 00       	call   3983 <exit>
-    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
-    3132:	50                   	push   %eax
-    3133:	56                   	push   %esi
-    3134:	68 ac 54 00 00       	push   $0x54ac
-    3139:	ff 35 00 5f 00 00    	pushl  0x5f00
-    313f:	e8 bc 09 00 00       	call   3b00 <printf>
-    exit();
-    3144:	e8 3a 08 00 00       	call   3983 <exit>
-    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
-    3149:	51                   	push   %ecx
-    314a:	51                   	push   %ecx
-    314b:	68 7c 54 00 00       	push   $0x547c
-    3150:	ff 35 00 5f 00 00    	pushl  0x5f00
-    3156:	e8 a5 09 00 00       	call   3b00 <printf>
-    exit();
-    315b:	e8 23 08 00 00       	call   3983 <exit>
-    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
-    3160:	57                   	push   %edi
-    3161:	56                   	push   %esi
-    3162:	68 54 54 00 00       	push   $0x5454
-    3167:	ff 35 00 5f 00 00    	pushl  0x5f00
-    316d:	e8 8e 09 00 00       	call   3b00 <printf>
-    exit();
-    3172:	e8 0c 08 00 00       	call   3983 <exit>
-    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
-    3177:	50                   	push   %eax
-    3178:	56                   	push   %esi
-    3179:	68 1c 54 00 00       	push   $0x541c
-    317e:	ff 35 00 5f 00 00    	pushl  0x5f00
-    3184:	e8 77 09 00 00       	call   3b00 <printf>
-    exit();
-    3189:	e8 f5 07 00 00       	call   3983 <exit>
-    printf(stdout, "sbrk could not deallocate\n");
-    318e:	53                   	push   %ebx
-    318f:	53                   	push   %ebx
-    3190:	68 b1 4c 00 00       	push   $0x4cb1
-    3195:	ff 35 00 5f 00 00    	pushl  0x5f00
-    319b:	e8 60 09 00 00       	call   3b00 <printf>
-    exit();
-    31a0:	e8 de 07 00 00       	call   3983 <exit>
-    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
-    31a5:	56                   	push   %esi
-    31a6:	56                   	push   %esi
-    31a7:	68 dc 53 00 00       	push   $0x53dc
-    31ac:	ff 35 00 5f 00 00    	pushl  0x5f00
-    31b2:	e8 49 09 00 00       	call   3b00 <printf>
-    exit();
-    31b7:	e8 c7 07 00 00       	call   3983 <exit>
-    exit();
-    31bc:	e8 c2 07 00 00       	call   3983 <exit>
-    printf(stdout, "sbrk test failed post-fork\n");
-    31c1:	57                   	push   %edi
-    31c2:	57                   	push   %edi
-    31c3:	68 95 4c 00 00       	push   $0x4c95
-    31c8:	ff 35 00 5f 00 00    	pushl  0x5f00
-    31ce:	e8 2d 09 00 00       	call   3b00 <printf>
-    exit();
-    31d3:	e8 ab 07 00 00       	call   3983 <exit>
-    printf(stdout, "sbrk test fork failed\n");
-    31d8:	50                   	push   %eax
-    31d9:	50                   	push   %eax
-    31da:	68 7e 4c 00 00       	push   $0x4c7e
-    31df:	ff 35 00 5f 00 00    	pushl  0x5f00
-    31e5:	e8 16 09 00 00       	call   3b00 <printf>
-    exit();
-    31ea:	e8 94 07 00 00       	call   3983 <exit>
-    31ef:	90                   	nop
-
-000031f0 <validateint>:
-{
-    31f0:	f3 0f 1e fb          	endbr32 
-}
-    31f4:	c3                   	ret    
-    31f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    31fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00003200 <validatetest>:
-{
-    3200:	f3 0f 1e fb          	endbr32 
-    3204:	55                   	push   %ebp
-    3205:	89 e5                	mov    %esp,%ebp
-    3207:	56                   	push   %esi
-  for(p = 0; p <= (uint)hi; p += 4096){
-    3208:	31 f6                	xor    %esi,%esi
-{
-    320a:	53                   	push   %ebx
-  printf(stdout, "validate test\n");
-    320b:	83 ec 08             	sub    $0x8,%esp
-    320e:	68 0e 4d 00 00       	push   $0x4d0e
-    3213:	ff 35 00 5f 00 00    	pushl  0x5f00
-    3219:	e8 e2 08 00 00       	call   3b00 <printf>
-    321e:	83 c4 10             	add    $0x10,%esp
-    3221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if((pid = fork()) == 0){
-    3228:	e8 4e 07 00 00       	call   397b <fork>
-    322d:	89 c3                	mov    %eax,%ebx
-    322f:	85 c0                	test   %eax,%eax
-    3231:	74 63                	je     3296 <validatetest+0x96>
-    sleep(0);
-    3233:	83 ec 0c             	sub    $0xc,%esp
-    3236:	6a 00                	push   $0x0
-    3238:	e8 d6 07 00 00       	call   3a13 <sleep>
-    sleep(0);
-    323d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    3244:	e8 ca 07 00 00       	call   3a13 <sleep>
-    kill(pid);
-    3249:	89 1c 24             	mov    %ebx,(%esp)
-    324c:	e8 62 07 00 00       	call   39b3 <kill>
-    wait();
-    3251:	e8 35 07 00 00       	call   398b <wait>
-    if(link("nosuchfile", (char*)p) != -1){
-    3256:	58                   	pop    %eax
-    3257:	5a                   	pop    %edx
-    3258:	56                   	push   %esi
-    3259:	68 1d 4d 00 00       	push   $0x4d1d
-    325e:	e8 80 07 00 00       	call   39e3 <link>
-    3263:	83 c4 10             	add    $0x10,%esp
-    3266:	83 f8 ff             	cmp    $0xffffffff,%eax
-    3269:	75 30                	jne    329b <validatetest+0x9b>
-  for(p = 0; p <= (uint)hi; p += 4096){
-    326b:	81 c6 00 10 00 00    	add    $0x1000,%esi
-    3271:	81 fe 00 40 11 00    	cmp    $0x114000,%esi
-    3277:	75 af                	jne    3228 <validatetest+0x28>
-  printf(stdout, "validate ok\n");
-    3279:	83 ec 08             	sub    $0x8,%esp
-    327c:	68 41 4d 00 00       	push   $0x4d41
-    3281:	ff 35 00 5f 00 00    	pushl  0x5f00
-    3287:	e8 74 08 00 00       	call   3b00 <printf>
-}
-    328c:	83 c4 10             	add    $0x10,%esp
-    328f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    3292:	5b                   	pop    %ebx
-    3293:	5e                   	pop    %esi
-    3294:	5d                   	pop    %ebp
-    3295:	c3                   	ret    
-      exit();
-    3296:	e8 e8 06 00 00       	call   3983 <exit>
-      printf(stdout, "link should not succeed\n");
-    329b:	83 ec 08             	sub    $0x8,%esp
-    329e:	68 28 4d 00 00       	push   $0x4d28
-    32a3:	ff 35 00 5f 00 00    	pushl  0x5f00
-    32a9:	e8 52 08 00 00       	call   3b00 <printf>
-      exit();
-    32ae:	e8 d0 06 00 00       	call   3983 <exit>
-    32b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    32ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000032c0 <bsstest>:
-{
-    32c0:	f3 0f 1e fb          	endbr32 
-    32c4:	55                   	push   %ebp
-    32c5:	89 e5                	mov    %esp,%ebp
-    32c7:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "bss test\n");
-    32ca:	68 4e 4d 00 00       	push   $0x4d4e
-    32cf:	ff 35 00 5f 00 00    	pushl  0x5f00
-    32d5:	e8 26 08 00 00       	call   3b00 <printf>
-    32da:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; i < sizeof(uninit); i++){
-    32dd:	31 c0                	xor    %eax,%eax
-    32df:	90                   	nop
-    if(uninit[i] != '\0'){
-    32e0:	80 b8 c0 5f 00 00 00 	cmpb   $0x0,0x5fc0(%eax)
-    32e7:	75 22                	jne    330b <bsstest+0x4b>
-  for(i = 0; i < sizeof(uninit); i++){
-    32e9:	83 c0 01             	add    $0x1,%eax
-    32ec:	3d 10 27 00 00       	cmp    $0x2710,%eax
-    32f1:	75 ed                	jne    32e0 <bsstest+0x20>
-  printf(stdout, "bss test ok\n");
-    32f3:	83 ec 08             	sub    $0x8,%esp
-    32f6:	68 69 4d 00 00       	push   $0x4d69
-    32fb:	ff 35 00 5f 00 00    	pushl  0x5f00
-    3301:	e8 fa 07 00 00       	call   3b00 <printf>
-}
-    3306:	83 c4 10             	add    $0x10,%esp
-    3309:	c9                   	leave  
-    330a:	c3                   	ret    
-      printf(stdout, "bss test failed\n");
-    330b:	83 ec 08             	sub    $0x8,%esp
-    330e:	68 58 4d 00 00       	push   $0x4d58
-    3313:	ff 35 00 5f 00 00    	pushl  0x5f00
-    3319:	e8 e2 07 00 00       	call   3b00 <printf>
-      exit();
-    331e:	e8 60 06 00 00       	call   3983 <exit>
-    3323:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    332a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00003330 <bigargtest>:
-{
-    3330:	f3 0f 1e fb          	endbr32 
-    3334:	55                   	push   %ebp
-    3335:	89 e5                	mov    %esp,%ebp
-    3337:	83 ec 14             	sub    $0x14,%esp
-  unlink("bigarg-ok");
-    333a:	68 76 4d 00 00       	push   $0x4d76
-    333f:	e8 8f 06 00 00       	call   39d3 <unlink>
-  pid = fork();
-    3344:	e8 32 06 00 00       	call   397b <fork>
-  if(pid == 0){
-    3349:	83 c4 10             	add    $0x10,%esp
-    334c:	85 c0                	test   %eax,%eax
-    334e:	74 40                	je     3390 <bigargtest+0x60>
-  } else if(pid < 0){
-    3350:	0f 88 c1 00 00 00    	js     3417 <bigargtest+0xe7>
-  wait();
-    3356:	e8 30 06 00 00       	call   398b <wait>
-  fd = open("bigarg-ok", 0);
-    335b:	83 ec 08             	sub    $0x8,%esp
-    335e:	6a 00                	push   $0x0
-    3360:	68 76 4d 00 00       	push   $0x4d76
-    3365:	e8 59 06 00 00       	call   39c3 <open>
-  if(fd < 0){
-    336a:	83 c4 10             	add    $0x10,%esp
-    336d:	85 c0                	test   %eax,%eax
-    336f:	0f 88 8b 00 00 00    	js     3400 <bigargtest+0xd0>
-  close(fd);
-    3375:	83 ec 0c             	sub    $0xc,%esp
-    3378:	50                   	push   %eax
-    3379:	e8 2d 06 00 00       	call   39ab <close>
-  unlink("bigarg-ok");
-    337e:	c7 04 24 76 4d 00 00 	movl   $0x4d76,(%esp)
-    3385:	e8 49 06 00 00       	call   39d3 <unlink>
-}
-    338a:	83 c4 10             	add    $0x10,%esp
-    338d:	c9                   	leave  
-    338e:	c3                   	ret    
-    338f:	90                   	nop
-      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
-    3390:	c7 04 85 20 5f 00 00 	movl   $0x54d0,0x5f20(,%eax,4)
-    3397:	d0 54 00 00 
-    for(i = 0; i < MAXARG-1; i++)
-    339b:	83 c0 01             	add    $0x1,%eax
-    339e:	83 f8 1f             	cmp    $0x1f,%eax
-    33a1:	75 ed                	jne    3390 <bigargtest+0x60>
-    printf(stdout, "bigarg test\n");
-    33a3:	51                   	push   %ecx
-    33a4:	51                   	push   %ecx
-    33a5:	68 80 4d 00 00       	push   $0x4d80
-    33aa:	ff 35 00 5f 00 00    	pushl  0x5f00
-    args[MAXARG-1] = 0;
-    33b0:	c7 05 9c 5f 00 00 00 	movl   $0x0,0x5f9c
-    33b7:	00 00 00 
-    printf(stdout, "bigarg test\n");
-    33ba:	e8 41 07 00 00       	call   3b00 <printf>
-    exec("echo", args);
-    33bf:	58                   	pop    %eax
-    33c0:	5a                   	pop    %edx
-    33c1:	68 20 5f 00 00       	push   $0x5f20
-    33c6:	68 4d 3f 00 00       	push   $0x3f4d
-    33cb:	e8 eb 05 00 00       	call   39bb <exec>
-    printf(stdout, "bigarg test ok\n");
-    33d0:	59                   	pop    %ecx
-    33d1:	58                   	pop    %eax
-    33d2:	68 8d 4d 00 00       	push   $0x4d8d
-    33d7:	ff 35 00 5f 00 00    	pushl  0x5f00
-    33dd:	e8 1e 07 00 00       	call   3b00 <printf>
-    fd = open("bigarg-ok", O_CREATE);
-    33e2:	58                   	pop    %eax
-    33e3:	5a                   	pop    %edx
-    33e4:	68 00 02 00 00       	push   $0x200
-    33e9:	68 76 4d 00 00       	push   $0x4d76
-    33ee:	e8 d0 05 00 00       	call   39c3 <open>
-    close(fd);
-    33f3:	89 04 24             	mov    %eax,(%esp)
-    33f6:	e8 b0 05 00 00       	call   39ab <close>
-    exit();
-    33fb:	e8 83 05 00 00       	call   3983 <exit>
-    printf(stdout, "bigarg test failed!\n");
-    3400:	50                   	push   %eax
-    3401:	50                   	push   %eax
-    3402:	68 b6 4d 00 00       	push   $0x4db6
-    3407:	ff 35 00 5f 00 00    	pushl  0x5f00
-    340d:	e8 ee 06 00 00       	call   3b00 <printf>
-    exit();
-    3412:	e8 6c 05 00 00       	call   3983 <exit>
-    printf(stdout, "bigargtest: fork failed\n");
-    3417:	52                   	push   %edx
-    3418:	52                   	push   %edx
-    3419:	68 9d 4d 00 00       	push   $0x4d9d
-    341e:	ff 35 00 5f 00 00    	pushl  0x5f00
-    3424:	e8 d7 06 00 00       	call   3b00 <printf>
-    exit();
-    3429:	e8 55 05 00 00       	call   3983 <exit>
-    342e:	66 90                	xchg   %ax,%ax
-
-00003430 <fsfull>:
-{
-    3430:	f3 0f 1e fb          	endbr32 
-    3434:	55                   	push   %ebp
-    3435:	89 e5                	mov    %esp,%ebp
-    3437:	57                   	push   %edi
-    3438:	56                   	push   %esi
-  for(nfiles = 0; ; nfiles++){
-    3439:	31 f6                	xor    %esi,%esi
-{
-    343b:	53                   	push   %ebx
-    343c:	83 ec 54             	sub    $0x54,%esp
-  printf(1, "fsfull test\n");
-    343f:	68 cb 4d 00 00       	push   $0x4dcb
-    3444:	6a 01                	push   $0x1
-    3446:	e8 b5 06 00 00       	call   3b00 <printf>
-    344b:	83 c4 10             	add    $0x10,%esp
-    344e:	66 90                	xchg   %ax,%ax
-    name[1] = '0' + nfiles / 1000;
-    3450:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
-    name[3] = '0' + (nfiles % 100) / 10;
-    3455:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
-    printf(1, "writing %s\n", name);
-    345a:	83 ec 04             	sub    $0x4,%esp
-    name[0] = 'f';
-    345d:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
-    name[1] = '0' + nfiles / 1000;
-    3461:	f7 e6                	mul    %esi
-    name[5] = '\0';
-    3463:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
-    name[1] = '0' + nfiles / 1000;
-    3467:	c1 ea 06             	shr    $0x6,%edx
-    346a:	8d 42 30             	lea    0x30(%edx),%eax
-    name[2] = '0' + (nfiles % 1000) / 100;
-    346d:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
-    name[1] = '0' + nfiles / 1000;
-    3473:	88 45 a9             	mov    %al,-0x57(%ebp)
-    name[2] = '0' + (nfiles % 1000) / 100;
-    3476:	89 f0                	mov    %esi,%eax
-    3478:	29 d0                	sub    %edx,%eax
-    347a:	89 c2                	mov    %eax,%edx
-    347c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
-    3481:	f7 e2                	mul    %edx
-    name[3] = '0' + (nfiles % 100) / 10;
-    3483:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
-    name[2] = '0' + (nfiles % 1000) / 100;
-    3488:	c1 ea 05             	shr    $0x5,%edx
-    348b:	83 c2 30             	add    $0x30,%edx
-    348e:	88 55 aa             	mov    %dl,-0x56(%ebp)
-    name[3] = '0' + (nfiles % 100) / 10;
-    3491:	f7 e6                	mul    %esi
-    3493:	89 f0                	mov    %esi,%eax
-    3495:	c1 ea 05             	shr    $0x5,%edx
-    3498:	6b d2 64             	imul   $0x64,%edx,%edx
-    349b:	29 d0                	sub    %edx,%eax
-    349d:	f7 e1                	mul    %ecx
-    name[4] = '0' + (nfiles % 10);
-    349f:	89 f0                	mov    %esi,%eax
-    name[3] = '0' + (nfiles % 100) / 10;
-    34a1:	c1 ea 03             	shr    $0x3,%edx
-    34a4:	83 c2 30             	add    $0x30,%edx
-    34a7:	88 55 ab             	mov    %dl,-0x55(%ebp)
-    name[4] = '0' + (nfiles % 10);
-    34aa:	f7 e1                	mul    %ecx
-    34ac:	89 f1                	mov    %esi,%ecx
-    34ae:	c1 ea 03             	shr    $0x3,%edx
-    34b1:	8d 04 92             	lea    (%edx,%edx,4),%eax
-    34b4:	01 c0                	add    %eax,%eax
-    34b6:	29 c1                	sub    %eax,%ecx
-    34b8:	89 c8                	mov    %ecx,%eax
-    34ba:	83 c0 30             	add    $0x30,%eax
-    34bd:	88 45 ac             	mov    %al,-0x54(%ebp)
-    printf(1, "writing %s\n", name);
-    34c0:	8d 45 a8             	lea    -0x58(%ebp),%eax
-    34c3:	50                   	push   %eax
-    34c4:	68 d8 4d 00 00       	push   $0x4dd8
-    34c9:	6a 01                	push   $0x1
-    34cb:	e8 30 06 00 00       	call   3b00 <printf>
-    int fd = open(name, O_CREATE|O_RDWR);
-    34d0:	58                   	pop    %eax
-    34d1:	8d 45 a8             	lea    -0x58(%ebp),%eax
-    34d4:	5a                   	pop    %edx
-    34d5:	68 02 02 00 00       	push   $0x202
-    34da:	50                   	push   %eax
-    34db:	e8 e3 04 00 00       	call   39c3 <open>
-    if(fd < 0){
-    34e0:	83 c4 10             	add    $0x10,%esp
-    int fd = open(name, O_CREATE|O_RDWR);
-    34e3:	89 c7                	mov    %eax,%edi
-    if(fd < 0){
-    34e5:	85 c0                	test   %eax,%eax
-    34e7:	78 4d                	js     3536 <fsfull+0x106>
-    int total = 0;
-    34e9:	31 db                	xor    %ebx,%ebx
-    34eb:	eb 05                	jmp    34f2 <fsfull+0xc2>
-    34ed:	8d 76 00             	lea    0x0(%esi),%esi
-      total += cc;
-    34f0:	01 c3                	add    %eax,%ebx
-      int cc = write(fd, buf, 512);
-    34f2:	83 ec 04             	sub    $0x4,%esp
-    34f5:	68 00 02 00 00       	push   $0x200
-    34fa:	68 e0 86 00 00       	push   $0x86e0
-    34ff:	57                   	push   %edi
-    3500:	e8 9e 04 00 00       	call   39a3 <write>
-      if(cc < 512)
-    3505:	83 c4 10             	add    $0x10,%esp
-    3508:	3d ff 01 00 00       	cmp    $0x1ff,%eax
-    350d:	7f e1                	jg     34f0 <fsfull+0xc0>
-    printf(1, "wrote %d bytes\n", total);
-    350f:	83 ec 04             	sub    $0x4,%esp
-    3512:	53                   	push   %ebx
-    3513:	68 f4 4d 00 00       	push   $0x4df4
-    3518:	6a 01                	push   $0x1
-    351a:	e8 e1 05 00 00       	call   3b00 <printf>
-    close(fd);
-    351f:	89 3c 24             	mov    %edi,(%esp)
-    3522:	e8 84 04 00 00       	call   39ab <close>
-    if(total == 0)
-    3527:	83 c4 10             	add    $0x10,%esp
-    352a:	85 db                	test   %ebx,%ebx
-    352c:	74 1e                	je     354c <fsfull+0x11c>
-  for(nfiles = 0; ; nfiles++){
-    352e:	83 c6 01             	add    $0x1,%esi
-    3531:	e9 1a ff ff ff       	jmp    3450 <fsfull+0x20>
-      printf(1, "open %s failed\n", name);
-    3536:	83 ec 04             	sub    $0x4,%esp
-    3539:	8d 45 a8             	lea    -0x58(%ebp),%eax
-    353c:	50                   	push   %eax
-    353d:	68 e4 4d 00 00       	push   $0x4de4
-    3542:	6a 01                	push   $0x1
-    3544:	e8 b7 05 00 00       	call   3b00 <printf>
-      break;
-    3549:	83 c4 10             	add    $0x10,%esp
-    name[1] = '0' + nfiles / 1000;
-    354c:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
-    name[2] = '0' + (nfiles % 1000) / 100;
-    3551:	bb 1f 85 eb 51       	mov    $0x51eb851f,%ebx
-    3556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    355d:	8d 76 00             	lea    0x0(%esi),%esi
-    name[1] = '0' + nfiles / 1000;
-    3560:	89 f0                	mov    %esi,%eax
-    3562:	89 f1                	mov    %esi,%ecx
-    unlink(name);
-    3564:	83 ec 0c             	sub    $0xc,%esp
-    name[0] = 'f';
-    3567:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
-    name[1] = '0' + nfiles / 1000;
-    356b:	f7 ef                	imul   %edi
-    356d:	c1 f9 1f             	sar    $0x1f,%ecx
-    name[5] = '\0';
-    3570:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
-    name[1] = '0' + nfiles / 1000;
-    3574:	c1 fa 06             	sar    $0x6,%edx
-    3577:	29 ca                	sub    %ecx,%edx
-    3579:	8d 42 30             	lea    0x30(%edx),%eax
-    name[2] = '0' + (nfiles % 1000) / 100;
-    357c:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
-    name[1] = '0' + nfiles / 1000;
-    3582:	88 45 a9             	mov    %al,-0x57(%ebp)
-    name[2] = '0' + (nfiles % 1000) / 100;
-    3585:	89 f0                	mov    %esi,%eax
-    3587:	29 d0                	sub    %edx,%eax
-    3589:	f7 e3                	mul    %ebx
-    name[3] = '0' + (nfiles % 100) / 10;
-    358b:	89 f0                	mov    %esi,%eax
-    name[2] = '0' + (nfiles % 1000) / 100;
-    358d:	c1 ea 05             	shr    $0x5,%edx
-    3590:	83 c2 30             	add    $0x30,%edx
-    3593:	88 55 aa             	mov    %dl,-0x56(%ebp)
-    name[3] = '0' + (nfiles % 100) / 10;
-    3596:	f7 eb                	imul   %ebx
-    3598:	89 f0                	mov    %esi,%eax
-    359a:	c1 fa 05             	sar    $0x5,%edx
-    359d:	29 ca                	sub    %ecx,%edx
-    359f:	6b d2 64             	imul   $0x64,%edx,%edx
-    35a2:	29 d0                	sub    %edx,%eax
-    35a4:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
-    35a9:	f7 e2                	mul    %edx
-    name[4] = '0' + (nfiles % 10);
-    35ab:	89 f0                	mov    %esi,%eax
-    name[3] = '0' + (nfiles % 100) / 10;
-    35ad:	c1 ea 03             	shr    $0x3,%edx
-    35b0:	83 c2 30             	add    $0x30,%edx
-    35b3:	88 55 ab             	mov    %dl,-0x55(%ebp)
-    name[4] = '0' + (nfiles % 10);
-    35b6:	ba 67 66 66 66       	mov    $0x66666667,%edx
-    35bb:	f7 ea                	imul   %edx
-    35bd:	c1 fa 02             	sar    $0x2,%edx
-    35c0:	29 ca                	sub    %ecx,%edx
-    35c2:	89 f1                	mov    %esi,%ecx
-    nfiles--;
-    35c4:	83 ee 01             	sub    $0x1,%esi
-    name[4] = '0' + (nfiles % 10);
-    35c7:	8d 04 92             	lea    (%edx,%edx,4),%eax
-    35ca:	01 c0                	add    %eax,%eax
-    35cc:	29 c1                	sub    %eax,%ecx
-    35ce:	89 c8                	mov    %ecx,%eax
-    35d0:	83 c0 30             	add    $0x30,%eax
-    35d3:	88 45 ac             	mov    %al,-0x54(%ebp)
-    unlink(name);
-    35d6:	8d 45 a8             	lea    -0x58(%ebp),%eax
-    35d9:	50                   	push   %eax
-    35da:	e8 f4 03 00 00       	call   39d3 <unlink>
-  while(nfiles >= 0){
-    35df:	83 c4 10             	add    $0x10,%esp
-    35e2:	83 fe ff             	cmp    $0xffffffff,%esi
-    35e5:	0f 85 75 ff ff ff    	jne    3560 <fsfull+0x130>
-  printf(1, "fsfull test finished\n");
-    35eb:	83 ec 08             	sub    $0x8,%esp
-    35ee:	68 04 4e 00 00       	push   $0x4e04
-    35f3:	6a 01                	push   $0x1
-    35f5:	e8 06 05 00 00       	call   3b00 <printf>
-}
-    35fa:	83 c4 10             	add    $0x10,%esp
-    35fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    3600:	5b                   	pop    %ebx
-    3601:	5e                   	pop    %esi
-    3602:	5f                   	pop    %edi
-    3603:	5d                   	pop    %ebp
-    3604:	c3                   	ret    
-    3605:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    360c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00003610 <uio>:
-{
-    3610:	f3 0f 1e fb          	endbr32 
-    3614:	55                   	push   %ebp
-    3615:	89 e5                	mov    %esp,%ebp
-    3617:	83 ec 10             	sub    $0x10,%esp
-  printf(1, "uio test\n");
-    361a:	68 1a 4e 00 00       	push   $0x4e1a
-    361f:	6a 01                	push   $0x1
-    3621:	e8 da 04 00 00       	call   3b00 <printf>
-  pid = fork();
-    3626:	e8 50 03 00 00       	call   397b <fork>
-  if(pid == 0){
-    362b:	83 c4 10             	add    $0x10,%esp
-    362e:	85 c0                	test   %eax,%eax
-    3630:	74 1b                	je     364d <uio+0x3d>
-  } else if(pid < 0){
-    3632:	78 3d                	js     3671 <uio+0x61>
-  wait();
-    3634:	e8 52 03 00 00       	call   398b <wait>
-  printf(1, "uio test done\n");
-    3639:	83 ec 08             	sub    $0x8,%esp
-    363c:	68 24 4e 00 00       	push   $0x4e24
-    3641:	6a 01                	push   $0x1
-    3643:	e8 b8 04 00 00       	call   3b00 <printf>
-}
-    3648:	83 c4 10             	add    $0x10,%esp
-    364b:	c9                   	leave  
-    364c:	c3                   	ret    
-    asm volatile("outb %0,%1"::"a"(val), "d" (port));
-    364d:	b8 09 00 00 00       	mov    $0x9,%eax
-    3652:	ba 70 00 00 00       	mov    $0x70,%edx
-    3657:	ee                   	out    %al,(%dx)
-    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
-    3658:	ba 71 00 00 00       	mov    $0x71,%edx
-    365d:	ec                   	in     (%dx),%al
-    printf(1, "uio: uio succeeded; test FAILED\n");
-    365e:	52                   	push   %edx
-    365f:	52                   	push   %edx
-    3660:	68 b0 55 00 00       	push   $0x55b0
-    3665:	6a 01                	push   $0x1
-    3667:	e8 94 04 00 00       	call   3b00 <printf>
-    exit();
-    366c:	e8 12 03 00 00       	call   3983 <exit>
-    printf (1, "fork failed\n");
-    3671:	50                   	push   %eax
-    3672:	50                   	push   %eax
-    3673:	68 a9 4d 00 00       	push   $0x4da9
-    3678:	6a 01                	push   $0x1
-    367a:	e8 81 04 00 00       	call   3b00 <printf>
-    exit();
-    367f:	e8 ff 02 00 00       	call   3983 <exit>
-    3684:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    368b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    368f:	90                   	nop
-
-00003690 <argptest>:
-{
-    3690:	f3 0f 1e fb          	endbr32 
-    3694:	55                   	push   %ebp
-    3695:	89 e5                	mov    %esp,%ebp
-    3697:	53                   	push   %ebx
-    3698:	83 ec 0c             	sub    $0xc,%esp
-  fd = open("init", O_RDONLY);
-    369b:	6a 00                	push   $0x0
-    369d:	68 33 4e 00 00       	push   $0x4e33
-    36a2:	e8 1c 03 00 00       	call   39c3 <open>
-  if (fd < 0) {
-    36a7:	83 c4 10             	add    $0x10,%esp
-    36aa:	85 c0                	test   %eax,%eax
-    36ac:	78 39                	js     36e7 <argptest+0x57>
-  read(fd, sbrk(0) - 1, -1);
-    36ae:	83 ec 0c             	sub    $0xc,%esp
-    36b1:	89 c3                	mov    %eax,%ebx
-    36b3:	6a 00                	push   $0x0
-    36b5:	e8 51 03 00 00       	call   3a0b <sbrk>
-    36ba:	83 c4 0c             	add    $0xc,%esp
-    36bd:	83 e8 01             	sub    $0x1,%eax
-    36c0:	6a ff                	push   $0xffffffff
-    36c2:	50                   	push   %eax
-    36c3:	53                   	push   %ebx
-    36c4:	e8 d2 02 00 00       	call   399b <read>
-  close(fd);
-    36c9:	89 1c 24             	mov    %ebx,(%esp)
-    36cc:	e8 da 02 00 00       	call   39ab <close>
-  printf(1, "arg test passed\n");
-    36d1:	58                   	pop    %eax
-    36d2:	5a                   	pop    %edx
-    36d3:	68 45 4e 00 00       	push   $0x4e45
-    36d8:	6a 01                	push   $0x1
-    36da:	e8 21 04 00 00       	call   3b00 <printf>
-}
-    36df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    36e2:	83 c4 10             	add    $0x10,%esp
-    36e5:	c9                   	leave  
-    36e6:	c3                   	ret    
-    printf(2, "open failed\n");
-    36e7:	51                   	push   %ecx
-    36e8:	51                   	push   %ecx
-    36e9:	68 38 4e 00 00       	push   $0x4e38
-    36ee:	6a 02                	push   $0x2
-    36f0:	e8 0b 04 00 00       	call   3b00 <printf>
-    exit();
-    36f5:	e8 89 02 00 00       	call   3983 <exit>
-    36fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00003700 <rand>:
-{
-    3700:	f3 0f 1e fb          	endbr32 
-  randstate = randstate * 1664525 + 1013904223;
-    3704:	69 05 fc 5e 00 00 0d 	imul   $0x19660d,0x5efc,%eax
-    370b:	66 19 00 
-    370e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
-    3713:	a3 fc 5e 00 00       	mov    %eax,0x5efc
-}
-    3718:	c3                   	ret    
-    3719:	66 90                	xchg   %ax,%ax
-    371b:	66 90                	xchg   %ax,%ax
-    371d:	66 90                	xchg   %ax,%ax
-    371f:	90                   	nop
-
-00003720 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-    3720:	f3 0f 1e fb          	endbr32 
-    3724:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-    3725:	31 c0                	xor    %eax,%eax
-{
-    3727:	89 e5                	mov    %esp,%ebp
-    3729:	53                   	push   %ebx
-    372a:	8b 4d 08             	mov    0x8(%ebp),%ecx
-    372d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
-    3730:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-    3734:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-    3737:	83 c0 01             	add    $0x1,%eax
-    373a:	84 d2                	test   %dl,%dl
-    373c:	75 f2                	jne    3730 <strcpy+0x10>
-    ;
-  return os;
-}
-    373e:	89 c8                	mov    %ecx,%eax
-    3740:	5b                   	pop    %ebx
-    3741:	5d                   	pop    %ebp
-    3742:	c3                   	ret    
-    3743:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    374a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00003750 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-    3750:	f3 0f 1e fb          	endbr32 
-    3754:	55                   	push   %ebp
-    3755:	89 e5                	mov    %esp,%ebp
-    3757:	53                   	push   %ebx
-    3758:	8b 4d 08             	mov    0x8(%ebp),%ecx
-    375b:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
-    375e:	0f b6 01             	movzbl (%ecx),%eax
-    3761:	0f b6 1a             	movzbl (%edx),%ebx
-    3764:	84 c0                	test   %al,%al
-    3766:	75 19                	jne    3781 <strcmp+0x31>
-    3768:	eb 26                	jmp    3790 <strcmp+0x40>
-    376a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    3770:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
-    3774:	83 c1 01             	add    $0x1,%ecx
-    3777:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
-    377a:	0f b6 1a             	movzbl (%edx),%ebx
-    377d:	84 c0                	test   %al,%al
-    377f:	74 0f                	je     3790 <strcmp+0x40>
-    3781:	38 d8                	cmp    %bl,%al
-    3783:	74 eb                	je     3770 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
-    3785:	29 d8                	sub    %ebx,%eax
-}
-    3787:	5b                   	pop    %ebx
-    3788:	5d                   	pop    %ebp
-    3789:	c3                   	ret    
-    378a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    3790:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
-    3792:	29 d8                	sub    %ebx,%eax
-}
-    3794:	5b                   	pop    %ebx
-    3795:	5d                   	pop    %ebp
-    3796:	c3                   	ret    
-    3797:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    379e:	66 90                	xchg   %ax,%ax
-
-000037a0 <strlen>:
-
-uint
-strlen(const char *s)
-{
-    37a0:	f3 0f 1e fb          	endbr32 
-    37a4:	55                   	push   %ebp
-    37a5:	89 e5                	mov    %esp,%ebp
-    37a7:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
-    37aa:	80 3a 00             	cmpb   $0x0,(%edx)
-    37ad:	74 21                	je     37d0 <strlen+0x30>
-    37af:	31 c0                	xor    %eax,%eax
-    37b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    37b8:	83 c0 01             	add    $0x1,%eax
-    37bb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-    37bf:	89 c1                	mov    %eax,%ecx
-    37c1:	75 f5                	jne    37b8 <strlen+0x18>
-    ;
-  return n;
-}
-    37c3:	89 c8                	mov    %ecx,%eax
-    37c5:	5d                   	pop    %ebp
-    37c6:	c3                   	ret    
-    37c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    37ce:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
-    37d0:	31 c9                	xor    %ecx,%ecx
-}
-    37d2:	5d                   	pop    %ebp
-    37d3:	89 c8                	mov    %ecx,%eax
-    37d5:	c3                   	ret    
-    37d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    37dd:	8d 76 00             	lea    0x0(%esi),%esi
-
-000037e0 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
-    37e0:	f3 0f 1e fb          	endbr32 
-    37e4:	55                   	push   %ebp
-    37e5:	89 e5                	mov    %esp,%ebp
-    37e7:	57                   	push   %edi
-    37e8:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
-    37eb:	8b 4d 10             	mov    0x10(%ebp),%ecx
-    37ee:	8b 45 0c             	mov    0xc(%ebp),%eax
-    37f1:	89 d7                	mov    %edx,%edi
-    37f3:	fc                   	cld    
-    37f4:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
-    37f6:	89 d0                	mov    %edx,%eax
-    37f8:	5f                   	pop    %edi
-    37f9:	5d                   	pop    %ebp
-    37fa:	c3                   	ret    
-    37fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    37ff:	90                   	nop
-
-00003800 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
-    3800:	f3 0f 1e fb          	endbr32 
-    3804:	55                   	push   %ebp
-    3805:	89 e5                	mov    %esp,%ebp
-    3807:	8b 45 08             	mov    0x8(%ebp),%eax
-    380a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
-    380e:	0f b6 10             	movzbl (%eax),%edx
-    3811:	84 d2                	test   %dl,%dl
-    3813:	75 16                	jne    382b <strchr+0x2b>
-    3815:	eb 21                	jmp    3838 <strchr+0x38>
-    3817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    381e:	66 90                	xchg   %ax,%ax
-    3820:	0f b6 50 01          	movzbl 0x1(%eax),%edx
-    3824:	83 c0 01             	add    $0x1,%eax
-    3827:	84 d2                	test   %dl,%dl
-    3829:	74 0d                	je     3838 <strchr+0x38>
-    if(*s == c)
-    382b:	38 d1                	cmp    %dl,%cl
-    382d:	75 f1                	jne    3820 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
-    382f:	5d                   	pop    %ebp
-    3830:	c3                   	ret    
-    3831:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
-    3838:	31 c0                	xor    %eax,%eax
-}
-    383a:	5d                   	pop    %ebp
-    383b:	c3                   	ret    
-    383c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00003840 <gets>:
-
-char*
-gets(char *buf, int max)
-{
-    3840:	f3 0f 1e fb          	endbr32 
-    3844:	55                   	push   %ebp
-    3845:	89 e5                	mov    %esp,%ebp
-    3847:	57                   	push   %edi
-    3848:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    3849:	31 f6                	xor    %esi,%esi
-{
-    384b:	53                   	push   %ebx
-    384c:	89 f3                	mov    %esi,%ebx
-    384e:	83 ec 1c             	sub    $0x1c,%esp
-    3851:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
-    3854:	eb 33                	jmp    3889 <gets+0x49>
-    3856:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    385d:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
-    3860:	83 ec 04             	sub    $0x4,%esp
-    3863:	8d 45 e7             	lea    -0x19(%ebp),%eax
-    3866:	6a 01                	push   $0x1
-    3868:	50                   	push   %eax
-    3869:	6a 00                	push   $0x0
-    386b:	e8 2b 01 00 00       	call   399b <read>
-    if(cc < 1)
-    3870:	83 c4 10             	add    $0x10,%esp
-    3873:	85 c0                	test   %eax,%eax
-    3875:	7e 1c                	jle    3893 <gets+0x53>
-      break;
-    buf[i++] = c;
-    3877:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
-    387b:	83 c7 01             	add    $0x1,%edi
-    387e:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
-    3881:	3c 0a                	cmp    $0xa,%al
-    3883:	74 23                	je     38a8 <gets+0x68>
-    3885:	3c 0d                	cmp    $0xd,%al
-    3887:	74 1f                	je     38a8 <gets+0x68>
-  for(i=0; i+1 < max; ){
-    3889:	83 c3 01             	add    $0x1,%ebx
-    388c:	89 fe                	mov    %edi,%esi
-    388e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
-    3891:	7c cd                	jl     3860 <gets+0x20>
-    3893:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
-    3895:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
-    3898:	c6 03 00             	movb   $0x0,(%ebx)
-}
-    389b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    389e:	5b                   	pop    %ebx
-    389f:	5e                   	pop    %esi
-    38a0:	5f                   	pop    %edi
-    38a1:	5d                   	pop    %ebp
-    38a2:	c3                   	ret    
-    38a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    38a7:	90                   	nop
-    38a8:	8b 75 08             	mov    0x8(%ebp),%esi
-    38ab:	8b 45 08             	mov    0x8(%ebp),%eax
-    38ae:	01 de                	add    %ebx,%esi
-    38b0:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
-    38b2:	c6 03 00             	movb   $0x0,(%ebx)
-}
-    38b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    38b8:	5b                   	pop    %ebx
-    38b9:	5e                   	pop    %esi
-    38ba:	5f                   	pop    %edi
-    38bb:	5d                   	pop    %ebp
-    38bc:	c3                   	ret    
-    38bd:	8d 76 00             	lea    0x0(%esi),%esi
-
-000038c0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
-    38c0:	f3 0f 1e fb          	endbr32 
-    38c4:	55                   	push   %ebp
-    38c5:	89 e5                	mov    %esp,%ebp
-    38c7:	56                   	push   %esi
-    38c8:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
-    38c9:	83 ec 08             	sub    $0x8,%esp
-    38cc:	6a 00                	push   $0x0
-    38ce:	ff 75 08             	pushl  0x8(%ebp)
-    38d1:	e8 ed 00 00 00       	call   39c3 <open>
-  if(fd < 0)
-    38d6:	83 c4 10             	add    $0x10,%esp
-    38d9:	85 c0                	test   %eax,%eax
-    38db:	78 2b                	js     3908 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
-    38dd:	83 ec 08             	sub    $0x8,%esp
-    38e0:	ff 75 0c             	pushl  0xc(%ebp)
-    38e3:	89 c3                	mov    %eax,%ebx
-    38e5:	50                   	push   %eax
-    38e6:	e8 f0 00 00 00       	call   39db <fstat>
-  close(fd);
-    38eb:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
-    38ee:	89 c6                	mov    %eax,%esi
-  close(fd);
-    38f0:	e8 b6 00 00 00       	call   39ab <close>
-  return r;
-    38f5:	83 c4 10             	add    $0x10,%esp
-}
-    38f8:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    38fb:	89 f0                	mov    %esi,%eax
-    38fd:	5b                   	pop    %ebx
-    38fe:	5e                   	pop    %esi
-    38ff:	5d                   	pop    %ebp
-    3900:	c3                   	ret    
-    3901:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-    3908:	be ff ff ff ff       	mov    $0xffffffff,%esi
-    390d:	eb e9                	jmp    38f8 <stat+0x38>
-    390f:	90                   	nop
-
-00003910 <atoi>:
-
-int
-atoi(const char *s)
-{
-    3910:	f3 0f 1e fb          	endbr32 
-    3914:	55                   	push   %ebp
-    3915:	89 e5                	mov    %esp,%ebp
-    3917:	53                   	push   %ebx
-    3918:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
-    391b:	0f be 02             	movsbl (%edx),%eax
-    391e:	8d 48 d0             	lea    -0x30(%eax),%ecx
-    3921:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
-    3924:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
-    3929:	77 1a                	ja     3945 <atoi+0x35>
-    392b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    392f:	90                   	nop
-    n = n*10 + *s++ - '0';
-    3930:	83 c2 01             	add    $0x1,%edx
-    3933:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
-    3936:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
-    393a:	0f be 02             	movsbl (%edx),%eax
-    393d:	8d 58 d0             	lea    -0x30(%eax),%ebx
-    3940:	80 fb 09             	cmp    $0x9,%bl
-    3943:	76 eb                	jbe    3930 <atoi+0x20>
-  return n;
-}
-    3945:	89 c8                	mov    %ecx,%eax
-    3947:	5b                   	pop    %ebx
-    3948:	5d                   	pop    %ebp
-    3949:	c3                   	ret    
-    394a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00003950 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
-    3950:	f3 0f 1e fb          	endbr32 
-    3954:	55                   	push   %ebp
-    3955:	89 e5                	mov    %esp,%ebp
-    3957:	57                   	push   %edi
-    3958:	8b 45 10             	mov    0x10(%ebp),%eax
-    395b:	8b 55 08             	mov    0x8(%ebp),%edx
-    395e:	56                   	push   %esi
-    395f:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
-    3962:	85 c0                	test   %eax,%eax
-    3964:	7e 0f                	jle    3975 <memmove+0x25>
-    3966:	01 d0                	add    %edx,%eax
-  dst = vdst;
-    3968:	89 d7                	mov    %edx,%edi
-    396a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
-    3970:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
-    3971:	39 f8                	cmp    %edi,%eax
-    3973:	75 fb                	jne    3970 <memmove+0x20>
-  return vdst;
-}
-    3975:	5e                   	pop    %esi
-    3976:	89 d0                	mov    %edx,%eax
-    3978:	5f                   	pop    %edi
-    3979:	5d                   	pop    %ebp
-    397a:	c3                   	ret    
-
-0000397b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
-    397b:	b8 01 00 00 00       	mov    $0x1,%eax
-    3980:	cd 40                	int    $0x40
-    3982:	c3                   	ret    
-
-00003983 <exit>:
-SYSCALL(exit)
-    3983:	b8 02 00 00 00       	mov    $0x2,%eax
-    3988:	cd 40                	int    $0x40
-    398a:	c3                   	ret    
-
-0000398b <wait>:
-SYSCALL(wait)
-    398b:	b8 03 00 00 00       	mov    $0x3,%eax
-    3990:	cd 40                	int    $0x40
-    3992:	c3                   	ret    
-
-00003993 <pipe>:
-SYSCALL(pipe)
-    3993:	b8 04 00 00 00       	mov    $0x4,%eax
-    3998:	cd 40                	int    $0x40
-    399a:	c3                   	ret    
-
-0000399b <read>:
-SYSCALL(read)
-    399b:	b8 05 00 00 00       	mov    $0x5,%eax
-    39a0:	cd 40                	int    $0x40
-    39a2:	c3                   	ret    
-
-000039a3 <write>:
-SYSCALL(write)
-    39a3:	b8 10 00 00 00       	mov    $0x10,%eax
-    39a8:	cd 40                	int    $0x40
-    39aa:	c3                   	ret    
-
-000039ab <close>:
-SYSCALL(close)
-    39ab:	b8 15 00 00 00       	mov    $0x15,%eax
-    39b0:	cd 40                	int    $0x40
-    39b2:	c3                   	ret    
-
-000039b3 <kill>:
-SYSCALL(kill)
-    39b3:	b8 06 00 00 00       	mov    $0x6,%eax
-    39b8:	cd 40                	int    $0x40
-    39ba:	c3                   	ret    
-
-000039bb <exec>:
-SYSCALL(exec)
-    39bb:	b8 07 00 00 00       	mov    $0x7,%eax
-    39c0:	cd 40                	int    $0x40
-    39c2:	c3                   	ret    
-
-000039c3 <open>:
-SYSCALL(open)
-    39c3:	b8 0f 00 00 00       	mov    $0xf,%eax
-    39c8:	cd 40                	int    $0x40
-    39ca:	c3                   	ret    
-
-000039cb <mknod>:
-SYSCALL(mknod)
-    39cb:	b8 11 00 00 00       	mov    $0x11,%eax
-    39d0:	cd 40                	int    $0x40
-    39d2:	c3                   	ret    
-
-000039d3 <unlink>:
-SYSCALL(unlink)
-    39d3:	b8 12 00 00 00       	mov    $0x12,%eax
-    39d8:	cd 40                	int    $0x40
-    39da:	c3                   	ret    
-
-000039db <fstat>:
-SYSCALL(fstat)
-    39db:	b8 08 00 00 00       	mov    $0x8,%eax
-    39e0:	cd 40                	int    $0x40
-    39e2:	c3                   	ret    
-
-000039e3 <link>:
-SYSCALL(link)
-    39e3:	b8 13 00 00 00       	mov    $0x13,%eax
-    39e8:	cd 40                	int    $0x40
-    39ea:	c3                   	ret    
-
-000039eb <mkdir>:
-SYSCALL(mkdir)
-    39eb:	b8 14 00 00 00       	mov    $0x14,%eax
-    39f0:	cd 40                	int    $0x40
-    39f2:	c3                   	ret    
-
-000039f3 <chdir>:
-SYSCALL(chdir)
-    39f3:	b8 09 00 00 00       	mov    $0x9,%eax
-    39f8:	cd 40                	int    $0x40
-    39fa:	c3                   	ret    
-
-000039fb <dup>:
-SYSCALL(dup)
-    39fb:	b8 0a 00 00 00       	mov    $0xa,%eax
-    3a00:	cd 40                	int    $0x40
-    3a02:	c3                   	ret    
-
-00003a03 <getpid>:
-SYSCALL(getpid)
-    3a03:	b8 0b 00 00 00       	mov    $0xb,%eax
-    3a08:	cd 40                	int    $0x40
-    3a0a:	c3                   	ret    
-
-00003a0b <sbrk>:
-SYSCALL(sbrk)
-    3a0b:	b8 0c 00 00 00       	mov    $0xc,%eax
-    3a10:	cd 40                	int    $0x40
-    3a12:	c3                   	ret    
-
-00003a13 <sleep>:
-SYSCALL(sleep)
-    3a13:	b8 0d 00 00 00       	mov    $0xd,%eax
-    3a18:	cd 40                	int    $0x40
-    3a1a:	c3                   	ret    
-
-00003a1b <uptime>:
-SYSCALL(uptime)
-    3a1b:	b8 0e 00 00 00       	mov    $0xe,%eax
-    3a20:	cd 40                	int    $0x40
-    3a22:	c3                   	ret    
-
-00003a23 <draw>:
-SYSCALL(draw)
-    3a23:	b8 16 00 00 00       	mov    $0x16,%eax
-    3a28:	cd 40                	int    $0x40
-    3a2a:	c3                   	ret    
-
-00003a2b <thread_create>:
-SYSCALL(thread_create)
-    3a2b:	b8 18 00 00 00       	mov    $0x18,%eax
-    3a30:	cd 40                	int    $0x40
-    3a32:	c3                   	ret    
-
-00003a33 <thread_join>:
-SYSCALL(thread_join)
-    3a33:	b8 19 00 00 00       	mov    $0x19,%eax
-    3a38:	cd 40                	int    $0x40
-    3a3a:	c3                   	ret    
-
-00003a3b <thread_exit>:
-SYSCALL(thread_exit)
-    3a3b:	b8 1a 00 00 00       	mov    $0x1a,%eax
-    3a40:	cd 40                	int    $0x40
-    3a42:	c3                   	ret    
-    3a43:	66 90                	xchg   %ax,%ax
-    3a45:	66 90                	xchg   %ax,%ax
-    3a47:	66 90                	xchg   %ax,%ax
-    3a49:	66 90                	xchg   %ax,%ax
-    3a4b:	66 90                	xchg   %ax,%ax
-    3a4d:	66 90                	xchg   %ax,%ax
-    3a4f:	90                   	nop
-
-00003a50 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
-    3a50:	55                   	push   %ebp
-    3a51:	89 e5                	mov    %esp,%ebp
-    3a53:	57                   	push   %edi
-    3a54:	56                   	push   %esi
-    3a55:	53                   	push   %ebx
-    3a56:	83 ec 3c             	sub    $0x3c,%esp
-    3a59:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
-    3a5c:	89 d1                	mov    %edx,%ecx
-{
-    3a5e:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
-    3a61:	85 d2                	test   %edx,%edx
-    3a63:	0f 89 7f 00 00 00    	jns    3ae8 <printint+0x98>
-    3a69:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
-    3a6d:	74 79                	je     3ae8 <printint+0x98>
-    neg = 1;
-    3a6f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
-    3a76:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
-    3a78:	31 db                	xor    %ebx,%ebx
-    3a7a:	8d 75 d7             	lea    -0x29(%ebp),%esi
-    3a7d:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
-    3a80:	89 c8                	mov    %ecx,%eax
-    3a82:	31 d2                	xor    %edx,%edx
-    3a84:	89 cf                	mov    %ecx,%edi
-    3a86:	f7 75 c4             	divl   -0x3c(%ebp)
-    3a89:	0f b6 92 08 56 00 00 	movzbl 0x5608(%edx),%edx
-    3a90:	89 45 c0             	mov    %eax,-0x40(%ebp)
-    3a93:	89 d8                	mov    %ebx,%eax
-    3a95:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
-    3a98:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
-    3a9b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
-    3a9e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
-    3aa1:	76 dd                	jbe    3a80 <printint+0x30>
-  if(neg)
-    3aa3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
-    3aa6:	85 c9                	test   %ecx,%ecx
-    3aa8:	74 0c                	je     3ab6 <printint+0x66>
-    buf[i++] = '-';
-    3aaa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
-    3aaf:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
-    3ab1:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
-    3ab6:	8b 7d b8             	mov    -0x48(%ebp),%edi
-    3ab9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
-    3abd:	eb 07                	jmp    3ac6 <printint+0x76>
-    3abf:	90                   	nop
-    3ac0:	0f b6 13             	movzbl (%ebx),%edx
-    3ac3:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
-    3ac6:	83 ec 04             	sub    $0x4,%esp
-    3ac9:	88 55 d7             	mov    %dl,-0x29(%ebp)
-    3acc:	6a 01                	push   $0x1
-    3ace:	56                   	push   %esi
-    3acf:	57                   	push   %edi
-    3ad0:	e8 ce fe ff ff       	call   39a3 <write>
-  while(--i >= 0)
-    3ad5:	83 c4 10             	add    $0x10,%esp
-    3ad8:	39 de                	cmp    %ebx,%esi
-    3ada:	75 e4                	jne    3ac0 <printint+0x70>
-    putc(fd, buf[i]);
-}
-    3adc:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    3adf:	5b                   	pop    %ebx
-    3ae0:	5e                   	pop    %esi
-    3ae1:	5f                   	pop    %edi
-    3ae2:	5d                   	pop    %ebp
-    3ae3:	c3                   	ret    
-    3ae4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
-    3ae8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
-    3aef:	eb 87                	jmp    3a78 <printint+0x28>
-    3af1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3af8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3aff:	90                   	nop
-
-00003b00 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
-    3b00:	f3 0f 1e fb          	endbr32 
-    3b04:	55                   	push   %ebp
-    3b05:	89 e5                	mov    %esp,%ebp
-    3b07:	57                   	push   %edi
-    3b08:	56                   	push   %esi
-    3b09:	53                   	push   %ebx
-    3b0a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
-    3b0d:	8b 75 0c             	mov    0xc(%ebp),%esi
-    3b10:	0f b6 1e             	movzbl (%esi),%ebx
-    3b13:	84 db                	test   %bl,%bl
-    3b15:	0f 84 b4 00 00 00    	je     3bcf <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
-    3b1b:	8d 45 10             	lea    0x10(%ebp),%eax
-    3b1e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
-    3b21:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
-    3b24:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
-    3b26:	89 45 d0             	mov    %eax,-0x30(%ebp)
-    3b29:	eb 33                	jmp    3b5e <printf+0x5e>
-    3b2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    3b2f:	90                   	nop
-    3b30:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
-    3b33:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
-    3b38:	83 f8 25             	cmp    $0x25,%eax
-    3b3b:	74 17                	je     3b54 <printf+0x54>
-  write(fd, &c, 1);
-    3b3d:	83 ec 04             	sub    $0x4,%esp
-    3b40:	88 5d e7             	mov    %bl,-0x19(%ebp)
-    3b43:	6a 01                	push   $0x1
-    3b45:	57                   	push   %edi
-    3b46:	ff 75 08             	pushl  0x8(%ebp)
-    3b49:	e8 55 fe ff ff       	call   39a3 <write>
-    3b4e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
-    3b51:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
-    3b54:	0f b6 1e             	movzbl (%esi),%ebx
-    3b57:	83 c6 01             	add    $0x1,%esi
-    3b5a:	84 db                	test   %bl,%bl
-    3b5c:	74 71                	je     3bcf <printf+0xcf>
-    c = fmt[i] & 0xff;
-    3b5e:	0f be cb             	movsbl %bl,%ecx
-    3b61:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
-    3b64:	85 d2                	test   %edx,%edx
-    3b66:	74 c8                	je     3b30 <printf+0x30>
-      }
-    } else if(state == '%'){
-    3b68:	83 fa 25             	cmp    $0x25,%edx
-    3b6b:	75 e7                	jne    3b54 <printf+0x54>
-      if(c == 'd'){
-    3b6d:	83 f8 64             	cmp    $0x64,%eax
-    3b70:	0f 84 9a 00 00 00    	je     3c10 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
-    3b76:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
-    3b7c:	83 f9 70             	cmp    $0x70,%ecx
-    3b7f:	74 5f                	je     3be0 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
-    3b81:	83 f8 73             	cmp    $0x73,%eax
-    3b84:	0f 84 d6 00 00 00    	je     3c60 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
-    3b8a:	83 f8 63             	cmp    $0x63,%eax
-    3b8d:	0f 84 8d 00 00 00    	je     3c20 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
-    3b93:	83 f8 25             	cmp    $0x25,%eax
-    3b96:	0f 84 b4 00 00 00    	je     3c50 <printf+0x150>
-  write(fd, &c, 1);
-    3b9c:	83 ec 04             	sub    $0x4,%esp
-    3b9f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
-    3ba3:	6a 01                	push   $0x1
-    3ba5:	57                   	push   %edi
-    3ba6:	ff 75 08             	pushl  0x8(%ebp)
-    3ba9:	e8 f5 fd ff ff       	call   39a3 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
-    3bae:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
-    3bb1:	83 c4 0c             	add    $0xc,%esp
-    3bb4:	6a 01                	push   $0x1
-    3bb6:	83 c6 01             	add    $0x1,%esi
-    3bb9:	57                   	push   %edi
-    3bba:	ff 75 08             	pushl  0x8(%ebp)
-    3bbd:	e8 e1 fd ff ff       	call   39a3 <write>
-  for(i = 0; fmt[i]; i++){
-    3bc2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
-    3bc6:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
-    3bc9:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
-    3bcb:	84 db                	test   %bl,%bl
-    3bcd:	75 8f                	jne    3b5e <printf+0x5e>
-    }
-  }
-}
-    3bcf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    3bd2:	5b                   	pop    %ebx
-    3bd3:	5e                   	pop    %esi
-    3bd4:	5f                   	pop    %edi
-    3bd5:	5d                   	pop    %ebp
-    3bd6:	c3                   	ret    
-    3bd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3bde:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
-    3be0:	83 ec 0c             	sub    $0xc,%esp
-    3be3:	b9 10 00 00 00       	mov    $0x10,%ecx
-    3be8:	6a 00                	push   $0x0
-    3bea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-    3bed:	8b 45 08             	mov    0x8(%ebp),%eax
-    3bf0:	8b 13                	mov    (%ebx),%edx
-    3bf2:	e8 59 fe ff ff       	call   3a50 <printint>
-        ap++;
-    3bf7:	89 d8                	mov    %ebx,%eax
-    3bf9:	83 c4 10             	add    $0x10,%esp
-      state = 0;
-    3bfc:	31 d2                	xor    %edx,%edx
-        ap++;
-    3bfe:	83 c0 04             	add    $0x4,%eax
-    3c01:	89 45 d0             	mov    %eax,-0x30(%ebp)
-    3c04:	e9 4b ff ff ff       	jmp    3b54 <printf+0x54>
-    3c09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
-    3c10:	83 ec 0c             	sub    $0xc,%esp
-    3c13:	b9 0a 00 00 00       	mov    $0xa,%ecx
-    3c18:	6a 01                	push   $0x1
-    3c1a:	eb ce                	jmp    3bea <printf+0xea>
-    3c1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
-    3c20:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
-    3c23:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
-    3c26:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
-    3c28:	6a 01                	push   $0x1
-        ap++;
-    3c2a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
-    3c2d:	57                   	push   %edi
-    3c2e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
-    3c31:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
-    3c34:	e8 6a fd ff ff       	call   39a3 <write>
-        ap++;
-    3c39:	89 5d d0             	mov    %ebx,-0x30(%ebp)
-    3c3c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
-    3c3f:	31 d2                	xor    %edx,%edx
-    3c41:	e9 0e ff ff ff       	jmp    3b54 <printf+0x54>
-    3c46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3c4d:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
-    3c50:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
-    3c53:	83 ec 04             	sub    $0x4,%esp
-    3c56:	e9 59 ff ff ff       	jmp    3bb4 <printf+0xb4>
-    3c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    3c5f:	90                   	nop
-        s = (char*)*ap;
-    3c60:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    3c63:	8b 18                	mov    (%eax),%ebx
-        ap++;
-    3c65:	83 c0 04             	add    $0x4,%eax
-    3c68:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
-    3c6b:	85 db                	test   %ebx,%ebx
-    3c6d:	74 17                	je     3c86 <printf+0x186>
-        while(*s != 0){
-    3c6f:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
-    3c72:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
-    3c74:	84 c0                	test   %al,%al
-    3c76:	0f 84 d8 fe ff ff    	je     3b54 <printf+0x54>
-    3c7c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    3c7f:	89 de                	mov    %ebx,%esi
-    3c81:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    3c84:	eb 1a                	jmp    3ca0 <printf+0x1a0>
-          s = "(null)";
-    3c86:	bb fe 55 00 00       	mov    $0x55fe,%ebx
-        while(*s != 0){
-    3c8b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    3c8e:	b8 28 00 00 00       	mov    $0x28,%eax
-    3c93:	89 de                	mov    %ebx,%esi
-    3c95:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    3c98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3c9f:	90                   	nop
-  write(fd, &c, 1);
-    3ca0:	83 ec 04             	sub    $0x4,%esp
-          s++;
-    3ca3:	83 c6 01             	add    $0x1,%esi
-    3ca6:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
-    3ca9:	6a 01                	push   $0x1
-    3cab:	57                   	push   %edi
-    3cac:	53                   	push   %ebx
-    3cad:	e8 f1 fc ff ff       	call   39a3 <write>
-        while(*s != 0){
-    3cb2:	0f b6 06             	movzbl (%esi),%eax
-    3cb5:	83 c4 10             	add    $0x10,%esp
-    3cb8:	84 c0                	test   %al,%al
-    3cba:	75 e4                	jne    3ca0 <printf+0x1a0>
-    3cbc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
-    3cbf:	31 d2                	xor    %edx,%edx
-    3cc1:	e9 8e fe ff ff       	jmp    3b54 <printf+0x54>
-    3cc6:	66 90                	xchg   %ax,%ax
-    3cc8:	66 90                	xchg   %ax,%ax
-    3cca:	66 90                	xchg   %ax,%ax
-    3ccc:	66 90                	xchg   %ax,%ax
-    3cce:	66 90                	xchg   %ax,%ax
-
-00003cd0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
-    3cd0:	f3 0f 1e fb          	endbr32 
-    3cd4:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    3cd5:	a1 a0 5f 00 00       	mov    0x5fa0,%eax
-{
-    3cda:	89 e5                	mov    %esp,%ebp
-    3cdc:	57                   	push   %edi
-    3cdd:	56                   	push   %esi
-    3cde:	53                   	push   %ebx
-    3cdf:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    3ce2:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
-    3ce4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    3ce7:	39 c8                	cmp    %ecx,%eax
-    3ce9:	73 15                	jae    3d00 <free+0x30>
-    3ceb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    3cef:	90                   	nop
-    3cf0:	39 d1                	cmp    %edx,%ecx
-    3cf2:	72 14                	jb     3d08 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    3cf4:	39 d0                	cmp    %edx,%eax
-    3cf6:	73 10                	jae    3d08 <free+0x38>
-{
-    3cf8:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    3cfa:	8b 10                	mov    (%eax),%edx
-    3cfc:	39 c8                	cmp    %ecx,%eax
-    3cfe:	72 f0                	jb     3cf0 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    3d00:	39 d0                	cmp    %edx,%eax
-    3d02:	72 f4                	jb     3cf8 <free+0x28>
-    3d04:	39 d1                	cmp    %edx,%ecx
-    3d06:	73 f0                	jae    3cf8 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
-    3d08:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    3d0b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    3d0e:	39 fa                	cmp    %edi,%edx
-    3d10:	74 1e                	je     3d30 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
-    3d12:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
-    3d15:	8b 50 04             	mov    0x4(%eax),%edx
-    3d18:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    3d1b:	39 f1                	cmp    %esi,%ecx
-    3d1d:	74 28                	je     3d47 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
-    3d1f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
-    3d21:	5b                   	pop    %ebx
-  freep = p;
-    3d22:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
-}
-    3d27:	5e                   	pop    %esi
-    3d28:	5f                   	pop    %edi
-    3d29:	5d                   	pop    %ebp
-    3d2a:	c3                   	ret    
-    3d2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    3d2f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
-    3d30:	03 72 04             	add    0x4(%edx),%esi
-    3d33:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
-    3d36:	8b 10                	mov    (%eax),%edx
-    3d38:	8b 12                	mov    (%edx),%edx
-    3d3a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
-    3d3d:	8b 50 04             	mov    0x4(%eax),%edx
-    3d40:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    3d43:	39 f1                	cmp    %esi,%ecx
-    3d45:	75 d8                	jne    3d1f <free+0x4f>
-    p->s.size += bp->s.size;
-    3d47:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
-    3d4a:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
-    p->s.size += bp->s.size;
-    3d4f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
-    3d52:	8b 53 f8             	mov    -0x8(%ebx),%edx
-    3d55:	89 10                	mov    %edx,(%eax)
-}
-    3d57:	5b                   	pop    %ebx
-    3d58:	5e                   	pop    %esi
-    3d59:	5f                   	pop    %edi
-    3d5a:	5d                   	pop    %ebp
-    3d5b:	c3                   	ret    
-    3d5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00003d60 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
-    3d60:	f3 0f 1e fb          	endbr32 
-    3d64:	55                   	push   %ebp
-    3d65:	89 e5                	mov    %esp,%ebp
-    3d67:	57                   	push   %edi
-    3d68:	56                   	push   %esi
-    3d69:	53                   	push   %ebx
-    3d6a:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    3d6d:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
-    3d70:	8b 3d a0 5f 00 00    	mov    0x5fa0,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    3d76:	8d 70 07             	lea    0x7(%eax),%esi
-    3d79:	c1 ee 03             	shr    $0x3,%esi
-    3d7c:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
-    3d7f:	85 ff                	test   %edi,%edi
-    3d81:	0f 84 a9 00 00 00    	je     3e30 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    3d87:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
-    3d89:	8b 48 04             	mov    0x4(%eax),%ecx
-    3d8c:	39 f1                	cmp    %esi,%ecx
-    3d8e:	73 6d                	jae    3dfd <malloc+0x9d>
-    3d90:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
-    3d96:	bb 00 10 00 00       	mov    $0x1000,%ebx
-    3d9b:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
-    3d9e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
-    3da5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-    3da8:	eb 17                	jmp    3dc1 <malloc+0x61>
-    3daa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    3db0:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
-    3db2:	8b 4a 04             	mov    0x4(%edx),%ecx
-    3db5:	39 f1                	cmp    %esi,%ecx
-    3db7:	73 4f                	jae    3e08 <malloc+0xa8>
-    3db9:	8b 3d a0 5f 00 00    	mov    0x5fa0,%edi
-    3dbf:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-    3dc1:	39 c7                	cmp    %eax,%edi
-    3dc3:	75 eb                	jne    3db0 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
-    3dc5:	83 ec 0c             	sub    $0xc,%esp
-    3dc8:	ff 75 e4             	pushl  -0x1c(%ebp)
-    3dcb:	e8 3b fc ff ff       	call   3a0b <sbrk>
-  if(p == (char*)-1)
-    3dd0:	83 c4 10             	add    $0x10,%esp
-    3dd3:	83 f8 ff             	cmp    $0xffffffff,%eax
-    3dd6:	74 1b                	je     3df3 <malloc+0x93>
-  hp->s.size = nu;
-    3dd8:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
-    3ddb:	83 ec 0c             	sub    $0xc,%esp
-    3dde:	83 c0 08             	add    $0x8,%eax
-    3de1:	50                   	push   %eax
-    3de2:	e8 e9 fe ff ff       	call   3cd0 <free>
-  return freep;
-    3de7:	a1 a0 5f 00 00       	mov    0x5fa0,%eax
-      if((p = morecore(nunits)) == 0)
-    3dec:	83 c4 10             	add    $0x10,%esp
-    3def:	85 c0                	test   %eax,%eax
-    3df1:	75 bd                	jne    3db0 <malloc+0x50>
-        return 0;
-  }
-}
-    3df3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
-    3df6:	31 c0                	xor    %eax,%eax
-}
-    3df8:	5b                   	pop    %ebx
-    3df9:	5e                   	pop    %esi
-    3dfa:	5f                   	pop    %edi
-    3dfb:	5d                   	pop    %ebp
-    3dfc:	c3                   	ret    
-    if(p->s.size >= nunits){
-    3dfd:	89 c2                	mov    %eax,%edx
-    3dff:	89 f8                	mov    %edi,%eax
-    3e01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
-    3e08:	39 ce                	cmp    %ecx,%esi
-    3e0a:	74 54                	je     3e60 <malloc+0x100>
-        p->s.size -= nunits;
-    3e0c:	29 f1                	sub    %esi,%ecx
-    3e0e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
-    3e11:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
-    3e14:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
-    3e17:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
-}
-    3e1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
-    3e1f:	8d 42 08             	lea    0x8(%edx),%eax
-}
-    3e22:	5b                   	pop    %ebx
-    3e23:	5e                   	pop    %esi
-    3e24:	5f                   	pop    %edi
-    3e25:	5d                   	pop    %ebp
-    3e26:	c3                   	ret    
-    3e27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    3e2e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
-    3e30:	c7 05 a0 5f 00 00 a4 	movl   $0x5fa4,0x5fa0
-    3e37:	5f 00 00 
-    base.s.size = 0;
-    3e3a:	bf a4 5f 00 00       	mov    $0x5fa4,%edi
-    base.s.ptr = freep = prevp = &base;
-    3e3f:	c7 05 a4 5f 00 00 a4 	movl   $0x5fa4,0x5fa4
-    3e46:	5f 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    3e49:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
-    3e4b:	c7 05 a8 5f 00 00 00 	movl   $0x0,0x5fa8
-    3e52:	00 00 00 
-    if(p->s.size >= nunits){
-    3e55:	e9 36 ff ff ff       	jmp    3d90 <malloc+0x30>
-    3e5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
-    3e60:	8b 0a                	mov    (%edx),%ecx
-    3e62:	89 08                	mov    %ecx,(%eax)
-    3e64:	eb b1                	jmp    3e17 <malloc+0xb7>
diff -ruN xv6-public/usertests.c xv6-public-mynew/usertests.c
--- xv6-public/usertests.c	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/usertests.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,1803 +0,0 @@
-#include "param.h"
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-#include "fs.h"
-#include "fcntl.h"
-#include "syscall.h"
-#include "traps.h"
-#include "memlayout.h"
-
-char buf[8192];
-char name[3];
-char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };
-int stdout = 1;
-
-// does chdir() call iput(p->cwd) in a transaction?
-void
-iputtest(void)
-{
-  printf(stdout, "iput test\n");
-
-  if(mkdir("iputdir") < 0){
-    printf(stdout, "mkdir failed\n");
-    exit();
-  }
-  if(chdir("iputdir") < 0){
-    printf(stdout, "chdir iputdir failed\n");
-    exit();
-  }
-  if(unlink("../iputdir") < 0){
-    printf(stdout, "unlink ../iputdir failed\n");
-    exit();
-  }
-  if(chdir("/") < 0){
-    printf(stdout, "chdir / failed\n");
-    exit();
-  }
-  printf(stdout, "iput test ok\n");
-}
-
-// does exit() call iput(p->cwd) in a transaction?
-void
-exitiputtest(void)
-{
-  int pid;
-
-  printf(stdout, "exitiput test\n");
-
-  pid = fork();
-  if(pid < 0){
-    printf(stdout, "fork failed\n");
-    exit();
-  }
-  if(pid == 0){
-    if(mkdir("iputdir") < 0){
-      printf(stdout, "mkdir failed\n");
-      exit();
-    }
-    if(chdir("iputdir") < 0){
-      printf(stdout, "child chdir failed\n");
-      exit();
-    }
-    if(unlink("../iputdir") < 0){
-      printf(stdout, "unlink ../iputdir failed\n");
-      exit();
-    }
-    exit();
-  }
-  wait();
-  printf(stdout, "exitiput test ok\n");
-}
-
-// does the error path in open() for attempt to write a
-// directory call iput() in a transaction?
-// needs a hacked kernel that pauses just after the namei()
-// call in sys_open():
-//    if((ip = namei(path)) == 0)
-//      return -1;
-//    {
-//      int i;
-//      for(i = 0; i < 10000; i++)
-//        yield();
-//    }
-void
-openiputtest(void)
-{
-  int pid;
-
-  printf(stdout, "openiput test\n");
-  if(mkdir("oidir") < 0){
-    printf(stdout, "mkdir oidir failed\n");
-    exit();
-  }
-  pid = fork();
-  if(pid < 0){
-    printf(stdout, "fork failed\n");
-    exit();
-  }
-  if(pid == 0){
-    int fd = open("oidir", O_RDWR);
-    if(fd >= 0){
-      printf(stdout, "open directory for write succeeded\n");
-      exit();
-    }
-    exit();
-  }
-  sleep(1);
-  if(unlink("oidir") != 0){
-    printf(stdout, "unlink failed\n");
-    exit();
-  }
-  wait();
-  printf(stdout, "openiput test ok\n");
-}
-
-// simple file system tests
-
-void
-opentest(void)
-{
-  int fd;
-
-  printf(stdout, "open test\n");
-  fd = open("echo", 0);
-  if(fd < 0){
-    printf(stdout, "open echo failed!\n");
-    exit();
-  }
-  close(fd);
-  fd = open("doesnotexist", 0);
-  if(fd >= 0){
-    printf(stdout, "open doesnotexist succeeded!\n");
-    exit();
-  }
-  printf(stdout, "open test ok\n");
-}
-
-void
-writetest(void)
-{
-  int fd;
-  int i;
-
-  printf(stdout, "small file test\n");
-  fd = open("small", O_CREATE|O_RDWR);
-  if(fd >= 0){
-    printf(stdout, "creat small succeeded; ok\n");
-  } else {
-    printf(stdout, "error: creat small failed!\n");
-    exit();
-  }
-  for(i = 0; i < 100; i++){
-    if(write(fd, "aaaaaaaaaa", 10) != 10){
-      printf(stdout, "error: write aa %d new file failed\n", i);
-      exit();
-    }
-    if(write(fd, "bbbbbbbbbb", 10) != 10){
-      printf(stdout, "error: write bb %d new file failed\n", i);
-      exit();
-    }
-  }
-  printf(stdout, "writes ok\n");
-  close(fd);
-  fd = open("small", O_RDONLY);
-  if(fd >= 0){
-    printf(stdout, "open small succeeded ok\n");
-  } else {
-    printf(stdout, "error: open small failed!\n");
-    exit();
-  }
-  i = read(fd, buf, 2000);
-  if(i == 2000){
-    printf(stdout, "read succeeded ok\n");
-  } else {
-    printf(stdout, "read failed\n");
-    exit();
-  }
-  close(fd);
-
-  if(unlink("small") < 0){
-    printf(stdout, "unlink small failed\n");
-    exit();
-  }
-  printf(stdout, "small file test ok\n");
-}
-
-void
-writetest1(void)
-{
-  int i, fd, n;
-
-  printf(stdout, "big files test\n");
-
-  fd = open("big", O_CREATE|O_RDWR);
-  if(fd < 0){
-    printf(stdout, "error: creat big failed!\n");
-    exit();
-  }
-
-  for(i = 0; i < MAXFILE; i++){
-    ((int*)buf)[0] = i;
-    if(write(fd, buf, 512) != 512){
-      printf(stdout, "error: write big file failed\n", i);
-      exit();
-    }
-  }
-
-  close(fd);
-
-  fd = open("big", O_RDONLY);
-  if(fd < 0){
-    printf(stdout, "error: open big failed!\n");
-    exit();
-  }
-
-  n = 0;
-  for(;;){
-    i = read(fd, buf, 512);
-    if(i == 0){
-      if(n == MAXFILE - 1){
-        printf(stdout, "read only %d blocks from big", n);
-        exit();
-      }
-      break;
-    } else if(i != 512){
-      printf(stdout, "read failed %d\n", i);
-      exit();
-    }
-    if(((int*)buf)[0] != n){
-      printf(stdout, "read content of block %d is %d\n",
-             n, ((int*)buf)[0]);
-      exit();
-    }
-    n++;
-  }
-  close(fd);
-  if(unlink("big") < 0){
-    printf(stdout, "unlink big failed\n");
-    exit();
-  }
-  printf(stdout, "big files ok\n");
-}
-
-void
-createtest(void)
-{
-  int i, fd;
-
-  printf(stdout, "many creates, followed by unlink test\n");
-
-  name[0] = 'a';
-  name[2] = '\0';
-  for(i = 0; i < 52; i++){
-    name[1] = '0' + i;
-    fd = open(name, O_CREATE|O_RDWR);
-    close(fd);
-  }
-  name[0] = 'a';
-  name[2] = '\0';
-  for(i = 0; i < 52; i++){
-    name[1] = '0' + i;
-    unlink(name);
-  }
-  printf(stdout, "many creates, followed by unlink; ok\n");
-}
-
-void dirtest(void)
-{
-  printf(stdout, "mkdir test\n");
-
-  if(mkdir("dir0") < 0){
-    printf(stdout, "mkdir failed\n");
-    exit();
-  }
-
-  if(chdir("dir0") < 0){
-    printf(stdout, "chdir dir0 failed\n");
-    exit();
-  }
-
-  if(chdir("..") < 0){
-    printf(stdout, "chdir .. failed\n");
-    exit();
-  }
-
-  if(unlink("dir0") < 0){
-    printf(stdout, "unlink dir0 failed\n");
-    exit();
-  }
-  printf(stdout, "mkdir test ok\n");
-}
-
-void
-exectest(void)
-{
-  printf(stdout, "exec test\n");
-  if(exec("echo", echoargv) < 0){
-    printf(stdout, "exec echo failed\n");
-    exit();
-  }
-}
-
-// simple fork and pipe read/write
-
-void
-pipe1(void)
-{
-  int fds[2], pid;
-  int seq, i, n, cc, total;
-
-  if(pipe(fds) != 0){
-    printf(1, "pipe() failed\n");
-    exit();
-  }
-  pid = fork();
-  seq = 0;
-  if(pid == 0){
-    close(fds[0]);
-    for(n = 0; n < 5; n++){
-      for(i = 0; i < 1033; i++)
-        buf[i] = seq++;
-      if(write(fds[1], buf, 1033) != 1033){
-        printf(1, "pipe1 oops 1\n");
-        exit();
-      }
-    }
-    exit();
-  } else if(pid > 0){
-    close(fds[1]);
-    total = 0;
-    cc = 1;
-    while((n = read(fds[0], buf, cc)) > 0){
-      for(i = 0; i < n; i++){
-        if((buf[i] & 0xff) != (seq++ & 0xff)){
-          printf(1, "pipe1 oops 2\n");
-          return;
-        }
-      }
-      total += n;
-      cc = cc * 2;
-      if(cc > sizeof(buf))
-        cc = sizeof(buf);
-    }
-    if(total != 5 * 1033){
-      printf(1, "pipe1 oops 3 total %d\n", total);
-      exit();
-    }
-    close(fds[0]);
-    wait();
-  } else {
-    printf(1, "fork() failed\n");
-    exit();
-  }
-  printf(1, "pipe1 ok\n");
-}
-
-// meant to be run w/ at most two CPUs
-void
-preempt(void)
-{
-  int pid1, pid2, pid3;
-  int pfds[2];
-
-  printf(1, "preempt: ");
-  pid1 = fork();
-  if(pid1 == 0)
-    for(;;)
-      ;
-
-  pid2 = fork();
-  if(pid2 == 0)
-    for(;;)
-      ;
-
-  pipe(pfds);
-  pid3 = fork();
-  if(pid3 == 0){
-    close(pfds[0]);
-    if(write(pfds[1], "x", 1) != 1)
-      printf(1, "preempt write error");
-    close(pfds[1]);
-    for(;;)
-      ;
-  }
-
-  close(pfds[1]);
-  if(read(pfds[0], buf, sizeof(buf)) != 1){
-    printf(1, "preempt read error");
-    return;
-  }
-  close(pfds[0]);
-  printf(1, "kill... ");
-  kill(pid1);
-  kill(pid2);
-  kill(pid3);
-  printf(1, "wait... ");
-  wait();
-  wait();
-  wait();
-  printf(1, "preempt ok\n");
-}
-
-// try to find any races between exit and wait
-void
-exitwait(void)
-{
-  int i, pid;
-
-  for(i = 0; i < 100; i++){
-    pid = fork();
-    if(pid < 0){
-      printf(1, "fork failed\n");
-      return;
-    }
-    if(pid){
-      if(wait() != pid){
-        printf(1, "wait wrong pid\n");
-        return;
-      }
-    } else {
-      exit();
-    }
-  }
-  printf(1, "exitwait ok\n");
-}
-
-void
-mem(void)
-{
-  void *m1, *m2;
-  int pid, ppid;
-
-  printf(1, "mem test\n");
-  ppid = getpid();
-  if((pid = fork()) == 0){
-    m1 = 0;
-    while((m2 = malloc(10001)) != 0){
-      *(char**)m2 = m1;
-      m1 = m2;
-    }
-    while(m1){
-      m2 = *(char**)m1;
-      free(m1);
-      m1 = m2;
-    }
-    m1 = malloc(1024*20);
-    if(m1 == 0){
-      printf(1, "couldn't allocate mem?!!\n");
-      kill(ppid);
-      exit();
-    }
-    free(m1);
-    printf(1, "mem ok\n");
-    exit();
-  } else {
-    wait();
-  }
-}
-
-// More file system tests
-
-// two processes write to the same file descriptor
-// is the offset shared? does inode locking work?
-void
-sharedfd(void)
-{
-  int fd, pid, i, n, nc, np;
-  char buf[10];
-
-  printf(1, "sharedfd test\n");
-
-  unlink("sharedfd");
-  fd = open("sharedfd", O_CREATE|O_RDWR);
-  if(fd < 0){
-    printf(1, "fstests: cannot open sharedfd for writing");
-    return;
-  }
-  pid = fork();
-  memset(buf, pid==0?'c':'p', sizeof(buf));
-  for(i = 0; i < 1000; i++){
-    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
-      printf(1, "fstests: write sharedfd failed\n");
-      break;
-    }
-  }
-  if(pid == 0)
-    exit();
-  else
-    wait();
-  close(fd);
-  fd = open("sharedfd", 0);
-  if(fd < 0){
-    printf(1, "fstests: cannot open sharedfd for reading\n");
-    return;
-  }
-  nc = np = 0;
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-    for(i = 0; i < sizeof(buf); i++){
-      if(buf[i] == 'c')
-        nc++;
-      if(buf[i] == 'p')
-        np++;
-    }
-  }
-  close(fd);
-  unlink("sharedfd");
-  if(nc == 10000 && np == 10000){
-    printf(1, "sharedfd ok\n");
-  } else {
-    printf(1, "sharedfd oops %d %d\n", nc, np);
-    exit();
-  }
-}
-
-// four processes write different files at the same
-// time, to test block allocation.
-void
-fourfiles(void)
-{
-  int fd, pid, i, j, n, total, pi;
-  char *names[] = { "f0", "f1", "f2", "f3" };
-  char *fname;
-
-  printf(1, "fourfiles test\n");
-
-  for(pi = 0; pi < 4; pi++){
-    fname = names[pi];
-    unlink(fname);
-
-    pid = fork();
-    if(pid < 0){
-      printf(1, "fork failed\n");
-      exit();
-    }
-
-    if(pid == 0){
-      fd = open(fname, O_CREATE | O_RDWR);
-      if(fd < 0){
-        printf(1, "create failed\n");
-        exit();
-      }
-
-      memset(buf, '0'+pi, 512);
-      for(i = 0; i < 12; i++){
-        if((n = write(fd, buf, 500)) != 500){
-          printf(1, "write failed %d\n", n);
-          exit();
-        }
-      }
-      exit();
-    }
-  }
-
-  for(pi = 0; pi < 4; pi++){
-    wait();
-  }
-
-  for(i = 0; i < 2; i++){
-    fname = names[i];
-    fd = open(fname, 0);
-    total = 0;
-    while((n = read(fd, buf, sizeof(buf))) > 0){
-      for(j = 0; j < n; j++){
-        if(buf[j] != '0'+i){
-          printf(1, "wrong char\n");
-          exit();
-        }
-      }
-      total += n;
-    }
-    close(fd);
-    if(total != 12*500){
-      printf(1, "wrong length %d\n", total);
-      exit();
-    }
-    unlink(fname);
-  }
-
-  printf(1, "fourfiles ok\n");
-}
-
-// four processes create and delete different files in same directory
-void
-createdelete(void)
-{
-  enum { N = 20 };
-  int pid, i, fd, pi;
-  char name[32];
-
-  printf(1, "createdelete test\n");
-
-  for(pi = 0; pi < 4; pi++){
-    pid = fork();
-    if(pid < 0){
-      printf(1, "fork failed\n");
-      exit();
-    }
-
-    if(pid == 0){
-      name[0] = 'p' + pi;
-      name[2] = '\0';
-      for(i = 0; i < N; i++){
-        name[1] = '0' + i;
-        fd = open(name, O_CREATE | O_RDWR);
-        if(fd < 0){
-          printf(1, "create failed\n");
-          exit();
-        }
-        close(fd);
-        if(i > 0 && (i % 2 ) == 0){
-          name[1] = '0' + (i / 2);
-          if(unlink(name) < 0){
-            printf(1, "unlink failed\n");
-            exit();
-          }
-        }
-      }
-      exit();
-    }
-  }
-
-  for(pi = 0; pi < 4; pi++){
-    wait();
-  }
-
-  name[0] = name[1] = name[2] = 0;
-  for(i = 0; i < N; i++){
-    for(pi = 0; pi < 4; pi++){
-      name[0] = 'p' + pi;
-      name[1] = '0' + i;
-      fd = open(name, 0);
-      if((i == 0 || i >= N/2) && fd < 0){
-        printf(1, "oops createdelete %s didn't exist\n", name);
-        exit();
-      } else if((i >= 1 && i < N/2) && fd >= 0){
-        printf(1, "oops createdelete %s did exist\n", name);
-        exit();
-      }
-      if(fd >= 0)
-        close(fd);
-    }
-  }
-
-  for(i = 0; i < N; i++){
-    for(pi = 0; pi < 4; pi++){
-      name[0] = 'p' + i;
-      name[1] = '0' + i;
-      unlink(name);
-    }
-  }
-
-  printf(1, "createdelete ok\n");
-}
-
-// can I unlink a file and still read it?
-void
-unlinkread(void)
-{
-  int fd, fd1;
-
-  printf(1, "unlinkread test\n");
-  fd = open("unlinkread", O_CREATE | O_RDWR);
-  if(fd < 0){
-    printf(1, "create unlinkread failed\n");
-    exit();
-  }
-  write(fd, "hello", 5);
-  close(fd);
-
-  fd = open("unlinkread", O_RDWR);
-  if(fd < 0){
-    printf(1, "open unlinkread failed\n");
-    exit();
-  }
-  if(unlink("unlinkread") != 0){
-    printf(1, "unlink unlinkread failed\n");
-    exit();
-  }
-
-  fd1 = open("unlinkread", O_CREATE | O_RDWR);
-  write(fd1, "yyy", 3);
-  close(fd1);
-
-  if(read(fd, buf, sizeof(buf)) != 5){
-    printf(1, "unlinkread read failed");
-    exit();
-  }
-  if(buf[0] != 'h'){
-    printf(1, "unlinkread wrong data\n");
-    exit();
-  }
-  if(write(fd, buf, 10) != 10){
-    printf(1, "unlinkread write failed\n");
-    exit();
-  }
-  close(fd);
-  unlink("unlinkread");
-  printf(1, "unlinkread ok\n");
-}
-
-void
-linktest(void)
-{
-  int fd;
-
-  printf(1, "linktest\n");
-
-  unlink("lf1");
-  unlink("lf2");
-
-  fd = open("lf1", O_CREATE|O_RDWR);
-  if(fd < 0){
-    printf(1, "create lf1 failed\n");
-    exit();
-  }
-  if(write(fd, "hello", 5) != 5){
-    printf(1, "write lf1 failed\n");
-    exit();
-  }
-  close(fd);
-
-  if(link("lf1", "lf2") < 0){
-    printf(1, "link lf1 lf2 failed\n");
-    exit();
-  }
-  unlink("lf1");
-
-  if(open("lf1", 0) >= 0){
-    printf(1, "unlinked lf1 but it is still there!\n");
-    exit();
-  }
-
-  fd = open("lf2", 0);
-  if(fd < 0){
-    printf(1, "open lf2 failed\n");
-    exit();
-  }
-  if(read(fd, buf, sizeof(buf)) != 5){
-    printf(1, "read lf2 failed\n");
-    exit();
-  }
-  close(fd);
-
-  if(link("lf2", "lf2") >= 0){
-    printf(1, "link lf2 lf2 succeeded! oops\n");
-    exit();
-  }
-
-  unlink("lf2");
-  if(link("lf2", "lf1") >= 0){
-    printf(1, "link non-existant succeeded! oops\n");
-    exit();
-  }
-
-  if(link(".", "lf1") >= 0){
-    printf(1, "link . lf1 succeeded! oops\n");
-    exit();
-  }
-
-  printf(1, "linktest ok\n");
-}
-
-// test concurrent create/link/unlink of the same file
-void
-concreate(void)
-{
-  char file[3];
-  int i, pid, n, fd;
-  char fa[40];
-  struct {
-    ushort inum;
-    char name[14];
-  } de;
-
-  printf(1, "concreate test\n");
-  file[0] = 'C';
-  file[2] = '\0';
-  for(i = 0; i < 40; i++){
-    file[1] = '0' + i;
-    unlink(file);
-    pid = fork();
-    if(pid && (i % 3) == 1){
-      link("C0", file);
-    } else if(pid == 0 && (i % 5) == 1){
-      link("C0", file);
-    } else {
-      fd = open(file, O_CREATE | O_RDWR);
-      if(fd < 0){
-        printf(1, "concreate create %s failed\n", file);
-        exit();
-      }
-      close(fd);
-    }
-    if(pid == 0)
-      exit();
-    else
-      wait();
-  }
-
-  memset(fa, 0, sizeof(fa));
-  fd = open(".", 0);
-  n = 0;
-  while(read(fd, &de, sizeof(de)) > 0){
-    if(de.inum == 0)
-      continue;
-    if(de.name[0] == 'C' && de.name[2] == '\0'){
-      i = de.name[1] - '0';
-      if(i < 0 || i >= sizeof(fa)){
-        printf(1, "concreate weird file %s\n", de.name);
-        exit();
-      }
-      if(fa[i]){
-        printf(1, "concreate duplicate file %s\n", de.name);
-        exit();
-      }
-      fa[i] = 1;
-      n++;
-    }
-  }
-  close(fd);
-
-  if(n != 40){
-    printf(1, "concreate not enough files in directory listing\n");
-    exit();
-  }
-
-  for(i = 0; i < 40; i++){
-    file[1] = '0' + i;
-    pid = fork();
-    if(pid < 0){
-      printf(1, "fork failed\n");
-      exit();
-    }
-    if(((i % 3) == 0 && pid == 0) ||
-       ((i % 3) == 1 && pid != 0)){
-      close(open(file, 0));
-      close(open(file, 0));
-      close(open(file, 0));
-      close(open(file, 0));
-    } else {
-      unlink(file);
-      unlink(file);
-      unlink(file);
-      unlink(file);
-    }
-    if(pid == 0)
-      exit();
-    else
-      wait();
-  }
-
-  printf(1, "concreate ok\n");
-}
-
-// another concurrent link/unlink/create test,
-// to look for deadlocks.
-void
-linkunlink()
-{
-  int pid, i;
-
-  printf(1, "linkunlink test\n");
-
-  unlink("x");
-  pid = fork();
-  if(pid < 0){
-    printf(1, "fork failed\n");
-    exit();
-  }
-
-  unsigned int x = (pid ? 1 : 97);
-  for(i = 0; i < 100; i++){
-    x = x * 1103515245 + 12345;
-    if((x % 3) == 0){
-      close(open("x", O_RDWR | O_CREATE));
-    } else if((x % 3) == 1){
-      link("cat", "x");
-    } else {
-      unlink("x");
-    }
-  }
-
-  if(pid)
-    wait();
-  else
-    exit();
-
-  printf(1, "linkunlink ok\n");
-}
-
-// directory that uses indirect blocks
-void
-bigdir(void)
-{
-  int i, fd;
-  char name[10];
-
-  printf(1, "bigdir test\n");
-  unlink("bd");
-
-  fd = open("bd", O_CREATE);
-  if(fd < 0){
-    printf(1, "bigdir create failed\n");
-    exit();
-  }
-  close(fd);
-
-  for(i = 0; i < 500; i++){
-    name[0] = 'x';
-    name[1] = '0' + (i / 64);
-    name[2] = '0' + (i % 64);
-    name[3] = '\0';
-    if(link("bd", name) != 0){
-      printf(1, "bigdir link failed\n");
-      exit();
-    }
-  }
-
-  unlink("bd");
-  for(i = 0; i < 500; i++){
-    name[0] = 'x';
-    name[1] = '0' + (i / 64);
-    name[2] = '0' + (i % 64);
-    name[3] = '\0';
-    if(unlink(name) != 0){
-      printf(1, "bigdir unlink failed");
-      exit();
-    }
-  }
-
-  printf(1, "bigdir ok\n");
-}
-
-void
-subdir(void)
-{
-  int fd, cc;
-
-  printf(1, "subdir test\n");
-
-  unlink("ff");
-  if(mkdir("dd") != 0){
-    printf(1, "subdir mkdir dd failed\n");
-    exit();
-  }
-
-  fd = open("dd/ff", O_CREATE | O_RDWR);
-  if(fd < 0){
-    printf(1, "create dd/ff failed\n");
-    exit();
-  }
-  write(fd, "ff", 2);
-  close(fd);
-
-  if(unlink("dd") >= 0){
-    printf(1, "unlink dd (non-empty dir) succeeded!\n");
-    exit();
-  }
-
-  if(mkdir("/dd/dd") != 0){
-    printf(1, "subdir mkdir dd/dd failed\n");
-    exit();
-  }
-
-  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
-  if(fd < 0){
-    printf(1, "create dd/dd/ff failed\n");
-    exit();
-  }
-  write(fd, "FF", 2);
-  close(fd);
-
-  fd = open("dd/dd/../ff", 0);
-  if(fd < 0){
-    printf(1, "open dd/dd/../ff failed\n");
-    exit();
-  }
-  cc = read(fd, buf, sizeof(buf));
-  if(cc != 2 || buf[0] != 'f'){
-    printf(1, "dd/dd/../ff wrong content\n");
-    exit();
-  }
-  close(fd);
-
-  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
-    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
-    exit();
-  }
-
-  if(unlink("dd/dd/ff") != 0){
-    printf(1, "unlink dd/dd/ff failed\n");
-    exit();
-  }
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
-    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
-    exit();
-  }
-
-  if(chdir("dd") != 0){
-    printf(1, "chdir dd failed\n");
-    exit();
-  }
-  if(chdir("dd/../../dd") != 0){
-    printf(1, "chdir dd/../../dd failed\n");
-    exit();
-  }
-  if(chdir("dd/../../../dd") != 0){
-    printf(1, "chdir dd/../../dd failed\n");
-    exit();
-  }
-  if(chdir("./..") != 0){
-    printf(1, "chdir ./.. failed\n");
-    exit();
-  }
-
-  fd = open("dd/dd/ffff", 0);
-  if(fd < 0){
-    printf(1, "open dd/dd/ffff failed\n");
-    exit();
-  }
-  if(read(fd, buf, sizeof(buf)) != 2){
-    printf(1, "read dd/dd/ffff wrong len\n");
-    exit();
-  }
-  close(fd);
-
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
-    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
-    exit();
-  }
-
-  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
-    printf(1, "create dd/ff/ff succeeded!\n");
-    exit();
-  }
-  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
-    printf(1, "create dd/xx/ff succeeded!\n");
-    exit();
-  }
-  if(open("dd", O_CREATE) >= 0){
-    printf(1, "create dd succeeded!\n");
-    exit();
-  }
-  if(open("dd", O_RDWR) >= 0){
-    printf(1, "open dd rdwr succeeded!\n");
-    exit();
-  }
-  if(open("dd", O_WRONLY) >= 0){
-    printf(1, "open dd wronly succeeded!\n");
-    exit();
-  }
-  if(link("dd/ff/ff", "dd/dd/xx") == 0){
-    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
-    exit();
-  }
-  if(link("dd/xx/ff", "dd/dd/xx") == 0){
-    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
-    exit();
-  }
-  if(link("dd/ff", "dd/dd/ffff") == 0){
-    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
-    exit();
-  }
-  if(mkdir("dd/ff/ff") == 0){
-    printf(1, "mkdir dd/ff/ff succeeded!\n");
-    exit();
-  }
-  if(mkdir("dd/xx/ff") == 0){
-    printf(1, "mkdir dd/xx/ff succeeded!\n");
-    exit();
-  }
-  if(mkdir("dd/dd/ffff") == 0){
-    printf(1, "mkdir dd/dd/ffff succeeded!\n");
-    exit();
-  }
-  if(unlink("dd/xx/ff") == 0){
-    printf(1, "unlink dd/xx/ff succeeded!\n");
-    exit();
-  }
-  if(unlink("dd/ff/ff") == 0){
-    printf(1, "unlink dd/ff/ff succeeded!\n");
-    exit();
-  }
-  if(chdir("dd/ff") == 0){
-    printf(1, "chdir dd/ff succeeded!\n");
-    exit();
-  }
-  if(chdir("dd/xx") == 0){
-    printf(1, "chdir dd/xx succeeded!\n");
-    exit();
-  }
-
-  if(unlink("dd/dd/ffff") != 0){
-    printf(1, "unlink dd/dd/ff failed\n");
-    exit();
-  }
-  if(unlink("dd/ff") != 0){
-    printf(1, "unlink dd/ff failed\n");
-    exit();
-  }
-  if(unlink("dd") == 0){
-    printf(1, "unlink non-empty dd succeeded!\n");
-    exit();
-  }
-  if(unlink("dd/dd") < 0){
-    printf(1, "unlink dd/dd failed\n");
-    exit();
-  }
-  if(unlink("dd") < 0){
-    printf(1, "unlink dd failed\n");
-    exit();
-  }
-
-  printf(1, "subdir ok\n");
-}
-
-// test writes that are larger than the log.
-void
-bigwrite(void)
-{
-  int fd, sz;
-
-  printf(1, "bigwrite test\n");
-
-  unlink("bigwrite");
-  for(sz = 499; sz < 12*512; sz += 471){
-    fd = open("bigwrite", O_CREATE | O_RDWR);
-    if(fd < 0){
-      printf(1, "cannot create bigwrite\n");
-      exit();
-    }
-    int i;
-    for(i = 0; i < 2; i++){
-      int cc = write(fd, buf, sz);
-      if(cc != sz){
-        printf(1, "write(%d) ret %d\n", sz, cc);
-        exit();
-      }
-    }
-    close(fd);
-    unlink("bigwrite");
-  }
-
-  printf(1, "bigwrite ok\n");
-}
-
-void
-bigfile(void)
-{
-  int fd, i, total, cc;
-
-  printf(1, "bigfile test\n");
-
-  unlink("bigfile");
-  fd = open("bigfile", O_CREATE | O_RDWR);
-  if(fd < 0){
-    printf(1, "cannot create bigfile");
-    exit();
-  }
-  for(i = 0; i < 20; i++){
-    memset(buf, i, 600);
-    if(write(fd, buf, 600) != 600){
-      printf(1, "write bigfile failed\n");
-      exit();
-    }
-  }
-  close(fd);
-
-  fd = open("bigfile", 0);
-  if(fd < 0){
-    printf(1, "cannot open bigfile\n");
-    exit();
-  }
-  total = 0;
-  for(i = 0; ; i++){
-    cc = read(fd, buf, 300);
-    if(cc < 0){
-      printf(1, "read bigfile failed\n");
-      exit();
-    }
-    if(cc == 0)
-      break;
-    if(cc != 300){
-      printf(1, "short read bigfile\n");
-      exit();
-    }
-    if(buf[0] != i/2 || buf[299] != i/2){
-      printf(1, "read bigfile wrong data\n");
-      exit();
-    }
-    total += cc;
-  }
-  close(fd);
-  if(total != 20*600){
-    printf(1, "read bigfile wrong total\n");
-    exit();
-  }
-  unlink("bigfile");
-
-  printf(1, "bigfile test ok\n");
-}
-
-void
-fourteen(void)
-{
-  int fd;
-
-  // DIRSIZ is 14.
-  printf(1, "fourteen test\n");
-
-  if(mkdir("12345678901234") != 0){
-    printf(1, "mkdir 12345678901234 failed\n");
-    exit();
-  }
-  if(mkdir("12345678901234/123456789012345") != 0){
-    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
-    exit();
-  }
-  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
-  if(fd < 0){
-    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
-    exit();
-  }
-  close(fd);
-  fd = open("12345678901234/12345678901234/12345678901234", 0);
-  if(fd < 0){
-    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
-    exit();
-  }
-  close(fd);
-
-  if(mkdir("12345678901234/12345678901234") == 0){
-    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
-    exit();
-  }
-  if(mkdir("123456789012345/12345678901234") == 0){
-    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
-    exit();
-  }
-
-  printf(1, "fourteen ok\n");
-}
-
-void
-rmdot(void)
-{
-  printf(1, "rmdot test\n");
-  if(mkdir("dots") != 0){
-    printf(1, "mkdir dots failed\n");
-    exit();
-  }
-  if(chdir("dots") != 0){
-    printf(1, "chdir dots failed\n");
-    exit();
-  }
-  if(unlink(".") == 0){
-    printf(1, "rm . worked!\n");
-    exit();
-  }
-  if(unlink("..") == 0){
-    printf(1, "rm .. worked!\n");
-    exit();
-  }
-  if(chdir("/") != 0){
-    printf(1, "chdir / failed\n");
-    exit();
-  }
-  if(unlink("dots/.") == 0){
-    printf(1, "unlink dots/. worked!\n");
-    exit();
-  }
-  if(unlink("dots/..") == 0){
-    printf(1, "unlink dots/.. worked!\n");
-    exit();
-  }
-  if(unlink("dots") != 0){
-    printf(1, "unlink dots failed!\n");
-    exit();
-  }
-  printf(1, "rmdot ok\n");
-}
-
-void
-dirfile(void)
-{
-  int fd;
-
-  printf(1, "dir vs file\n");
-
-  fd = open("dirfile", O_CREATE);
-  if(fd < 0){
-    printf(1, "create dirfile failed\n");
-    exit();
-  }
-  close(fd);
-  if(chdir("dirfile") == 0){
-    printf(1, "chdir dirfile succeeded!\n");
-    exit();
-  }
-  fd = open("dirfile/xx", 0);
-  if(fd >= 0){
-    printf(1, "create dirfile/xx succeeded!\n");
-    exit();
-  }
-  fd = open("dirfile/xx", O_CREATE);
-  if(fd >= 0){
-    printf(1, "create dirfile/xx succeeded!\n");
-    exit();
-  }
-  if(mkdir("dirfile/xx") == 0){
-    printf(1, "mkdir dirfile/xx succeeded!\n");
-    exit();
-  }
-  if(unlink("dirfile/xx") == 0){
-    printf(1, "unlink dirfile/xx succeeded!\n");
-    exit();
-  }
-  if(link("README", "dirfile/xx") == 0){
-    printf(1, "link to dirfile/xx succeeded!\n");
-    exit();
-  }
-  if(unlink("dirfile") != 0){
-    printf(1, "unlink dirfile failed!\n");
-    exit();
-  }
-
-  fd = open(".", O_RDWR);
-  if(fd >= 0){
-    printf(1, "open . for writing succeeded!\n");
-    exit();
-  }
-  fd = open(".", 0);
-  if(write(fd, "x", 1) > 0){
-    printf(1, "write . succeeded!\n");
-    exit();
-  }
-  close(fd);
-
-  printf(1, "dir vs file OK\n");
-}
-
-// test that iput() is called at the end of _namei()
-void
-iref(void)
-{
-  int i, fd;
-
-  printf(1, "empty file name\n");
-
-  // the 50 is NINODE
-  for(i = 0; i < 50 + 1; i++){
-    if(mkdir("irefd") != 0){
-      printf(1, "mkdir irefd failed\n");
-      exit();
-    }
-    if(chdir("irefd") != 0){
-      printf(1, "chdir irefd failed\n");
-      exit();
-    }
-
-    mkdir("");
-    link("README", "");
-    fd = open("", O_CREATE);
-    if(fd >= 0)
-      close(fd);
-    fd = open("xx", O_CREATE);
-    if(fd >= 0)
-      close(fd);
-    unlink("xx");
-  }
-
-  chdir("/");
-  printf(1, "empty file name OK\n");
-}
-
-// test that fork fails gracefully
-// the forktest binary also does this, but it runs out of proc entries first.
-// inside the bigger usertests binary, we run out of memory first.
-void
-forktest(void)
-{
-  int n, pid;
-
-  printf(1, "fork test\n");
-
-  for(n=0; n<1000; n++){
-    pid = fork();
-    if(pid < 0)
-      break;
-    if(pid == 0)
-      exit();
-  }
-
-  if(n == 1000){
-    printf(1, "fork claimed to work 1000 times!\n");
-    exit();
-  }
-
-  for(; n > 0; n--){
-    if(wait() < 0){
-      printf(1, "wait stopped early\n");
-      exit();
-    }
-  }
-
-  if(wait() != -1){
-    printf(1, "wait got too many\n");
-    exit();
-  }
-
-  printf(1, "fork test OK\n");
-}
-
-void
-sbrktest(void)
-{
-  int fds[2], pid, pids[10], ppid;
-  char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
-  uint amt;
-
-  printf(stdout, "sbrk test\n");
-  oldbrk = sbrk(0);
-
-  // can one sbrk() less than a page?
-  a = sbrk(0);
-  int i;
-  for(i = 0; i < 5000; i++){
-    b = sbrk(1);
-    if(b != a){
-      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
-      exit();
-    }
-    *b = 1;
-    a = b + 1;
-  }
-  pid = fork();
-  if(pid < 0){
-    printf(stdout, "sbrk test fork failed\n");
-    exit();
-  }
-  c = sbrk(1);
-  c = sbrk(1);
-  if(c != a + 1){
-    printf(stdout, "sbrk test failed post-fork\n");
-    exit();
-  }
-  if(pid == 0)
-    exit();
-  wait();
-
-  // can one grow address space to something big?
-#define BIG (100*1024*1024)
-  a = sbrk(0);
-  amt = (BIG) - (uint)a;
-  p = sbrk(amt);
-  if (p != a) {
-    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
-    exit();
-  }
-  lastaddr = (char*) (BIG-1);
-  *lastaddr = 99;
-
-  // can one de-allocate?
-  a = sbrk(0);
-  c = sbrk(-4096);
-  if(c == (char*)0xffffffff){
-    printf(stdout, "sbrk could not deallocate\n");
-    exit();
-  }
-  c = sbrk(0);
-  if(c != a - 4096){
-    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
-    exit();
-  }
-
-  // can one re-allocate that page?
-  a = sbrk(0);
-  c = sbrk(4096);
-  if(c != a || sbrk(0) != a + 4096){
-    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
-    exit();
-  }
-  if(*lastaddr == 99){
-    // should be zero
-    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
-    exit();
-  }
-
-  a = sbrk(0);
-  c = sbrk(-(sbrk(0) - oldbrk));
-  if(c != a){
-    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
-    exit();
-  }
-
-  // can we read the kernel's memory?
-  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
-    ppid = getpid();
-    pid = fork();
-    if(pid < 0){
-      printf(stdout, "fork failed\n");
-      exit();
-    }
-    if(pid == 0){
-      printf(stdout, "oops could read %x = %x\n", a, *a);
-      kill(ppid);
-      exit();
-    }
-    wait();
-  }
-
-  // if we run the system out of memory, does it clean up the last
-  // failed allocation?
-  if(pipe(fds) != 0){
-    printf(1, "pipe() failed\n");
-    exit();
-  }
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    if((pids[i] = fork()) == 0){
-      // allocate a lot of memory
-      sbrk(BIG - (uint)sbrk(0));
-      write(fds[1], "x", 1);
-      // sit around until killed
-      for(;;) sleep(1000);
-    }
-    if(pids[i] != -1)
-      read(fds[0], &scratch, 1);
-  }
-  // if those failed allocations freed up the pages they did allocate,
-  // we'll be able to allocate here
-  c = sbrk(4096);
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    if(pids[i] == -1)
-      continue;
-    kill(pids[i]);
-    wait();
-  }
-  if(c == (char*)0xffffffff){
-    printf(stdout, "failed sbrk leaked memory\n");
-    exit();
-  }
-
-  if(sbrk(0) > oldbrk)
-    sbrk(-(sbrk(0) - oldbrk));
-
-  printf(stdout, "sbrk test OK\n");
-}
-
-void
-validateint(int *p)
-{
-  int res;
-  asm("mov %%esp, %%ebx\n\t"
-      "mov %3, %%esp\n\t"
-      "int %2\n\t"
-      "mov %%ebx, %%esp" :
-      "=a" (res) :
-      "a" (SYS_sleep), "n" (T_SYSCALL), "c" (p) :
-      "ebx");
-}
-
-void
-validatetest(void)
-{
-  int hi, pid;
-  uint p;
-
-  printf(stdout, "validate test\n");
-  hi = 1100*1024;
-
-  for(p = 0; p <= (uint)hi; p += 4096){
-    if((pid = fork()) == 0){
-      // try to crash the kernel by passing in a badly placed integer
-      validateint((int*)p);
-      exit();
-    }
-    sleep(0);
-    sleep(0);
-    kill(pid);
-    wait();
-
-    // try to crash the kernel by passing in a bad string pointer
-    if(link("nosuchfile", (char*)p) != -1){
-      printf(stdout, "link should not succeed\n");
-      exit();
-    }
-  }
-
-  printf(stdout, "validate ok\n");
-}
-
-// does unintialized data start out zero?
-char uninit[10000];
-void
-bsstest(void)
-{
-  int i;
-
-  printf(stdout, "bss test\n");
-  for(i = 0; i < sizeof(uninit); i++){
-    if(uninit[i] != '\0'){
-      printf(stdout, "bss test failed\n");
-      exit();
-    }
-  }
-  printf(stdout, "bss test ok\n");
-}
-
-// does exec return an error if the arguments
-// are larger than a page? or does it write
-// below the stack and wreck the instructions/data?
-void
-bigargtest(void)
-{
-  int pid, fd;
-
-  unlink("bigarg-ok");
-  pid = fork();
-  if(pid == 0){
-    static char *args[MAXARG];
-    int i;
-    for(i = 0; i < MAXARG-1; i++)
-      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
-    args[MAXARG-1] = 0;
-    printf(stdout, "bigarg test\n");
-    exec("echo", args);
-    printf(stdout, "bigarg test ok\n");
-    fd = open("bigarg-ok", O_CREATE);
-    close(fd);
-    exit();
-  } else if(pid < 0){
-    printf(stdout, "bigargtest: fork failed\n");
-    exit();
-  }
-  wait();
-  fd = open("bigarg-ok", 0);
-  if(fd < 0){
-    printf(stdout, "bigarg test failed!\n");
-    exit();
-  }
-  close(fd);
-  unlink("bigarg-ok");
-}
-
-// what happens when the file system runs out of blocks?
-// answer: balloc panics, so this test is not useful.
-void
-fsfull()
-{
-  int nfiles;
-  int fsblocks = 0;
-
-  printf(1, "fsfull test\n");
-
-  for(nfiles = 0; ; nfiles++){
-    char name[64];
-    name[0] = 'f';
-    name[1] = '0' + nfiles / 1000;
-    name[2] = '0' + (nfiles % 1000) / 100;
-    name[3] = '0' + (nfiles % 100) / 10;
-    name[4] = '0' + (nfiles % 10);
-    name[5] = '\0';
-    printf(1, "writing %s\n", name);
-    int fd = open(name, O_CREATE|O_RDWR);
-    if(fd < 0){
-      printf(1, "open %s failed\n", name);
-      break;
-    }
-    int total = 0;
-    while(1){
-      int cc = write(fd, buf, 512);
-      if(cc < 512)
-        break;
-      total += cc;
-      fsblocks++;
-    }
-    printf(1, "wrote %d bytes\n", total);
-    close(fd);
-    if(total == 0)
-      break;
-  }
-
-  while(nfiles >= 0){
-    char name[64];
-    name[0] = 'f';
-    name[1] = '0' + nfiles / 1000;
-    name[2] = '0' + (nfiles % 1000) / 100;
-    name[3] = '0' + (nfiles % 100) / 10;
-    name[4] = '0' + (nfiles % 10);
-    name[5] = '\0';
-    unlink(name);
-    nfiles--;
-  }
-
-  printf(1, "fsfull test finished\n");
-}
-
-void
-uio()
-{
-  #define RTC_ADDR 0x70
-  #define RTC_DATA 0x71
-
-  ushort port = 0;
-  uchar val = 0;
-  int pid;
-
-  printf(1, "uio test\n");
-  pid = fork();
-  if(pid == 0){
-    port = RTC_ADDR;
-    val = 0x09;  /* year */
-    /* http://wiki.osdev.org/Inline_Assembly/Examples */
-    asm volatile("outb %0,%1"::"a"(val), "d" (port));
-    port = RTC_DATA;
-    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
-    printf(1, "uio: uio succeeded; test FAILED\n");
-    exit();
-  } else if(pid < 0){
-    printf (1, "fork failed\n");
-    exit();
-  }
-  wait();
-  printf(1, "uio test done\n");
-}
-
-void argptest()
-{
-  int fd;
-  fd = open("init", O_RDONLY);
-  if (fd < 0) {
-    printf(2, "open failed\n");
-    exit();
-  }
-  read(fd, sbrk(0) - 1, -1);
-  close(fd);
-  printf(1, "arg test passed\n");
-}
-
-unsigned long randstate = 1;
-unsigned int
-rand()
-{
-  randstate = randstate * 1664525 + 1013904223;
-  return randstate;
-}
-
-int
-main(int argc, char *argv[])
-{
-  printf(1, "usertests starting\n");
-
-  if(open("usertests.ran", 0) >= 0){
-    printf(1, "already ran user tests -- rebuild fs.img\n");
-    exit();
-  }
-  close(open("usertests.ran", O_CREATE));
-
-  argptest();
-  createdelete();
-  linkunlink();
-  concreate();
-  fourfiles();
-  sharedfd();
-
-  bigargtest();
-  bigwrite();
-  bigargtest();
-  bsstest();
-  sbrktest();
-  validatetest();
-
-  opentest();
-  writetest();
-  writetest1();
-  createtest();
-
-  openiputtest();
-  exitiputtest();
-  iputtest();
-
-  mem();
-  pipe1();
-  preempt();
-  exitwait();
-
-  rmdot();
-  fourteen();
-  bigfile();
-  subdir();
-  linktest();
-  unlinkread();
-  dirfile();
-  iref();
-  forktest();
-  bigdir(); // slow
-
-  uio();
-
-  exectest();
-
-  exit();
-}
diff -ruN xv6-public/usertests.d xv6-public-mynew/usertests.d
--- xv6-public/usertests.d	2022-09-05 09:51:06.350999170 +0530
+++ xv6-public-mynew/usertests.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-usertests.o: usertests.c /usr/include/stdc-predef.h param.h types.h \
- stat.h user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files xv6-public/usertests.o and xv6-public-mynew/usertests.o differ
diff -ruN xv6-public/usertests.sym xv6-public-mynew/usertests.sym
--- xv6-public/usertests.sym	2022-09-05 09:51:06.398999171 +0530
+++ xv6-public-mynew/usertests.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,107 +0,0 @@
-00000000 .text
-00003e68 .rodata
-0000561c .eh_frame
-00005efc .data
-00005f20 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 usertests.c
-00005f20 args.1461
-00000000 ulib.c
-00000000 printf.c
-00003a50 printint
-00005608 digits.1097
-00000000 umalloc.c
-00005fa0 freep
-00005fa4 base
-00003720 strcpy
-00000d60 exitwait
-00003b00 printf
-00005f00 stdout
-00003a3b thread_exit
-00003330 bigargtest
-00003950 memmove
-00000310 openiputtest
-000039cb mknod
-00003840 gets
-00003a03 getpid
-00000a60 pipe1
-00002c00 iref
-00003d60 malloc
-00003a13 sleep
-00000210 exitiputtest
-00003430 fsfull
-00001c60 bigdir
-00002d20 forktest
-00000690 writetest1
-00002490 bigwrite
-00000eb0 sharedfd
-00005efc randstate
-00003993 pipe
-00005fc0 uninit
-00002a00 dirfile
-000039a3 write
-000032c0 bsstest
-00005f04 echoargv
-000039db fstat
-000039b3 kill
-00003200 validatetest
-00002880 rmdot
-000039f3 chdir
-00000a10 exectest
-000039bb exec
-0000398b wait
-00003700 rand
-0000399b read
-00000c00 preempt
-000039d3 unlink
-00003690 argptest
-00000de0 mem
-0000397b fork
-00003a0b sbrk
-00003a1b uptime
-00005f18 __bss_start
-000037e0 memset
-00000860 createtest
-00000000 main
-00001270 createdelete
-00003750 strcmp
-000004b0 writetest
-000039fb dup
-00002dd0 sbrktest
-00000410 opentest
-00001da0 subdir
-00003610 uio
-00001630 linktest
-000086e0 buf
-00000920 dirtest
-00000120 iputtest
-000038c0 stat
-00002570 bigfile
-00005f18 _edata
-0000a6e4 _end
-000014a0 unlinkread
-000039e3 link
-00003983 exit
-00003910 atoi
-00001b50 linkunlink
-00003a23 draw
-0000a6e0 name
-000037a0 strlen
-000039c3 open
-00003800 strchr
-00003a2b thread_create
-00001850 concreate
-00002740 fourteen
-000031f0 validateint
-00001070 fourfiles
-000039eb mkdir
-000039ab close
-00003a33 thread_join
-00003cd0 free
Binary files xv6-public/usys.o and xv6-public-mynew/usys.o differ
diff -ruN xv6-public/usys.S xv6-public-mynew/usys.S
--- xv6-public/usys.S	2022-08-31 17:22:23.899203814 +0530
+++ xv6-public-mynew/usys.S	1970-01-01 05:30:00.000000000 +0530
@@ -1,35 +0,0 @@
-#include "syscall.h"
-#include "traps.h"
-
-#define SYSCALL(name) \
-  .globl name; \
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
-SYSCALL(exit)
-SYSCALL(wait)
-SYSCALL(pipe)
-SYSCALL(read)
-SYSCALL(write)
-SYSCALL(close)
-SYSCALL(kill)
-SYSCALL(exec)
-SYSCALL(open)
-SYSCALL(mknod)
-SYSCALL(unlink)
-SYSCALL(fstat)
-SYSCALL(link)
-SYSCALL(mkdir)
-SYSCALL(chdir)
-SYSCALL(dup)
-SYSCALL(getpid)
-SYSCALL(sbrk)
-SYSCALL(sleep)
-SYSCALL(uptime)
-SYSCALL(draw)
-SYSCALL(thread_create)
-SYSCALL(thread_join)
-SYSCALL(thread_exit)
Binary files xv6-public/vectors.o and xv6-public-mynew/vectors.o differ
diff -ruN xv6-public/vectors.pl xv6-public-mynew/vectors.pl
--- xv6-public/vectors.pl	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/vectors.pl	1970-01-01 05:30:00.000000000 +0530
@@ -1,47 +0,0 @@
-#!/usr/bin/perl -w
-
-# Generate vectors.S, the trap/interrupt entry points.
-# There has to be one entry point per interrupt number
-# since otherwise there's no way for trap() to discover
-# the interrupt number.
-
-print "# generated by vectors.pl - do not edit\n";
-print "# handlers\n";
-print ".globl alltraps\n";
-for(my $i = 0; $i < 256; $i++){
-    print ".globl vector$i\n";
-    print "vector$i:\n";
-    if(!($i == 8 || ($i >= 10 && $i <= 14) || $i == 17)){
-        print "  pushl \$0\n";
-    }
-    print "  pushl \$$i\n";
-    print "  jmp alltraps\n";
-}
-
-print "\n# vector table\n";
-print ".data\n";
-print ".globl vectors\n";
-print "vectors:\n";
-for(my $i = 0; $i < 256; $i++){
-    print "  .long vector$i\n";
-}
-
-# sample output:
-#   # handlers
-#   .globl alltraps
-#   .globl vector0
-#   vector0:
-#     pushl $0
-#     pushl $0
-#     jmp alltraps
-#   ...
-#   
-#   # vector table
-#   .data
-#   .globl vectors
-#   vectors:
-#     .long vector0
-#     .long vector1
-#     .long vector2
-#   ...
-
diff -ruN xv6-public/vectors.S xv6-public-mynew/vectors.S
--- xv6-public/vectors.S	2022-09-05 09:51:08.862999242 +0530
+++ xv6-public-mynew/vectors.S	1970-01-01 05:30:00.000000000 +0530
@@ -1,1537 +0,0 @@
-# generated by vectors.pl - do not edit
-# handlers
-.globl alltraps
-.globl vector0
-vector0:
-  pushl $0
-  pushl $0
-  jmp alltraps
-.globl vector1
-vector1:
-  pushl $0
-  pushl $1
-  jmp alltraps
-.globl vector2
-vector2:
-  pushl $0
-  pushl $2
-  jmp alltraps
-.globl vector3
-vector3:
-  pushl $0
-  pushl $3
-  jmp alltraps
-.globl vector4
-vector4:
-  pushl $0
-  pushl $4
-  jmp alltraps
-.globl vector5
-vector5:
-  pushl $0
-  pushl $5
-  jmp alltraps
-.globl vector6
-vector6:
-  pushl $0
-  pushl $6
-  jmp alltraps
-.globl vector7
-vector7:
-  pushl $0
-  pushl $7
-  jmp alltraps
-.globl vector8
-vector8:
-  pushl $8
-  jmp alltraps
-.globl vector9
-vector9:
-  pushl $0
-  pushl $9
-  jmp alltraps
-.globl vector10
-vector10:
-  pushl $10
-  jmp alltraps
-.globl vector11
-vector11:
-  pushl $11
-  jmp alltraps
-.globl vector12
-vector12:
-  pushl $12
-  jmp alltraps
-.globl vector13
-vector13:
-  pushl $13
-  jmp alltraps
-.globl vector14
-vector14:
-  pushl $14
-  jmp alltraps
-.globl vector15
-vector15:
-  pushl $0
-  pushl $15
-  jmp alltraps
-.globl vector16
-vector16:
-  pushl $0
-  pushl $16
-  jmp alltraps
-.globl vector17
-vector17:
-  pushl $17
-  jmp alltraps
-.globl vector18
-vector18:
-  pushl $0
-  pushl $18
-  jmp alltraps
-.globl vector19
-vector19:
-  pushl $0
-  pushl $19
-  jmp alltraps
-.globl vector20
-vector20:
-  pushl $0
-  pushl $20
-  jmp alltraps
-.globl vector21
-vector21:
-  pushl $0
-  pushl $21
-  jmp alltraps
-.globl vector22
-vector22:
-  pushl $0
-  pushl $22
-  jmp alltraps
-.globl vector23
-vector23:
-  pushl $0
-  pushl $23
-  jmp alltraps
-.globl vector24
-vector24:
-  pushl $0
-  pushl $24
-  jmp alltraps
-.globl vector25
-vector25:
-  pushl $0
-  pushl $25
-  jmp alltraps
-.globl vector26
-vector26:
-  pushl $0
-  pushl $26
-  jmp alltraps
-.globl vector27
-vector27:
-  pushl $0
-  pushl $27
-  jmp alltraps
-.globl vector28
-vector28:
-  pushl $0
-  pushl $28
-  jmp alltraps
-.globl vector29
-vector29:
-  pushl $0
-  pushl $29
-  jmp alltraps
-.globl vector30
-vector30:
-  pushl $0
-  pushl $30
-  jmp alltraps
-.globl vector31
-vector31:
-  pushl $0
-  pushl $31
-  jmp alltraps
-.globl vector32
-vector32:
-  pushl $0
-  pushl $32
-  jmp alltraps
-.globl vector33
-vector33:
-  pushl $0
-  pushl $33
-  jmp alltraps
-.globl vector34
-vector34:
-  pushl $0
-  pushl $34
-  jmp alltraps
-.globl vector35
-vector35:
-  pushl $0
-  pushl $35
-  jmp alltraps
-.globl vector36
-vector36:
-  pushl $0
-  pushl $36
-  jmp alltraps
-.globl vector37
-vector37:
-  pushl $0
-  pushl $37
-  jmp alltraps
-.globl vector38
-vector38:
-  pushl $0
-  pushl $38
-  jmp alltraps
-.globl vector39
-vector39:
-  pushl $0
-  pushl $39
-  jmp alltraps
-.globl vector40
-vector40:
-  pushl $0
-  pushl $40
-  jmp alltraps
-.globl vector41
-vector41:
-  pushl $0
-  pushl $41
-  jmp alltraps
-.globl vector42
-vector42:
-  pushl $0
-  pushl $42
-  jmp alltraps
-.globl vector43
-vector43:
-  pushl $0
-  pushl $43
-  jmp alltraps
-.globl vector44
-vector44:
-  pushl $0
-  pushl $44
-  jmp alltraps
-.globl vector45
-vector45:
-  pushl $0
-  pushl $45
-  jmp alltraps
-.globl vector46
-vector46:
-  pushl $0
-  pushl $46
-  jmp alltraps
-.globl vector47
-vector47:
-  pushl $0
-  pushl $47
-  jmp alltraps
-.globl vector48
-vector48:
-  pushl $0
-  pushl $48
-  jmp alltraps
-.globl vector49
-vector49:
-  pushl $0
-  pushl $49
-  jmp alltraps
-.globl vector50
-vector50:
-  pushl $0
-  pushl $50
-  jmp alltraps
-.globl vector51
-vector51:
-  pushl $0
-  pushl $51
-  jmp alltraps
-.globl vector52
-vector52:
-  pushl $0
-  pushl $52
-  jmp alltraps
-.globl vector53
-vector53:
-  pushl $0
-  pushl $53
-  jmp alltraps
-.globl vector54
-vector54:
-  pushl $0
-  pushl $54
-  jmp alltraps
-.globl vector55
-vector55:
-  pushl $0
-  pushl $55
-  jmp alltraps
-.globl vector56
-vector56:
-  pushl $0
-  pushl $56
-  jmp alltraps
-.globl vector57
-vector57:
-  pushl $0
-  pushl $57
-  jmp alltraps
-.globl vector58
-vector58:
-  pushl $0
-  pushl $58
-  jmp alltraps
-.globl vector59
-vector59:
-  pushl $0
-  pushl $59
-  jmp alltraps
-.globl vector60
-vector60:
-  pushl $0
-  pushl $60
-  jmp alltraps
-.globl vector61
-vector61:
-  pushl $0
-  pushl $61
-  jmp alltraps
-.globl vector62
-vector62:
-  pushl $0
-  pushl $62
-  jmp alltraps
-.globl vector63
-vector63:
-  pushl $0
-  pushl $63
-  jmp alltraps
-.globl vector64
-vector64:
-  pushl $0
-  pushl $64
-  jmp alltraps
-.globl vector65
-vector65:
-  pushl $0
-  pushl $65
-  jmp alltraps
-.globl vector66
-vector66:
-  pushl $0
-  pushl $66
-  jmp alltraps
-.globl vector67
-vector67:
-  pushl $0
-  pushl $67
-  jmp alltraps
-.globl vector68
-vector68:
-  pushl $0
-  pushl $68
-  jmp alltraps
-.globl vector69
-vector69:
-  pushl $0
-  pushl $69
-  jmp alltraps
-.globl vector70
-vector70:
-  pushl $0
-  pushl $70
-  jmp alltraps
-.globl vector71
-vector71:
-  pushl $0
-  pushl $71
-  jmp alltraps
-.globl vector72
-vector72:
-  pushl $0
-  pushl $72
-  jmp alltraps
-.globl vector73
-vector73:
-  pushl $0
-  pushl $73
-  jmp alltraps
-.globl vector74
-vector74:
-  pushl $0
-  pushl $74
-  jmp alltraps
-.globl vector75
-vector75:
-  pushl $0
-  pushl $75
-  jmp alltraps
-.globl vector76
-vector76:
-  pushl $0
-  pushl $76
-  jmp alltraps
-.globl vector77
-vector77:
-  pushl $0
-  pushl $77
-  jmp alltraps
-.globl vector78
-vector78:
-  pushl $0
-  pushl $78
-  jmp alltraps
-.globl vector79
-vector79:
-  pushl $0
-  pushl $79
-  jmp alltraps
-.globl vector80
-vector80:
-  pushl $0
-  pushl $80
-  jmp alltraps
-.globl vector81
-vector81:
-  pushl $0
-  pushl $81
-  jmp alltraps
-.globl vector82
-vector82:
-  pushl $0
-  pushl $82
-  jmp alltraps
-.globl vector83
-vector83:
-  pushl $0
-  pushl $83
-  jmp alltraps
-.globl vector84
-vector84:
-  pushl $0
-  pushl $84
-  jmp alltraps
-.globl vector85
-vector85:
-  pushl $0
-  pushl $85
-  jmp alltraps
-.globl vector86
-vector86:
-  pushl $0
-  pushl $86
-  jmp alltraps
-.globl vector87
-vector87:
-  pushl $0
-  pushl $87
-  jmp alltraps
-.globl vector88
-vector88:
-  pushl $0
-  pushl $88
-  jmp alltraps
-.globl vector89
-vector89:
-  pushl $0
-  pushl $89
-  jmp alltraps
-.globl vector90
-vector90:
-  pushl $0
-  pushl $90
-  jmp alltraps
-.globl vector91
-vector91:
-  pushl $0
-  pushl $91
-  jmp alltraps
-.globl vector92
-vector92:
-  pushl $0
-  pushl $92
-  jmp alltraps
-.globl vector93
-vector93:
-  pushl $0
-  pushl $93
-  jmp alltraps
-.globl vector94
-vector94:
-  pushl $0
-  pushl $94
-  jmp alltraps
-.globl vector95
-vector95:
-  pushl $0
-  pushl $95
-  jmp alltraps
-.globl vector96
-vector96:
-  pushl $0
-  pushl $96
-  jmp alltraps
-.globl vector97
-vector97:
-  pushl $0
-  pushl $97
-  jmp alltraps
-.globl vector98
-vector98:
-  pushl $0
-  pushl $98
-  jmp alltraps
-.globl vector99
-vector99:
-  pushl $0
-  pushl $99
-  jmp alltraps
-.globl vector100
-vector100:
-  pushl $0
-  pushl $100
-  jmp alltraps
-.globl vector101
-vector101:
-  pushl $0
-  pushl $101
-  jmp alltraps
-.globl vector102
-vector102:
-  pushl $0
-  pushl $102
-  jmp alltraps
-.globl vector103
-vector103:
-  pushl $0
-  pushl $103
-  jmp alltraps
-.globl vector104
-vector104:
-  pushl $0
-  pushl $104
-  jmp alltraps
-.globl vector105
-vector105:
-  pushl $0
-  pushl $105
-  jmp alltraps
-.globl vector106
-vector106:
-  pushl $0
-  pushl $106
-  jmp alltraps
-.globl vector107
-vector107:
-  pushl $0
-  pushl $107
-  jmp alltraps
-.globl vector108
-vector108:
-  pushl $0
-  pushl $108
-  jmp alltraps
-.globl vector109
-vector109:
-  pushl $0
-  pushl $109
-  jmp alltraps
-.globl vector110
-vector110:
-  pushl $0
-  pushl $110
-  jmp alltraps
-.globl vector111
-vector111:
-  pushl $0
-  pushl $111
-  jmp alltraps
-.globl vector112
-vector112:
-  pushl $0
-  pushl $112
-  jmp alltraps
-.globl vector113
-vector113:
-  pushl $0
-  pushl $113
-  jmp alltraps
-.globl vector114
-vector114:
-  pushl $0
-  pushl $114
-  jmp alltraps
-.globl vector115
-vector115:
-  pushl $0
-  pushl $115
-  jmp alltraps
-.globl vector116
-vector116:
-  pushl $0
-  pushl $116
-  jmp alltraps
-.globl vector117
-vector117:
-  pushl $0
-  pushl $117
-  jmp alltraps
-.globl vector118
-vector118:
-  pushl $0
-  pushl $118
-  jmp alltraps
-.globl vector119
-vector119:
-  pushl $0
-  pushl $119
-  jmp alltraps
-.globl vector120
-vector120:
-  pushl $0
-  pushl $120
-  jmp alltraps
-.globl vector121
-vector121:
-  pushl $0
-  pushl $121
-  jmp alltraps
-.globl vector122
-vector122:
-  pushl $0
-  pushl $122
-  jmp alltraps
-.globl vector123
-vector123:
-  pushl $0
-  pushl $123
-  jmp alltraps
-.globl vector124
-vector124:
-  pushl $0
-  pushl $124
-  jmp alltraps
-.globl vector125
-vector125:
-  pushl $0
-  pushl $125
-  jmp alltraps
-.globl vector126
-vector126:
-  pushl $0
-  pushl $126
-  jmp alltraps
-.globl vector127
-vector127:
-  pushl $0
-  pushl $127
-  jmp alltraps
-.globl vector128
-vector128:
-  pushl $0
-  pushl $128
-  jmp alltraps
-.globl vector129
-vector129:
-  pushl $0
-  pushl $129
-  jmp alltraps
-.globl vector130
-vector130:
-  pushl $0
-  pushl $130
-  jmp alltraps
-.globl vector131
-vector131:
-  pushl $0
-  pushl $131
-  jmp alltraps
-.globl vector132
-vector132:
-  pushl $0
-  pushl $132
-  jmp alltraps
-.globl vector133
-vector133:
-  pushl $0
-  pushl $133
-  jmp alltraps
-.globl vector134
-vector134:
-  pushl $0
-  pushl $134
-  jmp alltraps
-.globl vector135
-vector135:
-  pushl $0
-  pushl $135
-  jmp alltraps
-.globl vector136
-vector136:
-  pushl $0
-  pushl $136
-  jmp alltraps
-.globl vector137
-vector137:
-  pushl $0
-  pushl $137
-  jmp alltraps
-.globl vector138
-vector138:
-  pushl $0
-  pushl $138
-  jmp alltraps
-.globl vector139
-vector139:
-  pushl $0
-  pushl $139
-  jmp alltraps
-.globl vector140
-vector140:
-  pushl $0
-  pushl $140
-  jmp alltraps
-.globl vector141
-vector141:
-  pushl $0
-  pushl $141
-  jmp alltraps
-.globl vector142
-vector142:
-  pushl $0
-  pushl $142
-  jmp alltraps
-.globl vector143
-vector143:
-  pushl $0
-  pushl $143
-  jmp alltraps
-.globl vector144
-vector144:
-  pushl $0
-  pushl $144
-  jmp alltraps
-.globl vector145
-vector145:
-  pushl $0
-  pushl $145
-  jmp alltraps
-.globl vector146
-vector146:
-  pushl $0
-  pushl $146
-  jmp alltraps
-.globl vector147
-vector147:
-  pushl $0
-  pushl $147
-  jmp alltraps
-.globl vector148
-vector148:
-  pushl $0
-  pushl $148
-  jmp alltraps
-.globl vector149
-vector149:
-  pushl $0
-  pushl $149
-  jmp alltraps
-.globl vector150
-vector150:
-  pushl $0
-  pushl $150
-  jmp alltraps
-.globl vector151
-vector151:
-  pushl $0
-  pushl $151
-  jmp alltraps
-.globl vector152
-vector152:
-  pushl $0
-  pushl $152
-  jmp alltraps
-.globl vector153
-vector153:
-  pushl $0
-  pushl $153
-  jmp alltraps
-.globl vector154
-vector154:
-  pushl $0
-  pushl $154
-  jmp alltraps
-.globl vector155
-vector155:
-  pushl $0
-  pushl $155
-  jmp alltraps
-.globl vector156
-vector156:
-  pushl $0
-  pushl $156
-  jmp alltraps
-.globl vector157
-vector157:
-  pushl $0
-  pushl $157
-  jmp alltraps
-.globl vector158
-vector158:
-  pushl $0
-  pushl $158
-  jmp alltraps
-.globl vector159
-vector159:
-  pushl $0
-  pushl $159
-  jmp alltraps
-.globl vector160
-vector160:
-  pushl $0
-  pushl $160
-  jmp alltraps
-.globl vector161
-vector161:
-  pushl $0
-  pushl $161
-  jmp alltraps
-.globl vector162
-vector162:
-  pushl $0
-  pushl $162
-  jmp alltraps
-.globl vector163
-vector163:
-  pushl $0
-  pushl $163
-  jmp alltraps
-.globl vector164
-vector164:
-  pushl $0
-  pushl $164
-  jmp alltraps
-.globl vector165
-vector165:
-  pushl $0
-  pushl $165
-  jmp alltraps
-.globl vector166
-vector166:
-  pushl $0
-  pushl $166
-  jmp alltraps
-.globl vector167
-vector167:
-  pushl $0
-  pushl $167
-  jmp alltraps
-.globl vector168
-vector168:
-  pushl $0
-  pushl $168
-  jmp alltraps
-.globl vector169
-vector169:
-  pushl $0
-  pushl $169
-  jmp alltraps
-.globl vector170
-vector170:
-  pushl $0
-  pushl $170
-  jmp alltraps
-.globl vector171
-vector171:
-  pushl $0
-  pushl $171
-  jmp alltraps
-.globl vector172
-vector172:
-  pushl $0
-  pushl $172
-  jmp alltraps
-.globl vector173
-vector173:
-  pushl $0
-  pushl $173
-  jmp alltraps
-.globl vector174
-vector174:
-  pushl $0
-  pushl $174
-  jmp alltraps
-.globl vector175
-vector175:
-  pushl $0
-  pushl $175
-  jmp alltraps
-.globl vector176
-vector176:
-  pushl $0
-  pushl $176
-  jmp alltraps
-.globl vector177
-vector177:
-  pushl $0
-  pushl $177
-  jmp alltraps
-.globl vector178
-vector178:
-  pushl $0
-  pushl $178
-  jmp alltraps
-.globl vector179
-vector179:
-  pushl $0
-  pushl $179
-  jmp alltraps
-.globl vector180
-vector180:
-  pushl $0
-  pushl $180
-  jmp alltraps
-.globl vector181
-vector181:
-  pushl $0
-  pushl $181
-  jmp alltraps
-.globl vector182
-vector182:
-  pushl $0
-  pushl $182
-  jmp alltraps
-.globl vector183
-vector183:
-  pushl $0
-  pushl $183
-  jmp alltraps
-.globl vector184
-vector184:
-  pushl $0
-  pushl $184
-  jmp alltraps
-.globl vector185
-vector185:
-  pushl $0
-  pushl $185
-  jmp alltraps
-.globl vector186
-vector186:
-  pushl $0
-  pushl $186
-  jmp alltraps
-.globl vector187
-vector187:
-  pushl $0
-  pushl $187
-  jmp alltraps
-.globl vector188
-vector188:
-  pushl $0
-  pushl $188
-  jmp alltraps
-.globl vector189
-vector189:
-  pushl $0
-  pushl $189
-  jmp alltraps
-.globl vector190
-vector190:
-  pushl $0
-  pushl $190
-  jmp alltraps
-.globl vector191
-vector191:
-  pushl $0
-  pushl $191
-  jmp alltraps
-.globl vector192
-vector192:
-  pushl $0
-  pushl $192
-  jmp alltraps
-.globl vector193
-vector193:
-  pushl $0
-  pushl $193
-  jmp alltraps
-.globl vector194
-vector194:
-  pushl $0
-  pushl $194
-  jmp alltraps
-.globl vector195
-vector195:
-  pushl $0
-  pushl $195
-  jmp alltraps
-.globl vector196
-vector196:
-  pushl $0
-  pushl $196
-  jmp alltraps
-.globl vector197
-vector197:
-  pushl $0
-  pushl $197
-  jmp alltraps
-.globl vector198
-vector198:
-  pushl $0
-  pushl $198
-  jmp alltraps
-.globl vector199
-vector199:
-  pushl $0
-  pushl $199
-  jmp alltraps
-.globl vector200
-vector200:
-  pushl $0
-  pushl $200
-  jmp alltraps
-.globl vector201
-vector201:
-  pushl $0
-  pushl $201
-  jmp alltraps
-.globl vector202
-vector202:
-  pushl $0
-  pushl $202
-  jmp alltraps
-.globl vector203
-vector203:
-  pushl $0
-  pushl $203
-  jmp alltraps
-.globl vector204
-vector204:
-  pushl $0
-  pushl $204
-  jmp alltraps
-.globl vector205
-vector205:
-  pushl $0
-  pushl $205
-  jmp alltraps
-.globl vector206
-vector206:
-  pushl $0
-  pushl $206
-  jmp alltraps
-.globl vector207
-vector207:
-  pushl $0
-  pushl $207
-  jmp alltraps
-.globl vector208
-vector208:
-  pushl $0
-  pushl $208
-  jmp alltraps
-.globl vector209
-vector209:
-  pushl $0
-  pushl $209
-  jmp alltraps
-.globl vector210
-vector210:
-  pushl $0
-  pushl $210
-  jmp alltraps
-.globl vector211
-vector211:
-  pushl $0
-  pushl $211
-  jmp alltraps
-.globl vector212
-vector212:
-  pushl $0
-  pushl $212
-  jmp alltraps
-.globl vector213
-vector213:
-  pushl $0
-  pushl $213
-  jmp alltraps
-.globl vector214
-vector214:
-  pushl $0
-  pushl $214
-  jmp alltraps
-.globl vector215
-vector215:
-  pushl $0
-  pushl $215
-  jmp alltraps
-.globl vector216
-vector216:
-  pushl $0
-  pushl $216
-  jmp alltraps
-.globl vector217
-vector217:
-  pushl $0
-  pushl $217
-  jmp alltraps
-.globl vector218
-vector218:
-  pushl $0
-  pushl $218
-  jmp alltraps
-.globl vector219
-vector219:
-  pushl $0
-  pushl $219
-  jmp alltraps
-.globl vector220
-vector220:
-  pushl $0
-  pushl $220
-  jmp alltraps
-.globl vector221
-vector221:
-  pushl $0
-  pushl $221
-  jmp alltraps
-.globl vector222
-vector222:
-  pushl $0
-  pushl $222
-  jmp alltraps
-.globl vector223
-vector223:
-  pushl $0
-  pushl $223
-  jmp alltraps
-.globl vector224
-vector224:
-  pushl $0
-  pushl $224
-  jmp alltraps
-.globl vector225
-vector225:
-  pushl $0
-  pushl $225
-  jmp alltraps
-.globl vector226
-vector226:
-  pushl $0
-  pushl $226
-  jmp alltraps
-.globl vector227
-vector227:
-  pushl $0
-  pushl $227
-  jmp alltraps
-.globl vector228
-vector228:
-  pushl $0
-  pushl $228
-  jmp alltraps
-.globl vector229
-vector229:
-  pushl $0
-  pushl $229
-  jmp alltraps
-.globl vector230
-vector230:
-  pushl $0
-  pushl $230
-  jmp alltraps
-.globl vector231
-vector231:
-  pushl $0
-  pushl $231
-  jmp alltraps
-.globl vector232
-vector232:
-  pushl $0
-  pushl $232
-  jmp alltraps
-.globl vector233
-vector233:
-  pushl $0
-  pushl $233
-  jmp alltraps
-.globl vector234
-vector234:
-  pushl $0
-  pushl $234
-  jmp alltraps
-.globl vector235
-vector235:
-  pushl $0
-  pushl $235
-  jmp alltraps
-.globl vector236
-vector236:
-  pushl $0
-  pushl $236
-  jmp alltraps
-.globl vector237
-vector237:
-  pushl $0
-  pushl $237
-  jmp alltraps
-.globl vector238
-vector238:
-  pushl $0
-  pushl $238
-  jmp alltraps
-.globl vector239
-vector239:
-  pushl $0
-  pushl $239
-  jmp alltraps
-.globl vector240
-vector240:
-  pushl $0
-  pushl $240
-  jmp alltraps
-.globl vector241
-vector241:
-  pushl $0
-  pushl $241
-  jmp alltraps
-.globl vector242
-vector242:
-  pushl $0
-  pushl $242
-  jmp alltraps
-.globl vector243
-vector243:
-  pushl $0
-  pushl $243
-  jmp alltraps
-.globl vector244
-vector244:
-  pushl $0
-  pushl $244
-  jmp alltraps
-.globl vector245
-vector245:
-  pushl $0
-  pushl $245
-  jmp alltraps
-.globl vector246
-vector246:
-  pushl $0
-  pushl $246
-  jmp alltraps
-.globl vector247
-vector247:
-  pushl $0
-  pushl $247
-  jmp alltraps
-.globl vector248
-vector248:
-  pushl $0
-  pushl $248
-  jmp alltraps
-.globl vector249
-vector249:
-  pushl $0
-  pushl $249
-  jmp alltraps
-.globl vector250
-vector250:
-  pushl $0
-  pushl $250
-  jmp alltraps
-.globl vector251
-vector251:
-  pushl $0
-  pushl $251
-  jmp alltraps
-.globl vector252
-vector252:
-  pushl $0
-  pushl $252
-  jmp alltraps
-.globl vector253
-vector253:
-  pushl $0
-  pushl $253
-  jmp alltraps
-.globl vector254
-vector254:
-  pushl $0
-  pushl $254
-  jmp alltraps
-.globl vector255
-vector255:
-  pushl $0
-  pushl $255
-  jmp alltraps
-
-# vector table
-.data
-.globl vectors
-vectors:
-  .long vector0
-  .long vector1
-  .long vector2
-  .long vector3
-  .long vector4
-  .long vector5
-  .long vector6
-  .long vector7
-  .long vector8
-  .long vector9
-  .long vector10
-  .long vector11
-  .long vector12
-  .long vector13
-  .long vector14
-  .long vector15
-  .long vector16
-  .long vector17
-  .long vector18
-  .long vector19
-  .long vector20
-  .long vector21
-  .long vector22
-  .long vector23
-  .long vector24
-  .long vector25
-  .long vector26
-  .long vector27
-  .long vector28
-  .long vector29
-  .long vector30
-  .long vector31
-  .long vector32
-  .long vector33
-  .long vector34
-  .long vector35
-  .long vector36
-  .long vector37
-  .long vector38
-  .long vector39
-  .long vector40
-  .long vector41
-  .long vector42
-  .long vector43
-  .long vector44
-  .long vector45
-  .long vector46
-  .long vector47
-  .long vector48
-  .long vector49
-  .long vector50
-  .long vector51
-  .long vector52
-  .long vector53
-  .long vector54
-  .long vector55
-  .long vector56
-  .long vector57
-  .long vector58
-  .long vector59
-  .long vector60
-  .long vector61
-  .long vector62
-  .long vector63
-  .long vector64
-  .long vector65
-  .long vector66
-  .long vector67
-  .long vector68
-  .long vector69
-  .long vector70
-  .long vector71
-  .long vector72
-  .long vector73
-  .long vector74
-  .long vector75
-  .long vector76
-  .long vector77
-  .long vector78
-  .long vector79
-  .long vector80
-  .long vector81
-  .long vector82
-  .long vector83
-  .long vector84
-  .long vector85
-  .long vector86
-  .long vector87
-  .long vector88
-  .long vector89
-  .long vector90
-  .long vector91
-  .long vector92
-  .long vector93
-  .long vector94
-  .long vector95
-  .long vector96
-  .long vector97
-  .long vector98
-  .long vector99
-  .long vector100
-  .long vector101
-  .long vector102
-  .long vector103
-  .long vector104
-  .long vector105
-  .long vector106
-  .long vector107
-  .long vector108
-  .long vector109
-  .long vector110
-  .long vector111
-  .long vector112
-  .long vector113
-  .long vector114
-  .long vector115
-  .long vector116
-  .long vector117
-  .long vector118
-  .long vector119
-  .long vector120
-  .long vector121
-  .long vector122
-  .long vector123
-  .long vector124
-  .long vector125
-  .long vector126
-  .long vector127
-  .long vector128
-  .long vector129
-  .long vector130
-  .long vector131
-  .long vector132
-  .long vector133
-  .long vector134
-  .long vector135
-  .long vector136
-  .long vector137
-  .long vector138
-  .long vector139
-  .long vector140
-  .long vector141
-  .long vector142
-  .long vector143
-  .long vector144
-  .long vector145
-  .long vector146
-  .long vector147
-  .long vector148
-  .long vector149
-  .long vector150
-  .long vector151
-  .long vector152
-  .long vector153
-  .long vector154
-  .long vector155
-  .long vector156
-  .long vector157
-  .long vector158
-  .long vector159
-  .long vector160
-  .long vector161
-  .long vector162
-  .long vector163
-  .long vector164
-  .long vector165
-  .long vector166
-  .long vector167
-  .long vector168
-  .long vector169
-  .long vector170
-  .long vector171
-  .long vector172
-  .long vector173
-  .long vector174
-  .long vector175
-  .long vector176
-  .long vector177
-  .long vector178
-  .long vector179
-  .long vector180
-  .long vector181
-  .long vector182
-  .long vector183
-  .long vector184
-  .long vector185
-  .long vector186
-  .long vector187
-  .long vector188
-  .long vector189
-  .long vector190
-  .long vector191
-  .long vector192
-  .long vector193
-  .long vector194
-  .long vector195
-  .long vector196
-  .long vector197
-  .long vector198
-  .long vector199
-  .long vector200
-  .long vector201
-  .long vector202
-  .long vector203
-  .long vector204
-  .long vector205
-  .long vector206
-  .long vector207
-  .long vector208
-  .long vector209
-  .long vector210
-  .long vector211
-  .long vector212
-  .long vector213
-  .long vector214
-  .long vector215
-  .long vector216
-  .long vector217
-  .long vector218
-  .long vector219
-  .long vector220
-  .long vector221
-  .long vector222
-  .long vector223
-  .long vector224
-  .long vector225
-  .long vector226
-  .long vector227
-  .long vector228
-  .long vector229
-  .long vector230
-  .long vector231
-  .long vector232
-  .long vector233
-  .long vector234
-  .long vector235
-  .long vector236
-  .long vector237
-  .long vector238
-  .long vector239
-  .long vector240
-  .long vector241
-  .long vector242
-  .long vector243
-  .long vector244
-  .long vector245
-  .long vector246
-  .long vector247
-  .long vector248
-  .long vector249
-  .long vector250
-  .long vector251
-  .long vector252
-  .long vector253
-  .long vector254
-  .long vector255
diff -ruN xv6-public/vm.c xv6-public-mynew/vm.c
--- xv6-public/vm.c	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/vm.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,394 +0,0 @@
-#include "param.h"
-#include "types.h"
-#include "defs.h"
-#include "x86.h"
-#include "memlayout.h"
-#include "mmu.h"
-#include "proc.h"
-#include "elf.h"
-
-extern char data[];  // defined by kernel.ld
-pde_t *kpgdir;  // for use in scheduler()
-
-// Set up CPU's kernel segment descriptors.
-// Run once on entry on each CPU.
-void
-seginit(void)
-{
-  struct cpu *c;
-
-  // Map "logical" addresses to virtual addresses using identity map.
-  // Cannot share a CODE descriptor for both kernel and user
-  // because it would have to have DPL_USR, but the CPU forbids
-  // an interrupt from CPL=0 to DPL=3.
-  c = &cpus[cpuid()];
-  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-  lgdt(c->gdt, sizeof(c->gdt));
-}
-
-// Return the address of the PTE in page table pgdir
-// that corresponds to virtual address va.  If alloc!=0,
-// create any required page table pages.
-static pte_t *
-walkpgdir(pde_t *pgdir, const void *va, int alloc)
-{
-  pde_t *pde;
-  pte_t *pgtab;
-
-  pde = &pgdir[PDX(va)];
-  if(*pde & PTE_P){
-    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-  } else {
-    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-      return 0;
-    // Make sure all those PTE_P bits are zero.
-    memset(pgtab, 0, PGSIZE);
-    // The permissions here are overly generous, but they can
-    // be further restricted by the permissions in the page table
-    // entries, if necessary.
-    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-  }
-  return &pgtab[PTX(va)];
-}
-
-// Create PTEs for virtual addresses starting at va that refer to
-// physical addresses starting at pa. va and size might not
-// be page-aligned.
-static int
-mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
-{
-  char *a, *last;
-  pte_t *pte;
-
-  a = (char*)PGROUNDDOWN((uint)va);
-  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-  for(;;){
-    if((pte = walkpgdir(pgdir, a, 1)) == 0)
-      return -1;
-    if(*pte & PTE_P)
-      panic("remap");
-    *pte = pa | perm | PTE_P;
-    if(a == last)
-      break;
-    a += PGSIZE;
-    pa += PGSIZE;
-  }
-  return 0;
-}
-
-// There is one page table per process, plus one that's used when
-// a CPU is not running any process (kpgdir). The kernel uses the
-// current process's page table during system calls and interrupts;
-// page protection bits prevent user code from using the kernel's
-// mappings.
-//
-// setupkvm() and exec() set up every page table like this:
-//
-//   0..KERNBASE: user memory (text+data+stack+heap), mapped to
-//                phys memory allocated by the kernel
-//   KERNBASE..KERNBASE+EXTMEM: mapped to 0..EXTMEM (for I/O space)
-//   KERNBASE+EXTMEM..data: mapped to EXTMEM..V2P(data)
-//                for the kernel's instructions and r/o data
-//   data..KERNBASE+PHYSTOP: mapped to V2P(data)..PHYSTOP,
-//                                  rw data + free physical memory
-//   0xfe000000..0: mapped direct (devices such as ioapic)
-//
-// The kernel allocates physical memory for its heap and for user memory
-// between V2P(end) and the end of physical memory (PHYSTOP)
-// (directly addressable from end..P2V(PHYSTOP)).
-
-// This table defines the kernel's mappings, which are present in
-// every process's page table.
-static struct kmap {
-  void *virt;
-  uint phys_start;
-  uint phys_end;
-  int perm;
-} kmap[] = {
- { (void*)KERNBASE, 0,             EXTMEM,    PTE_W}, // I/O space
- { (void*)KERNLINK, V2P(KERNLINK), V2P(data), 0},     // kern text+rodata
- { (void*)data,     V2P(data),     PHYSTOP,   PTE_W}, // kern data+memory
- { (void*)DEVSPACE, DEVSPACE,      0,         PTE_W}, // more devices
-};
-
-// Set up kernel part of a page table.
-pde_t*
-setupkvm(void)
-{
-  pde_t *pgdir;
-  struct kmap *k;
-
-  if((pgdir = (pde_t*)kalloc()) == 0)
-    return 0;
-  memset(pgdir, 0, PGSIZE);
-  if (P2V(PHYSTOP) > (void*)DEVSPACE)
-    panic("PHYSTOP too high");
-  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-                (uint)k->phys_start, k->perm) < 0) {
-      freevm(pgdir);
-      return 0;
-    }
-  return pgdir;
-}
-
-// Allocate one page table for the machine for the kernel address
-// space for scheduler processes.
-void
-kvmalloc(void)
-{
-  kpgdir = setupkvm();
-  switchkvm();
-}
-
-// Switch h/w page table register to the kernel-only page table,
-// for when no process is running.
-void
-switchkvm(void)
-{
-  lcr3(V2P(kpgdir));   // switch to the kernel page table
-}
-
-// Switch TSS and h/w page table to correspond to process p.
-void
-switchuvm(struct proc *p)
-{
-  if(p == 0)
-    panic("switchuvm: no process");
-  if(p->kstack == 0)
-    panic("switchuvm: no kstack");
-  if(p->pgdir == 0)
-    panic("switchuvm: no pgdir");
-
-  pushcli();
-  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-                                sizeof(mycpu()->ts)-1, 0);
-  mycpu()->gdt[SEG_TSS].s = 0;
-  mycpu()->ts.ss0 = SEG_KDATA << 3;
-  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-  // setting IOPL=0 in eflags *and* iomb beyond the tss segment limit
-  // forbids I/O instructions (e.g., inb and outb) from user space
-  mycpu()->ts.iomb = (ushort) 0xFFFF;
-  ltr(SEG_TSS << 3);
-  lcr3(V2P(p->pgdir));  // switch to process's address space
-  popcli();
-}
-
-// Load the initcode into address 0 of pgdir.
-// sz must be less than a page.
-void
-inituvm(pde_t *pgdir, char *init, uint sz)
-{
-  char *mem;
-
-  if(sz >= PGSIZE)
-    panic("inituvm: more than a page");
-  mem = kalloc();
-  memset(mem, 0, PGSIZE);
-  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-  memmove(mem, init, sz);
-}
-
-// Load a program segment into pgdir.  addr must be page-aligned
-// and the pages from addr to addr+sz must already be mapped.
-int
-loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
-{
-  uint i, pa, n;
-  pte_t *pte;
-
-  if((uint) addr % PGSIZE != 0)
-    panic("loaduvm: addr must be page aligned");
-  for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-      panic("loaduvm: address should exist");
-    pa = PTE_ADDR(*pte);
-    if(sz - i < PGSIZE)
-      n = sz - i;
-    else
-      n = PGSIZE;
-    if(readi(ip, P2V(pa), offset+i, n) != n)
-      return -1;
-  }
-  return 0;
-}
-
-// Allocate page tables and physical memory to grow process from oldsz to
-// newsz, which need not be page aligned.  Returns new size or 0 on error.
-int
-allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-{
-  char *mem;
-  uint a;
-
-  if(newsz >= KERNBASE)
-    return 0;
-  if(newsz < oldsz)
-    return oldsz;
-
-  a = PGROUNDUP(oldsz);
-  for(; a < newsz; a += PGSIZE){
-    mem = kalloc();
-    if(mem == 0){
-      cprintf("allocuvm out of memory\n");
-      deallocuvm(pgdir, newsz, oldsz);
-      return 0;
-    }
-    memset(mem, 0, PGSIZE);
-    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-      cprintf("allocuvm out of memory (2)\n");
-      deallocuvm(pgdir, newsz, oldsz);
-      kfree(mem);
-      return 0;
-    }
-  }
-  return newsz;
-}
-
-// Deallocate user pages to bring the process size from oldsz to
-// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
-// need to be less than oldsz.  oldsz can be larger than the actual
-// process size.  Returns the new process size.
-int
-deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-{
-  pte_t *pte;
-  uint a, pa;
-
-  if(newsz >= oldsz)
-    return oldsz;
-
-  a = PGROUNDUP(newsz);
-  for(; a  < oldsz; a += PGSIZE){
-    pte = walkpgdir(pgdir, (char*)a, 0);
-    if(!pte)
-      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-    else if((*pte & PTE_P) != 0){
-      pa = PTE_ADDR(*pte);
-      if(pa == 0)
-        panic("kfree");
-      char *v = P2V(pa);
-      kfree(v);
-      *pte = 0;
-    }
-  }
-  return newsz;
-}
-
-// Free a page table and all the physical memory pages
-// in the user part.
-void
-freevm(pde_t *pgdir)
-{
-  uint i;
-
-  if(pgdir == 0)
-    panic("freevm: no pgdir");
-  deallocuvm(pgdir, KERNBASE, 0);
-  for(i = 0; i < NPDENTRIES; i++){
-    if(pgdir[i] & PTE_P){
-      char * v = P2V(PTE_ADDR(pgdir[i]));
-      kfree(v);
-    }
-  }
-  kfree((char*)pgdir);
-}
-
-// Clear PTE_U on a page. Used to create an inaccessible
-// page beneath the user stack.
-void
-clearpteu(pde_t *pgdir, char *uva)
-{
-  pte_t *pte;
-
-  pte = walkpgdir(pgdir, uva, 0);
-  if(pte == 0)
-    panic("clearpteu");
-  *pte &= ~PTE_U;
-}
-
-// Given a parent process's page table, create a copy
-// of it for a child.
-pde_t*
-copyuvm(pde_t *pgdir, uint sz)
-{
-  pde_t *d;
-  pte_t *pte;
-  uint pa, i, flags;
-  char *mem;
-
-  if((d = setupkvm()) == 0)
-    return 0;
-  for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-      panic("copyuvm: pte should exist");
-    if(!(*pte & PTE_P))
-      panic("copyuvm: page not present");
-    pa = PTE_ADDR(*pte);
-    flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto bad;
-    memmove(mem, (char*)P2V(pa), PGSIZE);
-    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-      kfree(mem);
-      goto bad;
-    }
-  }
-  return d;
-
-bad:
-  freevm(d);
-  return 0;
-}
-
-//PAGEBREAK!
-// Map user virtual address to kernel address.
-char*
-uva2ka(pde_t *pgdir, char *uva)
-{
-  pte_t *pte;
-
-  pte = walkpgdir(pgdir, uva, 0);
-  if((*pte & PTE_P) == 0)
-    return 0;
-  if((*pte & PTE_U) == 0)
-    return 0;
-  return (char*)P2V(PTE_ADDR(*pte));
-}
-
-// Copy len bytes from p to user address va in page table pgdir.
-// Most useful when pgdir is not the current page table.
-// uva2ka ensures this only works for PTE_U pages.
-int
-copyout(pde_t *pgdir, uint va, void *p, uint len)
-{
-  char *buf, *pa0;
-  uint n, va0;
-
-  buf = (char*)p;
-  while(len > 0){
-    va0 = (uint)PGROUNDDOWN(va);
-    pa0 = uva2ka(pgdir, (char*)va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (va - va0);
-    if(n > len)
-      n = len;
-    memmove(pa0 + (va - va0), buf, n);
-    len -= n;
-    buf += n;
-    va = va0 + PGSIZE;
-  }
-  return 0;
-}
-
-//PAGEBREAK!
-// Blank page.
-//PAGEBREAK!
-// Blank page.
-//PAGEBREAK!
-// Blank page.
-
diff -ruN xv6-public/vm.d xv6-public-mynew/vm.d
--- xv6-public/vm.d	2022-09-05 09:51:09.014999246 +0530
+++ xv6-public-mynew/vm.d	1970-01-01 05:30:00.000000000 +0530
@@ -1,2 +0,0 @@
-vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
- memlayout.h mmu.h proc.h elf.h
Binary files xv6-public/vm.o and xv6-public-mynew/vm.o differ
Binary files xv6-public/_wc and xv6-public-mynew/_wc differ
diff -ruN xv6-public/wc.asm xv6-public-mynew/wc.asm
--- xv6-public/wc.asm	2022-09-05 09:51:06.466999173 +0530
+++ xv6-public-mynew/wc.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1359 +0,0 @@
-
-_wc:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  printf(1, "%d %d %d %s\n", l, w, c, name);
-}
-
-int
-main(int argc, char *argv[])
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	57                   	push   %edi
-  12:	56                   	push   %esi
-  13:	be 01 00 00 00       	mov    $0x1,%esi
-  18:	53                   	push   %ebx
-  19:	51                   	push   %ecx
-  1a:	83 ec 18             	sub    $0x18,%esp
-  1d:	8b 01                	mov    (%ecx),%eax
-  1f:	8b 59 04             	mov    0x4(%ecx),%ebx
-  22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  25:	83 c3 04             	add    $0x4,%ebx
-  int fd, i;
-
-  if(argc <= 1){
-  28:	83 f8 01             	cmp    $0x1,%eax
-  2b:	7e 52                	jle    7f <main+0x7f>
-  2d:	8d 76 00             	lea    0x0(%esi),%esi
-    wc(0, "");
-    exit();
-  }
-
-  for(i = 1; i < argc; i++){
-    if((fd = open(argv[i], 0)) < 0){
-  30:	83 ec 08             	sub    $0x8,%esp
-  33:	6a 00                	push   $0x0
-  35:	ff 33                	pushl  (%ebx)
-  37:	e8 f7 03 00 00       	call   433 <open>
-  3c:	83 c4 10             	add    $0x10,%esp
-  3f:	89 c7                	mov    %eax,%edi
-  41:	85 c0                	test   %eax,%eax
-  43:	78 26                	js     6b <main+0x6b>
-      printf(1, "wc: cannot open %s\n", argv[i]);
-      exit();
-    }
-    wc(fd, argv[i]);
-  45:	83 ec 08             	sub    $0x8,%esp
-  48:	ff 33                	pushl  (%ebx)
-  for(i = 1; i < argc; i++){
-  4a:	83 c6 01             	add    $0x1,%esi
-  4d:	83 c3 04             	add    $0x4,%ebx
-    wc(fd, argv[i]);
-  50:	50                   	push   %eax
-  51:	e8 4a 00 00 00       	call   a0 <wc>
-    close(fd);
-  56:	89 3c 24             	mov    %edi,(%esp)
-  59:	e8 bd 03 00 00       	call   41b <close>
-  for(i = 1; i < argc; i++){
-  5e:	83 c4 10             	add    $0x10,%esp
-  61:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
-  64:	75 ca                	jne    30 <main+0x30>
-  }
-  exit();
-  66:	e8 88 03 00 00       	call   3f3 <exit>
-      printf(1, "wc: cannot open %s\n", argv[i]);
-  6b:	50                   	push   %eax
-  6c:	ff 33                	pushl  (%ebx)
-  6e:	68 fb 08 00 00       	push   $0x8fb
-  73:	6a 01                	push   $0x1
-  75:	e8 f6 04 00 00       	call   570 <printf>
-      exit();
-  7a:	e8 74 03 00 00       	call   3f3 <exit>
-    wc(0, "");
-  7f:	52                   	push   %edx
-  80:	52                   	push   %edx
-  81:	68 ed 08 00 00       	push   $0x8ed
-  86:	6a 00                	push   $0x0
-  88:	e8 13 00 00 00       	call   a0 <wc>
-    exit();
-  8d:	e8 61 03 00 00       	call   3f3 <exit>
-  92:	66 90                	xchg   %ax,%ax
-  94:	66 90                	xchg   %ax,%ax
-  96:	66 90                	xchg   %ax,%ax
-  98:	66 90                	xchg   %ax,%ax
-  9a:	66 90                	xchg   %ax,%ax
-  9c:	66 90                	xchg   %ax,%ax
-  9e:	66 90                	xchg   %ax,%ax
-
-000000a0 <wc>:
-{
-  a0:	f3 0f 1e fb          	endbr32 
-  a4:	55                   	push   %ebp
-  a5:	89 e5                	mov    %esp,%ebp
-  a7:	57                   	push   %edi
-  a8:	56                   	push   %esi
-  a9:	53                   	push   %ebx
-  l = w = c = 0;
-  aa:	31 db                	xor    %ebx,%ebx
-{
-  ac:	83 ec 1c             	sub    $0x1c,%esp
-  inword = 0;
-  af:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-  l = w = c = 0;
-  b6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
-  bd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-  c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-  c8:	83 ec 04             	sub    $0x4,%esp
-  cb:	68 00 02 00 00       	push   $0x200
-  d0:	68 20 0c 00 00       	push   $0xc20
-  d5:	ff 75 08             	pushl  0x8(%ebp)
-  d8:	e8 2e 03 00 00       	call   40b <read>
-  dd:	83 c4 10             	add    $0x10,%esp
-  e0:	89 c6                	mov    %eax,%esi
-  e2:	85 c0                	test   %eax,%eax
-  e4:	7e 62                	jle    148 <wc+0xa8>
-    for(i=0; i<n; i++){
-  e6:	31 ff                	xor    %edi,%edi
-  e8:	eb 14                	jmp    fe <wc+0x5e>
-  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        inword = 0;
-  f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-    for(i=0; i<n; i++){
-  f7:	83 c7 01             	add    $0x1,%edi
-  fa:	39 fe                	cmp    %edi,%esi
-  fc:	74 42                	je     140 <wc+0xa0>
-      if(buf[i] == '\n')
-  fe:	0f be 87 20 0c 00 00 	movsbl 0xc20(%edi),%eax
-        l++;
- 105:	31 c9                	xor    %ecx,%ecx
- 107:	3c 0a                	cmp    $0xa,%al
- 109:	0f 94 c1             	sete   %cl
-      if(strchr(" \r\t\n\v", buf[i]))
- 10c:	83 ec 08             	sub    $0x8,%esp
- 10f:	50                   	push   %eax
-        l++;
- 110:	01 cb                	add    %ecx,%ebx
-      if(strchr(" \r\t\n\v", buf[i]))
- 112:	68 d8 08 00 00       	push   $0x8d8
- 117:	e8 54 01 00 00       	call   270 <strchr>
- 11c:	83 c4 10             	add    $0x10,%esp
- 11f:	85 c0                	test   %eax,%eax
- 121:	75 cd                	jne    f0 <wc+0x50>
-      else if(!inword){
- 123:	8b 55 e4             	mov    -0x1c(%ebp),%edx
- 126:	85 d2                	test   %edx,%edx
- 128:	75 cd                	jne    f7 <wc+0x57>
-    for(i=0; i<n; i++){
- 12a:	83 c7 01             	add    $0x1,%edi
-        w++;
- 12d:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
-        inword = 1;
- 131:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
-    for(i=0; i<n; i++){
- 138:	39 fe                	cmp    %edi,%esi
- 13a:	75 c2                	jne    fe <wc+0x5e>
- 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 140:	01 75 dc             	add    %esi,-0x24(%ebp)
- 143:	eb 83                	jmp    c8 <wc+0x28>
- 145:	8d 76 00             	lea    0x0(%esi),%esi
-  if(n < 0){
- 148:	75 24                	jne    16e <wc+0xce>
-  printf(1, "%d %d %d %s\n", l, w, c, name);
- 14a:	83 ec 08             	sub    $0x8,%esp
- 14d:	ff 75 0c             	pushl  0xc(%ebp)
- 150:	ff 75 dc             	pushl  -0x24(%ebp)
- 153:	ff 75 e0             	pushl  -0x20(%ebp)
- 156:	53                   	push   %ebx
- 157:	68 ee 08 00 00       	push   $0x8ee
- 15c:	6a 01                	push   $0x1
- 15e:	e8 0d 04 00 00       	call   570 <printf>
-}
- 163:	83 c4 20             	add    $0x20,%esp
- 166:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 169:	5b                   	pop    %ebx
- 16a:	5e                   	pop    %esi
- 16b:	5f                   	pop    %edi
- 16c:	5d                   	pop    %ebp
- 16d:	c3                   	ret    
-    printf(1, "wc: read error\n");
- 16e:	50                   	push   %eax
- 16f:	50                   	push   %eax
- 170:	68 de 08 00 00       	push   $0x8de
- 175:	6a 01                	push   $0x1
- 177:	e8 f4 03 00 00       	call   570 <printf>
-    exit();
- 17c:	e8 72 02 00 00       	call   3f3 <exit>
- 181:	66 90                	xchg   %ax,%ax
- 183:	66 90                	xchg   %ax,%ax
- 185:	66 90                	xchg   %ax,%ax
- 187:	66 90                	xchg   %ax,%ax
- 189:	66 90                	xchg   %ax,%ax
- 18b:	66 90                	xchg   %ax,%ax
- 18d:	66 90                	xchg   %ax,%ax
- 18f:	90                   	nop
-
-00000190 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 190:	f3 0f 1e fb          	endbr32 
- 194:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 195:	31 c0                	xor    %eax,%eax
-{
- 197:	89 e5                	mov    %esp,%ebp
- 199:	53                   	push   %ebx
- 19a:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 19d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
- 1a0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 1a4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 1a7:	83 c0 01             	add    $0x1,%eax
- 1aa:	84 d2                	test   %dl,%dl
- 1ac:	75 f2                	jne    1a0 <strcpy+0x10>
-    ;
-  return os;
-}
- 1ae:	89 c8                	mov    %ecx,%eax
- 1b0:	5b                   	pop    %ebx
- 1b1:	5d                   	pop    %ebp
- 1b2:	c3                   	ret    
- 1b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000001c0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 1c0:	f3 0f 1e fb          	endbr32 
- 1c4:	55                   	push   %ebp
- 1c5:	89 e5                	mov    %esp,%ebp
- 1c7:	53                   	push   %ebx
- 1c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 1cb:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
- 1ce:	0f b6 01             	movzbl (%ecx),%eax
- 1d1:	0f b6 1a             	movzbl (%edx),%ebx
- 1d4:	84 c0                	test   %al,%al
- 1d6:	75 19                	jne    1f1 <strcmp+0x31>
- 1d8:	eb 26                	jmp    200 <strcmp+0x40>
- 1da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 1e0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
- 1e4:	83 c1 01             	add    $0x1,%ecx
- 1e7:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
- 1ea:	0f b6 1a             	movzbl (%edx),%ebx
- 1ed:	84 c0                	test   %al,%al
- 1ef:	74 0f                	je     200 <strcmp+0x40>
- 1f1:	38 d8                	cmp    %bl,%al
- 1f3:	74 eb                	je     1e0 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
- 1f5:	29 d8                	sub    %ebx,%eax
-}
- 1f7:	5b                   	pop    %ebx
- 1f8:	5d                   	pop    %ebp
- 1f9:	c3                   	ret    
- 1fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 200:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
- 202:	29 d8                	sub    %ebx,%eax
-}
- 204:	5b                   	pop    %ebx
- 205:	5d                   	pop    %ebp
- 206:	c3                   	ret    
- 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 20e:	66 90                	xchg   %ax,%ax
-
-00000210 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 210:	f3 0f 1e fb          	endbr32 
- 214:	55                   	push   %ebp
- 215:	89 e5                	mov    %esp,%ebp
- 217:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 21a:	80 3a 00             	cmpb   $0x0,(%edx)
- 21d:	74 21                	je     240 <strlen+0x30>
- 21f:	31 c0                	xor    %eax,%eax
- 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 228:	83 c0 01             	add    $0x1,%eax
- 22b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 22f:	89 c1                	mov    %eax,%ecx
- 231:	75 f5                	jne    228 <strlen+0x18>
-    ;
-  return n;
-}
- 233:	89 c8                	mov    %ecx,%eax
- 235:	5d                   	pop    %ebp
- 236:	c3                   	ret    
- 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 23e:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 240:	31 c9                	xor    %ecx,%ecx
-}
- 242:	5d                   	pop    %ebp
- 243:	89 c8                	mov    %ecx,%eax
- 245:	c3                   	ret    
- 246:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 24d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000250 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 250:	f3 0f 1e fb          	endbr32 
- 254:	55                   	push   %ebp
- 255:	89 e5                	mov    %esp,%ebp
- 257:	57                   	push   %edi
- 258:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 25b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 25e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 261:	89 d7                	mov    %edx,%edi
- 263:	fc                   	cld    
- 264:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 266:	89 d0                	mov    %edx,%eax
- 268:	5f                   	pop    %edi
- 269:	5d                   	pop    %ebp
- 26a:	c3                   	ret    
- 26b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 26f:	90                   	nop
-
-00000270 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 270:	f3 0f 1e fb          	endbr32 
- 274:	55                   	push   %ebp
- 275:	89 e5                	mov    %esp,%ebp
- 277:	8b 45 08             	mov    0x8(%ebp),%eax
- 27a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 27e:	0f b6 10             	movzbl (%eax),%edx
- 281:	84 d2                	test   %dl,%dl
- 283:	75 16                	jne    29b <strchr+0x2b>
- 285:	eb 21                	jmp    2a8 <strchr+0x38>
- 287:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 28e:	66 90                	xchg   %ax,%ax
- 290:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 294:	83 c0 01             	add    $0x1,%eax
- 297:	84 d2                	test   %dl,%dl
- 299:	74 0d                	je     2a8 <strchr+0x38>
-    if(*s == c)
- 29b:	38 d1                	cmp    %dl,%cl
- 29d:	75 f1                	jne    290 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 29f:	5d                   	pop    %ebp
- 2a0:	c3                   	ret    
- 2a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 2a8:	31 c0                	xor    %eax,%eax
-}
- 2aa:	5d                   	pop    %ebp
- 2ab:	c3                   	ret    
- 2ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000002b0 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 2b0:	f3 0f 1e fb          	endbr32 
- 2b4:	55                   	push   %ebp
- 2b5:	89 e5                	mov    %esp,%ebp
- 2b7:	57                   	push   %edi
- 2b8:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 2b9:	31 f6                	xor    %esi,%esi
-{
- 2bb:	53                   	push   %ebx
- 2bc:	89 f3                	mov    %esi,%ebx
- 2be:	83 ec 1c             	sub    $0x1c,%esp
- 2c1:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 2c4:	eb 33                	jmp    2f9 <gets+0x49>
- 2c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 2cd:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 2d0:	83 ec 04             	sub    $0x4,%esp
- 2d3:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 2d6:	6a 01                	push   $0x1
- 2d8:	50                   	push   %eax
- 2d9:	6a 00                	push   $0x0
- 2db:	e8 2b 01 00 00       	call   40b <read>
-    if(cc < 1)
- 2e0:	83 c4 10             	add    $0x10,%esp
- 2e3:	85 c0                	test   %eax,%eax
- 2e5:	7e 1c                	jle    303 <gets+0x53>
-      break;
-    buf[i++] = c;
- 2e7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 2eb:	83 c7 01             	add    $0x1,%edi
- 2ee:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 2f1:	3c 0a                	cmp    $0xa,%al
- 2f3:	74 23                	je     318 <gets+0x68>
- 2f5:	3c 0d                	cmp    $0xd,%al
- 2f7:	74 1f                	je     318 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 2f9:	83 c3 01             	add    $0x1,%ebx
- 2fc:	89 fe                	mov    %edi,%esi
- 2fe:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 301:	7c cd                	jl     2d0 <gets+0x20>
- 303:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 305:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 308:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 30b:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 30e:	5b                   	pop    %ebx
- 30f:	5e                   	pop    %esi
- 310:	5f                   	pop    %edi
- 311:	5d                   	pop    %ebp
- 312:	c3                   	ret    
- 313:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 317:	90                   	nop
- 318:	8b 75 08             	mov    0x8(%ebp),%esi
- 31b:	8b 45 08             	mov    0x8(%ebp),%eax
- 31e:	01 de                	add    %ebx,%esi
- 320:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 322:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 325:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 328:	5b                   	pop    %ebx
- 329:	5e                   	pop    %esi
- 32a:	5f                   	pop    %edi
- 32b:	5d                   	pop    %ebp
- 32c:	c3                   	ret    
- 32d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000330 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 330:	f3 0f 1e fb          	endbr32 
- 334:	55                   	push   %ebp
- 335:	89 e5                	mov    %esp,%ebp
- 337:	56                   	push   %esi
- 338:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 339:	83 ec 08             	sub    $0x8,%esp
- 33c:	6a 00                	push   $0x0
- 33e:	ff 75 08             	pushl  0x8(%ebp)
- 341:	e8 ed 00 00 00       	call   433 <open>
-  if(fd < 0)
- 346:	83 c4 10             	add    $0x10,%esp
- 349:	85 c0                	test   %eax,%eax
- 34b:	78 2b                	js     378 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 34d:	83 ec 08             	sub    $0x8,%esp
- 350:	ff 75 0c             	pushl  0xc(%ebp)
- 353:	89 c3                	mov    %eax,%ebx
- 355:	50                   	push   %eax
- 356:	e8 f0 00 00 00       	call   44b <fstat>
-  close(fd);
- 35b:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 35e:	89 c6                	mov    %eax,%esi
-  close(fd);
- 360:	e8 b6 00 00 00       	call   41b <close>
-  return r;
- 365:	83 c4 10             	add    $0x10,%esp
-}
- 368:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 36b:	89 f0                	mov    %esi,%eax
- 36d:	5b                   	pop    %ebx
- 36e:	5e                   	pop    %esi
- 36f:	5d                   	pop    %ebp
- 370:	c3                   	ret    
- 371:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 378:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 37d:	eb e9                	jmp    368 <stat+0x38>
- 37f:	90                   	nop
-
-00000380 <atoi>:
-
-int
-atoi(const char *s)
-{
- 380:	f3 0f 1e fb          	endbr32 
- 384:	55                   	push   %ebp
- 385:	89 e5                	mov    %esp,%ebp
- 387:	53                   	push   %ebx
- 388:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 38b:	0f be 02             	movsbl (%edx),%eax
- 38e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 391:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 394:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 399:	77 1a                	ja     3b5 <atoi+0x35>
- 39b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 39f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 3a0:	83 c2 01             	add    $0x1,%edx
- 3a3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 3a6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 3aa:	0f be 02             	movsbl (%edx),%eax
- 3ad:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 3b0:	80 fb 09             	cmp    $0x9,%bl
- 3b3:	76 eb                	jbe    3a0 <atoi+0x20>
-  return n;
-}
- 3b5:	89 c8                	mov    %ecx,%eax
- 3b7:	5b                   	pop    %ebx
- 3b8:	5d                   	pop    %ebp
- 3b9:	c3                   	ret    
- 3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000003c0 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 3c0:	f3 0f 1e fb          	endbr32 
- 3c4:	55                   	push   %ebp
- 3c5:	89 e5                	mov    %esp,%ebp
- 3c7:	57                   	push   %edi
- 3c8:	8b 45 10             	mov    0x10(%ebp),%eax
- 3cb:	8b 55 08             	mov    0x8(%ebp),%edx
- 3ce:	56                   	push   %esi
- 3cf:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 3d2:	85 c0                	test   %eax,%eax
- 3d4:	7e 0f                	jle    3e5 <memmove+0x25>
- 3d6:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 3d8:	89 d7                	mov    %edx,%edi
- 3da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 3e0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 3e1:	39 f8                	cmp    %edi,%eax
- 3e3:	75 fb                	jne    3e0 <memmove+0x20>
-  return vdst;
-}
- 3e5:	5e                   	pop    %esi
- 3e6:	89 d0                	mov    %edx,%eax
- 3e8:	5f                   	pop    %edi
- 3e9:	5d                   	pop    %ebp
- 3ea:	c3                   	ret    
-
-000003eb <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 3eb:	b8 01 00 00 00       	mov    $0x1,%eax
- 3f0:	cd 40                	int    $0x40
- 3f2:	c3                   	ret    
-
-000003f3 <exit>:
-SYSCALL(exit)
- 3f3:	b8 02 00 00 00       	mov    $0x2,%eax
- 3f8:	cd 40                	int    $0x40
- 3fa:	c3                   	ret    
-
-000003fb <wait>:
-SYSCALL(wait)
- 3fb:	b8 03 00 00 00       	mov    $0x3,%eax
- 400:	cd 40                	int    $0x40
- 402:	c3                   	ret    
-
-00000403 <pipe>:
-SYSCALL(pipe)
- 403:	b8 04 00 00 00       	mov    $0x4,%eax
- 408:	cd 40                	int    $0x40
- 40a:	c3                   	ret    
-
-0000040b <read>:
-SYSCALL(read)
- 40b:	b8 05 00 00 00       	mov    $0x5,%eax
- 410:	cd 40                	int    $0x40
- 412:	c3                   	ret    
-
-00000413 <write>:
-SYSCALL(write)
- 413:	b8 10 00 00 00       	mov    $0x10,%eax
- 418:	cd 40                	int    $0x40
- 41a:	c3                   	ret    
-
-0000041b <close>:
-SYSCALL(close)
- 41b:	b8 15 00 00 00       	mov    $0x15,%eax
- 420:	cd 40                	int    $0x40
- 422:	c3                   	ret    
-
-00000423 <kill>:
-SYSCALL(kill)
- 423:	b8 06 00 00 00       	mov    $0x6,%eax
- 428:	cd 40                	int    $0x40
- 42a:	c3                   	ret    
-
-0000042b <exec>:
-SYSCALL(exec)
- 42b:	b8 07 00 00 00       	mov    $0x7,%eax
- 430:	cd 40                	int    $0x40
- 432:	c3                   	ret    
-
-00000433 <open>:
-SYSCALL(open)
- 433:	b8 0f 00 00 00       	mov    $0xf,%eax
- 438:	cd 40                	int    $0x40
- 43a:	c3                   	ret    
-
-0000043b <mknod>:
-SYSCALL(mknod)
- 43b:	b8 11 00 00 00       	mov    $0x11,%eax
- 440:	cd 40                	int    $0x40
- 442:	c3                   	ret    
-
-00000443 <unlink>:
-SYSCALL(unlink)
- 443:	b8 12 00 00 00       	mov    $0x12,%eax
- 448:	cd 40                	int    $0x40
- 44a:	c3                   	ret    
-
-0000044b <fstat>:
-SYSCALL(fstat)
- 44b:	b8 08 00 00 00       	mov    $0x8,%eax
- 450:	cd 40                	int    $0x40
- 452:	c3                   	ret    
-
-00000453 <link>:
-SYSCALL(link)
- 453:	b8 13 00 00 00       	mov    $0x13,%eax
- 458:	cd 40                	int    $0x40
- 45a:	c3                   	ret    
-
-0000045b <mkdir>:
-SYSCALL(mkdir)
- 45b:	b8 14 00 00 00       	mov    $0x14,%eax
- 460:	cd 40                	int    $0x40
- 462:	c3                   	ret    
-
-00000463 <chdir>:
-SYSCALL(chdir)
- 463:	b8 09 00 00 00       	mov    $0x9,%eax
- 468:	cd 40                	int    $0x40
- 46a:	c3                   	ret    
-
-0000046b <dup>:
-SYSCALL(dup)
- 46b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 470:	cd 40                	int    $0x40
- 472:	c3                   	ret    
-
-00000473 <getpid>:
-SYSCALL(getpid)
- 473:	b8 0b 00 00 00       	mov    $0xb,%eax
- 478:	cd 40                	int    $0x40
- 47a:	c3                   	ret    
-
-0000047b <sbrk>:
-SYSCALL(sbrk)
- 47b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 480:	cd 40                	int    $0x40
- 482:	c3                   	ret    
-
-00000483 <sleep>:
-SYSCALL(sleep)
- 483:	b8 0d 00 00 00       	mov    $0xd,%eax
- 488:	cd 40                	int    $0x40
- 48a:	c3                   	ret    
-
-0000048b <uptime>:
-SYSCALL(uptime)
- 48b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 490:	cd 40                	int    $0x40
- 492:	c3                   	ret    
-
-00000493 <draw>:
-SYSCALL(draw)
- 493:	b8 16 00 00 00       	mov    $0x16,%eax
- 498:	cd 40                	int    $0x40
- 49a:	c3                   	ret    
-
-0000049b <thread_create>:
-SYSCALL(thread_create)
- 49b:	b8 18 00 00 00       	mov    $0x18,%eax
- 4a0:	cd 40                	int    $0x40
- 4a2:	c3                   	ret    
-
-000004a3 <thread_join>:
-SYSCALL(thread_join)
- 4a3:	b8 19 00 00 00       	mov    $0x19,%eax
- 4a8:	cd 40                	int    $0x40
- 4aa:	c3                   	ret    
-
-000004ab <thread_exit>:
-SYSCALL(thread_exit)
- 4ab:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 4b0:	cd 40                	int    $0x40
- 4b2:	c3                   	ret    
- 4b3:	66 90                	xchg   %ax,%ax
- 4b5:	66 90                	xchg   %ax,%ax
- 4b7:	66 90                	xchg   %ax,%ax
- 4b9:	66 90                	xchg   %ax,%ax
- 4bb:	66 90                	xchg   %ax,%ax
- 4bd:	66 90                	xchg   %ax,%ax
- 4bf:	90                   	nop
-
-000004c0 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 4c0:	55                   	push   %ebp
- 4c1:	89 e5                	mov    %esp,%ebp
- 4c3:	57                   	push   %edi
- 4c4:	56                   	push   %esi
- 4c5:	53                   	push   %ebx
- 4c6:	83 ec 3c             	sub    $0x3c,%esp
- 4c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 4cc:	89 d1                	mov    %edx,%ecx
-{
- 4ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 4d1:	85 d2                	test   %edx,%edx
- 4d3:	0f 89 7f 00 00 00    	jns    558 <printint+0x98>
- 4d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 4dd:	74 79                	je     558 <printint+0x98>
-    neg = 1;
- 4df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 4e6:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 4e8:	31 db                	xor    %ebx,%ebx
- 4ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 4ed:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 4f0:	89 c8                	mov    %ecx,%eax
- 4f2:	31 d2                	xor    %edx,%edx
- 4f4:	89 cf                	mov    %ecx,%edi
- 4f6:	f7 75 c4             	divl   -0x3c(%ebp)
- 4f9:	0f b6 92 18 09 00 00 	movzbl 0x918(%edx),%edx
- 500:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 503:	89 d8                	mov    %ebx,%eax
- 505:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 508:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 50b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 50e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 511:	76 dd                	jbe    4f0 <printint+0x30>
-  if(neg)
- 513:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 516:	85 c9                	test   %ecx,%ecx
- 518:	74 0c                	je     526 <printint+0x66>
-    buf[i++] = '-';
- 51a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 51f:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 521:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 526:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 529:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 52d:	eb 07                	jmp    536 <printint+0x76>
- 52f:	90                   	nop
- 530:	0f b6 13             	movzbl (%ebx),%edx
- 533:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 536:	83 ec 04             	sub    $0x4,%esp
- 539:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 53c:	6a 01                	push   $0x1
- 53e:	56                   	push   %esi
- 53f:	57                   	push   %edi
- 540:	e8 ce fe ff ff       	call   413 <write>
-  while(--i >= 0)
- 545:	83 c4 10             	add    $0x10,%esp
- 548:	39 de                	cmp    %ebx,%esi
- 54a:	75 e4                	jne    530 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 54c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 54f:	5b                   	pop    %ebx
- 550:	5e                   	pop    %esi
- 551:	5f                   	pop    %edi
- 552:	5d                   	pop    %ebp
- 553:	c3                   	ret    
- 554:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 558:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 55f:	eb 87                	jmp    4e8 <printint+0x28>
- 561:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 568:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 56f:	90                   	nop
-
-00000570 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 570:	f3 0f 1e fb          	endbr32 
- 574:	55                   	push   %ebp
- 575:	89 e5                	mov    %esp,%ebp
- 577:	57                   	push   %edi
- 578:	56                   	push   %esi
- 579:	53                   	push   %ebx
- 57a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 57d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 580:	0f b6 1e             	movzbl (%esi),%ebx
- 583:	84 db                	test   %bl,%bl
- 585:	0f 84 b4 00 00 00    	je     63f <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 58b:	8d 45 10             	lea    0x10(%ebp),%eax
- 58e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 591:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 594:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 596:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 599:	eb 33                	jmp    5ce <printf+0x5e>
- 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 59f:	90                   	nop
- 5a0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 5a3:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 5a8:	83 f8 25             	cmp    $0x25,%eax
- 5ab:	74 17                	je     5c4 <printf+0x54>
-  write(fd, &c, 1);
- 5ad:	83 ec 04             	sub    $0x4,%esp
- 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 5b3:	6a 01                	push   $0x1
- 5b5:	57                   	push   %edi
- 5b6:	ff 75 08             	pushl  0x8(%ebp)
- 5b9:	e8 55 fe ff ff       	call   413 <write>
- 5be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 5c1:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 5c4:	0f b6 1e             	movzbl (%esi),%ebx
- 5c7:	83 c6 01             	add    $0x1,%esi
- 5ca:	84 db                	test   %bl,%bl
- 5cc:	74 71                	je     63f <printf+0xcf>
-    c = fmt[i] & 0xff;
- 5ce:	0f be cb             	movsbl %bl,%ecx
- 5d1:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 5d4:	85 d2                	test   %edx,%edx
- 5d6:	74 c8                	je     5a0 <printf+0x30>
-      }
-    } else if(state == '%'){
- 5d8:	83 fa 25             	cmp    $0x25,%edx
- 5db:	75 e7                	jne    5c4 <printf+0x54>
-      if(c == 'd'){
- 5dd:	83 f8 64             	cmp    $0x64,%eax
- 5e0:	0f 84 9a 00 00 00    	je     680 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 5e6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 5ec:	83 f9 70             	cmp    $0x70,%ecx
- 5ef:	74 5f                	je     650 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 5f1:	83 f8 73             	cmp    $0x73,%eax
- 5f4:	0f 84 d6 00 00 00    	je     6d0 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 5fa:	83 f8 63             	cmp    $0x63,%eax
- 5fd:	0f 84 8d 00 00 00    	je     690 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 603:	83 f8 25             	cmp    $0x25,%eax
- 606:	0f 84 b4 00 00 00    	je     6c0 <printf+0x150>
-  write(fd, &c, 1);
- 60c:	83 ec 04             	sub    $0x4,%esp
- 60f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 613:	6a 01                	push   $0x1
- 615:	57                   	push   %edi
- 616:	ff 75 08             	pushl  0x8(%ebp)
- 619:	e8 f5 fd ff ff       	call   413 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 61e:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 621:	83 c4 0c             	add    $0xc,%esp
- 624:	6a 01                	push   $0x1
- 626:	83 c6 01             	add    $0x1,%esi
- 629:	57                   	push   %edi
- 62a:	ff 75 08             	pushl  0x8(%ebp)
- 62d:	e8 e1 fd ff ff       	call   413 <write>
-  for(i = 0; fmt[i]; i++){
- 632:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 636:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 639:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 63b:	84 db                	test   %bl,%bl
- 63d:	75 8f                	jne    5ce <printf+0x5e>
-    }
-  }
-}
- 63f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 642:	5b                   	pop    %ebx
- 643:	5e                   	pop    %esi
- 644:	5f                   	pop    %edi
- 645:	5d                   	pop    %ebp
- 646:	c3                   	ret    
- 647:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 64e:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 650:	83 ec 0c             	sub    $0xc,%esp
- 653:	b9 10 00 00 00       	mov    $0x10,%ecx
- 658:	6a 00                	push   $0x0
- 65a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 65d:	8b 45 08             	mov    0x8(%ebp),%eax
- 660:	8b 13                	mov    (%ebx),%edx
- 662:	e8 59 fe ff ff       	call   4c0 <printint>
-        ap++;
- 667:	89 d8                	mov    %ebx,%eax
- 669:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 66c:	31 d2                	xor    %edx,%edx
-        ap++;
- 66e:	83 c0 04             	add    $0x4,%eax
- 671:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 674:	e9 4b ff ff ff       	jmp    5c4 <printf+0x54>
- 679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 680:	83 ec 0c             	sub    $0xc,%esp
- 683:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 688:	6a 01                	push   $0x1
- 68a:	eb ce                	jmp    65a <printf+0xea>
- 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 690:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 693:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 696:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 698:	6a 01                	push   $0x1
-        ap++;
- 69a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 69d:	57                   	push   %edi
- 69e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 6a1:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 6a4:	e8 6a fd ff ff       	call   413 <write>
-        ap++;
- 6a9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 6ac:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 6af:	31 d2                	xor    %edx,%edx
- 6b1:	e9 0e ff ff ff       	jmp    5c4 <printf+0x54>
- 6b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 6bd:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 6c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 6c3:	83 ec 04             	sub    $0x4,%esp
- 6c6:	e9 59 ff ff ff       	jmp    624 <printf+0xb4>
- 6cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 6cf:	90                   	nop
-        s = (char*)*ap;
- 6d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 6d3:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 6d5:	83 c0 04             	add    $0x4,%eax
- 6d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 6db:	85 db                	test   %ebx,%ebx
- 6dd:	74 17                	je     6f6 <printf+0x186>
-        while(*s != 0){
- 6df:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 6e2:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 6e4:	84 c0                	test   %al,%al
- 6e6:	0f 84 d8 fe ff ff    	je     5c4 <printf+0x54>
- 6ec:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 6ef:	89 de                	mov    %ebx,%esi
- 6f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 6f4:	eb 1a                	jmp    710 <printf+0x1a0>
-          s = "(null)";
- 6f6:	bb 0f 09 00 00       	mov    $0x90f,%ebx
-        while(*s != 0){
- 6fb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 6fe:	b8 28 00 00 00       	mov    $0x28,%eax
- 703:	89 de                	mov    %ebx,%esi
- 705:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 708:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 70f:	90                   	nop
-  write(fd, &c, 1);
- 710:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 713:	83 c6 01             	add    $0x1,%esi
- 716:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 719:	6a 01                	push   $0x1
- 71b:	57                   	push   %edi
- 71c:	53                   	push   %ebx
- 71d:	e8 f1 fc ff ff       	call   413 <write>
-        while(*s != 0){
- 722:	0f b6 06             	movzbl (%esi),%eax
- 725:	83 c4 10             	add    $0x10,%esp
- 728:	84 c0                	test   %al,%al
- 72a:	75 e4                	jne    710 <printf+0x1a0>
- 72c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 72f:	31 d2                	xor    %edx,%edx
- 731:	e9 8e fe ff ff       	jmp    5c4 <printf+0x54>
- 736:	66 90                	xchg   %ax,%ax
- 738:	66 90                	xchg   %ax,%ax
- 73a:	66 90                	xchg   %ax,%ax
- 73c:	66 90                	xchg   %ax,%ax
- 73e:	66 90                	xchg   %ax,%ax
-
-00000740 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 740:	f3 0f 1e fb          	endbr32 
- 744:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 745:	a1 00 0c 00 00       	mov    0xc00,%eax
-{
- 74a:	89 e5                	mov    %esp,%ebp
- 74c:	57                   	push   %edi
- 74d:	56                   	push   %esi
- 74e:	53                   	push   %ebx
- 74f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 752:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 754:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 757:	39 c8                	cmp    %ecx,%eax
- 759:	73 15                	jae    770 <free+0x30>
- 75b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 75f:	90                   	nop
- 760:	39 d1                	cmp    %edx,%ecx
- 762:	72 14                	jb     778 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 764:	39 d0                	cmp    %edx,%eax
- 766:	73 10                	jae    778 <free+0x38>
-{
- 768:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 76a:	8b 10                	mov    (%eax),%edx
- 76c:	39 c8                	cmp    %ecx,%eax
- 76e:	72 f0                	jb     760 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 770:	39 d0                	cmp    %edx,%eax
- 772:	72 f4                	jb     768 <free+0x28>
- 774:	39 d1                	cmp    %edx,%ecx
- 776:	73 f0                	jae    768 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 778:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 77b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 77e:	39 fa                	cmp    %edi,%edx
- 780:	74 1e                	je     7a0 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 782:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 785:	8b 50 04             	mov    0x4(%eax),%edx
- 788:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 78b:	39 f1                	cmp    %esi,%ecx
- 78d:	74 28                	je     7b7 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 78f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 791:	5b                   	pop    %ebx
-  freep = p;
- 792:	a3 00 0c 00 00       	mov    %eax,0xc00
-}
- 797:	5e                   	pop    %esi
- 798:	5f                   	pop    %edi
- 799:	5d                   	pop    %ebp
- 79a:	c3                   	ret    
- 79b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 79f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 7a0:	03 72 04             	add    0x4(%edx),%esi
- 7a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 7a6:	8b 10                	mov    (%eax),%edx
- 7a8:	8b 12                	mov    (%edx),%edx
- 7aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 7ad:	8b 50 04             	mov    0x4(%eax),%edx
- 7b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 7b3:	39 f1                	cmp    %esi,%ecx
- 7b5:	75 d8                	jne    78f <free+0x4f>
-    p->s.size += bp->s.size;
- 7b7:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 7ba:	a3 00 0c 00 00       	mov    %eax,0xc00
-    p->s.size += bp->s.size;
- 7bf:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 7c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 7c5:	89 10                	mov    %edx,(%eax)
-}
- 7c7:	5b                   	pop    %ebx
- 7c8:	5e                   	pop    %esi
- 7c9:	5f                   	pop    %edi
- 7ca:	5d                   	pop    %ebp
- 7cb:	c3                   	ret    
- 7cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000007d0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 7d0:	f3 0f 1e fb          	endbr32 
- 7d4:	55                   	push   %ebp
- 7d5:	89 e5                	mov    %esp,%ebp
- 7d7:	57                   	push   %edi
- 7d8:	56                   	push   %esi
- 7d9:	53                   	push   %ebx
- 7da:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7dd:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 7e0:	8b 3d 00 0c 00 00    	mov    0xc00,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 7e6:	8d 70 07             	lea    0x7(%eax),%esi
- 7e9:	c1 ee 03             	shr    $0x3,%esi
- 7ec:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 7ef:	85 ff                	test   %edi,%edi
- 7f1:	0f 84 a9 00 00 00    	je     8a0 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7f7:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 7f9:	8b 48 04             	mov    0x4(%eax),%ecx
- 7fc:	39 f1                	cmp    %esi,%ecx
- 7fe:	73 6d                	jae    86d <malloc+0x9d>
- 800:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 806:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 80b:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 80e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 815:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 818:	eb 17                	jmp    831 <malloc+0x61>
- 81a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 820:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 822:	8b 4a 04             	mov    0x4(%edx),%ecx
- 825:	39 f1                	cmp    %esi,%ecx
- 827:	73 4f                	jae    878 <malloc+0xa8>
- 829:	8b 3d 00 0c 00 00    	mov    0xc00,%edi
- 82f:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 831:	39 c7                	cmp    %eax,%edi
- 833:	75 eb                	jne    820 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 835:	83 ec 0c             	sub    $0xc,%esp
- 838:	ff 75 e4             	pushl  -0x1c(%ebp)
- 83b:	e8 3b fc ff ff       	call   47b <sbrk>
-  if(p == (char*)-1)
- 840:	83 c4 10             	add    $0x10,%esp
- 843:	83 f8 ff             	cmp    $0xffffffff,%eax
- 846:	74 1b                	je     863 <malloc+0x93>
-  hp->s.size = nu;
- 848:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 84b:	83 ec 0c             	sub    $0xc,%esp
- 84e:	83 c0 08             	add    $0x8,%eax
- 851:	50                   	push   %eax
- 852:	e8 e9 fe ff ff       	call   740 <free>
-  return freep;
- 857:	a1 00 0c 00 00       	mov    0xc00,%eax
-      if((p = morecore(nunits)) == 0)
- 85c:	83 c4 10             	add    $0x10,%esp
- 85f:	85 c0                	test   %eax,%eax
- 861:	75 bd                	jne    820 <malloc+0x50>
-        return 0;
-  }
-}
- 863:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 866:	31 c0                	xor    %eax,%eax
-}
- 868:	5b                   	pop    %ebx
- 869:	5e                   	pop    %esi
- 86a:	5f                   	pop    %edi
- 86b:	5d                   	pop    %ebp
- 86c:	c3                   	ret    
-    if(p->s.size >= nunits){
- 86d:	89 c2                	mov    %eax,%edx
- 86f:	89 f8                	mov    %edi,%eax
- 871:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- 878:	39 ce                	cmp    %ecx,%esi
- 87a:	74 54                	je     8d0 <malloc+0x100>
-        p->s.size -= nunits;
- 87c:	29 f1                	sub    %esi,%ecx
- 87e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- 881:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- 884:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- 887:	a3 00 0c 00 00       	mov    %eax,0xc00
-}
- 88c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 88f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- 892:	5b                   	pop    %ebx
- 893:	5e                   	pop    %esi
- 894:	5f                   	pop    %edi
- 895:	5d                   	pop    %ebp
- 896:	c3                   	ret    
- 897:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 89e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- 8a0:	c7 05 00 0c 00 00 04 	movl   $0xc04,0xc00
- 8a7:	0c 00 00 
-    base.s.size = 0;
- 8aa:	bf 04 0c 00 00       	mov    $0xc04,%edi
-    base.s.ptr = freep = prevp = &base;
- 8af:	c7 05 04 0c 00 00 04 	movl   $0xc04,0xc04
- 8b6:	0c 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 8b9:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- 8bb:	c7 05 08 0c 00 00 00 	movl   $0x0,0xc08
- 8c2:	00 00 00 
-    if(p->s.size >= nunits){
- 8c5:	e9 36 ff ff ff       	jmp    800 <malloc+0x30>
- 8ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- 8d0:	8b 0a                	mov    (%edx),%ecx
- 8d2:	89 08                	mov    %ecx,(%eax)
- 8d4:	eb b1                	jmp    887 <malloc+0xb7>
diff -ruN xv6-public/wc.c xv6-public-mynew/wc.c
--- xv6-public/wc.c	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/wc.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,54 +0,0 @@
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-char buf[512];
-
-void
-wc(int fd, char *name)
-{
-  int i, n;
-  int l, w, c, inword;
-
-  l = w = c = 0;
-  inword = 0;
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-    for(i=0; i<n; i++){
-      c++;
-      if(buf[i] == '\n')
-        l++;
-      if(strchr(" \r\t\n\v", buf[i]))
-        inword = 0;
-      else if(!inword){
-        w++;
-        inword = 1;
-      }
-    }
-  }
-  if(n < 0){
-    printf(1, "wc: read error\n");
-    exit();
-  }
-  printf(1, "%d %d %d %s\n", l, w, c, name);
-}
-
-int
-main(int argc, char *argv[])
-{
-  int fd, i;
-
-  if(argc <= 1){
-    wc(0, "");
-    exit();
-  }
-
-  for(i = 1; i < argc; i++){
-    if((fd = open(argv[i], 0)) < 0){
-      printf(1, "wc: cannot open %s\n", argv[i]);
-      exit();
-    }
-    wc(fd, argv[i]);
-    close(fd);
-  }
-  exit();
-}
diff -ruN xv6-public/wc.d xv6-public-mynew/wc.d
--- xv6-public/wc.d	2022-09-05 09:51:06.442999172 +0530
+++ xv6-public-mynew/wc.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/wc.o and xv6-public-mynew/wc.o differ
diff -ruN xv6-public/wc.sym xv6-public-mynew/wc.sym
--- xv6-public/wc.sym	2022-09-05 09:51:06.470999173 +0530
+++ xv6-public-mynew/wc.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,63 +0,0 @@
-00000000 .text
-000008d8 .rodata
-0000092c .eh_frame
-00000c00 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 wc.c
-00000000 ulib.c
-00000000 printf.c
-000004c0 printint
-00000918 digits.1097
-00000000 umalloc.c
-00000c00 freep
-00000c04 base
-00000190 strcpy
-00000570 printf
-000004ab thread_exit
-000003c0 memmove
-0000043b mknod
-000002b0 gets
-00000473 getpid
-000007d0 malloc
-00000483 sleep
-00000403 pipe
-00000413 write
-0000044b fstat
-00000423 kill
-00000463 chdir
-0000042b exec
-000003fb wait
-0000040b read
-00000443 unlink
-000000a0 wc
-000003eb fork
-0000047b sbrk
-0000048b uptime
-00000c00 __bss_start
-00000250 memset
-00000000 main
-000001c0 strcmp
-0000046b dup
-00000c20 buf
-00000330 stat
-00000c00 _edata
-00000e20 _end
-00000453 link
-000003f3 exit
-00000380 atoi
-00000493 draw
-00000210 strlen
-00000433 open
-00000270 strchr
-0000049b thread_create
-0000045b mkdir
-0000041b close
-000004a3 thread_join
-00000740 free
diff -ruN xv6-public/x86.h xv6-public-mynew/x86.h
--- xv6-public/x86.h	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/x86.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,183 +0,0 @@
-// Routines to let C code use special x86 instructions.
-
-static inline uchar
-inb(ushort port)
-{
-  uchar data;
-
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-  return data;
-}
-
-static inline void
-insl(int port, void *addr, int cnt)
-{
-  asm volatile("cld; rep insl" :
-               "=D" (addr), "=c" (cnt) :
-               "d" (port), "0" (addr), "1" (cnt) :
-               "memory", "cc");
-}
-
-static inline void
-outb(ushort port, uchar data)
-{
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-}
-
-static inline void
-outw(ushort port, ushort data)
-{
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-}
-
-static inline void
-outsl(int port, const void *addr, int cnt)
-{
-  asm volatile("cld; rep outsl" :
-               "=S" (addr), "=c" (cnt) :
-               "d" (port), "0" (addr), "1" (cnt) :
-               "cc");
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-
-static inline void
-stosl(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosl" :
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-
-struct segdesc;
-
-static inline void
-lgdt(struct segdesc *p, int size)
-{
-  volatile ushort pd[3];
-
-  pd[0] = size-1;
-  pd[1] = (uint)p;
-  pd[2] = (uint)p >> 16;
-
-  asm volatile("lgdt (%0)" : : "r" (pd));
-}
-
-struct gatedesc;
-
-static inline void
-lidt(struct gatedesc *p, int size)
-{
-  volatile ushort pd[3];
-
-  pd[0] = size-1;
-  pd[1] = (uint)p;
-  pd[2] = (uint)p >> 16;
-
-  asm volatile("lidt (%0)" : : "r" (pd));
-}
-
-static inline void
-ltr(ushort sel)
-{
-  asm volatile("ltr %0" : : "r" (sel));
-}
-
-static inline uint
-readeflags(void)
-{
-  uint eflags;
-  asm volatile("pushfl; popl %0" : "=r" (eflags));
-  return eflags;
-}
-
-static inline void
-loadgs(ushort v)
-{
-  asm volatile("movw %0, %%gs" : : "r" (v));
-}
-
-static inline void
-cli(void)
-{
-  asm volatile("cli");
-}
-
-static inline void
-sti(void)
-{
-  asm volatile("sti");
-}
-
-static inline uint
-xchg(volatile uint *addr, uint newval)
-{
-  uint result;
-
-  // The + in "+m" denotes a read-modify-write operand.
-  asm volatile("lock; xchgl %0, %1" :
-               "+m" (*addr), "=a" (result) :
-               "1" (newval) :
-               "cc");
-  return result;
-}
-
-static inline uint
-rcr2(void)
-{
-  uint val;
-  asm volatile("movl %%cr2,%0" : "=r" (val));
-  return val;
-}
-
-static inline void
-lcr3(uint val)
-{
-  asm volatile("movl %0,%%cr3" : : "r" (val));
-}
-
-//PAGEBREAK: 36
-// Layout of the trap frame built on the stack by the
-// hardware and by trapasm.S, and passed to trap().
-struct trapframe {
-  // registers as pushed by pusha
-  uint edi;
-  uint esi;
-  uint ebp;
-  uint oesp;      // useless & ignored
-  uint ebx;
-  uint edx;
-  uint ecx;
-  uint eax;
-
-  // rest of trap frame
-  ushort gs;
-  ushort padding1;
-  ushort fs;
-  ushort padding2;
-  ushort es;
-  ushort padding3;
-  ushort ds;
-  ushort padding4;
-  uint trapno;
-
-  // below here defined by x86 hardware
-  uint err;
-  uint eip;
-  ushort cs;
-  ushort padding5;
-  uint eflags;
-
-  // below here only when crossing rings, such as from user to kernel
-  uint esp;
-  ushort ss;
-  ushort padding6;
-};
Binary files xv6-public/xv6.img and xv6-public-mynew/xv6.img differ
Binary files xv6-public/_zombie and xv6-public-mynew/_zombie differ
diff -ruN xv6-public/zombie.asm xv6-public-mynew/zombie.asm
--- xv6-public/zombie.asm	2022-09-05 09:51:06.526999175 +0530
+++ xv6-public-mynew/zombie.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1189 +0,0 @@
-
-_zombie:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(void)
-{
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	51                   	push   %ecx
-  12:	83 ec 04             	sub    $0x4,%esp
-  if(fork() > 0)
-  15:	e8 71 02 00 00       	call   28b <fork>
-  1a:	85 c0                	test   %eax,%eax
-  1c:	7e 0d                	jle    2b <main+0x2b>
-    sleep(5);  // Let child exit before parent.
-  1e:	83 ec 0c             	sub    $0xc,%esp
-  21:	6a 05                	push   $0x5
-  23:	e8 fb 02 00 00       	call   323 <sleep>
-  28:	83 c4 10             	add    $0x10,%esp
-  exit();
-  2b:	e8 63 02 00 00       	call   293 <exit>
-
-00000030 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  30:	f3 0f 1e fb          	endbr32 
-  34:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  35:	31 c0                	xor    %eax,%eax
-{
-  37:	89 e5                	mov    %esp,%ebp
-  39:	53                   	push   %ebx
-  3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
-  40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  47:	83 c0 01             	add    $0x1,%eax
-  4a:	84 d2                	test   %dl,%dl
-  4c:	75 f2                	jne    40 <strcpy+0x10>
-    ;
-  return os;
-}
-  4e:	89 c8                	mov    %ecx,%eax
-  50:	5b                   	pop    %ebx
-  51:	5d                   	pop    %ebp
-  52:	c3                   	ret    
-  53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000060 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  60:	f3 0f 1e fb          	endbr32 
-  64:	55                   	push   %ebp
-  65:	89 e5                	mov    %esp,%ebp
-  67:	53                   	push   %ebx
-  68:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  6b:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
-  6e:	0f b6 01             	movzbl (%ecx),%eax
-  71:	0f b6 1a             	movzbl (%edx),%ebx
-  74:	84 c0                	test   %al,%al
-  76:	75 19                	jne    91 <strcmp+0x31>
-  78:	eb 26                	jmp    a0 <strcmp+0x40>
-  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  80:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
-  84:	83 c1 01             	add    $0x1,%ecx
-  87:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
-  8a:	0f b6 1a             	movzbl (%edx),%ebx
-  8d:	84 c0                	test   %al,%al
-  8f:	74 0f                	je     a0 <strcmp+0x40>
-  91:	38 d8                	cmp    %bl,%al
-  93:	74 eb                	je     80 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
-  95:	29 d8                	sub    %ebx,%eax
-}
-  97:	5b                   	pop    %ebx
-  98:	5d                   	pop    %ebp
-  99:	c3                   	ret    
-  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  a0:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
-  a2:	29 d8                	sub    %ebx,%eax
-}
-  a4:	5b                   	pop    %ebx
-  a5:	5d                   	pop    %ebp
-  a6:	c3                   	ret    
-  a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  ae:	66 90                	xchg   %ax,%ax
-
-000000b0 <strlen>:
-
-uint
-strlen(const char *s)
-{
-  b0:	f3 0f 1e fb          	endbr32 
-  b4:	55                   	push   %ebp
-  b5:	89 e5                	mov    %esp,%ebp
-  b7:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
-  ba:	80 3a 00             	cmpb   $0x0,(%edx)
-  bd:	74 21                	je     e0 <strlen+0x30>
-  bf:	31 c0                	xor    %eax,%eax
-  c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  c8:	83 c0 01             	add    $0x1,%eax
-  cb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-  cf:	89 c1                	mov    %eax,%ecx
-  d1:	75 f5                	jne    c8 <strlen+0x18>
-    ;
-  return n;
-}
-  d3:	89 c8                	mov    %ecx,%eax
-  d5:	5d                   	pop    %ebp
-  d6:	c3                   	ret    
-  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  de:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
-  e0:	31 c9                	xor    %ecx,%ecx
-}
-  e2:	5d                   	pop    %ebp
-  e3:	89 c8                	mov    %ecx,%eax
-  e5:	c3                   	ret    
-  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  ed:	8d 76 00             	lea    0x0(%esi),%esi
-
-000000f0 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
-  f0:	f3 0f 1e fb          	endbr32 
-  f4:	55                   	push   %ebp
-  f5:	89 e5                	mov    %esp,%ebp
-  f7:	57                   	push   %edi
-  f8:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
-  fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
-  fe:	8b 45 0c             	mov    0xc(%ebp),%eax
- 101:	89 d7                	mov    %edx,%edi
- 103:	fc                   	cld    
- 104:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 106:	89 d0                	mov    %edx,%eax
- 108:	5f                   	pop    %edi
- 109:	5d                   	pop    %ebp
- 10a:	c3                   	ret    
- 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 10f:	90                   	nop
-
-00000110 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 110:	f3 0f 1e fb          	endbr32 
- 114:	55                   	push   %ebp
- 115:	89 e5                	mov    %esp,%ebp
- 117:	8b 45 08             	mov    0x8(%ebp),%eax
- 11a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 11e:	0f b6 10             	movzbl (%eax),%edx
- 121:	84 d2                	test   %dl,%dl
- 123:	75 16                	jne    13b <strchr+0x2b>
- 125:	eb 21                	jmp    148 <strchr+0x38>
- 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 12e:	66 90                	xchg   %ax,%ax
- 130:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 134:	83 c0 01             	add    $0x1,%eax
- 137:	84 d2                	test   %dl,%dl
- 139:	74 0d                	je     148 <strchr+0x38>
-    if(*s == c)
- 13b:	38 d1                	cmp    %dl,%cl
- 13d:	75 f1                	jne    130 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 13f:	5d                   	pop    %ebp
- 140:	c3                   	ret    
- 141:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 148:	31 c0                	xor    %eax,%eax
-}
- 14a:	5d                   	pop    %ebp
- 14b:	c3                   	ret    
- 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000150 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 150:	f3 0f 1e fb          	endbr32 
- 154:	55                   	push   %ebp
- 155:	89 e5                	mov    %esp,%ebp
- 157:	57                   	push   %edi
- 158:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 159:	31 f6                	xor    %esi,%esi
-{
- 15b:	53                   	push   %ebx
- 15c:	89 f3                	mov    %esi,%ebx
- 15e:	83 ec 1c             	sub    $0x1c,%esp
- 161:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 164:	eb 33                	jmp    199 <gets+0x49>
- 166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 16d:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 170:	83 ec 04             	sub    $0x4,%esp
- 173:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 176:	6a 01                	push   $0x1
- 178:	50                   	push   %eax
- 179:	6a 00                	push   $0x0
- 17b:	e8 2b 01 00 00       	call   2ab <read>
-    if(cc < 1)
- 180:	83 c4 10             	add    $0x10,%esp
- 183:	85 c0                	test   %eax,%eax
- 185:	7e 1c                	jle    1a3 <gets+0x53>
-      break;
-    buf[i++] = c;
- 187:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 18b:	83 c7 01             	add    $0x1,%edi
- 18e:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 191:	3c 0a                	cmp    $0xa,%al
- 193:	74 23                	je     1b8 <gets+0x68>
- 195:	3c 0d                	cmp    $0xd,%al
- 197:	74 1f                	je     1b8 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 199:	83 c3 01             	add    $0x1,%ebx
- 19c:	89 fe                	mov    %edi,%esi
- 19e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1a1:	7c cd                	jl     170 <gets+0x20>
- 1a3:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 1a5:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 1a8:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 1ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1ae:	5b                   	pop    %ebx
- 1af:	5e                   	pop    %esi
- 1b0:	5f                   	pop    %edi
- 1b1:	5d                   	pop    %ebp
- 1b2:	c3                   	ret    
- 1b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 1b7:	90                   	nop
- 1b8:	8b 75 08             	mov    0x8(%ebp),%esi
- 1bb:	8b 45 08             	mov    0x8(%ebp),%eax
- 1be:	01 de                	add    %ebx,%esi
- 1c0:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 1c2:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 1c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1c8:	5b                   	pop    %ebx
- 1c9:	5e                   	pop    %esi
- 1ca:	5f                   	pop    %edi
- 1cb:	5d                   	pop    %ebp
- 1cc:	c3                   	ret    
- 1cd:	8d 76 00             	lea    0x0(%esi),%esi
-
-000001d0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 1d0:	f3 0f 1e fb          	endbr32 
- 1d4:	55                   	push   %ebp
- 1d5:	89 e5                	mov    %esp,%ebp
- 1d7:	56                   	push   %esi
- 1d8:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 1d9:	83 ec 08             	sub    $0x8,%esp
- 1dc:	6a 00                	push   $0x0
- 1de:	ff 75 08             	pushl  0x8(%ebp)
- 1e1:	e8 ed 00 00 00       	call   2d3 <open>
-  if(fd < 0)
- 1e6:	83 c4 10             	add    $0x10,%esp
- 1e9:	85 c0                	test   %eax,%eax
- 1eb:	78 2b                	js     218 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 1ed:	83 ec 08             	sub    $0x8,%esp
- 1f0:	ff 75 0c             	pushl  0xc(%ebp)
- 1f3:	89 c3                	mov    %eax,%ebx
- 1f5:	50                   	push   %eax
- 1f6:	e8 f0 00 00 00       	call   2eb <fstat>
-  close(fd);
- 1fb:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 1fe:	89 c6                	mov    %eax,%esi
-  close(fd);
- 200:	e8 b6 00 00 00       	call   2bb <close>
-  return r;
- 205:	83 c4 10             	add    $0x10,%esp
-}
- 208:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 20b:	89 f0                	mov    %esi,%eax
- 20d:	5b                   	pop    %ebx
- 20e:	5e                   	pop    %esi
- 20f:	5d                   	pop    %ebp
- 210:	c3                   	ret    
- 211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 218:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 21d:	eb e9                	jmp    208 <stat+0x38>
- 21f:	90                   	nop
-
-00000220 <atoi>:
-
-int
-atoi(const char *s)
-{
- 220:	f3 0f 1e fb          	endbr32 
- 224:	55                   	push   %ebp
- 225:	89 e5                	mov    %esp,%ebp
- 227:	53                   	push   %ebx
- 228:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 22b:	0f be 02             	movsbl (%edx),%eax
- 22e:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 231:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 234:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 239:	77 1a                	ja     255 <atoi+0x35>
- 23b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 23f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 240:	83 c2 01             	add    $0x1,%edx
- 243:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 246:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 24a:	0f be 02             	movsbl (%edx),%eax
- 24d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 250:	80 fb 09             	cmp    $0x9,%bl
- 253:	76 eb                	jbe    240 <atoi+0x20>
-  return n;
-}
- 255:	89 c8                	mov    %ecx,%eax
- 257:	5b                   	pop    %ebx
- 258:	5d                   	pop    %ebp
- 259:	c3                   	ret    
- 25a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000260 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 260:	f3 0f 1e fb          	endbr32 
- 264:	55                   	push   %ebp
- 265:	89 e5                	mov    %esp,%ebp
- 267:	57                   	push   %edi
- 268:	8b 45 10             	mov    0x10(%ebp),%eax
- 26b:	8b 55 08             	mov    0x8(%ebp),%edx
- 26e:	56                   	push   %esi
- 26f:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 272:	85 c0                	test   %eax,%eax
- 274:	7e 0f                	jle    285 <memmove+0x25>
- 276:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 278:	89 d7                	mov    %edx,%edi
- 27a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 280:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 281:	39 f8                	cmp    %edi,%eax
- 283:	75 fb                	jne    280 <memmove+0x20>
-  return vdst;
-}
- 285:	5e                   	pop    %esi
- 286:	89 d0                	mov    %edx,%eax
- 288:	5f                   	pop    %edi
- 289:	5d                   	pop    %ebp
- 28a:	c3                   	ret    
-
-0000028b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 28b:	b8 01 00 00 00       	mov    $0x1,%eax
- 290:	cd 40                	int    $0x40
- 292:	c3                   	ret    
-
-00000293 <exit>:
-SYSCALL(exit)
- 293:	b8 02 00 00 00       	mov    $0x2,%eax
- 298:	cd 40                	int    $0x40
- 29a:	c3                   	ret    
-
-0000029b <wait>:
-SYSCALL(wait)
- 29b:	b8 03 00 00 00       	mov    $0x3,%eax
- 2a0:	cd 40                	int    $0x40
- 2a2:	c3                   	ret    
-
-000002a3 <pipe>:
-SYSCALL(pipe)
- 2a3:	b8 04 00 00 00       	mov    $0x4,%eax
- 2a8:	cd 40                	int    $0x40
- 2aa:	c3                   	ret    
-
-000002ab <read>:
-SYSCALL(read)
- 2ab:	b8 05 00 00 00       	mov    $0x5,%eax
- 2b0:	cd 40                	int    $0x40
- 2b2:	c3                   	ret    
-
-000002b3 <write>:
-SYSCALL(write)
- 2b3:	b8 10 00 00 00       	mov    $0x10,%eax
- 2b8:	cd 40                	int    $0x40
- 2ba:	c3                   	ret    
-
-000002bb <close>:
-SYSCALL(close)
- 2bb:	b8 15 00 00 00       	mov    $0x15,%eax
- 2c0:	cd 40                	int    $0x40
- 2c2:	c3                   	ret    
-
-000002c3 <kill>:
-SYSCALL(kill)
- 2c3:	b8 06 00 00 00       	mov    $0x6,%eax
- 2c8:	cd 40                	int    $0x40
- 2ca:	c3                   	ret    
-
-000002cb <exec>:
-SYSCALL(exec)
- 2cb:	b8 07 00 00 00       	mov    $0x7,%eax
- 2d0:	cd 40                	int    $0x40
- 2d2:	c3                   	ret    
-
-000002d3 <open>:
-SYSCALL(open)
- 2d3:	b8 0f 00 00 00       	mov    $0xf,%eax
- 2d8:	cd 40                	int    $0x40
- 2da:	c3                   	ret    
-
-000002db <mknod>:
-SYSCALL(mknod)
- 2db:	b8 11 00 00 00       	mov    $0x11,%eax
- 2e0:	cd 40                	int    $0x40
- 2e2:	c3                   	ret    
-
-000002e3 <unlink>:
-SYSCALL(unlink)
- 2e3:	b8 12 00 00 00       	mov    $0x12,%eax
- 2e8:	cd 40                	int    $0x40
- 2ea:	c3                   	ret    
-
-000002eb <fstat>:
-SYSCALL(fstat)
- 2eb:	b8 08 00 00 00       	mov    $0x8,%eax
- 2f0:	cd 40                	int    $0x40
- 2f2:	c3                   	ret    
-
-000002f3 <link>:
-SYSCALL(link)
- 2f3:	b8 13 00 00 00       	mov    $0x13,%eax
- 2f8:	cd 40                	int    $0x40
- 2fa:	c3                   	ret    
-
-000002fb <mkdir>:
-SYSCALL(mkdir)
- 2fb:	b8 14 00 00 00       	mov    $0x14,%eax
- 300:	cd 40                	int    $0x40
- 302:	c3                   	ret    
-
-00000303 <chdir>:
-SYSCALL(chdir)
- 303:	b8 09 00 00 00       	mov    $0x9,%eax
- 308:	cd 40                	int    $0x40
- 30a:	c3                   	ret    
-
-0000030b <dup>:
-SYSCALL(dup)
- 30b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret    
-
-00000313 <getpid>:
-SYSCALL(getpid)
- 313:	b8 0b 00 00 00       	mov    $0xb,%eax
- 318:	cd 40                	int    $0x40
- 31a:	c3                   	ret    
-
-0000031b <sbrk>:
-SYSCALL(sbrk)
- 31b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 320:	cd 40                	int    $0x40
- 322:	c3                   	ret    
-
-00000323 <sleep>:
-SYSCALL(sleep)
- 323:	b8 0d 00 00 00       	mov    $0xd,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret    
-
-0000032b <uptime>:
-SYSCALL(uptime)
- 32b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret    
-
-00000333 <draw>:
-SYSCALL(draw)
- 333:	b8 16 00 00 00       	mov    $0x16,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret    
-
-0000033b <thread_create>:
-SYSCALL(thread_create)
- 33b:	b8 18 00 00 00       	mov    $0x18,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret    
-
-00000343 <thread_join>:
-SYSCALL(thread_join)
- 343:	b8 19 00 00 00       	mov    $0x19,%eax
- 348:	cd 40                	int    $0x40
- 34a:	c3                   	ret    
-
-0000034b <thread_exit>:
-SYSCALL(thread_exit)
- 34b:	b8 1a 00 00 00       	mov    $0x1a,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret    
- 353:	66 90                	xchg   %ax,%ax
- 355:	66 90                	xchg   %ax,%ax
- 357:	66 90                	xchg   %ax,%ax
- 359:	66 90                	xchg   %ax,%ax
- 35b:	66 90                	xchg   %ax,%ax
- 35d:	66 90                	xchg   %ax,%ax
- 35f:	90                   	nop
-
-00000360 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 360:	55                   	push   %ebp
- 361:	89 e5                	mov    %esp,%ebp
- 363:	57                   	push   %edi
- 364:	56                   	push   %esi
- 365:	53                   	push   %ebx
- 366:	83 ec 3c             	sub    $0x3c,%esp
- 369:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 36c:	89 d1                	mov    %edx,%ecx
-{
- 36e:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 371:	85 d2                	test   %edx,%edx
- 373:	0f 89 7f 00 00 00    	jns    3f8 <printint+0x98>
- 379:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 37d:	74 79                	je     3f8 <printint+0x98>
-    neg = 1;
- 37f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 386:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 388:	31 db                	xor    %ebx,%ebx
- 38a:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 38d:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 390:	89 c8                	mov    %ecx,%eax
- 392:	31 d2                	xor    %edx,%edx
- 394:	89 cf                	mov    %ecx,%edi
- 396:	f7 75 c4             	divl   -0x3c(%ebp)
- 399:	0f b6 92 80 07 00 00 	movzbl 0x780(%edx),%edx
- 3a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 3a3:	89 d8                	mov    %ebx,%eax
- 3a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 3a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 3ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 3ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 3b1:	76 dd                	jbe    390 <printint+0x30>
-  if(neg)
- 3b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 3b6:	85 c9                	test   %ecx,%ecx
- 3b8:	74 0c                	je     3c6 <printint+0x66>
-    buf[i++] = '-';
- 3ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 3bf:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 3c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 3c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 3c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 3cd:	eb 07                	jmp    3d6 <printint+0x76>
- 3cf:	90                   	nop
- 3d0:	0f b6 13             	movzbl (%ebx),%edx
- 3d3:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 3d6:	83 ec 04             	sub    $0x4,%esp
- 3d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 3dc:	6a 01                	push   $0x1
- 3de:	56                   	push   %esi
- 3df:	57                   	push   %edi
- 3e0:	e8 ce fe ff ff       	call   2b3 <write>
-  while(--i >= 0)
- 3e5:	83 c4 10             	add    $0x10,%esp
- 3e8:	39 de                	cmp    %ebx,%esi
- 3ea:	75 e4                	jne    3d0 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3ef:	5b                   	pop    %ebx
- 3f0:	5e                   	pop    %esi
- 3f1:	5f                   	pop    %edi
- 3f2:	5d                   	pop    %ebp
- 3f3:	c3                   	ret    
- 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 3f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 3ff:	eb 87                	jmp    388 <printint+0x28>
- 401:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 408:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 40f:	90                   	nop
-
-00000410 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 410:	f3 0f 1e fb          	endbr32 
- 414:	55                   	push   %ebp
- 415:	89 e5                	mov    %esp,%ebp
- 417:	57                   	push   %edi
- 418:	56                   	push   %esi
- 419:	53                   	push   %ebx
- 41a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 41d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 420:	0f b6 1e             	movzbl (%esi),%ebx
- 423:	84 db                	test   %bl,%bl
- 425:	0f 84 b4 00 00 00    	je     4df <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 42b:	8d 45 10             	lea    0x10(%ebp),%eax
- 42e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 431:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 434:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 436:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 439:	eb 33                	jmp    46e <printf+0x5e>
- 43b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 43f:	90                   	nop
- 440:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 443:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 448:	83 f8 25             	cmp    $0x25,%eax
- 44b:	74 17                	je     464 <printf+0x54>
-  write(fd, &c, 1);
- 44d:	83 ec 04             	sub    $0x4,%esp
- 450:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 453:	6a 01                	push   $0x1
- 455:	57                   	push   %edi
- 456:	ff 75 08             	pushl  0x8(%ebp)
- 459:	e8 55 fe ff ff       	call   2b3 <write>
- 45e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 461:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 464:	0f b6 1e             	movzbl (%esi),%ebx
- 467:	83 c6 01             	add    $0x1,%esi
- 46a:	84 db                	test   %bl,%bl
- 46c:	74 71                	je     4df <printf+0xcf>
-    c = fmt[i] & 0xff;
- 46e:	0f be cb             	movsbl %bl,%ecx
- 471:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 474:	85 d2                	test   %edx,%edx
- 476:	74 c8                	je     440 <printf+0x30>
-      }
-    } else if(state == '%'){
- 478:	83 fa 25             	cmp    $0x25,%edx
- 47b:	75 e7                	jne    464 <printf+0x54>
-      if(c == 'd'){
- 47d:	83 f8 64             	cmp    $0x64,%eax
- 480:	0f 84 9a 00 00 00    	je     520 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 486:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 48c:	83 f9 70             	cmp    $0x70,%ecx
- 48f:	74 5f                	je     4f0 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 491:	83 f8 73             	cmp    $0x73,%eax
- 494:	0f 84 d6 00 00 00    	je     570 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 49a:	83 f8 63             	cmp    $0x63,%eax
- 49d:	0f 84 8d 00 00 00    	je     530 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 4a3:	83 f8 25             	cmp    $0x25,%eax
- 4a6:	0f 84 b4 00 00 00    	je     560 <printf+0x150>
-  write(fd, &c, 1);
- 4ac:	83 ec 04             	sub    $0x4,%esp
- 4af:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4b3:	6a 01                	push   $0x1
- 4b5:	57                   	push   %edi
- 4b6:	ff 75 08             	pushl  0x8(%ebp)
- 4b9:	e8 f5 fd ff ff       	call   2b3 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 4be:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 4c1:	83 c4 0c             	add    $0xc,%esp
- 4c4:	6a 01                	push   $0x1
- 4c6:	83 c6 01             	add    $0x1,%esi
- 4c9:	57                   	push   %edi
- 4ca:	ff 75 08             	pushl  0x8(%ebp)
- 4cd:	e8 e1 fd ff ff       	call   2b3 <write>
-  for(i = 0; fmt[i]; i++){
- 4d2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 4d6:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 4d9:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 4db:	84 db                	test   %bl,%bl
- 4dd:	75 8f                	jne    46e <printf+0x5e>
-    }
-  }
-}
- 4df:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4e2:	5b                   	pop    %ebx
- 4e3:	5e                   	pop    %esi
- 4e4:	5f                   	pop    %edi
- 4e5:	5d                   	pop    %ebp
- 4e6:	c3                   	ret    
- 4e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 4ee:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 4f0:	83 ec 0c             	sub    $0xc,%esp
- 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4f8:	6a 00                	push   $0x0
- 4fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 4fd:	8b 45 08             	mov    0x8(%ebp),%eax
- 500:	8b 13                	mov    (%ebx),%edx
- 502:	e8 59 fe ff ff       	call   360 <printint>
-        ap++;
- 507:	89 d8                	mov    %ebx,%eax
- 509:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 50c:	31 d2                	xor    %edx,%edx
-        ap++;
- 50e:	83 c0 04             	add    $0x4,%eax
- 511:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 514:	e9 4b ff ff ff       	jmp    464 <printf+0x54>
- 519:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 520:	83 ec 0c             	sub    $0xc,%esp
- 523:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 528:	6a 01                	push   $0x1
- 52a:	eb ce                	jmp    4fa <printf+0xea>
- 52c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 530:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 533:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 536:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 538:	6a 01                	push   $0x1
-        ap++;
- 53a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 53d:	57                   	push   %edi
- 53e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 541:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 544:	e8 6a fd ff ff       	call   2b3 <write>
-        ap++;
- 549:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 54c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 54f:	31 d2                	xor    %edx,%edx
- 551:	e9 0e ff ff ff       	jmp    464 <printf+0x54>
- 556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 55d:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 560:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 563:	83 ec 04             	sub    $0x4,%esp
- 566:	e9 59 ff ff ff       	jmp    4c4 <printf+0xb4>
- 56b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 56f:	90                   	nop
-        s = (char*)*ap;
- 570:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 573:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 575:	83 c0 04             	add    $0x4,%eax
- 578:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 57b:	85 db                	test   %ebx,%ebx
- 57d:	74 17                	je     596 <printf+0x186>
-        while(*s != 0){
- 57f:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 582:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 584:	84 c0                	test   %al,%al
- 586:	0f 84 d8 fe ff ff    	je     464 <printf+0x54>
- 58c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 58f:	89 de                	mov    %ebx,%esi
- 591:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 594:	eb 1a                	jmp    5b0 <printf+0x1a0>
-          s = "(null)";
- 596:	bb 78 07 00 00       	mov    $0x778,%ebx
-        while(*s != 0){
- 59b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 59e:	b8 28 00 00 00       	mov    $0x28,%eax
- 5a3:	89 de                	mov    %ebx,%esi
- 5a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5af:	90                   	nop
-  write(fd, &c, 1);
- 5b0:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 5b3:	83 c6 01             	add    $0x1,%esi
- 5b6:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 5b9:	6a 01                	push   $0x1
- 5bb:	57                   	push   %edi
- 5bc:	53                   	push   %ebx
- 5bd:	e8 f1 fc ff ff       	call   2b3 <write>
-        while(*s != 0){
- 5c2:	0f b6 06             	movzbl (%esi),%eax
- 5c5:	83 c4 10             	add    $0x10,%esp
- 5c8:	84 c0                	test   %al,%al
- 5ca:	75 e4                	jne    5b0 <printf+0x1a0>
- 5cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 5cf:	31 d2                	xor    %edx,%edx
- 5d1:	e9 8e fe ff ff       	jmp    464 <printf+0x54>
- 5d6:	66 90                	xchg   %ax,%ax
- 5d8:	66 90                	xchg   %ax,%ax
- 5da:	66 90                	xchg   %ax,%ax
- 5dc:	66 90                	xchg   %ax,%ax
- 5de:	66 90                	xchg   %ax,%ax
-
-000005e0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 5e0:	f3 0f 1e fb          	endbr32 
- 5e4:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5e5:	a1 28 0a 00 00       	mov    0xa28,%eax
-{
- 5ea:	89 e5                	mov    %esp,%ebp
- 5ec:	57                   	push   %edi
- 5ed:	56                   	push   %esi
- 5ee:	53                   	push   %ebx
- 5ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5f2:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 5f4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5f7:	39 c8                	cmp    %ecx,%eax
- 5f9:	73 15                	jae    610 <free+0x30>
- 5fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5ff:	90                   	nop
- 600:	39 d1                	cmp    %edx,%ecx
- 602:	72 14                	jb     618 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 604:	39 d0                	cmp    %edx,%eax
- 606:	73 10                	jae    618 <free+0x38>
-{
- 608:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 60a:	8b 10                	mov    (%eax),%edx
- 60c:	39 c8                	cmp    %ecx,%eax
- 60e:	72 f0                	jb     600 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 610:	39 d0                	cmp    %edx,%eax
- 612:	72 f4                	jb     608 <free+0x28>
- 614:	39 d1                	cmp    %edx,%ecx
- 616:	73 f0                	jae    608 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 61e:	39 fa                	cmp    %edi,%edx
- 620:	74 1e                	je     640 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 622:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 625:	8b 50 04             	mov    0x4(%eax),%edx
- 628:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 62b:	39 f1                	cmp    %esi,%ecx
- 62d:	74 28                	je     657 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 62f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 631:	5b                   	pop    %ebx
-  freep = p;
- 632:	a3 28 0a 00 00       	mov    %eax,0xa28
-}
- 637:	5e                   	pop    %esi
- 638:	5f                   	pop    %edi
- 639:	5d                   	pop    %ebp
- 63a:	c3                   	ret    
- 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 63f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 640:	03 72 04             	add    0x4(%edx),%esi
- 643:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 646:	8b 10                	mov    (%eax),%edx
- 648:	8b 12                	mov    (%edx),%edx
- 64a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 64d:	8b 50 04             	mov    0x4(%eax),%edx
- 650:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 653:	39 f1                	cmp    %esi,%ecx
- 655:	75 d8                	jne    62f <free+0x4f>
-    p->s.size += bp->s.size;
- 657:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 65a:	a3 28 0a 00 00       	mov    %eax,0xa28
-    p->s.size += bp->s.size;
- 65f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 662:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 665:	89 10                	mov    %edx,(%eax)
-}
- 667:	5b                   	pop    %ebx
- 668:	5e                   	pop    %esi
- 669:	5f                   	pop    %edi
- 66a:	5d                   	pop    %ebp
- 66b:	c3                   	ret    
- 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000670 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 670:	f3 0f 1e fb          	endbr32 
- 674:	55                   	push   %ebp
- 675:	89 e5                	mov    %esp,%ebp
- 677:	57                   	push   %edi
- 678:	56                   	push   %esi
- 679:	53                   	push   %ebx
- 67a:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 67d:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 680:	8b 3d 28 0a 00 00    	mov    0xa28,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 686:	8d 70 07             	lea    0x7(%eax),%esi
- 689:	c1 ee 03             	shr    $0x3,%esi
- 68c:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 68f:	85 ff                	test   %edi,%edi
- 691:	0f 84 a9 00 00 00    	je     740 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 697:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 699:	8b 48 04             	mov    0x4(%eax),%ecx
- 69c:	39 f1                	cmp    %esi,%ecx
- 69e:	73 6d                	jae    70d <malloc+0x9d>
- 6a0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 6a6:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6ab:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 6ae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 6b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 6b8:	eb 17                	jmp    6d1 <malloc+0x61>
- 6ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c0:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 6c2:	8b 4a 04             	mov    0x4(%edx),%ecx
- 6c5:	39 f1                	cmp    %esi,%ecx
- 6c7:	73 4f                	jae    718 <malloc+0xa8>
- 6c9:	8b 3d 28 0a 00 00    	mov    0xa28,%edi
- 6cf:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 6d1:	39 c7                	cmp    %eax,%edi
- 6d3:	75 eb                	jne    6c0 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 6d5:	83 ec 0c             	sub    $0xc,%esp
- 6d8:	ff 75 e4             	pushl  -0x1c(%ebp)
- 6db:	e8 3b fc ff ff       	call   31b <sbrk>
-  if(p == (char*)-1)
- 6e0:	83 c4 10             	add    $0x10,%esp
- 6e3:	83 f8 ff             	cmp    $0xffffffff,%eax
- 6e6:	74 1b                	je     703 <malloc+0x93>
-  hp->s.size = nu;
- 6e8:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 6eb:	83 ec 0c             	sub    $0xc,%esp
- 6ee:	83 c0 08             	add    $0x8,%eax
- 6f1:	50                   	push   %eax
- 6f2:	e8 e9 fe ff ff       	call   5e0 <free>
-  return freep;
- 6f7:	a1 28 0a 00 00       	mov    0xa28,%eax
-      if((p = morecore(nunits)) == 0)
- 6fc:	83 c4 10             	add    $0x10,%esp
- 6ff:	85 c0                	test   %eax,%eax
- 701:	75 bd                	jne    6c0 <malloc+0x50>
-        return 0;
-  }
-}
- 703:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 706:	31 c0                	xor    %eax,%eax
-}
- 708:	5b                   	pop    %ebx
- 709:	5e                   	pop    %esi
- 70a:	5f                   	pop    %edi
- 70b:	5d                   	pop    %ebp
- 70c:	c3                   	ret    
-    if(p->s.size >= nunits){
- 70d:	89 c2                	mov    %eax,%edx
- 70f:	89 f8                	mov    %edi,%eax
- 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- 718:	39 ce                	cmp    %ecx,%esi
- 71a:	74 54                	je     770 <malloc+0x100>
-        p->s.size -= nunits;
- 71c:	29 f1                	sub    %esi,%ecx
- 71e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- 721:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- 724:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- 727:	a3 28 0a 00 00       	mov    %eax,0xa28
-}
- 72c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 72f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- 732:	5b                   	pop    %ebx
- 733:	5e                   	pop    %esi
- 734:	5f                   	pop    %edi
- 735:	5d                   	pop    %ebp
- 736:	c3                   	ret    
- 737:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 73e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- 740:	c7 05 28 0a 00 00 2c 	movl   $0xa2c,0xa28
- 747:	0a 00 00 
-    base.s.size = 0;
- 74a:	bf 2c 0a 00 00       	mov    $0xa2c,%edi
-    base.s.ptr = freep = prevp = &base;
- 74f:	c7 05 2c 0a 00 00 2c 	movl   $0xa2c,0xa2c
- 756:	0a 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 759:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- 75b:	c7 05 30 0a 00 00 00 	movl   $0x0,0xa30
- 762:	00 00 00 
-    if(p->s.size >= nunits){
- 765:	e9 36 ff ff ff       	jmp    6a0 <malloc+0x30>
- 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- 770:	8b 0a                	mov    (%edx),%ecx
- 772:	89 08                	mov    %ecx,(%eax)
- 774:	eb b1                	jmp    727 <malloc+0xb7>
diff -ruN xv6-public/zombie.c xv6-public-mynew/zombie.c
--- xv6-public/zombie.c	2022-08-12 16:28:04.265997142 +0530
+++ xv6-public-mynew/zombie.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,14 +0,0 @@
-// Create a zombie process that
-// must be reparented at exit.
-
-#include "types.h"
-#include "stat.h"
-#include "user.h"
-
-int
-main(void)
-{
-  if(fork() > 0)
-    sleep(5);  // Let child exit before parent.
-  exit();
-}
diff -ruN xv6-public/zombie.d xv6-public-mynew/zombie.d
--- xv6-public/zombie.d	2022-09-05 09:51:06.502999174 +0530
+++ xv6-public-mynew/zombie.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/zombie.o and xv6-public-mynew/zombie.o differ
diff -ruN xv6-public/zombie.sym xv6-public-mynew/zombie.sym
--- xv6-public/zombie.sym	2022-09-05 09:51:06.530999175 +0530
+++ xv6-public-mynew/zombie.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,61 +0,0 @@
-00000000 .text
-00000778 .rodata
-00000794 .eh_frame
-00000a28 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 zombie.c
-00000000 ulib.c
-00000000 printf.c
-00000360 printint
-00000780 digits.1097
-00000000 umalloc.c
-00000a28 freep
-00000a2c base
-00000030 strcpy
-00000410 printf
-0000034b thread_exit
-00000260 memmove
-000002db mknod
-00000150 gets
-00000313 getpid
-00000670 malloc
-00000323 sleep
-000002a3 pipe
-000002b3 write
-000002eb fstat
-000002c3 kill
-00000303 chdir
-000002cb exec
-0000029b wait
-000002ab read
-000002e3 unlink
-0000028b fork
-0000031b sbrk
-0000032b uptime
-00000a28 __bss_start
-000000f0 memset
-00000000 main
-00000060 strcmp
-0000030b dup
-000001d0 stat
-00000a28 _edata
-00000a34 _end
-000002f3 link
-00000293 exit
-00000220 atoi
-00000333 draw
-000000b0 strlen
-000002d3 open
-00000110 strchr
-0000033b thread_create
-000002fb mkdir
-000002bb close
-00000343 thread_join
-000005e0 free
